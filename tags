!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
*	external/asmjit/db/exp.js	/^  "*" : { prec: 5, rtl : 0, emit: "@1 * @2"  },$/;"	p	class:const
-	external/asmjit/db/exp.js	/^  "-": {prec: 3, rtl : 1, emit: "-@1" },$/;"	p	class:const
0	external/asmjit/tools/tablegen-x86.js	/^      "0"    : "None",$/;"	p	class:const
128	external/asmjit/tools/tablegen-x86.js	/^      "128"  : "None",$/;"	p	class:const
A	src/guest/rv32_insn.h	/^struct A : public Base {$/;"	s	namespace:dbt::rv32::insn
A64TestCase	external/asmjit/test/asmjit_test_compiler_a64.cpp	/^  A64TestCase(const char* name = nullptr)$/;"	f	class:A64TestCase
A64TestCase	external/asmjit/test/asmjit_test_compiler_a64.cpp	/^class A64TestCase : public TestCase {$/;"	c	file:
A64Test_Adr	external/asmjit/test/asmjit_test_compiler_a64.cpp	/^  A64Test_Adr()$/;"	f	class:A64Test_Adr
A64Test_Adr	external/asmjit/test/asmjit_test_compiler_a64.cpp	/^class A64Test_Adr : public A64TestCase {$/;"	c	file:
A64Test_Branch1	external/asmjit/test/asmjit_test_compiler_a64.cpp	/^  A64Test_Branch1()$/;"	f	class:A64Test_Branch1
A64Test_Branch1	external/asmjit/test/asmjit_test_compiler_a64.cpp	/^class A64Test_Branch1 : public A64TestCase {$/;"	c	file:
A64Test_GpArgs	external/asmjit/test/asmjit_test_compiler_a64.cpp	/^  A64Test_GpArgs(uint32_t argCount, bool preserveFP)$/;"	f	class:A64Test_GpArgs
A64Test_GpArgs	external/asmjit/test/asmjit_test_compiler_a64.cpp	/^class A64Test_GpArgs : public A64TestCase {$/;"	c	file:
A64Test_Invoke1	external/asmjit/test/asmjit_test_compiler_a64.cpp	/^  A64Test_Invoke1()$/;"	f	class:A64Test_Invoke1
A64Test_Invoke1	external/asmjit/test/asmjit_test_compiler_a64.cpp	/^class A64Test_Invoke1 : public A64TestCase {$/;"	c	file:
A64Test_Invoke2	external/asmjit/test/asmjit_test_compiler_a64.cpp	/^  A64Test_Invoke2()$/;"	f	class:A64Test_Invoke2
A64Test_Invoke2	external/asmjit/test/asmjit_test_compiler_a64.cpp	/^class A64Test_Invoke2 : public A64TestCase {$/;"	c	file:
A64Test_Invoke3	external/asmjit/test/asmjit_test_compiler_a64.cpp	/^  A64Test_Invoke3()$/;"	f	class:A64Test_Invoke3
A64Test_Invoke3	external/asmjit/test/asmjit_test_compiler_a64.cpp	/^class A64Test_Invoke3 : public A64TestCase {$/;"	c	file:
A64Test_JumpTable	external/asmjit/test/asmjit_test_compiler_a64.cpp	/^  A64Test_JumpTable(bool annotated)$/;"	f	class:A64Test_JumpTable
A64Test_JumpTable	external/asmjit/test/asmjit_test_compiler_a64.cpp	/^class A64Test_JumpTable : public A64TestCase {$/;"	c	file:
A64Test_ManyRegs	external/asmjit/test/asmjit_test_compiler_a64.cpp	/^  A64Test_ManyRegs(uint32_t n)$/;"	f	class:A64Test_ManyRegs
A64Test_ManyRegs	external/asmjit/test/asmjit_test_compiler_a64.cpp	/^class A64Test_ManyRegs : public A64TestCase {$/;"	c	file:
A64Test_Simd1	external/asmjit/test/asmjit_test_compiler_a64.cpp	/^  A64Test_Simd1()$/;"	f	class:A64Test_Simd1
A64Test_Simd1	external/asmjit/test/asmjit_test_compiler_a64.cpp	/^class A64Test_Simd1 : public A64TestCase {$/;"	c	file:
ALIAS	src/codegen/arch_traits.cpp	109;"	d	file:
ALIAS	src/codegen/arch_traits.cpp	87;"	d	file:
ALWAYS_INLINE	src/util/common.h	34;"	d
ANY	src/codegen/arch_traits.h	/^    ANY = 1 << 0,$/;"	m	class:dbt::qcg::RACtImm
ARCH_OP_CT_LIST	src/codegen/arch_traits.cpp	112;"	d	file:
ARM	external/asmjit/src/asmjit/core/cpuinfo.h	/^  struct ARM : public Data {$/;"	s	class:CpuFeatures
ARMRAPass	external/asmjit/src/asmjit/arm/a64rapass_p.h	/^class ARMRAPass : public BaseRAPass {$/;"	c
ASMJITUTILS_H_INCLUDED	external/asmjit/test/asmjitutils.h	7;"	d
ASMJIT_A64_H_INCLUDED	external/asmjit/src/asmjit/a64.h	7;"	d
ASMJIT_AARCH64_DEFINE_CPUID_READ_FN	external/asmjit/src/asmjit/core/cpuinfo.cpp	1365;"	d	file:
ASMJIT_AARCH64_DEFINE_CPUID_READ_FN	external/asmjit/src/asmjit/core/cpuinfo.cpp	1381;"	d	file:
ASMJIT_ABI_NAMESPACE	external/asmjit/src/asmjit/core/api-config.h	30;"	d
ASMJIT_ALIGN_TYPE	external/asmjit/src/asmjit/core/api-config.h	368;"	d
ASMJIT_ALIGN_TYPE	external/asmjit/src/asmjit/core/support.h	/^  template<> struct AliasedUInt<uint16_t, 1> { typedef uint16_t ASMJIT_MAY_ALIAS ASMJIT_ALIGN_TYPE(T, 1); };$/;"	t	struct:Support::Internal::AliasedUInt
ASMJIT_ALIGN_TYPE	external/asmjit/src/asmjit/core/support.h	/^  template<> struct AliasedUInt<uint32_t, 1> { typedef uint32_t ASMJIT_MAY_ALIAS ASMJIT_ALIGN_TYPE(T, 1); };$/;"	t	struct:Support::Internal::AliasedUInt
ASMJIT_ALIGN_TYPE	external/asmjit/src/asmjit/core/support.h	/^  template<> struct AliasedUInt<uint32_t, 2> { typedef uint32_t ASMJIT_MAY_ALIAS ASMJIT_ALIGN_TYPE(T, 2); };$/;"	t	struct:Support::Internal::AliasedUInt
ASMJIT_ALIGN_TYPE	external/asmjit/src/asmjit/core/support.h	/^  template<> struct AliasedUInt<uint64_t, 1> { typedef uint64_t ASMJIT_MAY_ALIAS ASMJIT_ALIGN_TYPE(T, 1); };$/;"	t	struct:Support::Internal::AliasedUInt
ASMJIT_ALIGN_TYPE	external/asmjit/src/asmjit/core/support.h	/^  template<> struct AliasedUInt<uint64_t, 2> { typedef uint64_t ASMJIT_MAY_ALIAS ASMJIT_ALIGN_TYPE(T, 2); };$/;"	t	struct:Support::Internal::AliasedUInt
ASMJIT_ALIGN_TYPE	external/asmjit/src/asmjit/core/support.h	/^  template<> struct AliasedUInt<uint64_t, 4> { typedef uint64_t ASMJIT_MAY_ALIAS ASMJIT_ALIGN_TYPE(T, 4); };$/;"	t	struct:Support::Internal::AliasedUInt
ASMJIT_ANONYMOUS_MEMORY_USE_FD	external/asmjit/src/asmjit/core/virtmem.cpp	62;"	d	file:
ASMJIT_ANONYMOUS_MEMORY_USE_FD	external/asmjit/src/asmjit/core/virtmem.cpp	80;"	d	file:
ASMJIT_ANONYMOUS_MEMORY_USE_REMAPDUP	external/asmjit/src/asmjit/core/virtmem.cpp	81;"	d	file:
ASMJIT_API	external/asmjit/src/asmjit/core/api-config.h	276;"	d
ASMJIT_API	external/asmjit/src/asmjit/core/api-config.h	292;"	d
ASMJIT_ARCH_ARM	external/asmjit/src/asmjit/core/api-config.h	176;"	d
ASMJIT_ARCH_BE	external/asmjit/src/asmjit/core/api-config.h	205;"	d
ASMJIT_ARCH_BITS	external/asmjit/src/asmjit/core/api-config.h	191;"	d
ASMJIT_ARCH_BITS	external/asmjit/src/asmjit/core/api-config.h	193;"	d
ASMJIT_ARCH_BITS	external/asmjit/src/asmjit/core/api-config.h	195;"	d
ASMJIT_ARCH_LE	external/asmjit/src/asmjit/core/api-config.h	204;"	d
ASMJIT_ARCH_MIPS	external/asmjit/src/asmjit/core/api-config.h	184;"	d
ASMJIT_ARCH_X86	external/asmjit/src/asmjit/core/api-config.h	168;"	d
ASMJIT_ARITH_OVERFLOW_SPECIALIZE	external/asmjit/src/asmjit/core/support.h	601;"	d
ASMJIT_ARITH_OVERFLOW_SPECIALIZE	external/asmjit/src/asmjit/core/support.h	620;"	d
ASMJIT_ARITH_OVERFLOW_SPECIALIZE	external/asmjit/src/asmjit/core/support.h	626;"	d
ASMJIT_ARITH_OVERFLOW_SPECIALIZE	external/asmjit/src/asmjit/core/support.h	639;"	d
ASMJIT_ARM_A64ARCHTRAITS_P_H_INCLUDED	external/asmjit/src/asmjit/arm/a64archtraits_p.h	7;"	d
ASMJIT_ARM_A64ASSEMBLER_H_INCLUDED	external/asmjit/src/asmjit/arm/a64assembler.h	7;"	d
ASMJIT_ARM_A64BUILDER_H_INCLUDED	external/asmjit/src/asmjit/arm/a64builder.h	7;"	d
ASMJIT_ARM_A64COMPILER_H_INCLUDED	external/asmjit/src/asmjit/arm/a64compiler.h	7;"	d
ASMJIT_ARM_A64EMITHELPER_P_H_INCLUDED	external/asmjit/src/asmjit/arm/a64emithelper_p.h	7;"	d
ASMJIT_ARM_A64EMITTER_H_INCLUDED	external/asmjit/src/asmjit/arm/a64emitter.h	7;"	d
ASMJIT_ARM_A64FORMATTER_P_H_INCLUDED	external/asmjit/src/asmjit/arm/a64formatter_p.h	7;"	d
ASMJIT_ARM_A64FUNC_P_H_INCLUDED	external/asmjit/src/asmjit/arm/a64func_p.h	7;"	d
ASMJIT_ARM_A64GLOBALS_H_INCLUDED	external/asmjit/src/asmjit/arm/a64globals.h	7;"	d
ASMJIT_ARM_A64INSTAPI_P_H_INCLUDED	external/asmjit/src/asmjit/arm/a64instapi_p.h	7;"	d
ASMJIT_ARM_A64INSTDB_H_INCLUDED	external/asmjit/src/asmjit/arm/a64instdb.h	7;"	d
ASMJIT_ARM_A64INSTDB_H_P_INCLUDED	external/asmjit/src/asmjit/arm/a64instdb_p.h	7;"	d
ASMJIT_ARM_A64OPERAND_H_INCLUDED	external/asmjit/src/asmjit/arm/a64operand.h	7;"	d
ASMJIT_ARM_A64RAPASS_P_H_INCLUDED	external/asmjit/src/asmjit/arm/a64rapass_p.h	7;"	d
ASMJIT_ARM_ARMFORMATTER_P_H_INCLUDED	external/asmjit/src/asmjit/arm/armformatter_p.h	7;"	d
ASMJIT_ARM_ARMGLOBALS_H_INCLUDED	external/asmjit/src/asmjit/arm/armglobals.h	7;"	d
ASMJIT_ARM_ARMOPERAND_H_INCLUDED	external/asmjit/src/asmjit/arm/armoperand.h	7;"	d
ASMJIT_ARM_ARMUTILS_H_INCLUDED	external/asmjit/src/asmjit/arm/armutils.h	7;"	d
ASMJIT_ARM_DETECT_VIA_CPUID	external/asmjit/src/asmjit/core/cpuinfo.cpp	42;"	d	file:
ASMJIT_ARM_DETECT_VIA_HWCAPS	external/asmjit/src/asmjit/core/cpuinfo.cpp	35;"	d	file:
ASMJIT_ARM_FEATURE	external/asmjit/src/asmjit/core/cpuinfo.h	635;"	d
ASMJIT_ARM_FEATURE	external/asmjit/src/asmjit/core/cpuinfo.h	768;"	d
ASMJIT_ARM_H_INCLUDED	external/asmjit/src/asmjit/arm.h	7;"	d
ASMJIT_ARRAY_SIZE	external/asmjit/src/asmjit/core/api-config.h	477;"	d
ASMJIT_ASMJIT_H_INCLUDED	external/asmjit/src/asmjit/asmjit.h	25;"	d
ASMJIT_ASSERT	external/asmjit/src/asmjit/core/globals.h	376;"	d
ASMJIT_ASSUME	external/asmjit/src/asmjit/core/api-config.h	422;"	d
ASMJIT_ATTRIBUTE_NO_SANITIZE_UNDEF	external/asmjit/src/asmjit/core/api-config.h	480;"	d
ASMJIT_BASE_CLASS	external/asmjit/src/asmjit/core/globals.h	28;"	d
ASMJIT_BEGIN_NAMESPACE	external/asmjit/src/asmjit/core/api-config.h	491;"	d
ASMJIT_BEGIN_NAMESPACE	external/asmjit/src/asmjit/core/api-config.h	530;"	d
ASMJIT_BEGIN_SUB_NAMESPACE	external/asmjit/src/asmjit/core/api-config.h	534;"	d
ASMJIT_BUILD_DEBUG	external/asmjit/src/asmjit/core/api-config.h	118;"	d
ASMJIT_BUILD_DEBUG	external/asmjit/src/asmjit/core/api-config.h	158;"	d
ASMJIT_BUILD_DEBUG	external/asmjit/src/asmjit/core/api-config.h	75;"	d
ASMJIT_BUILD_EMBNED	external/asmjit/src/asmjit/core/api-config.h	116;"	d
ASMJIT_BUILD_RELEASE	external/asmjit/src/asmjit/core/api-config.h	119;"	d
ASMJIT_BUILD_RELEASE	external/asmjit/src/asmjit/core/api-config.h	80;"	d
ASMJIT_BUILD_STATIC	external/asmjit/src/asmjit/core/api-config.h	117;"	d
ASMJIT_CDECL	external/asmjit/src/asmjit/core/api-config.h	342;"	d
ASMJIT_CORE_API_BUILD_P_H_INCLUDED	external/asmjit/src/asmjit/core/api-build_p.h	7;"	d
ASMJIT_CORE_API_CONFIG_H_INCLUDED	external/asmjit/src/asmjit/core/api-config.h	7;"	d
ASMJIT_CORE_ARCHCOMMONS_H_INCLUDED	external/asmjit/src/asmjit/core/archcommons.h	7;"	d
ASMJIT_CORE_ARCHTRAITS_H_INCLUDED	external/asmjit/src/asmjit/core/archtraits.h	7;"	d
ASMJIT_CORE_ASSEMBLER_H_INCLUDED	external/asmjit/src/asmjit/core/assembler.h	7;"	d
ASMJIT_CORE_BUILDER_H_INCLUDED	external/asmjit/src/asmjit/core/builder.h	7;"	d
ASMJIT_CORE_BUILDER_P_H_INCLUDED	external/asmjit/src/asmjit/core/builder_p.h	7;"	d
ASMJIT_CORE_CODEBUFFERWRITER_P_H_INCLUDED	external/asmjit/src/asmjit/core/codewriter_p.h	7;"	d
ASMJIT_CORE_CODEBUFFER_H_INCLUDED	external/asmjit/src/asmjit/core/codebuffer.h	7;"	d
ASMJIT_CORE_CODEHOLDER_H_INCLUDED	external/asmjit/src/asmjit/core/codeholder.h	7;"	d
ASMJIT_CORE_COMPILERDEFS_H_INCLUDED	external/asmjit/src/asmjit/core/compilerdefs.h	7;"	d
ASMJIT_CORE_COMPILER_H_INCLUDED	external/asmjit/src/asmjit/core/compiler.h	7;"	d
ASMJIT_CORE_CONSTPOOL_H_INCLUDED	external/asmjit/src/asmjit/core/constpool.h	7;"	d
ASMJIT_CORE_CPUINFO_H_INCLUDED	external/asmjit/src/asmjit/core/cpuinfo.h	7;"	d
ASMJIT_CORE_EMITHELPER_P_H_INCLUDED	external/asmjit/src/asmjit/core/emithelper_p.h	7;"	d
ASMJIT_CORE_EMITTERUTILS_P_H_INCLUDED	external/asmjit/src/asmjit/core/emitterutils_p.h	7;"	d
ASMJIT_CORE_EMITTER_H_INCLUDED	external/asmjit/src/asmjit/core/emitter.h	7;"	d
ASMJIT_CORE_ENVIRONMENT_H_INCLUDED	external/asmjit/src/asmjit/core/environment.h	7;"	d
ASMJIT_CORE_ERRORHANDLER_H_INCLUDED	external/asmjit/src/asmjit/core/errorhandler.h	7;"	d
ASMJIT_CORE_FORMATTER_H_INCLUDED	external/asmjit/src/asmjit/core/formatter.h	7;"	d
ASMJIT_CORE_FORMATTER_P_H_INCLUDED	external/asmjit/src/asmjit/core/formatter_p.h	7;"	d
ASMJIT_CORE_FUNCARGSCONTEXT_P_H_INCLUDED	external/asmjit/src/asmjit/core/funcargscontext_p.h	7;"	d
ASMJIT_CORE_FUNC_H_INCLUDED	external/asmjit/src/asmjit/core/func.h	7;"	d
ASMJIT_CORE_GLOBALS_H_INCLUDED	external/asmjit/src/asmjit/core/globals.h	7;"	d
ASMJIT_CORE_H_INCLUDED	external/asmjit/src/asmjit/core.h	7;"	d
ASMJIT_CORE_INST_H_INCLUDED	external/asmjit/src/asmjit/core/inst.h	7;"	d
ASMJIT_CORE_JITALLOCATOR_H_INCLUDED	external/asmjit/src/asmjit/core/jitallocator.h	7;"	d
ASMJIT_CORE_JITRUNTIME_H_INCLUDED	external/asmjit/src/asmjit/core/jitruntime.h	7;"	d
ASMJIT_CORE_LOGGING_H_INCLUDED	external/asmjit/src/asmjit/core/logger.h	7;"	d
ASMJIT_CORE_MISC_P_H_INCLUDED	external/asmjit/src/asmjit/core/misc_p.h	7;"	d
ASMJIT_CORE_OPERAND_H_INCLUDED	external/asmjit/src/asmjit/core/operand.h	7;"	d
ASMJIT_CORE_OSUTILS_H_INCLUDED	external/asmjit/src/asmjit/core/osutils.h	7;"	d
ASMJIT_CORE_OSUTILS_P_H_INCLUDED	external/asmjit/src/asmjit/core/osutils_p.h	7;"	d
ASMJIT_CORE_RAASSIGNMENT_P_H_INCLUDED	external/asmjit/src/asmjit/core/raassignment_p.h	7;"	d
ASMJIT_CORE_RABUILDERS_P_H_INCLUDED	external/asmjit/src/asmjit/core/rabuilders_p.h	7;"	d
ASMJIT_CORE_RADEFS_P_H_INCLUDED	external/asmjit/src/asmjit/core/radefs_p.h	7;"	d
ASMJIT_CORE_RALOCAL_P_H_INCLUDED	external/asmjit/src/asmjit/core/ralocal_p.h	7;"	d
ASMJIT_CORE_RAPASS_P_H_INCLUDED	external/asmjit/src/asmjit/core/rapass_p.h	7;"	d
ASMJIT_CORE_RASTACK_P_H_INCLUDED	external/asmjit/src/asmjit/core/rastack_p.h	7;"	d
ASMJIT_CORE_STRING_H_INCLUDED	external/asmjit/src/asmjit/core/string.h	7;"	d
ASMJIT_CORE_SUPPORT_H_INCLUDED	external/asmjit/src/asmjit/core/support.h	7;"	d
ASMJIT_CORE_SUPPORT_P_H_INCLUDED	external/asmjit/src/asmjit/core/support_p.h	7;"	d
ASMJIT_CORE_TARGET_H_INCLUDED	external/asmjit/src/asmjit/core/target.h	7;"	d
ASMJIT_CORE_TYPE_H_INCLUDED	external/asmjit/src/asmjit/core/type.h	7;"	d
ASMJIT_CORE_VIRTMEM_H_INCLUDED	external/asmjit/src/asmjit/core/virtmem.h	7;"	d
ASMJIT_CORE_ZONEHASH_H_INCLUDED	external/asmjit/src/asmjit/core/zonehash.h	7;"	d
ASMJIT_CORE_ZONELIST_H_INCLUDED	external/asmjit/src/asmjit/core/zonelist.h	7;"	d
ASMJIT_CORE_ZONESTACK_H_INCLUDED	external/asmjit/src/asmjit/core/zonestack.h	7;"	d
ASMJIT_CORE_ZONESTRING_H_INCLUDED	external/asmjit/src/asmjit/core/zonestring.h	7;"	d
ASMJIT_CORE_ZONETREE_H_INCLUDED	external/asmjit/src/asmjit/core/zonetree.h	7;"	d
ASMJIT_CORE_ZONEVECTOR_H_INCLUDED	external/asmjit/src/asmjit/core/zonevector.h	7;"	d
ASMJIT_CORE_ZONE_H_INCLUDED	external/asmjit/src/asmjit/core/zone.h	7;"	d
ASMJIT_CXX_GNU	external/asmjit/src/asmjit/core/api-config.h	225;"	d
ASMJIT_CXX_GNU	external/asmjit/src/asmjit/core/api-config.h	619;"	d
ASMJIT_CXX_HAS_ATTRIBUTE	external/asmjit/src/asmjit/core/api-config.h	260;"	d
ASMJIT_CXX_MAKE_VER	external/asmjit/src/asmjit/core/api-config.h	226;"	d
ASMJIT_CXX_MAKE_VER	external/asmjit/src/asmjit/core/api-config.h	620;"	d
ASMJIT_DEFINE_ABSTRACT_REG	external/asmjit/src/asmjit/core/operand.h	1123;"	d
ASMJIT_DEFINE_ENUM_COMPARE	external/asmjit/src/asmjit/core/api-config.h	599;"	d
ASMJIT_DEFINE_ENUM_FLAGS	external/asmjit/src/asmjit/core/api-config.h	558;"	d
ASMJIT_DEFINE_FINAL_REG	external/asmjit/src/asmjit/core/operand.h	1157;"	d
ASMJIT_DEFINE_REG_TRAITS	external/asmjit/src/asmjit/core/operand.h	1101;"	d
ASMJIT_DEFINE_TYPE_ID	external/asmjit/src/asmjit/core/type.h	389;"	d
ASMJIT_DEPRECATED	external/asmjit/src/asmjit/core/api-config.h	461;"	d
ASMJIT_DEPRECATED_STRUCT	external/asmjit/src/asmjit/core/api-config.h	463;"	d
ASMJIT_DIR	Makefile	/^ASMJIT_DIR = external\/asmjit\/src$/;"	m
ASMJIT_EMBED	external/asmjit/src/asmjit/core/api-config.h	67;"	d
ASMJIT_END_NAMESPACE	external/asmjit/src/asmjit/core/api-config.h	492;"	d
ASMJIT_END_NAMESPACE	external/asmjit/src/asmjit/core/api-config.h	531;"	d
ASMJIT_END_SUB_NAMESPACE	external/asmjit/src/asmjit/core/api-config.h	538;"	d
ASMJIT_EXPORTS	external/asmjit/src/asmjit/core/api-build_p.h	9;"	d
ASMJIT_FALLTHROUGH	external/asmjit/src/asmjit/core/api-config.h	450;"	d
ASMJIT_FASTCALL	external/asmjit/src/asmjit/core/api-config.h	344;"	d
ASMJIT_FAVOR_SIZE	external/asmjit/src/asmjit/core/api-build_p.h	35;"	d
ASMJIT_FAVOR_SIZE	external/asmjit/src/asmjit/core/api-build_p.h	38;"	d
ASMJIT_FAVOR_SIZE	external/asmjit/src/asmjit/core/api-build_p.h	41;"	d
ASMJIT_FAVOR_SPEED	external/asmjit/src/asmjit/core/api-build_p.h	36;"	d
ASMJIT_FAVOR_SPEED	external/asmjit/src/asmjit/core/api-build_p.h	39;"	d
ASMJIT_FAVOR_SPEED	external/asmjit/src/asmjit/core/api-build_p.h	42;"	d
ASMJIT_FORCE_INLINE	external/asmjit/src/asmjit/core/api-config.h	313;"	d
ASMJIT_HAS_PTHREAD_JIT_WRITE_PROTECT_NP	external/asmjit/src/asmjit/core/virtmem.cpp	76;"	d	file:
ASMJIT_HAS_SHM_OPEN	external/asmjit/src/asmjit/core/virtmem.cpp	72;"	d	file:
ASMJIT_INLINE_NODEBUG	external/asmjit/src/asmjit/core/api-config.h	322;"	d
ASMJIT_INST_0x	external/asmjit/src/asmjit/arm/a64emitter.h	1214;"	d
ASMJIT_INST_0x	external/asmjit/src/asmjit/arm/a64emitter.h	24;"	d
ASMJIT_INST_0x	external/asmjit/src/asmjit/x86/x86emitter.h	16;"	d
ASMJIT_INST_0x	external/asmjit/src/asmjit/x86/x86emitter.h	4485;"	d
ASMJIT_INST_1c	external/asmjit/src/asmjit/x86/x86emitter.h	22;"	d
ASMJIT_INST_1c	external/asmjit/src/asmjit/x86/x86emitter.h	4487;"	d
ASMJIT_INST_1cc	external/asmjit/src/asmjit/arm/a64emitter.h	1221;"	d
ASMJIT_INST_1cc	external/asmjit/src/asmjit/arm/a64emitter.h	45;"	d
ASMJIT_INST_1x	external/asmjit/src/asmjit/arm/a64emitter.h	1215;"	d
ASMJIT_INST_1x	external/asmjit/src/asmjit/arm/a64emitter.h	27;"	d
ASMJIT_INST_1x	external/asmjit/src/asmjit/x86/x86emitter.h	19;"	d
ASMJIT_INST_1x	external/asmjit/src/asmjit/x86/x86emitter.h	4486;"	d
ASMJIT_INST_2c	external/asmjit/src/asmjit/x86/x86emitter.h	4489;"	d
ASMJIT_INST_2c	external/asmjit/src/asmjit/x86/x86emitter.h	58;"	d
ASMJIT_INST_2x	external/asmjit/src/asmjit/arm/a64emitter.h	1216;"	d
ASMJIT_INST_2x	external/asmjit/src/asmjit/arm/a64emitter.h	30;"	d
ASMJIT_INST_2x	external/asmjit/src/asmjit/x86/x86emitter.h	4488;"	d
ASMJIT_INST_2x	external/asmjit/src/asmjit/x86/x86emitter.h	55;"	d
ASMJIT_INST_3x	external/asmjit/src/asmjit/arm/a64emitter.h	1217;"	d
ASMJIT_INST_3x	external/asmjit/src/asmjit/arm/a64emitter.h	33;"	d
ASMJIT_INST_3x	external/asmjit/src/asmjit/x86/x86emitter.h	4490;"	d
ASMJIT_INST_3x	external/asmjit/src/asmjit/x86/x86emitter.h	91;"	d
ASMJIT_INST_4x	external/asmjit/src/asmjit/arm/a64emitter.h	1218;"	d
ASMJIT_INST_4x	external/asmjit/src/asmjit/arm/a64emitter.h	36;"	d
ASMJIT_INST_4x	external/asmjit/src/asmjit/x86/x86emitter.h	4491;"	d
ASMJIT_INST_4x	external/asmjit/src/asmjit/x86/x86emitter.h	94;"	d
ASMJIT_INST_5x	external/asmjit/src/asmjit/arm/a64emitter.h	1219;"	d
ASMJIT_INST_5x	external/asmjit/src/asmjit/arm/a64emitter.h	39;"	d
ASMJIT_INST_5x	external/asmjit/src/asmjit/x86/x86emitter.h	4492;"	d
ASMJIT_INST_5x	external/asmjit/src/asmjit/x86/x86emitter.h	97;"	d
ASMJIT_INST_6x	external/asmjit/src/asmjit/arm/a64emitter.h	1220;"	d
ASMJIT_INST_6x	external/asmjit/src/asmjit/arm/a64emitter.h	42;"	d
ASMJIT_INST_6x	external/asmjit/src/asmjit/x86/x86emitter.h	100;"	d
ASMJIT_INST_6x	external/asmjit/src/asmjit/x86/x86emitter.h	4493;"	d
ASMJIT_INST_FROM_COND	external/asmjit/src/asmjit/x86/x86globals.h	1849;"	d
ASMJIT_INST_FROM_COND	external/asmjit/src/asmjit/x86/x86globals.h	1859;"	d
ASMJIT_LIBRARY_MAKE_VERSION	external/asmjit/src/asmjit/core/api-config.h	16;"	d
ASMJIT_LIBRARY_VERSION	external/asmjit/src/asmjit/core/api-config.h	19;"	d
ASMJIT_LIKELY	external/asmjit/src/asmjit/core/api-config.h	439;"	d
ASMJIT_LOOKUP_TABLE_1024	external/asmjit/src/asmjit/core/misc_p.h	26;"	d
ASMJIT_LOOKUP_TABLE_128	external/asmjit/src/asmjit/core/misc_p.h	23;"	d
ASMJIT_LOOKUP_TABLE_16	external/asmjit/src/asmjit/core/misc_p.h	19;"	d
ASMJIT_LOOKUP_TABLE_256	external/asmjit/src/asmjit/core/misc_p.h	24;"	d
ASMJIT_LOOKUP_TABLE_32	external/asmjit/src/asmjit/core/misc_p.h	20;"	d
ASMJIT_LOOKUP_TABLE_4	external/asmjit/src/asmjit/core/misc_p.h	17;"	d
ASMJIT_LOOKUP_TABLE_40	external/asmjit/src/asmjit/core/misc_p.h	21;"	d
ASMJIT_LOOKUP_TABLE_512	external/asmjit/src/asmjit/core/misc_p.h	25;"	d
ASMJIT_LOOKUP_TABLE_64	external/asmjit/src/asmjit/core/misc_p.h	22;"	d
ASMJIT_LOOKUP_TABLE_8	external/asmjit/src/asmjit/core/misc_p.h	18;"	d
ASMJIT_MAYBE_UNUSED	external/asmjit/src/asmjit/core/api-config.h	388;"	d
ASMJIT_MAY_ALIAS	external/asmjit/src/asmjit/core/api-config.h	379;"	d
ASMJIT_MEM_PTR	external/asmjit/src/asmjit/x86/x86operand.h	1009;"	d
ASMJIT_MEM_PTR	external/asmjit/src/asmjit/x86/x86operand.h	1102;"	d
ASMJIT_NEW_REG_CUSTOM	external/asmjit/src/asmjit/x86/x86compiler.h	514;"	d
ASMJIT_NEW_REG_CUSTOM	external/asmjit/src/asmjit/x86/x86compiler.h	595;"	d
ASMJIT_NEW_REG_FMT	external/asmjit/src/asmjit/x86/x86compiler.h	505;"	d
ASMJIT_NEW_REG_FMT	external/asmjit/src/asmjit/x86/x86compiler.h	508;"	d
ASMJIT_NEW_REG_FMT	external/asmjit/src/asmjit/x86/x86compiler.h	596;"	d
ASMJIT_NEW_REG_TYPED	external/asmjit/src/asmjit/x86/x86compiler.h	528;"	d
ASMJIT_NEW_REG_TYPED	external/asmjit/src/asmjit/x86/x86compiler.h	594;"	d
ASMJIT_NOEXCEPT_TYPE	external/asmjit/src/asmjit/core/api-config.h	408;"	d
ASMJIT_NOEXCEPT_TYPE	external/asmjit/src/asmjit/core/emitter.h	/^      const BaseInst& inst, const Operand_* operands, size_t opCount) ASMJIT_NOEXCEPT_TYPE;$/;"	t	struct:AlignMode::EmitterType::EmitterFlags::EncodingOptions::BaseEmitter::Funcs
ASMJIT_NOEXCEPT_TYPE	external/asmjit/src/asmjit/core/emitter.h	/^    typedef Error (ASMJIT_CDECL* ValidateFunc)(Arch arch, const BaseInst& inst, const Operand_* operands, size_t opCount, ValidationFlags validationFlags) ASMJIT_NOEXCEPT_TYPE;$/;"	t	struct:AlignMode::EmitterType::EmitterFlags::EncodingOptions::BaseEmitter::Funcs
ASMJIT_NOEXCEPT_TYPE	external/asmjit/src/asmjit/core/jitallocator.h	/^  typedef Error (ASMJIT_CDECL* WriteFunc)(Span& span, void* userData) ASMJIT_NOEXCEPT_TYPE;$/;"	t	class:JitAllocatorOptions::JitAllocator::Span
ASMJIT_NOINLINE	external/asmjit/src/asmjit/core/api-config.h	330;"	d
ASMJIT_NONCONSTRUCTIBLE	external/asmjit/src/asmjit/core/api-config.h	549;"	d
ASMJIT_NONCOPYABLE	external/asmjit/src/asmjit/core/api-config.h	545;"	d
ASMJIT_NONNULL	external/asmjit/src/asmjit/core/api-config.h	399;"	d
ASMJIT_NORETURN	external/asmjit/src/asmjit/core/api-config.h	331;"	d
ASMJIT_NO_AARCH64	external/asmjit/src/asmjit/core/api-config.h	217;"	d
ASMJIT_NO_AARCH64	external/asmjit/src/asmjit/core/api-config.h	86;"	d
ASMJIT_NO_BUILDER	external/asmjit/src/asmjit/core/api-config.h	123;"	d
ASMJIT_NO_BUILDER	external/asmjit/src/asmjit/core/api-config.h	95;"	d
ASMJIT_NO_COMPILER	external/asmjit/src/asmjit/core/api-config.h	124;"	d
ASMJIT_NO_COMPILER	external/asmjit/src/asmjit/core/api-config.h	138;"	d
ASMJIT_NO_COMPILER	external/asmjit/src/asmjit/core/api-config.h	98;"	d
ASMJIT_NO_DEPRECATED	external/asmjit/src/asmjit/core/api-config.h	92;"	d
ASMJIT_NO_FOREIGN	external/asmjit/src/asmjit/core/api-config.h	121;"	d
ASMJIT_NO_FOREIGN	external/asmjit/src/asmjit/core/api-config.h	89;"	d
ASMJIT_NO_INTROSPECTION	external/asmjit/src/asmjit/core/api-config.h	113;"	d
ASMJIT_NO_INTROSPECTION	external/asmjit/src/asmjit/core/api-config.h	129;"	d
ASMJIT_NO_INTROSPECTION	external/asmjit/src/asmjit/core/api-config.h	149;"	d
ASMJIT_NO_JIT	external/asmjit/src/asmjit/core/api-config.h	101;"	d
ASMJIT_NO_JIT	external/asmjit/src/asmjit/core/api-config.h	125;"	d
ASMJIT_NO_LOGGING	external/asmjit/src/asmjit/core/api-config.h	104;"	d
ASMJIT_NO_LOGGING	external/asmjit/src/asmjit/core/api-config.h	126;"	d
ASMJIT_NO_TEXT	external/asmjit/src/asmjit/core/api-config.h	107;"	d
ASMJIT_NO_TEXT	external/asmjit/src/asmjit/core/api-config.h	127;"	d
ASMJIT_NO_TEXT	external/asmjit/src/asmjit/core/api-config.h	144;"	d
ASMJIT_NO_VALIDATION	external/asmjit/src/asmjit/core/api-config.h	110;"	d
ASMJIT_NO_VALIDATION	external/asmjit/src/asmjit/core/api-config.h	128;"	d
ASMJIT_NO_X86	external/asmjit/src/asmjit/core/api-config.h	120;"	d
ASMJIT_NO_X86	external/asmjit/src/asmjit/core/api-config.h	213;"	d
ASMJIT_NO_X86	external/asmjit/src/asmjit/core/api-config.h	83;"	d
ASMJIT_OFFSET_OF	external/asmjit/src/asmjit/core/api-config.h	476;"	d
ASMJIT_POPULATE_PRIMES	external/asmjit/src/asmjit/core/zonehash.cpp	16;"	d	file:
ASMJIT_PROPAGATE	external/asmjit/src/asmjit/core/globals.h	390;"	d
ASMJIT_RA_LOG_COMPLEX	external/asmjit/src/asmjit/core/radefs_p.h	31;"	d
ASMJIT_RA_LOG_FORMAT	external/asmjit/src/asmjit/core/radefs_p.h	26;"	d
ASMJIT_REGPARM	external/asmjit/src/asmjit/core/api-config.h	345;"	d
ASMJIT_REG_NAME_ENTRY	external/asmjit/src/asmjit/x86/x86formatter.cpp	106;"	d	file:
ASMJIT_REG_NAME_ENTRY	external/asmjit/src/asmjit/x86/x86formatter.cpp	168;"	d	file:
ASMJIT_REG_TYPE_ENTRY	external/asmjit/src/asmjit/x86/x86formatter.cpp	102;"	d	file:
ASMJIT_REG_TYPE_ENTRY	external/asmjit/src/asmjit/x86/x86formatter.cpp	169;"	d	file:
ASMJIT_RESTORE_MSVC_AARCH64_MACROS	external/asmjit/src/asmjit/arm/a64emitter.h	17;"	d
ASMJIT_SRCS	Makefile	/^ASMJIT_SRCS := \\$/;"	m
ASMJIT_STATIC	external/asmjit/src/asmjit/core/api-config.h	70;"	d
ASMJIT_STDCALL	external/asmjit/src/asmjit/core/api-config.h	343;"	d
ASMJIT_TEST	external/asmjit/src/asmjit/core/api-build_p.h	47;"	d
ASMJIT_TEST_ASSEMBLER_H_INCLUDED	external/asmjit/test/asmjit_test_assembler.h	7;"	d
ASMJIT_TEST_COMPILER_H_INCLUDED	external/asmjit/test/asmjit_test_compiler.h	7;"	d
ASMJIT_TEST_MISC_H_INCLUDED	external/asmjit/test/asmjit_test_misc.h	7;"	d
ASMJIT_TEST_PERF_H_INCLUDED	external/asmjit/test/asmjit_test_perf.h	7;"	d
ASMJIT_UNLIKELY	external/asmjit/src/asmjit/core/api-config.h	440;"	d
ASMJIT_VARAPI	external/asmjit/src/asmjit/core/api-config.h	296;"	d
ASMJIT_VECTORCALL	external/asmjit/src/asmjit/core/api-config.h	359;"	d
ASMJIT_VIRTAPI	external/asmjit/src/asmjit/core/api-config.h	306;"	d
ASMJIT_VM_SHM_DETECT	external/asmjit/src/asmjit/core/virtmem.cpp	65;"	d	file:
ASMJIT_VM_SHM_DETECT	external/asmjit/src/asmjit/core/virtmem.cpp	67;"	d	file:
ASMJIT_X86_FEATURE	external/asmjit/src/asmjit/core/cpuinfo.h	335;"	d
ASMJIT_X86_FEATURE	external/asmjit/src/asmjit/core/cpuinfo.h	489;"	d
ASMJIT_X86_H_INCLUDED	external/asmjit/src/asmjit/x86.h	7;"	d
ASMJIT_X86_X86ARCHTRAITS_P_H_INCLUDED	external/asmjit/src/asmjit/x86/x86archtraits_p.h	7;"	d
ASMJIT_X86_X86ASSEMBLER_H_INCLUDED	external/asmjit/src/asmjit/x86/x86assembler.h	7;"	d
ASMJIT_X86_X86BUILDER_H_INCLUDED	external/asmjit/src/asmjit/x86/x86builder.h	7;"	d
ASMJIT_X86_X86COMPILER_H_INCLUDED	external/asmjit/src/asmjit/x86/x86compiler.h	7;"	d
ASMJIT_X86_X86EMITHELPER_P_H_INCLUDED	external/asmjit/src/asmjit/x86/x86emithelper_p.h	7;"	d
ASMJIT_X86_X86EMITTER_H_INCLUDED	external/asmjit/src/asmjit/x86/x86emitter.h	7;"	d
ASMJIT_X86_X86FORMATTER_P_H_INCLUDED	external/asmjit/src/asmjit/x86/x86formatter_p.h	7;"	d
ASMJIT_X86_X86FUNC_P_H_INCLUDED	external/asmjit/src/asmjit/x86/x86func_p.h	7;"	d
ASMJIT_X86_X86GLOBALS_H_INCLUDED	external/asmjit/src/asmjit/x86/x86globals.h	7;"	d
ASMJIT_X86_X86INSTAPI_P_H_INCLUDED	external/asmjit/src/asmjit/x86/x86instapi_p.h	7;"	d
ASMJIT_X86_X86INSTDB_H_INCLUDED	external/asmjit/src/asmjit/x86/x86instdb.h	7;"	d
ASMJIT_X86_X86INSTDB_P_H_INCLUDED	external/asmjit/src/asmjit/x86/x86instdb_p.h	7;"	d
ASMJIT_X86_X86OPCODE_P_H_INCLUDED	external/asmjit/src/asmjit/x86/x86opcode_p.h	7;"	d
ASMJIT_X86_X86OPERAND_H_INCLUDED	external/asmjit/src/asmjit/x86/x86operand.h	7;"	d
ASMJIT_X86_X86RAPASS_P_H_INCLUDED	external/asmjit/src/asmjit/x86/x86rapass_p.h	7;"	d
ASPACE_SIZE	src/mmu.h	/^    static constexpr size_t ASPACE_SIZE = (1ull) << 32;$/;"	m	struct:dbt::mmu
AT_HWCAP	external/asmjit/src/asmjit/core/cpuinfo.cpp	1501;"	d	file:
AT_HWCAP2	external/asmjit/src/asmjit/core/cpuinfo.cpp	1505;"	d	file:
Add	external/asmjit/src/asmjit/core/support.h	/^struct Add    { template<typename T> static ASMJIT_INLINE_NODEBUG T op(T x, T y) noexcept { return  x +  y; } };$/;"	s	namespace:Support::Internal
AddLocal	src/ir/qir.h	/^    RegN AddLocal(VType type)$/;"	f	struct:dbt::qir::VRegsInfo
AddSucc	src/ir/qir.h	/^    void AddSucc(Block *succ)$/;"	f	struct:dbt::qir::Block
AddTrack	src/codegen/regalloc.cpp	/^QRegAlloc::RTrack *QRegAlloc::AddTrack()$/;"	f	class:dbt::qcg::QRegAlloc
AddTrackGlobal	src/codegen/regalloc.cpp	/^QRegAlloc::RTrack *QRegAlloc::AddTrackGlobal(qir::VType type, u16 state_offs)$/;"	f	class:dbt::qcg::QRegAlloc
AddTrackLocal	src/codegen/regalloc.cpp	/^QRegAlloc::RTrack *QRegAlloc::AddTrackLocal(qir::VType type)$/;"	f	class:dbt::qcg::QRegAlloc
AdditionalInfo	external/asmjit/src/asmjit/x86/x86instdb_p.h	/^struct AdditionalInfo {$/;"	s	namespace:InstDB
AddrType	external/asmjit/src/asmjit/x86/x86operand.h	/^  enum class AddrType : uint32_t {$/;"	c	class:Mem
AddressTableEntry	external/asmjit/src/asmjit/core/codeholder.h	/^class AddressTableEntry : public ZoneTreeNodeT<AddressTableEntry> {$/;"	c	class:ExpressionOpType::ExpressionValueType::SectionFlags::CopySectionFlags
AliasedUInt	external/asmjit/src/asmjit/core/support.h	/^  struct AliasedUInt {};$/;"	s	namespace:Support::Internal
AliasedUInt	external/asmjit/src/asmjit/core/support.h	/^  template<> struct AliasedUInt<uint16_t, 1> { typedef uint16_t ASMJIT_MAY_ALIAS ASMJIT_ALIGN_TYPE(T, 1); };$/;"	s	namespace:Support::Internal
AliasedUInt	external/asmjit/src/asmjit/core/support.h	/^  template<> struct AliasedUInt<uint16_t, 2> { typedef uint16_t ASMJIT_MAY_ALIAS T; };$/;"	s	namespace:Support::Internal
AliasedUInt	external/asmjit/src/asmjit/core/support.h	/^  template<> struct AliasedUInt<uint32_t, 1> { typedef uint32_t ASMJIT_MAY_ALIAS ASMJIT_ALIGN_TYPE(T, 1); };$/;"	s	namespace:Support::Internal
AliasedUInt	external/asmjit/src/asmjit/core/support.h	/^  template<> struct AliasedUInt<uint32_t, 2> { typedef uint32_t ASMJIT_MAY_ALIAS ASMJIT_ALIGN_TYPE(T, 2); };$/;"	s	namespace:Support::Internal
AliasedUInt	external/asmjit/src/asmjit/core/support.h	/^  template<> struct AliasedUInt<uint32_t, 4> { typedef uint32_t ASMJIT_MAY_ALIAS T; };$/;"	s	namespace:Support::Internal
AliasedUInt	external/asmjit/src/asmjit/core/support.h	/^  template<> struct AliasedUInt<uint64_t, 1> { typedef uint64_t ASMJIT_MAY_ALIAS ASMJIT_ALIGN_TYPE(T, 1); };$/;"	s	namespace:Support::Internal
AliasedUInt	external/asmjit/src/asmjit/core/support.h	/^  template<> struct AliasedUInt<uint64_t, 2> { typedef uint64_t ASMJIT_MAY_ALIAS ASMJIT_ALIGN_TYPE(T, 2); };$/;"	s	namespace:Support::Internal
AliasedUInt	external/asmjit/src/asmjit/core/support.h	/^  template<> struct AliasedUInt<uint64_t, 4> { typedef uint64_t ASMJIT_MAY_ALIAS ASMJIT_ALIGN_TYPE(T, 4); };$/;"	s	namespace:Support::Internal
AliasedUInt	external/asmjit/src/asmjit/core/support.h	/^  template<> struct AliasedUInt<uint64_t, 8> { typedef uint64_t ASMJIT_MAY_ALIAS T; };$/;"	s	namespace:Support::Internal
AlignData	external/asmjit/src/asmjit/core/builder.h	/^  struct AlignData {$/;"	s	class:NodeType::NodeFlags::SentinelType::BaseNode
AlignMode	external/asmjit/src/asmjit/core/emitter.h	/^enum class AlignMode : uint8_t {$/;"	c
AlignNode	external/asmjit/src/asmjit/core/builder.h	/^class AlignNode : public BaseNode {$/;"	c	class:NodeType::NodeFlags::SentinelType
AllocArgVectorStr	src/env.cpp	/^static inline uabi_ulong AllocArgVectorStr(uabi_ulong stk, char const *str)$/;"	f	namespace:dbt
AllocArgVectorStr	src/env.cpp	/^static uabi_ulong AllocArgVectorStr(uabi_ulong stk, void const *str, u16 sz)$/;"	f	namespace:dbt
AllocFrameSlot	src/codegen/regalloc.cpp	/^void QRegAlloc::AllocFrameSlot(RTrack *v)$/;"	f	class:dbt::qcg::QRegAlloc
AllocOp	src/codegen/regalloc.cpp	/^void QRegAlloc::AllocOp(qir::Inst *ins)$/;"	f	class:dbt::qcg::QRegAlloc
AllocPReg	src/codegen/regalloc.cpp	/^qir::RegN QRegAlloc::AllocPReg(RegMask desire, RegMask avoid)$/;"	f	class:dbt::qcg::QRegAlloc
Allocate	src/arena.h	/^    T *Allocate(size_t num = 1)$/;"	f	struct:MemArena
Allocate	src/arena.h	/^    void *Allocate(size_t alloc_sz, size_t align)$/;"	f	struct:MemArena
AllocateCode	src/tcache.cpp	/^void *tcache::AllocateCode(size_t code_sz, u16 align)$/;"	f	class:dbt::tcache
AllocateTBlock	src/tcache.cpp	/^TBlock *tcache::AllocateTBlock()$/;"	f	class:dbt::tcache
And	external/asmjit/src/asmjit/core/support.h	/^struct And    { template<typename T> static ASMJIT_INLINE_NODEBUG T op(T x, T y) noexcept { return  x &  y; } };$/;"	s	namespace:Support::Internal
AndNot	external/asmjit/src/asmjit/core/support.h	/^struct AndNot { template<typename T> static ASMJIT_INLINE_NODEBUG T op(T x, T y) noexcept { return  x & ~y; } };$/;"	s	namespace:Support::Internal
AnyData	external/asmjit/src/asmjit/core/builder.h	/^  struct AnyData {$/;"	s	class:NodeType::NodeFlags::SentinelType::BaseNode
AppleFamilyId	external/asmjit/src/asmjit/core/cpuinfo.cpp	/^enum class AppleFamilyId : uint32_t {$/;"	c	namespace:arm	file:
AppleFeatureMapping	external/asmjit/src/asmjit/core/cpuinfo.cpp	/^struct AppleFeatureMapping {$/;"	s	class:arm::AppleFamilyId::OpenBSDAArch64CPUID	file:
AppleFeatureType	external/asmjit/src/asmjit/core/cpuinfo.cpp	/^enum class AppleFeatureType : uint8_t {$/;"	c	class:arm::AppleFamilyId::OpenBSDAArch64CPUID	file:
Apply	src/ir/qir_opt.cpp	/^    Inst *Apply()$/;"	f	struct:dbt::qir::FolderVisitor
ApplyFolder	src/ir/qir_opt.cpp	/^Inst *ApplyFolder(Block *bb, Inst *ins)$/;"	f	namespace:dbt::qir
Arch	external/asmjit/src/asmjit/core/archtraits.h	/^enum class Arch : uint8_t {$/;"	c
ArchTraits	external/asmjit/src/asmjit/core/archtraits.h	/^struct ArchTraits {$/;"	s	class:Arch::SubArch::ArchTypeNameId::InstHints
ArchTraits	src/codegen/arch_traits.h	/^namespace ArchTraits$/;"	n	namespace:dbt::qcg
ArchTypeNameId	external/asmjit/src/asmjit/core/archtraits.h	/^enum class ArchTypeNameId : uint8_t {$/;"	c	class:Arch::SubArch
ArchUtils	external/asmjit/src/asmjit/core/archtraits.h	/^namespace ArchUtils {$/;"	n	class:Arch::SubArch::ArchTypeNameId::InstHints
ArenaOf	src/ir/qir.h	/^MemArena *ArenaOf(Region *rn)$/;"	f	namespace:dbt::qir
ArenaVector	src/arena_objects.h	/^    explicit ArenaVector<T>(MemArena *arena)$/;"	f	class:ArenaVector
ArenaVector	src/arena_objects.h	/^class ArenaVector : public std::vector<T, AArena<T>>$/;"	c
ArgPack	external/asmjit/src/asmjit/core/compiler.h	/^  struct ArgPack {$/;"	s	class:FuncNode
Array	external/asmjit/src/asmjit/core/support.h	/^struct Array {$/;"	s	class:Support::Internal::SortOrder
Assembler	external/asmjit/src/asmjit/arm/a64assembler.h	/^class ASMJIT_VIRTAPI Assembler$/;"	c
Assembler	external/asmjit/src/asmjit/x86/x86assembler.h	/^class ASMJIT_VIRTAPI Assembler$/;"	c
AssemblerTester	external/asmjit/test/asmjit_test_assembler.h	/^class AssemblerTester {$/;"	c
AutoUnit	external/asmjit/test/broken.h	/^class AutoUnit : public Unit {$/;"	c	namespace:BrokenAPI
Avx512Flags	external/asmjit/src/asmjit/x86/x86instdb.h	/^enum class Avx512Flags : uint32_t {$/;"	c	class:InstDB::Mode::OpFlags::InstFlags
B	external/asmjit/src/asmjit/x86/x86assembler.cpp	/^    B = X >> 3,$/;"	e	enum:X86Mod16BaseIndexTable_T::__anon4	file:
B	external/asmjit/src/asmjit/x86/x86instapi.cpp	167;"	d	file:
B	external/asmjit/src/asmjit/x86/x86instapi.cpp	181;"	d	file:
B	src/guest/rv32_insn.h	/^struct B : public Base {$/;"	s	namespace:dbt::rv32::insn
BAD	src/ir/qir.h	/^        BAD,$/;"	m	class:dbt::qir::VOperand::Kind
BIN	Makefile	/^BIN = $(OUT)\/rv32jit$/;"	m
BRANCH	src/guest/rv32_qir.h	/^    enum class Control { NEXT, BRANCH, TB_OVF } control{Control::NEXT};$/;"	m	class:dbt::qir::rv32::RV32Translator::Control
BROKEN_EXPECT_INTERNAL	external/asmjit/test/broken.h	182;"	d
BROKEN_H_INCLUDED	external/asmjit/test/broken.h	29;"	d
BROKEN_UNIT_INTERNAL	external/asmjit/test/broken.h	162;"	d
Base	external/asmjit/src/asmjit/arm/a64assembler.h	/^  typedef BaseAssembler Base;$/;"	t	class:Assembler
Base	external/asmjit/src/asmjit/arm/a64builder.h	/^  typedef BaseBuilder Base;$/;"	t	class:Builder
Base	external/asmjit/src/asmjit/arm/a64compiler.h	/^  typedef BaseCompiler Base;$/;"	t	class:Compiler
Base	external/asmjit/src/asmjit/arm/a64rapass_p.h	/^  typedef BaseRAPass Base;$/;"	t	class:ARMRAPass
Base	external/asmjit/src/asmjit/core/assembler.h	/^  typedef BaseEmitter Base;$/;"	t	class:BaseAssembler
Base	external/asmjit/src/asmjit/core/builder.h	/^  typedef BaseEmitter Base;$/;"	t	class:NodeType::NodeFlags::SentinelType::BaseBuilder
Base	external/asmjit/src/asmjit/core/compiler.cpp	/^  typedef Pass Base;$/;"	t	class:GlobalConstPoolPass	file:
Base	external/asmjit/src/asmjit/core/compiler.h	/^  typedef BaseBuilder Base;$/;"	t	class:BaseCompiler
Base	external/asmjit/src/asmjit/core/compiler.h	/^  typedef Pass Base;$/;"	t	class:FuncPass
Base	external/asmjit/src/asmjit/core/rapass_p.h	/^  typedef FuncPass Base;$/;"	t	class:RABlockFlags::BaseRAPass
Base	external/asmjit/src/asmjit/x86/x86assembler.h	/^  typedef BaseAssembler Base;$/;"	t	class:Assembler
Base	external/asmjit/src/asmjit/x86/x86builder.h	/^  typedef BaseBuilder Base;$/;"	t	class:Builder
Base	external/asmjit/src/asmjit/x86/x86compiler.h	/^  typedef BaseCompiler Base;$/;"	t	class:Compiler
Base	external/asmjit/src/asmjit/x86/x86rapass_p.h	/^  typedef BaseRAPass Base;$/;"	t	class:X86RAPass
Base	src/guest/rv32_insn.h	/^struct Base {$/;"	s	namespace:dbt::rv32::insn
BaseAdcSbc	external/asmjit/src/asmjit/arm/a64instdb_p.h	/^struct BaseAdcSbc {$/;"	s	namespace:InstDB::EncodingData
BaseAddSub	external/asmjit/src/asmjit/arm/a64instdb_p.h	/^struct BaseAddSub {$/;"	s	namespace:InstDB::EncodingData
BaseAdr	external/asmjit/src/asmjit/arm/a64instdb_p.h	/^struct BaseAdr {$/;"	s	namespace:InstDB::EncodingData
BaseAssembler	external/asmjit/src/asmjit/core/assembler.h	/^class ASMJIT_VIRTAPI BaseAssembler : public BaseEmitter {$/;"	c
BaseAssembler	external/asmjit/src/asmjit/x86/x86assembler.cpp	/^Assembler::Assembler(CodeHolder* code) noexcept : BaseAssembler() {$/;"	f	class:X86BufferWriter
BaseAtDcIcTlbi	external/asmjit/src/asmjit/arm/a64instdb_p.h	/^struct BaseAtDcIcTlbi {$/;"	s	namespace:InstDB::EncodingData
BaseAtomicCasp	external/asmjit/src/asmjit/arm/a64instdb_p.h	/^struct BaseAtomicCasp {$/;"	s	namespace:InstDB::EncodingData
BaseAtomicOp	external/asmjit/src/asmjit/arm/a64instdb_p.h	/^struct BaseAtomicOp {$/;"	s	namespace:InstDB::EncodingData
BaseAtomicSt	external/asmjit/src/asmjit/arm/a64instdb_p.h	/^struct BaseAtomicSt {$/;"	s	namespace:InstDB::EncodingData
BaseBfc	external/asmjit/src/asmjit/arm/a64instdb_p.h	/^typedef BaseOp BaseBfc;$/;"	t	namespace:InstDB::EncodingData
BaseBfi	external/asmjit/src/asmjit/arm/a64instdb_p.h	/^typedef BaseOp BaseBfi;$/;"	t	namespace:InstDB::EncodingData
BaseBfm	external/asmjit/src/asmjit/arm/a64instdb_p.h	/^struct BaseBfm {$/;"	s	namespace:InstDB::EncodingData
BaseBfx	external/asmjit/src/asmjit/arm/a64instdb_p.h	/^typedef BaseOp BaseBfx;$/;"	t	namespace:InstDB::EncodingData
BaseBranchCmp	external/asmjit/src/asmjit/arm/a64instdb_p.h	/^typedef BaseOp BaseBranchCmp;$/;"	t	namespace:InstDB::EncodingData
BaseBranchReg	external/asmjit/src/asmjit/arm/a64instdb_p.h	/^typedef BaseOp BaseBranchReg;$/;"	t	namespace:InstDB::EncodingData
BaseBranchRel	external/asmjit/src/asmjit/arm/a64instdb_p.h	/^typedef BaseOp BaseBranchRel;$/;"	t	namespace:InstDB::EncodingData
BaseBranchTst	external/asmjit/src/asmjit/arm/a64instdb_p.h	/^typedef BaseOp BaseBranchTst;$/;"	t	namespace:InstDB::EncodingData
BaseBuilder	external/asmjit/src/asmjit/arm/a64builder.cpp	/^Builder::Builder(CodeHolder* code) noexcept : BaseBuilder() {$/;"	f
BaseBuilder	external/asmjit/src/asmjit/core/builder.h	/^class ASMJIT_VIRTAPI BaseBuilder : public BaseEmitter {$/;"	c	class:NodeType::NodeFlags::SentinelType
BaseBuilder	external/asmjit/src/asmjit/x86/x86builder.cpp	/^Builder::Builder(CodeHolder* code) noexcept : BaseBuilder() {$/;"	f
BaseBuilder_newLabelInternal	external/asmjit/src/asmjit/core/builder.cpp	/^static Error BaseBuilder_newLabelInternal(BaseBuilder* self, uint32_t labelId) {$/;"	f	file:
BaseCCmp	external/asmjit/src/asmjit/arm/a64instdb_p.h	/^typedef BaseOp BaseCCmp;$/;"	t	namespace:InstDB::EncodingData
BaseCInc	external/asmjit/src/asmjit/arm/a64instdb_p.h	/^typedef BaseOp BaseCInc;$/;"	t	namespace:InstDB::EncodingData
BaseCSel	external/asmjit/src/asmjit/arm/a64instdb_p.h	/^typedef BaseOp BaseCSel;$/;"	t	namespace:InstDB::EncodingData
BaseCSet	external/asmjit/src/asmjit/arm/a64instdb_p.h	/^typedef BaseOp BaseCSet;$/;"	t	namespace:InstDB::EncodingData
BaseCmpCmn	external/asmjit/src/asmjit/arm/a64instdb_p.h	/^struct BaseCmpCmn {$/;"	s	namespace:InstDB::EncodingData
BaseCompiler	external/asmjit/src/asmjit/arm/a64compiler.cpp	/^Compiler::Compiler(CodeHolder* code) noexcept : BaseCompiler() {$/;"	f
BaseCompiler	external/asmjit/src/asmjit/core/compiler.h	/^class ASMJIT_VIRTAPI BaseCompiler : public BaseBuilder {$/;"	c
BaseCompiler	external/asmjit/src/asmjit/x86/x86compiler.cpp	/^Compiler::Compiler(CodeHolder* code) noexcept : BaseCompiler() {$/;"	f
BaseCompiler_assignGenericName	external/asmjit/src/asmjit/core/compiler.cpp	/^static void BaseCompiler_assignGenericName(BaseCompiler* self, VirtReg* vReg) {$/;"	f	file:
BaseEmitHelper	external/asmjit/src/asmjit/arm/a64emithelper_p.h	/^    : BaseEmitHelper(emitter) {}$/;"	f	class:EmitHelper
BaseEmitHelper	external/asmjit/src/asmjit/core/emithelper_p.h	/^class BaseEmitHelper {$/;"	c
BaseEmitter	external/asmjit/src/asmjit/core/assembler.cpp	/^  : BaseEmitter(EmitterType::kAssembler) {}$/;"	f
BaseEmitter	external/asmjit/src/asmjit/core/emitter.h	/^class ASMJIT_VIRTAPI BaseEmitter {$/;"	c	class:AlignMode::EmitterType::EmitterFlags::EncodingOptions
BaseExtend	external/asmjit/src/asmjit/arm/a64instdb_p.h	/^struct BaseExtend {$/;"	s	namespace:InstDB::EncodingData
BaseExtract	external/asmjit/src/asmjit/arm/a64instdb_p.h	/^typedef BaseOp BaseExtract;$/;"	t	namespace:InstDB::EncodingData
BaseInst	external/asmjit/src/asmjit/core/inst.h	/^class BaseInst {$/;"	c	class:InstIdParts::InstOptions::InstControlFlow::InstSameRegHint
BaseLdSt	external/asmjit/src/asmjit/arm/a64instdb_p.h	/^struct BaseLdSt {$/;"	s	namespace:InstDB::EncodingData
BaseLdpStp	external/asmjit/src/asmjit/arm/a64instdb_p.h	/^struct BaseLdpStp {$/;"	s	namespace:InstDB::EncodingData
BaseLdxp	external/asmjit/src/asmjit/arm/a64instdb_p.h	/^struct BaseLdxp {$/;"	s	namespace:InstDB::EncodingData
BaseLogical	external/asmjit/src/asmjit/arm/a64instdb_p.h	/^struct BaseLogical {$/;"	s	namespace:InstDB::EncodingData
BaseMem	external/asmjit/src/asmjit/arm/armoperand.h	/^    : BaseMem() {}$/;"	f	class:Mem
BaseMem	external/asmjit/src/asmjit/arm/armoperand.h	/^    : BaseMem(Globals::NoInit) {}$/;"	f	class:Mem
BaseMem	external/asmjit/src/asmjit/arm/armoperand.h	/^    : BaseMem(other) {}$/;"	f	class:Mem
BaseMem	external/asmjit/src/asmjit/arm/armoperand.h	/^    : BaseMem(signature, baseId, indexId, offset) {}$/;"	f	class:Mem
BaseMem	external/asmjit/src/asmjit/core/operand.h	/^class BaseMem : public Operand {$/;"	c	class:OperandType::RegType::RegGroup
BaseMem	external/asmjit/src/asmjit/x86/x86operand.h	/^    : BaseMem() {}$/;"	f	class:Mem::AddrType::Broadcast
BaseMem	external/asmjit/src/asmjit/x86/x86operand.h	/^    : BaseMem(Globals::NoInit) {}$/;"	f	class:Mem::AddrType::Broadcast
BaseMem	external/asmjit/src/asmjit/x86/x86operand.h	/^    : BaseMem(other) {}$/;"	f	class:Mem::AddrType::Broadcast
BaseMem	external/asmjit/src/asmjit/x86/x86operand.h	/^    : BaseMem(signature, baseId, indexId, offset) {}$/;"	f	class:Mem::AddrType::Broadcast
BaseMovKNZ	external/asmjit/src/asmjit/arm/a64instdb_p.h	/^typedef BaseOp BaseMovKNZ;$/;"	t	namespace:InstDB::EncodingData
BaseMull	external/asmjit/src/asmjit/arm/a64instdb_p.h	/^typedef BaseOp BaseMull;$/;"	t	namespace:InstDB::EncodingData
BaseMvnNeg	external/asmjit/src/asmjit/arm/a64instdb_p.h	/^struct BaseMvnNeg {$/;"	s	namespace:InstDB::EncodingData
BaseNode	external/asmjit/src/asmjit/core/builder.h	/^    : BaseNode(cb, NodeType::kAlign, NodeFlags::kIsCode | NodeFlags::kHasNoEffect) {$/;"	f	class:NodeType::NodeFlags::SentinelType::AlignNode
BaseNode	external/asmjit/src/asmjit/core/builder.h	/^    : BaseNode(cb, NodeType::kComment, NodeFlags::kIsInformative | NodeFlags::kHasNoEffect | NodeFlags::kIsRemovable) {$/;"	f	class:NodeType::NodeFlags::SentinelType::CommentNode
BaseNode	external/asmjit/src/asmjit/core/builder.h	/^    : BaseNode(cb, NodeType::kSentinel, NodeFlags::kIsInformative | NodeFlags::kHasNoEffect) {$/;"	f	class:NodeType::NodeFlags::SentinelType::SentinelNode
BaseNode	external/asmjit/src/asmjit/core/builder.h	/^class BaseNode {$/;"	c	class:NodeType::NodeFlags::SentinelType
BaseOp	external/asmjit/src/asmjit/arm/a64instdb_p.h	/^struct BaseOp {$/;"	s	namespace:InstDB::EncodingData
BaseOpImm	external/asmjit/src/asmjit/arm/a64instdb_p.h	/^struct BaseOpImm {$/;"	s	namespace:InstDB::EncodingData
BaseR	external/asmjit/src/asmjit/arm/a64instdb_p.h	/^struct BaseR {$/;"	s	namespace:InstDB::EncodingData
BaseRAPass	external/asmjit/src/asmjit/arm/a64rapass.cpp	/^  : BaseRAPass() { _iEmitHelper = &_emitHelper; }$/;"	f
BaseRAPass	external/asmjit/src/asmjit/core/rapass_p.h	/^class BaseRAPass : public FuncPass {$/;"	c	class:RABlockFlags
BaseRAPass	external/asmjit/src/asmjit/x86/x86rapass.cpp	/^  : BaseRAPass() { _iEmitHelper = &_emitHelper; }$/;"	f
BaseRM_NoImm	external/asmjit/src/asmjit/arm/a64instdb_p.h	/^struct BaseRM_NoImm {$/;"	s	namespace:InstDB::EncodingData
BaseRM_SImm10	external/asmjit/src/asmjit/arm/a64instdb_p.h	/^struct BaseRM_SImm10 {$/;"	s	namespace:InstDB::EncodingData
BaseRM_SImm9	external/asmjit/src/asmjit/arm/a64instdb_p.h	/^struct BaseRM_SImm9 {$/;"	s	namespace:InstDB::EncodingData
BaseRR	external/asmjit/src/asmjit/arm/a64instdb_p.h	/^struct BaseRR {$/;"	s	namespace:InstDB::EncodingData
BaseRRII	external/asmjit/src/asmjit/arm/a64instdb_p.h	/^struct BaseRRII {$/;"	s	namespace:InstDB::EncodingData
BaseRRR	external/asmjit/src/asmjit/arm/a64instdb_p.h	/^struct BaseRRR {$/;"	s	namespace:InstDB::EncodingData
BaseRRRR	external/asmjit/src/asmjit/arm/a64instdb_p.h	/^struct BaseRRRR {$/;"	s	namespace:InstDB::EncodingData
BaseReg	external/asmjit/src/asmjit/core/operand.h	/^class BaseReg : public Operand {$/;"	c	class:OperandType::RegType::RegGroup
BaseRegTraits	external/asmjit/src/asmjit/core/operand.h	/^struct BaseRegTraits {$/;"	s	class:OperandType::RegType::RegGroup
BaseShift	external/asmjit/src/asmjit/arm/a64instdb_p.h	/^struct BaseShift {$/;"	s	namespace:InstDB::EncodingData
BaseStx	external/asmjit/src/asmjit/arm/a64instdb_p.h	/^struct BaseStx {$/;"	s	namespace:InstDB::EncodingData
BaseStxp	external/asmjit/src/asmjit/arm/a64instdb_p.h	/^struct BaseStxp {$/;"	s	namespace:InstDB::EncodingData
BaseTst	external/asmjit/src/asmjit/arm/a64instdb_p.h	/^struct BaseTst {$/;"	s	namespace:InstDB::EncodingData
Binary	external/asmjit/db/exp.js	/^function Binary(op, left, right) { return new BinaryNode(op, left, right); }$/;"	f
BitScanCalc	external/asmjit/src/asmjit/core/support.h	/^struct BitScanCalc {$/;"	s	namespace:Support::Internal::Internal::__anon6
BitScanCalc	external/asmjit/src/asmjit/core/support.h	/^struct BitScanCalc<T, 0> {$/;"	s	namespace:Support::Internal::Internal::__anon6
BitScanData	external/asmjit/src/asmjit/core/support.h	/^struct BitScanData { T x; uint32_t n; };$/;"	s	namespace:Support::Internal::Internal::__anon6
BitVectorIterator	external/asmjit/src/asmjit/core/support.h	/^class BitVectorIterator {$/;"	c	namespace:Support::Internal
BitVectorIterator	external/asmjit/src/asmjit/core/zonevector.h	/^      : Support::BitVectorIterator<BitWord>(bitVector.data(), bitVector.sizeInBitWords()) {}$/;"	f	class:ZoneBitVector::ForEachBitSet::Support
BitVectorOpIterator	external/asmjit/src/asmjit/core/support.h	/^class BitVectorOpIterator {$/;"	c	namespace:Support::Internal
BitVectorOpIterator	external/asmjit/src/asmjit/core/zonevector.h	/^      : Support::BitVectorOpIterator<BitWord, Operator>(a.data(), b.data(), a.sizeInBitWords()) {$/;"	f	class:ZoneBitVector::ForEachBitOp::Support
BitVectorRangeIterator	external/asmjit/src/asmjit/core/jitallocator.cpp	/^class BitVectorRangeIterator {$/;"	c	file:
BitWord	external/asmjit/src/asmjit/core/cpuinfo.h	/^  typedef Support::BitWord BitWord;$/;"	t	class:CpuFeatures
BitWord	external/asmjit/src/asmjit/core/rapass.cpp	/^  typedef ZoneBitVector::BitWord BitWord;$/;"	t	namespace:LiveOps	file:
BitWord	external/asmjit/src/asmjit/core/zonevector.h	/^  typedef Support::BitWord BitWord;$/;"	t	class:ZoneBitVector
BitWordIterator	external/asmjit/src/asmjit/core/support.h	/^class BitWordIterator {$/;"	c	namespace:Support::Internal
Block	external/asmjit/src/asmjit/core/zone.h	/^  struct Block {$/;"	s	class:Zone
Block	external/asmjit/src/asmjit/core/zonestack.h	/^  struct Block {$/;"	s	class:ZoneStackBase
Block	src/ir/qir.h	/^    Block(Region *rn_, u32 id_)$/;"	f	struct:dbt::qir::Block
Block	src/ir/qir.h	/^struct Block : IListNode<Block>, InArena {$/;"	s	namespace:dbt::qir
BlockBoundary	src/codegen/regalloc.cpp	/^void QRegAlloc::BlockBoundary()$/;"	f	class:dbt::qcg::QRegAlloc
Bnd	external/asmjit/src/asmjit/x86/x86operand.h	/^class Bnd : public Reg { ASMJIT_DEFINE_FINAL_REG(Bnd, Reg, RegTraits<RegType::kX86_Bnd>) };$/;"	c
Bool	external/asmjit/src/asmjit/core/type.h	/^struct Bool {};$/;"	s	namespace:TypeId::Type
BootElf	src/env.cpp	/^void env::BootElf(const char *path, ElfImage *elf)$/;"	f	class:dbt::env
BranchSlot	src/codegen/jitabi.h	/^struct BranchSlot {$/;"	s	namespace:dbt::jitabi::ppoint
BrindCacheEntry	src/tcache.h	/^    struct BrindCacheEntry {$/;"	s	struct:dbt::tcache
Broadcast	external/asmjit/src/asmjit/x86/x86operand.h	/^  enum class Broadcast : uint32_t {$/;"	c	class:Mem::AddrType
BrokenAPI	external/asmjit/test/broken.h	/^namespace BrokenAPI {$/;"	n
BrokenGlobal	external/asmjit/test/broken.cpp	/^struct BrokenGlobal {$/;"	s	file:
Builder	external/asmjit/src/asmjit/arm/a64builder.h	/^class ASMJIT_VIRTAPI Builder$/;"	c
Builder	external/asmjit/src/asmjit/x86/x86builder.h	/^class ASMJIT_VIRTAPI Builder$/;"	c
Builder	src/ir/qir_builder.h	/^    explicit Builder() : bb(nullptr), it(nullptr) {}$/;"	f	struct:dbt::qir::Builder
Builder	src/ir/qir_builder.h	/^    explicit Builder(Block *bb_) : bb(bb_), it(bb->ilist.end()) {}$/;"	f	struct:dbt::qir::Builder
Builder	src/ir/qir_builder.h	/^    explicit Builder(Block *bb_, IListIterator<Inst> it_) : bb(bb_), it(it_) {}$/;"	f	struct:dbt::qir::Builder
Builder	src/ir/qir_builder.h	/^struct Builder {$/;"	s	namespace:dbt::qir
ByteOrder	external/asmjit/src/asmjit/core/globals.h	/^enum class ByteOrder {$/;"	c
CHECK_ELF_FILES	mk/external.mk	/^CHECK_ELF_FILES := $(foreach T,$(EXTERNAL_DATA),$($(T)_DATA))$/;"	m
CLASS	src/ir/qir.h	38;"	d
CLASS	src/ir/qir.h	41;"	d
CLASS	src/ir/qir.h	697;"	d
CLASS	src/ir/qir.h	700;"	d
CLASS	src/ir/qir_builder.h	49;"	d
CLASS	src/ir/qir_builder.h	56;"	d
CMDLINE_H_INCLUDED	external/asmjit/test/cmdline.h	7;"	d
CODE_POOL_SIZE	src/tcache.h	/^    static constexpr size_t CODE_POOL_SIZE = 128 * 1024 * 1024;$/;"	m	struct:dbt::tcache
COMMON_RUNTIME_STUBS	src/runtime_stubs.h	10;"	d
COMMON_URL	mk/external.mk	/^COMMON_URL = https:\/\/github.com\/sysprog21\/rv32emu\/raw\/master\/build$/;"	m
CONFIG_ZERO_MMU_BASE	src/config.h	4;"	d
CONFIG_ZERO_MMU_BASE	src/config.h	6;"	d
CONST	src/ir/qir.h	/^        CONST = 0,$/;"	m	class:dbt::qir::VOperand::Kind
CONTROL_FLOW	external/asmjit/src/asmjit/x86/x86instdb.cpp	2204;"	d	file:
CONTROL_FLOW	external/asmjit/src/asmjit/x86/x86instdb.cpp	2665;"	d	file:
CPUState	src/guest/rv32_cpu.h	/^struct CPUState : rv32::CPUStateImpl {$/;"	s	namespace:dbt::dbt
CPUStateImpl	src/guest/rv32_cpu.h	/^struct CPUStateImpl {$/;"	s	namespace:dbt::rv32
CReg	external/asmjit/src/asmjit/x86/x86operand.h	/^class CReg : public Reg { ASMJIT_DEFINE_FINAL_REG(CReg, Reg, RegTraits<RegType::kX86_CReg>) };$/;"	c
CX	src/codegen/arch_traits.cpp	/^constexpr auto CX = RegMask(0).Set(ArchTraits::RCX);$/;"	m	namespace:dbt::qcg::RACtGPR	file:
CXX	mk/common.mk	/^    CXX := $(shell which $(CXX))$/;"	m
CXX	mk/common.mk	/^    CXX := clang++-15$/;"	m
CXX	mk/common.mk	/^CXX := $(shell which $(CXX))$/;"	m
CXX	mk/common.mk	/^CXX = clang++$/;"	m
CXXFLAGS	Makefile	/^CXXFLAGS := -O2 -flto -Wall -Wextra -Wno-c99-designator$/;"	m
CXX_VERSION	mk/common.mk	/^CXX_VERSION := $(shell $(CXX) --version | grep -oP 'clang version \\K\\d+')$/;"	m
CacheBrind	src/tcache.h	/^    static void CacheBrind(TBlock *tb)$/;"	f	struct:dbt::tcache
CachePolicy	external/asmjit/src/asmjit/core/virtmem.h	/^enum class CachePolicy : uint32_t {$/;"	c	namespace:VirtMem
Call	external/asmjit/db/exp.js	/^function Call(name, args) { return new CallNode(name, args); }$/;"	f
Call64Abs	src/codegen/jitabi.h	/^    struct Call64Abs {$/;"	s	struct:dbt::jitabi::ppoint::BranchSlot
CallConv	external/asmjit/src/asmjit/core/func.h	/^struct CallConv {$/;"	s	class:CallConvId::CallConvStrategy::CallConvFlags
CallConvFlags	external/asmjit/src/asmjit/core/func.h	/^enum class CallConvFlags : uint32_t {$/;"	c	class:CallConvId::CallConvStrategy
CallConvId	external/asmjit/src/asmjit/core/func.h	/^enum class CallConvId : uint8_t {$/;"	c
CallConvStrategy	external/asmjit/src/asmjit/core/func.h	/^enum class CallConvStrategy : uint8_t {$/;"	c	class:CallConvId
CallOp	src/codegen/regalloc.cpp	/^void QRegAlloc::CallOp(bool use_globals)$/;"	f	class:dbt::qcg::QRegAlloc
CallTab	src/codegen/jitabi.h	/^    struct CallTab {$/;"	s	struct:dbt::jitabi::ppoint::BranchSlot
CmdLine	external/asmjit/test/cmdline.h	/^  CmdLine(int argc, const char* const* argv)$/;"	f	class:CmdLine
CmdLine	external/asmjit/test/cmdline.h	/^class CmdLine {$/;"	c
CmpImm	external/asmjit/src/asmjit/x86/x86globals.h	/^enum class CmpImm : uint8_t {$/;"	c	class:CondCode::FpuStatusWord::FpuControlWord
CodeBuffer	external/asmjit/src/asmjit/core/codebuffer.h	/^struct CodeBuffer {$/;"	s	class:CodeBufferFlags
CodeBufferFlags	external/asmjit/src/asmjit/core/codebuffer.h	/^enum class CodeBufferFlags : uint32_t {$/;"	c
CodeHolder	external/asmjit/src/asmjit/core/codeholder.h	/^class CodeHolder {$/;"	c	class:ExpressionOpType::ExpressionValueType::SectionFlags::CopySectionFlags::OffsetType::RelocType::LabelType
CodeHolder_addrTabName	external/asmjit/src/asmjit/core/codeholder.cpp	/^static const char CodeHolder_addrTabName[] = ".addrtab";$/;"	v	file:
CodeSegment	src/ir/compile.h	/^    explicit CodeSegment(u32 gip_base_, u32 size_)$/;"	f	struct:dbt::qir::CodeSegment
CodeSegment	src/ir/compile.h	/^struct CodeSegment {$/;"	s	namespace:dbt::qir
CodeWriter	external/asmjit/src/asmjit/core/codewriter_p.h	/^class CodeWriter {$/;"	c
CodeWriter	external/asmjit/src/asmjit/x86/x86assembler.cpp	/^    : CodeWriter(a) {}$/;"	f	class:X86BufferWriter
CodeWriterUtils	external/asmjit/src/asmjit/core/codewriter_p.h	/^namespace CodeWriterUtils {$/;"	n
CommentNode	external/asmjit/src/asmjit/core/builder.h	/^class CommentNode : public BaseNode {$/;"	c	class:NodeType::NodeFlags::SentinelType
CommonInfo	external/asmjit/src/asmjit/x86/x86instdb.h	/^struct CommonInfo {$/;"	s	class:InstDB::Mode::OpFlags::InstFlags
Compare	external/asmjit/src/asmjit/core/constpool.h	/^  class Compare {$/;"	c	class:ConstPoolScope::ConstPool
Compare	external/asmjit/src/asmjit/core/support.h	/^struct Compare {$/;"	s	class:Support::Internal::SortOrder
Compiler	external/asmjit/src/asmjit/arm/a64compiler.h	/^class ASMJIT_VIRTAPI Compiler$/;"	c
Compiler	external/asmjit/src/asmjit/x86/x86compiler.h	/^class ASMJIT_VIRTAPI Compiler$/;"	c
CompilerDoJob	src/ir/compile.cpp	/^void *CompilerDoJob(CompilerJob &job)$/;"	f	namespace:dbt::qir
CompilerGenRegionIR	src/ir/compile.cpp	/^qir::Region *CompilerGenRegionIR(MemArena *arena, CompilerJob &job)$/;"	f	namespace:dbt::qir
CompilerJob	src/ir/compile.h	/^    explicit CompilerJob(CompilerRuntime *cruntime_,$/;"	f	struct:dbt::qir::CompilerJob
CompilerJob	src/ir/compile.h	/^struct CompilerJob {$/;"	s	namespace:dbt::qir
CompilerRuntime	src/ir/compile.h	/^struct CompilerRuntime {$/;"	s	namespace:dbt
CondCode	external/asmjit/src/asmjit/core/archcommons.h	/^enum class CondCode : uint8_t {$/;"	c
CondCode	external/asmjit/src/asmjit/x86/x86globals.h	/^enum class CondCode : uint8_t {$/;"	c
CondCode	src/ir/qir.h	/^enum class CondCode : u8 {$/;"	c	namespace:dbt::qir
ConstCTZ	external/asmjit/src/asmjit/core/support.h	/^struct ConstCTZ {$/;"	s	namespace:Support::Internal
ConstPool	external/asmjit/src/asmjit/core/constpool.h	/^class ConstPool {$/;"	c	class:ConstPoolScope
ConstPoolFill	external/asmjit/src/asmjit/core/constpool.cpp	/^struct ConstPoolFill {$/;"	s	file:
ConstPoolNode	external/asmjit/src/asmjit/core/builder.h	/^class ConstPoolNode : public LabelNode {$/;"	c	class:NodeType::NodeFlags::SentinelType
ConstPoolScope	external/asmjit/src/asmjit/core/constpool.h	/^enum class ConstPoolScope : uint32_t {$/;"	c
Control	src/guest/rv32_qir.h	/^    enum class Control { NEXT, BRANCH, TB_OVF } control{Control::NEXT};$/;"	c	struct:dbt::qir::rv32::RV32Translator
CopySectionFlags	external/asmjit/src/asmjit/core/codeholder.h	/^enum class CopySectionFlags : uint32_t {$/;"	c	class:ExpressionOpType::ExpressionValueType::SectionFlags
Count	src/ir/qir.h	/^        Count,$/;"	m	class:dbt::qir::Op
Count	src/ir/qir.h	/^        Count,$/;"	m	class:dbt::qir::VOperand::Kind
Count	src/ir/qir.h	/^    Count,$/;"	m	class:dbt::qir::CondCode
Count	src/ir/qir.h	/^    Count,$/;"	m	class:dbt::qir::VType
Count	src/runtime_stubs.h	/^        Count,$/;"	m	class:dbt::RuntimeStubId
CpuFeatures	external/asmjit/src/asmjit/core/cpuinfo.h	/^class CpuFeatures {$/;"	c
CpuInfo	external/asmjit/src/asmjit/core/cpuinfo.h	/^class CpuInfo {$/;"	c
CpuRWFlags	external/asmjit/src/asmjit/core/inst.h	/^enum class CpuRWFlags : uint32_t {$/;"	c	class:InstIdParts::InstOptions::InstControlFlow::InstSameRegHint
Create	src/ir/qir.h	/^    requires std::is_base_of_v<Inst, T> T *Create(Inst::Flags flags,$/;"	f	struct:dbt::qir::Region
Create	src/ir/qir_builder.h	/^    requires std::is_base_of_v<Inst, T> Inst *Create(Args &&...args)$/;"	f	struct:dbt::qir::Builder
Create	src/runtime_stubs.cpp	/^RuntimeStubTab RuntimeStubTab::Create()$/;"	f	class:dbt::RuntimeStubTab
CreateBlock	src/ir/qir.h	/^    Block *CreateBlock()$/;"	f	struct:dbt::qir::Region
CreateBlock	src/ir/qir_builder.h	/^    Block *CreateBlock() const { return bb->GetRegion()->CreateBlock(); }$/;"	f	struct:dbt::qir::Builder
CreateParams	external/asmjit/src/asmjit/core/jitallocator.h	/^  struct CreateParams {$/;"	s	class:JitAllocatorOptions::JitAllocator
CreatePatch	src/codegen/jitabi.h	/^    P *CreatePatch(Args &&...args)$/;"	f	struct:dbt::jitabi::ppoint::BranchSlot
CreateVGPR	src/ir/qir_builder.h	/^    RegN CreateVGPR(VType type) const$/;"	f	struct:dbt::qir::Builder
Current	src/guest/rv32_cpu.h	/^    static CPUState *Current() { return tls_current; }$/;"	f	struct:dbt::dbt::CPUState
DEAD	src/codegen/regalloc.cpp	/^            DEAD,$/;"	m	class:dbt::qcg::QRegAlloc::RTrack::Location	file:
DEBUG	external/asmjit/tools/gencommons.js	/^function DEBUG(msg) {$/;"	f
DEF	src/codegen/arch_traits.cpp	108;"	d	file:
DEF	src/codegen/arch_traits.cpp	86;"	d	file:
DEFAULT_COPY	src/util/common.h	51;"	d
DEFAULT_MOVE	src/util/common.h	55;"	d
DEFINE_ENUM_CLASS_FLAGOPS	src/util/common.h	130;"	d
DReg	external/asmjit/src/asmjit/x86/x86operand.h	/^class DReg : public Reg { ASMJIT_DEFINE_FINAL_REG(DReg, Reg, RegTraits<RegType::kX86_DReg>) };$/;"	c
DS_ZAX	external/asmjit/src/asmjit/x86/x86emitter.h	/^  typedef Mem DS_ZAX; \/\/ ds:[zax]$/;"	t	struct:EmitterExplicitT
DS_ZDI	external/asmjit/src/asmjit/x86/x86emitter.h	/^  typedef Mem DS_ZDI; \/\/ ds:[zdi]$/;"	t	struct:EmitterExplicitT
DS_ZSI	external/asmjit/src/asmjit/x86/x86emitter.h	/^  typedef Mem DS_ZSI; \/\/ ds:[zsi]$/;"	t	struct:EmitterExplicitT
DUMP_TYPE	external/asmjit/test/asmjit_test_unit.cpp	149;"	d	file:
DUMP_TYPE	external/asmjit/test/asmjit_test_unit.cpp	52;"	d	file:
Data	external/asmjit/src/asmjit/core/cpuinfo.h	/^  struct Data {$/;"	s	class:CpuFeatures
DataType	external/asmjit/src/asmjit/core/archcommons.h	/^enum class DataType : uint32_t {$/;"	c	class:CondCode
DataType	external/asmjit/src/asmjit/core/radefs_p.h	/^  typedef T DataType;$/;"	t	class:RAStrategyType::RAStrategyFlags::RALiveSpan
DataType	external/asmjit/src/asmjit/core/radefs_p.h	/^  typedef typename T::DataType DataType;$/;"	t	class:RAStrategyType::RAStrategyFlags::RALiveSpans
DebugInfo	external/asmjit/src/asmjit/core/osutils.h	/^    void* DebugInfo;$/;"	m	struct:Lock::Handle
DebugUtils	external/asmjit/src/asmjit/core/globals.h	/^namespace DebugUtils {$/;"	n	class:ByteOrder::ResetPolicy
Decode	src/guest/rv32_decode.h	/^    static DType Decode(void *insn)$/;"	f	struct:dbt::rv32::insn::Decoder
DecodeParams	src/guest/rv32_decode.h	/^    struct DecodeParams : public Base {$/;"	s	struct:dbt::rv32::insn::Decoder
Decoder	src/guest/rv32_decode.h	/^struct Decoder {$/;"	s	namespace:dbt::rv32::insn
Destroy	src/arena.cpp	/^void MemArena::Destroy()$/;"	f	class:MemArena
Destroy	src/mmu.cpp	/^void mmu::Destroy()$/;"	f	class:dbt::mmu
Destroy	src/tcache.cpp	/^void tcache::Destroy()$/;"	f	class:dbt::tcache
DiagnosticOptions	external/asmjit/src/asmjit/core/emitter.h	/^enum class DiagnosticOptions : uint32_t {$/;"	c	class:AlignMode::EmitterType::EmitterFlags::EncodingOptions
DualMapping	external/asmjit/src/asmjit/core/virtmem.h	/^struct DualMapping {$/;"	s	class:VirtMem::CachePolicy::MemoryFlags
DynamicBlock	external/asmjit/src/asmjit/core/zone.h	/^  struct DynamicBlock {$/;"	s	class:ZoneAllocator
E	external/asmjit/src/asmjit/core/zonehash.cpp	156;"	d	file:
E	external/asmjit/src/asmjit/core/zonehash.cpp	158;"	d	file:
E	external/asmjit/src/asmjit/core/zonehash.cpp	162;"	d	file:
E	external/asmjit/src/asmjit/core/zonehash.cpp	164;"	d	file:
E	external/asmjit/src/asmjit/x86/x86instdb.cpp	2194;"	d	file:
E	external/asmjit/src/asmjit/x86/x86instdb.cpp	47;"	d	file:
EBREAK	src/guest/rv32_cpu.h	/^    EBREAK,$/;"	m	class:dbt::rv32::TrapCode
ECALL	src/guest/rv32_cpu.h	/^    ECALL,$/;"	m	class:dbt::rv32::TrapCode
EMPTY_MACRO	src/util/common.h	25;"	d
ENC_OPS1	external/asmjit/src/asmjit/x86/x86assembler.cpp	462;"	d	file:
ENC_OPS2	external/asmjit/src/asmjit/x86/x86assembler.cpp	465;"	d	file:
ENC_OPS3	external/asmjit/src/asmjit/x86/x86assembler.cpp	469;"	d	file:
ENC_OPS4	external/asmjit/src/asmjit/x86/x86assembler.cpp	474;"	d	file:
END	src/guest/rv32_qir.cpp	/^    END,$/;"	e	enum:dbt::qir::rv32::GlobalRegId::__anon29	file:
EQ	src/ir/qir.h	/^    EQ,$/;"	m	class:dbt::qir::CondCode
ERROR_HANDLER	external/asmjit/src/asmjit/x86/x86assembler.cpp	4968;"	d	file:
ERROR_HANDLER	external/asmjit/src/asmjit/x86/x86assembler.cpp	4989;"	d	file:
ES_ZDI	external/asmjit/src/asmjit/x86/x86emitter.h	/^  typedef Mem ES_ZDI; \/\/ es:[zdi]$/;"	t	struct:EmitterExplicitT
EXPECT	external/asmjit/test/broken.h	186;"	d
EXPECT_EQ	external/asmjit/test/broken.h	187;"	d
EXPECT_FALSE	external/asmjit/test/broken.h	194;"	d
EXPECT_GE	external/asmjit/test/broken.h	190;"	d
EXPECT_GT	external/asmjit/test/broken.h	189;"	d
EXPECT_LE	external/asmjit/test/broken.h	192;"	d
EXPECT_LT	external/asmjit/test/broken.h	191;"	d
EXPECT_NE	external/asmjit/test/broken.h	188;"	d
EXPECT_NOT_NULL	external/asmjit/test/broken.h	196;"	d
EXPECT_NULL	external/asmjit/test/broken.h	195;"	d
EXPECT_TRUE	external/asmjit/test/broken.h	193;"	d
EXT	external/asmjit/src/asmjit/x86/x86instdb.cpp	2676;"	d	file:
EXT	external/asmjit/src/asmjit/x86/x86instdb.cpp	2886;"	d	file:
EXTERNAL_DATA	mk/external.mk	/^EXTERNAL_DATA = aes nqueens mandelbrot dhrystone$/;"	m
ElfImage	src/env.cpp	/^struct env::ElfImage {$/;"	s	class:dbt::env	file:
EmbedData	external/asmjit/src/asmjit/core/builder.h	/^  struct EmbedData {$/;"	s	class:NodeType::NodeFlags::SentinelType::BaseNode
EmbedDataNode	external/asmjit/src/asmjit/core/builder.h	/^class EmbedDataNode : public BaseNode {$/;"	c	class:NodeType::NodeFlags::SentinelType
EmbedLabelDeltaNode	external/asmjit/src/asmjit/core/builder.h	/^class EmbedLabelDeltaNode : public BaseNode {$/;"	c	class:NodeType::NodeFlags::SentinelType
EmbedLabelNode	external/asmjit/src/asmjit/core/builder.h	/^class EmbedLabelNode : public BaseNode {$/;"	c	class:NodeType::NodeFlags::SentinelType
EmitArgsAssignment	external/asmjit/src/asmjit/core/emitter.h	/^    typedef Error (ASMJIT_CDECL* EmitArgsAssignment)(BaseEmitter* emitter, const FuncFrame& frame, const FuncArgsAssignment& args);$/;"	t	struct:AlignMode::EmitterType::EmitterFlags::EncodingOptions::BaseEmitter::Funcs
EmitCode	src/codegen/emit.cpp	/^std::span<u8> QEmit::EmitCode()$/;"	f	class:dbt::qcg::QEmit
EmitEpilog	external/asmjit/src/asmjit/core/emitter.h	/^    typedef Error (ASMJIT_CDECL* EmitEpilog)(BaseEmitter* emitter, const FuncFrame& frame);$/;"	t	struct:AlignMode::EmitterType::EmitterFlags::EncodingOptions::BaseEmitter::Funcs
EmitFill	src/codegen/regalloc.cpp	/^void QRegAlloc::EmitFill(RTrack *v)$/;"	f	class:dbt::qcg::QRegAlloc
EmitHelper	external/asmjit/src/asmjit/arm/a64emithelper_p.h	/^class EmitHelper : public BaseEmitHelper {$/;"	c
EmitHelper	external/asmjit/src/asmjit/x86/x86emithelper_p.h	/^class EmitHelper : public BaseEmitHelper {$/;"	c
EmitInstBinop	src/codegen/emit.cpp	/^ALWAYS_INLINE void QEmit::EmitInstBinop(qir::InstBinop *ins)$/;"	f	class:dbt::qcg::QEmit
EmitMov	src/codegen/regalloc.cpp	/^void QRegAlloc::EmitMov(qir::VOperand dst, qir::VOperand src)$/;"	f	class:dbt::qcg::QRegAlloc
EmitProlog	external/asmjit/src/asmjit/core/emitter.h	/^    typedef Error (ASMJIT_CDECL* EmitProlog)(BaseEmitter* emitter, const FuncFrame& frame);$/;"	t	struct:AlignMode::EmitterType::EmitterFlags::EncodingOptions::BaseEmitter::Funcs
EmitSpill	src/codegen/regalloc.cpp	/^void QRegAlloc::EmitSpill(RTrack *v)$/;"	f	class:dbt::qcg::QRegAlloc
Emit_add	src/codegen/emit.cpp	/^void QEmit::Emit_add(qir::InstBinop *ins)$/;"	f	class:dbt::qcg::QEmit
Emit_and	src/codegen/emit.cpp	/^void QEmit::Emit_and(qir::InstBinop *ins)$/;"	f	class:dbt::qcg::QEmit
Emit_br	src/codegen/emit.cpp	/^void QEmit::Emit_br(UNUSED qir::InstBr *ins)$/;"	f	class:dbt::qcg::QEmit
Emit_brcc	src/codegen/emit.cpp	/^void QEmit::Emit_brcc(qir::InstBrcc *ins)$/;"	f	class:dbt::qcg::QEmit
Emit_gbr	src/codegen/emit.cpp	/^void QEmit::Emit_gbr(qir::InstGBr *ins)$/;"	f	class:dbt::qcg::QEmit
Emit_gbrind	src/codegen/emit.cpp	/^void QEmit::Emit_gbrind(qir::InstGBrind *ins)$/;"	f	class:dbt::qcg::QEmit
Emit_hcall	src/codegen/emit.cpp	/^void QEmit::Emit_hcall(qir::InstHcall *ins)$/;"	f	class:dbt::qcg::QEmit
Emit_mov	src/codegen/emit.cpp	/^void QEmit::Emit_mov(qir::InstUnop *ins)$/;"	f	class:dbt::qcg::QEmit
Emit_or	src/codegen/emit.cpp	/^void QEmit::Emit_or(qir::InstBinop *ins)$/;"	f	class:dbt::qcg::QEmit
Emit_setcc	src/codegen/emit.cpp	/^void QEmit::Emit_setcc(qir::InstSetcc *ins)$/;"	f	class:dbt::qcg::QEmit
Emit_sll	src/codegen/emit.cpp	/^void QEmit::Emit_sll(qir::InstBinop *ins)$/;"	f	class:dbt::qcg::QEmit
Emit_sra	src/codegen/emit.cpp	/^void QEmit::Emit_sra(qir::InstBinop *ins)$/;"	f	class:dbt::qcg::QEmit
Emit_srl	src/codegen/emit.cpp	/^void QEmit::Emit_srl(qir::InstBinop *ins)$/;"	f	class:dbt::qcg::QEmit
Emit_sub	src/codegen/emit.cpp	/^void QEmit::Emit_sub(qir::InstBinop *ins)$/;"	f	class:dbt::qcg::QEmit
Emit_vmload	src/codegen/emit.cpp	/^void QEmit::Emit_vmload(qir::InstVMLoad *ins)$/;"	f	class:dbt::qcg::QEmit
Emit_vmstore	src/codegen/emit.cpp	/^void QEmit::Emit_vmstore(qir::InstVMStore *ins)$/;"	f	class:dbt::qcg::QEmit
Emit_xor	src/codegen/emit.cpp	/^void QEmit::Emit_xor(qir::InstBinop *ins)$/;"	f	class:dbt::qcg::QEmit
Emitter	external/asmjit/src/asmjit/arm/a64emitter.h	/^class Emitter : public BaseEmitter, public EmitterExplicitT<Emitter> {$/;"	c
Emitter	external/asmjit/src/asmjit/x86/x86emitter.h	/^class Emitter : public BaseEmitter, public EmitterImplicitT<Emitter> {$/;"	c
EmitterExplicitT	external/asmjit/src/asmjit/arm/a64emitter.h	/^struct EmitterExplicitT {$/;"	s
EmitterExplicitT	external/asmjit/src/asmjit/x86/x86emitter.h	/^struct EmitterExplicitT {$/;"	s
EmitterFlags	external/asmjit/src/asmjit/core/emitter.h	/^enum class EmitterFlags : uint8_t {$/;"	c	class:AlignMode::EmitterType
EmitterImplicitT	external/asmjit/src/asmjit/x86/x86emitter.h	/^struct EmitterImplicitT : public EmitterExplicitT<This> {$/;"	s
EmitterType	external/asmjit/src/asmjit/core/emitter.h	/^enum class EmitterType : uint8_t {$/;"	c	class:AlignMode
EmitterUtils	external/asmjit/src/asmjit/core/emitterutils.cpp	/^namespace EmitterUtils {$/;"	n	file:
EmitterUtils	external/asmjit/src/asmjit/core/emitterutils_p.h	/^namespace EmitterUtils {$/;"	n
Emitter_emitArgsAssignment	external/asmjit/src/asmjit/arm/a64emithelper.cpp	/^static Error ASMJIT_CDECL Emitter_emitArgsAssignment(BaseEmitter* emitter, const FuncFrame& frame, const FuncArgsAssignment& args) {$/;"	f	file:
Emitter_emitArgsAssignment	external/asmjit/src/asmjit/x86/x86emithelper.cpp	/^static Error ASMJIT_CDECL Emitter_emitArgsAssignment(BaseEmitter* emitter, const FuncFrame& frame, const FuncArgsAssignment& args) {$/;"	f	file:
Emitter_emitEpilog	external/asmjit/src/asmjit/arm/a64emithelper.cpp	/^static Error ASMJIT_CDECL Emitter_emitEpilog(BaseEmitter* emitter, const FuncFrame& frame) {$/;"	f	file:
Emitter_emitEpilog	external/asmjit/src/asmjit/x86/x86emithelper.cpp	/^static Error ASMJIT_CDECL Emitter_emitEpilog(BaseEmitter* emitter, const FuncFrame& frame) {$/;"	f	file:
Emitter_emitProlog	external/asmjit/src/asmjit/arm/a64emithelper.cpp	/^static Error ASMJIT_CDECL Emitter_emitProlog(BaseEmitter* emitter, const FuncFrame& frame) {$/;"	f	file:
Emitter_emitProlog	external/asmjit/src/asmjit/x86/x86emithelper.cpp	/^static Error ASMJIT_CDECL Emitter_emitProlog(BaseEmitter* emitter, const FuncFrame& frame) {$/;"	f	file:
EncodingData	external/asmjit/src/asmjit/arm/a64instdb.cpp	/^namespace EncodingData {$/;"	n	namespace:InstDB	file:
EncodingData	external/asmjit/src/asmjit/arm/a64instdb_p.h	/^namespace EncodingData {$/;"	n	namespace:InstDB
EncodingOptions	external/asmjit/src/asmjit/core/emitter.h	/^enum class EncodingOptions : uint32_t {$/;"	c	class:AlignMode::EmitterType::EmitterFlags
End	src/env.cpp	/^        End,$/;"	m	class:dbt::SyscallID	file:
Entry	external/asmjit/test/broken.h	/^typedef void (*Entry)(void);$/;"	t	namespace:BrokenAPI
Environment	external/asmjit/src/asmjit/core/environment.h	/^class Environment {$/;"	c	class:Vendor::Platform::PlatformABI
Error	external/asmjit/src/asmjit/core/globals.h	/^typedef uint32_t Error;$/;"	t	class:ByteOrder::ResetPolicy
ErrorHandler	external/asmjit/src/asmjit/core/errorhandler.h	/^class ASMJIT_VIRTAPI ErrorHandler {$/;"	c
Execute	src/env.cpp	/^int env::Execute(CPUState *state)$/;"	f	class:dbt::env
Execute	src/execute.cpp	/^void Execute(CPUState *state)$/;"	f	namespace:dbt
Expression	external/asmjit/src/asmjit/core/codeholder.h	/^struct Expression {$/;"	s	class:ExpressionOpType::ExpressionValueType
ExpressionOpType	external/asmjit/src/asmjit/core/codeholder.h	/^enum class ExpressionOpType : uint8_t {$/;"	c
ExpressionValueType	external/asmjit/src/asmjit/core/codeholder.h	/^enum class ExpressionValueType : uint8_t {$/;"	c	class:ExpressionOpType
Ext	external/asmjit/src/asmjit/core/cpuinfo.cpp	/^typedef CpuFeatures::ARM Ext;$/;"	t	namespace:arm	file:
Ext	external/asmjit/src/asmjit/core/cpuinfo.cpp	/^typedef CpuFeatures::X86 Ext;$/;"	t	namespace:x86	file:
F	external/asmjit/src/asmjit/arm/a64instdb.cpp	30;"	d	file:
F	external/asmjit/src/asmjit/arm/a64instdb.cpp	828;"	d	file:
F	external/asmjit/src/asmjit/x86/x86instdb.cpp	2202;"	d	file:
F	external/asmjit/src/asmjit/x86/x86instdb.cpp	2667;"	d	file:
F	external/asmjit/src/asmjit/x86/x86instdb.cpp	5324;"	d	file:
F	external/asmjit/src/asmjit/x86/x86instdb.cpp	5500;"	d	file:
FAIL	external/asmjit/db/aarch64.js	/^function FAIL(msg) { throw new Error("[AArch64] " + msg); }$/;"	f
FAIL	external/asmjit/db/arm.js	/^function FAIL(msg) { throw new Error("[AArch32] " + msg); }$/;"	f
FAIL	external/asmjit/db/base.js	/^function FAIL(msg) { throw new Error("[BASE] " + msg); }$/;"	f
FAIL	external/asmjit/db/x86.js	/^function FAIL(msg) { throw new Error("[X86] " + msg); }$/;"	f
FAIL_INSTRUCTION	external/asmjit/test/asmjit_test_assembler_x86.cpp	22;"	d	file:
FAIL_INSTRUCTION	external/asmjit/test/asmjit_test_assembler_x86.cpp	8548;"	d	file:
FATAL	external/asmjit/tools/gencommons.js	/^function FATAL(msg) {$/;"	f
FIXUP_GPB	external/asmjit/src/asmjit/x86/x86assembler.cpp	450;"	d	file:
FLAG	external/asmjit/src/asmjit/x86/x86instdb.cpp	2888;"	d	file:
FLAG	external/asmjit/src/asmjit/x86/x86instdb.cpp	2926;"	d	file:
FLAG	external/asmjit/src/asmjit/x86/x86instdb.cpp	2928;"	d	file:
FLAG	external/asmjit/src/asmjit/x86/x86instdb.cpp	2933;"	d	file:
FSimdGeneric	external/asmjit/src/asmjit/arm/a64instdb_p.h	/^struct FSimdGeneric {$/;"	s	namespace:InstDB::EncodingData
FSimdPair	external/asmjit/src/asmjit/arm/a64instdb_p.h	/^struct FSimdPair {$/;"	s	namespace:InstDB::EncodingData
FSimdSV	external/asmjit/src/asmjit/arm/a64instdb_p.h	/^struct FSimdSV {$/;"	s	namespace:InstDB::EncodingData
FSimdVV	external/asmjit/src/asmjit/arm/a64instdb_p.h	/^typedef FSimdGeneric FSimdVV;$/;"	t	namespace:InstDB::EncodingData
FSimdVVV	external/asmjit/src/asmjit/arm/a64instdb_p.h	/^typedef FSimdGeneric FSimdVVV;$/;"	t	namespace:InstDB::EncodingData
FSimdVVVV	external/asmjit/src/asmjit/arm/a64instdb_p.h	/^typedef FSimdGeneric FSimdVVVV;$/;"	t	namespace:InstDB::EncodingData
FSimdVVVe	external/asmjit/src/asmjit/arm/a64instdb_p.h	/^struct FSimdVVVe {$/;"	s	namespace:InstDB::EncodingData
FV	external/asmjit/tools/tablegen-x86.js	/^      "FV"   : "ByLL",$/;"	p	class:const
FV	external/asmjit/tools/tablegen-x86.js	/^      "FV": "4",$/;"	p	class:const
FVM	external/asmjit/tools/tablegen-x86.js	/^      "FVM"  : "ByLL",$/;"	p	class:const
FVM	external/asmjit/tools/tablegen-x86.js	/^      "FVM": "4",$/;"	p	class:const
Failure	external/asmjit/test/broken.h	/^class Failure {$/;"	c	namespace:BrokenAPI
FastUInt8	external/asmjit/src/asmjit/core/support.h	/^typedef uint8_t FastUInt8;$/;"	t	namespace:Support
FastUInt8	external/asmjit/src/asmjit/x86/x86assembler.cpp	/^typedef Support::FastUInt8 FastUInt8;$/;"	t	file:
FileLogger	external/asmjit/src/asmjit/core/logger.h	/^class ASMJIT_VIRTAPI FileLogger : public Logger {$/;"	c
Fill	src/codegen/regalloc.cpp	/^void QRegAlloc::Fill(RTrack *v, RegMask desire, RegMask avoid)$/;"	f	class:dbt::qcg::QRegAlloc
FixedString	external/asmjit/src/asmjit/core/string.h	/^union FixedString {$/;"	u	class:StringFormatFlags
FlagV	src/ir/qir.h	/^    bool FlagV() const { return f_is_virtual::decode(value); }$/;"	f	struct:dbt::qir::VOperand
Flags	external/asmjit/src/asmjit/core/jitallocator.h	/^    enum class Flags : uint32_t {$/;"	c	class:JitAllocatorOptions::JitAllocator::Span
Flags	src/guest/rv32_insn.h	/^namespace Flags$/;"	n	namespace:dbt::rv32::insn
Float32	external/asmjit/src/asmjit/core/type.h	/^struct Float32 {};$/;"	s	namespace:TypeId::Type
Float64	external/asmjit/src/asmjit/core/type.h	/^struct Float64 {};$/;"	s	namespace:TypeId::Type
FolderVisitor	src/ir/qir_opt.cpp	/^    FolderVisitor(Block *bb_, Inst *ins_) : qb(bb_, ins_->getIter()) {}$/;"	f	struct:dbt::qir::FolderVisitor
FolderVisitor	src/ir/qir_opt.cpp	/^struct FolderVisitor : qir::InstVisitor<FolderVisitor, bool> {$/;"	s	namespace:dbt::qir	file:
ForEachBitOp	external/asmjit/src/asmjit/core/zonevector.h	/^  class ForEachBitOp : public Support::BitVectorOpIterator<BitWord, Operator> {$/;"	c	class:ZoneBitVector
ForEachBitSet	external/asmjit/src/asmjit/core/zonevector.h	/^  class ForEachBitSet : public Support::BitVectorIterator<BitWord> {$/;"	c	class:ZoneBitVector
FormatFlags	external/asmjit/src/asmjit/core/formatter.h	/^enum class FormatFlags : uint32_t {$/;"	c
FormatIndentationGroup	external/asmjit/src/asmjit/core/formatter.h	/^enum class FormatIndentationGroup : uint32_t {$/;"	c	class:FormatFlags
FormatOptions	external/asmjit/src/asmjit/core/formatter.h	/^class FormatOptions {$/;"	c	class:FormatFlags::FormatIndentationGroup::FormatPaddingGroup
FormatPaddingGroup	external/asmjit/src/asmjit/core/formatter.h	/^enum class FormatPaddingGroup : uint32_t {$/;"	c	class:FormatFlags::FormatIndentationGroup
Formatter	external/asmjit/src/asmjit/core/formatter.cpp	/^namespace Formatter {$/;"	n	file:
Formatter	external/asmjit/src/asmjit/core/formatter.h	/^namespace Formatter {$/;"	n	class:FormatFlags::FormatIndentationGroup::FormatPaddingGroup
Formatter	external/asmjit/src/asmjit/core/formatter_p.h	/^namespace Formatter {$/;"	n
FormatterInternal	external/asmjit/src/asmjit/arm/a64formatter_p.h	/^namespace FormatterInternal {$/;"	n
FormatterInternal	external/asmjit/src/asmjit/arm/armformatter_p.h	/^namespace FormatterInternal {$/;"	n
FormatterInternal	external/asmjit/src/asmjit/x86/x86formatter_p.h	/^namespace FormatterInternal {$/;"	n
ForwardOp	external/asmjit/src/asmjit/core/operand.h	/^struct ForwardOp : public ForwardOpImpl<T, Imm::IsConvertibleToImmType<typename std::decay<T>::type>::value> {};$/;"	s	namespace:OperandType::RegType::RegGroup::ImmType::Support
ForwardOpImpl	external/asmjit/src/asmjit/core/operand.h	/^struct ForwardOpImpl {$/;"	s	namespace:OperandType::RegType::RegGroup::ImmType::Support
ForwardOpImpl	external/asmjit/src/asmjit/core/operand.h	/^struct ForwardOpImpl<T, true> {$/;"	s	namespace:OperandType::RegType::RegGroup::ImmType::Support
FpuControlWord	external/asmjit/src/asmjit/x86/x86globals.h	/^enum class FpuControlWord : uint16_t {$/;"	c	class:CondCode::FpuStatusWord
FpuStatusWord	external/asmjit/src/asmjit/x86/x86globals.h	/^enum class FpuStatusWord : uint16_t {$/;"	c	class:CondCode
FrameDestroy	src/codegen/emit.cpp	/^void QEmit::FrameDestroy()$/;"	f	class:dbt::qcg::QEmit
FrameSetup	src/codegen/emit.cpp	/^void QEmit::FrameSetup()$/;"	f	class:dbt::qcg::QEmit
FromCallPtrRetaddr	src/codegen/jitabi.h	/^    static BranchSlot *FromCallPtrRetaddr(void *ra)$/;"	f	struct:dbt::jitabi::ppoint::BranchSlot
FromCallRuntimeStubRetaddr	src/codegen/jitabi.h	/^    static BranchSlot *FromCallRuntimeStubRetaddr(void *ra)$/;"	f	struct:dbt::jitabi::ppoint::BranchSlot
FuncArgsAssignment	external/asmjit/src/asmjit/core/func.h	/^class FuncArgsAssignment {$/;"	c	class:CallConvId::CallConvStrategy::CallConvFlags::FuncAttributes
FuncArgsContext	external/asmjit/src/asmjit/core/funcargscontext_p.h	/^class FuncArgsContext {$/;"	c
FuncAttributes	external/asmjit/src/asmjit/core/func.h	/^enum class FuncAttributes : uint32_t {$/;"	c	class:CallConvId::CallConvStrategy::CallConvFlags
FuncDetail	external/asmjit/src/asmjit/core/func.h	/^class FuncDetail {$/;"	c	class:CallConvId::CallConvStrategy::CallConvFlags::FuncAttributes
FuncFrame	external/asmjit/src/asmjit/core/func.h	/^class FuncFrame {$/;"	c	class:CallConvId::CallConvStrategy::CallConvFlags::FuncAttributes
FuncInternal	external/asmjit/src/asmjit/arm/a64func.cpp	/^namespace FuncInternal {$/;"	n	file:
FuncInternal	external/asmjit/src/asmjit/arm/a64func_p.h	/^namespace FuncInternal {$/;"	n
FuncInternal	external/asmjit/src/asmjit/x86/x86func.cpp	/^namespace FuncInternal {$/;"	n	file:
FuncInternal	external/asmjit/src/asmjit/x86/x86func_p.h	/^namespace FuncInternal {$/;"	n
FuncNode	external/asmjit/src/asmjit/core/compiler.h	/^class FuncNode : public LabelNode {$/;"	c
FuncPass	external/asmjit/src/asmjit/core/compiler.h	/^class ASMJIT_VIRTAPI FuncPass : public Pass {$/;"	c
FuncRetNode	external/asmjit/src/asmjit/core/compiler.h	/^class FuncRetNode : public InstNode {$/;"	c
FuncSignature	external/asmjit/src/asmjit/core/func.h	/^struct FuncSignature {$/;"	s	class:CallConvId::CallConvStrategy::CallConvFlags
FuncSignatureBuilder	external/asmjit/src/asmjit/core/func.h	/^class FuncSignatureBuilder : public FuncSignature {$/;"	c	class:CallConvId::CallConvStrategy::CallConvFlags
FuncSignatureT	external/asmjit/src/asmjit/core/func.h	/^class FuncSignatureT : public FuncSignature {$/;"	c	class:CallConvId::CallConvStrategy::CallConvFlags
FuncValue	external/asmjit/src/asmjit/core/func.h	/^struct FuncValue {$/;"	s	class:CallConvId::CallConvStrategy::CallConvFlags
FuncValuePack	external/asmjit/src/asmjit/core/func.h	/^struct FuncValuePack {$/;"	s	class:CallConvId::CallConvStrategy::CallConvFlags
Funcs	external/asmjit/src/asmjit/core/emitter.h	/^  struct Funcs {$/;"	s	class:AlignMode::EmitterType::EmitterFlags::EncodingOptions::BaseEmitter
GE	src/ir/qir.h	/^    GE,$/;"	m	class:dbt::qir::CondCode
GET_GIP	src/guest/rv32_interp.cpp	16;"	d	file:
GEU	src/ir/qir.h	/^    GEU,$/;"	m	class:dbt::qir::CondCode
GPR	src/codegen/arch_traits.cpp	106;"	d	file:
GPR	src/codegen/arch_traits.cpp	84;"	d	file:
GPR	src/ir/qir.h	/^        GPR,$/;"	m	class:dbt::qir::VOperand::Kind
GPR_CALL_CLOBBER	src/codegen/arch_traits.h	/^static constexpr RegMask GPR_CALL_CLOBBER = RegMask(0)$/;"	m	namespace:dbt::qcg::ArchTraits
GPR_CALL_SAVED	src/codegen/arch_traits.h	/^static constexpr RegMask GPR_CALL_SAVED = GPR_ALL & ~GPR_CALL_CLOBBER;$/;"	m	namespace:dbt::qcg::ArchTraits
GPR_END	src/guest/rv32_qir.cpp	/^    GPR_END = 31,$/;"	e	enum:dbt::qir::rv32::GlobalRegId::__anon29	file:
GPR_FIXED	src/codegen/arch_traits.h	/^static constexpr RegMask GPR_FIXED = RegMask(0) QMC_FIXED_REGS;$/;"	m	namespace:dbt::qcg::ArchTraits
GPR_NUM	src/codegen/arch_traits.h	/^static constexpr u8 GPR_NUM = 16;$/;"	m	namespace:dbt::qcg::ArchTraits
GPR_POOL	src/codegen/arch_traits.h	/^static constexpr RegMask GPR_POOL = GPR_ALL & ~GPR_FIXED;$/;"	m	namespace:dbt::qcg::ArchTraits
GPR_START	src/guest/rv32_qir.cpp	/^    GPR_START = 0,$/;"	e	enum:dbt::qir::rv32::GlobalRegId::__anon29	file:
GT	src/ir/qir.h	/^    GT,$/;"	m	class:dbt::qir::CondCode
GTU	src/ir/qir.h	/^    GTU,$/;"	m	class:dbt::qir::CondCode
GUEST_RUNTIME_STUBS	src/guest/rv32_stubs.h	3;"	d
Gap	external/asmjit/src/asmjit/core/constpool.h	/^  struct Gap {$/;"	s	class:ConstPoolScope::ConstPool
GenerateCode	src/codegen/qcg.cpp	/^std::span<u8> GenerateCode(CompilerRuntime *cruntime,$/;"	f	namespace:dbt::qcg
Get	src/ir/marker.h	/^    S Get(N *n)$/;"	f	struct:dbt::qir::Marker
GetAccess	external/asmjit/tools/tablegen-x86.js	/^    function GetAccess(dbInst) {$/;"	f
GetArena	src/ir/qir.h	/^    MemArena *GetArena() { return arena; }$/;"	f	struct:dbt::qir::Region
GetBlock	src/ir/qir_builder.h	/^    Block *GetBlock() const { return bb; }$/;"	f	struct:dbt::qir::Builder
GetBlocks	src/ir/qir.h	/^    auto &GetBlocks() { return blist; }$/;"	f	struct:dbt::qir::Region
GetCompilationIPRange	src/execute.cpp	/^static inline IpRange GetCompilationIPRange(u32 ip)$/;"	f	namespace:dbt
GetConst	src/ir/qir.h	/^    u32 GetConst() const$/;"	f	struct:dbt::qir::VOperand
GetGlobal	src/runtime_stubs.h	/^    static RuntimeStubTab const *GetGlobal() { return &g_tab; }$/;"	f	struct:dbt::RuntimeStubTab
GetGlobalInfo	src/ir/qir.h	/^    StateReg const *GetGlobalInfo(RegN idx) const$/;"	f	struct:dbt::qir::VRegsInfo
GetId	src/ir/qir.h	/^    u32 GetId() const { return id; }$/;"	f	struct:dbt::qir::Block
GetIterator	src/ir/qir_builder.h	/^    auto GetIterator() const { return it; }$/;"	f	struct:dbt::qir::Builder
GetKind	src/ir/qir.h	/^    Kind GetKind() const { return static_cast<Kind>(f_kind::decode(value)); }$/;"	f	struct:dbt::qir::VOperand
GetLocalType	src/ir/qir.h	/^    VType GetLocalType(RegN idx) const$/;"	f	struct:dbt::qir::VRegsInfo
GetNumBlocks	src/ir/qir.h	/^    u32 GetNumBlocks() const { return bb_id_counter; }$/;"	f	struct:dbt::qir::Region
GetOpFlags	src/ir/qir.h	/^inline Inst::Flags GetOpFlags(Op op)$/;"	f	namespace:dbt::qir
GetOpInfo	src/ir/qir.h	/^inline OpInfo const &GetOpInfo(qir::Op op)$/;"	f	namespace:dbt::qir
GetPGPR	src/ir/qir.h	/^    RegN GetPGPR() const$/;"	f	struct:dbt::qir::VOperand
GetPreds	src/ir/qir.h	/^    auto &GetPreds() { return preds; }$/;"	f	struct:dbt::qir::Block
GetRegion	src/ir/qir.h	/^    Region *GetRegion() const { return rn; }$/;"	f	struct:dbt::qir::Block
GetSlotOffs	src/ir/qir.h	/^    u16 GetSlotOffs() const$/;"	f	struct:dbt::qir::VOperand
GetStateInfo	src/guest/rv32_qir.cpp	/^StateInfo const *RV32Translator::GetStateInfo()$/;"	f	class:dbt::qir::rv32::RV32Translator
GetStateReg	src/ir/qir.h	/^    StateReg const *GetStateReg(RegN idx) const$/;"	f	struct:dbt::qir::StateInfo
GetSuccs	src/ir/qir.h	/^    auto &GetSuccs() { return succs; }$/;"	f	struct:dbt::qir::Block
GetType	src/ir/qir.h	/^    VType GetType() const { return static_cast<VType>(f_type::decode(value)); }$/;"	f	struct:dbt::qir::VOperand
GetVGPR	src/ir/qir.h	/^    RegN GetVGPR() const$/;"	f	struct:dbt::qir::VOperand
GetVRegsInfo	src/ir/qir.h	/^    VRegsInfo *GetVRegsInfo() { return &vregs_info; }$/;"	f	struct:dbt::qir::Region
GlobalConstPoolPass	external/asmjit/src/asmjit/core/compiler.cpp	/^class GlobalConstPoolPass : public Pass {$/;"	c	file:
GlobalRegId	src/guest/rv32_qir.cpp	/^namespace GlobalRegId$/;"	n	namespace:dbt::qir::rv32	file:
Globals	external/asmjit/src/asmjit/core/globals.h	/^namespace Globals {$/;"	n	class:ByteOrder::ResetPolicy
Globals	external/asmjit/src/asmjit/core/operand.h	/^namespace Globals {$/;"	n	class:OperandType::RegType::RegGroup::ImmType
Gp	external/asmjit/src/asmjit/arm/armoperand.h	/^class Gp : public Reg {$/;"	c
Gp	external/asmjit/src/asmjit/x86/x86operand.h	/^class Gp : public Reg {$/;"	c
GpW	external/asmjit/src/asmjit/arm/armoperand.h	/^class GpW : public Gp { ASMJIT_DEFINE_FINAL_REG(GpW, Gp, RegTraits<RegType::kARM_GpW>) };$/;"	c
GpX	external/asmjit/src/asmjit/arm/armoperand.h	/^class GpX : public Gp { ASMJIT_DEFINE_FINAL_REG(GpX, Gp, RegTraits<RegType::kARM_GpX>) };$/;"	c
Gp_AH	external/asmjit/src/asmjit/x86/x86emitter.h	/^  typedef Gp Gp_AH;$/;"	t	struct:EmitterExplicitT
Gp_AL	external/asmjit/src/asmjit/x86/x86emitter.h	/^  typedef Gp Gp_AL;$/;"	t	struct:EmitterExplicitT
Gp_AX	external/asmjit/src/asmjit/x86/x86emitter.h	/^  typedef Gp Gp_AX;$/;"	t	struct:EmitterExplicitT
Gp_CL	external/asmjit/src/asmjit/x86/x86emitter.h	/^  typedef Gp Gp_CL;$/;"	t	struct:EmitterExplicitT
Gp_DX	external/asmjit/src/asmjit/x86/x86emitter.h	/^  typedef Gp Gp_DX;$/;"	t	struct:EmitterExplicitT
Gp_EAX	external/asmjit/src/asmjit/x86/x86emitter.h	/^  typedef Gp Gp_EAX;$/;"	t	struct:EmitterExplicitT
Gp_EBX	external/asmjit/src/asmjit/x86/x86emitter.h	/^  typedef Gp Gp_EBX;$/;"	t	struct:EmitterExplicitT
Gp_ECX	external/asmjit/src/asmjit/x86/x86emitter.h	/^  typedef Gp Gp_ECX;$/;"	t	struct:EmitterExplicitT
Gp_EDX	external/asmjit/src/asmjit/x86/x86emitter.h	/^  typedef Gp Gp_EDX;$/;"	t	struct:EmitterExplicitT
Gp_RAX	external/asmjit/src/asmjit/x86/x86emitter.h	/^  typedef Gp Gp_RAX;$/;"	t	struct:EmitterExplicitT
Gp_RBX	external/asmjit/src/asmjit/x86/x86emitter.h	/^  typedef Gp Gp_RBX;$/;"	t	struct:EmitterExplicitT
Gp_RCX	external/asmjit/src/asmjit/x86/x86emitter.h	/^  typedef Gp Gp_RCX;$/;"	t	struct:EmitterExplicitT
Gp_RDX	external/asmjit/src/asmjit/x86/x86emitter.h	/^  typedef Gp Gp_RDX;$/;"	t	struct:EmitterExplicitT
Gp_ZAX	external/asmjit/src/asmjit/x86/x86emitter.h	/^  typedef Gp Gp_ZAX;$/;"	t	struct:EmitterExplicitT
Gp_ZBX	external/asmjit/src/asmjit/x86/x86emitter.h	/^  typedef Gp Gp_ZBX;$/;"	t	struct:EmitterExplicitT
Gp_ZCX	external/asmjit/src/asmjit/x86/x86emitter.h	/^  typedef Gp Gp_ZCX;$/;"	t	struct:EmitterExplicitT
Gp_ZDX	external/asmjit/src/asmjit/x86/x86emitter.h	/^  typedef Gp Gp_ZDX;$/;"	t	struct:EmitterExplicitT
Gpb	external/asmjit/src/asmjit/x86/x86operand.h	/^class Gpb : public Gp { ASMJIT_DEFINE_ABSTRACT_REG(Gpb, Gp) };$/;"	c
GpbHi	external/asmjit/src/asmjit/x86/x86operand.h	/^class GpbHi : public Gpb { ASMJIT_DEFINE_FINAL_REG(GpbHi, Gpb, RegTraits<RegType::kX86_GpbHi>) };$/;"	c
GpbLo	external/asmjit/src/asmjit/x86/x86operand.h	/^class GpbLo : public Gpb { ASMJIT_DEFINE_FINAL_REG(GpbLo, Gpb, RegTraits<RegType::kX86_GpbLo>) };$/;"	c
Gpd	external/asmjit/src/asmjit/x86/x86operand.h	/^class Gpd : public Gp { ASMJIT_DEFINE_FINAL_REG(Gpd, Gp, RegTraits<RegType::kX86_Gpd>) };$/;"	c
Gpq	external/asmjit/src/asmjit/x86/x86operand.h	/^class Gpq : public Gp { ASMJIT_DEFINE_FINAL_REG(Gpq, Gp, RegTraits<RegType::kX86_Gpq>) };$/;"	c
Gpw	external/asmjit/src/asmjit/x86/x86operand.h	/^class Gpw : public Gp { ASMJIT_DEFINE_FINAL_REG(Gpw, Gp, RegTraits<RegType::kX86_Gpw>) };$/;"	c
GroupData	external/asmjit/src/asmjit/arm/a64emithelper.cpp	/^  struct GroupData {$/;"	s	struct:PrologEpilogInfo	file:
HANDLE	src/env.cpp	486;"	d	file:
HANDLE	src/env.cpp	518;"	d	file:
HANDLER	src/guest/rv32_interp.cpp	/^HANDLER(auipc)$/;"	f	namespace:dbt::rv32
HANDLER	src/guest/rv32_interp.cpp	/^HANDLER(ebreak)$/;"	f	namespace:dbt::rv32
HANDLER	src/guest/rv32_interp.cpp	/^HANDLER(ecall)$/;"	f	namespace:dbt::rv32
HANDLER	src/guest/rv32_interp.cpp	/^HANDLER(fence) {}$/;"	f	namespace:dbt::rv32
HANDLER	src/guest/rv32_interp.cpp	/^HANDLER(fencei) {}$/;"	f	namespace:dbt::rv32
HANDLER	src/guest/rv32_interp.cpp	/^HANDLER(illegal)$/;"	f	namespace:dbt::rv32
HANDLER	src/guest/rv32_interp.cpp	/^HANDLER(jal)$/;"	f	namespace:dbt::rv32
HANDLER	src/guest/rv32_interp.cpp	/^HANDLER(jalr)$/;"	f	namespace:dbt::rv32
HANDLER	src/guest/rv32_interp.cpp	/^HANDLER(lui)$/;"	f	namespace:dbt::rv32
HANDLER	src/guest/rv32_interp.cpp	/^HANDLER(sll)$/;"	f	namespace:dbt::rv32
HANDLER	src/guest/rv32_interp.cpp	/^HANDLER(slli)$/;"	f	namespace:dbt::rv32
HANDLER	src/guest/rv32_interp.cpp	/^HANDLER(sra)$/;"	f	namespace:dbt::rv32
HANDLER	src/guest/rv32_interp.cpp	/^HANDLER(srai)$/;"	f	namespace:dbt::rv32
HANDLER	src/guest/rv32_interp.cpp	/^HANDLER(srl)$/;"	f	namespace:dbt::rv32
HANDLER	src/guest/rv32_interp.cpp	/^HANDLER(srli)$/;"	f	namespace:dbt::rv32
HANDLER	src/guest/rv32_interp.cpp	25;"	d	file:
HANDLER_ArithmRI	src/guest/rv32_interp.cpp	87;"	d	file:
HANDLER_ArithmRR	src/guest/rv32_interp.cpp	82;"	d	file:
HANDLER_Branch	src/guest/rv32_interp.cpp	58;"	d	file:
HANDLER_Load	src/guest/rv32_interp.cpp	70;"	d	file:
HANDLER_Store	src/guest/rv32_interp.cpp	76;"	d	file:
HANDLER_Unimpl	src/guest/rv32_interp.cpp	89;"	d	file:
HANDLE_SKIP	src/env.cpp	489;"	d	file:
HANDLE_SKIP	src/env.cpp	519;"	d	file:
HELPER	src/codegen/jitabi.cpp	13;"	d	file:
HELPER_ASM	src/codegen/jitabi.cpp	14;"	d	file:
HV	external/asmjit/tools/tablegen-x86.js	/^      "HV"   : "ByLL",$/;"	p	class:const
HV	external/asmjit/tools/tablegen-x86.js	/^      "HV": "3",$/;"	p	class:const
HVM	external/asmjit/tools/tablegen-x86.js	/^      "HVM"  : "ByLL",$/;"	p	class:const
HVM	external/asmjit/tools/tablegen-x86.js	/^      "HVM": "3",$/;"	p	class:const
HWCapMapping	external/asmjit/src/asmjit/core/cpuinfo.cpp	/^struct HWCapMapping {$/;"	s	class:arm::AppleFamilyId	file:
Handle	external/asmjit/src/asmjit/core/osutils.h	/^  struct ASMJIT_MAY_ALIAS Handle {$/;"	s	class:Lock
HandleSpecialPath	src/env.cpp	/^static int HandleSpecialPath(char const *path, char *resolved)$/;"	f	namespace:dbt
HandleTrap	src/execute.cpp	/^static inline bool HandleTrap(CPUState *state)$/;"	f	namespace:dbt
HardenedRuntimeFlags	external/asmjit/src/asmjit/core/virtmem.h	/^enum class HardenedRuntimeFlags : uint32_t {$/;"	c	class:VirtMem::CachePolicy::MemoryFlags
HardenedRuntimeInfo	external/asmjit/src/asmjit/core/virtmem.h	/^struct HardenedRuntimeInfo {$/;"	s	class:VirtMem::CachePolicy::MemoryFlags::HardenedRuntimeFlags
HasOpcode	src/ir/qir.h	/^    static bool HasOpcode(Op opcode)$/;"	f	struct:dbt::qir::InstBinop
HasOpcode	src/ir/qir.h	/^    static bool HasOpcode(Op opcode)$/;"	f	struct:dbt::qir::InstUnop
HashPrime	external/asmjit/src/asmjit/core/zonehash.cpp	/^struct HashPrime {$/;"	s	file:
I	external/asmjit/src/asmjit/x86/x86assembler.cpp	/^    I = (X >> 5) & 0x1F,$/;"	m	struct:X86MemInfo_T	typeref:enum:X86MemInfo_T::	file:
I	external/asmjit/src/asmjit/x86/x86assembler.cpp	/^    I = X & 0x7,$/;"	e	enum:X86Mod16BaseIndexTable_T::__anon4	file:
I	src/guest/rv32_insn.h	/^struct I : public Base {$/;"	s	namespace:dbt::rv32::insn
I16	src/ir/qir.h	/^    I16,$/;"	m	class:dbt::qir::VType
I32	src/ir/qir.h	/^    I32,$/;"	m	class:dbt::qir::VType
I8	src/ir/qir.h	/^    I8,$/;"	m	class:dbt::qir::VType
ILLEGAL_INSN	src/guest/rv32_cpu.h	/^    ILLEGAL_INSN,$/;"	m	class:dbt::rv32::TrapCode
IList	src/util/ilist.h	/^struct IList : IListBase {$/;"	s	namespace:dbt
IListBase	src/util/ilist.h	/^struct IListBase {$/;"	s	namespace:dbt
IListIterator	src/util/ilist.h	/^    IListIterator(IListNode<T> &n) : pos(&n) {}$/;"	f	struct:dbt::IListIterator
IListIterator	src/util/ilist.h	/^    IListIterator(T *n) : pos(n) {}$/;"	f	struct:dbt::IListIterator
IListIterator	src/util/ilist.h	/^struct IListIterator {$/;"	s	namespace:dbt
IListNode	src/ir/qir.h	/^struct alignas(alignof(VOperand)) Inst : IListNode<Inst>,$/;"	m	namespace:dbt::qir
IListNode	src/util/ilist.h	/^struct IListNode : IListNodeBase {$/;"	s	namespace:dbt
IListNodeBase	src/util/ilist.h	/^struct IListNodeBase {$/;"	s	namespace:dbt
IListSentinel	src/util/ilist.h	/^    IListSentinel() : IListNode<T>() { reset(); }$/;"	f	struct:dbt::IListSentinel
IListSentinel	src/util/ilist.h	/^struct IListSentinel : IListNode<T> {$/;"	s	namespace:dbt
IMM	src/codegen/arch_traits.cpp	107;"	d	file:
IMM	src/codegen/arch_traits.cpp	85;"	d	file:
INFO	external/asmjit/test/broken.h	180;"	d
INSN_FIELD	src/guest/rv32_insn.h	21;"	d
INSN_FIELD_SC	src/guest/rv32_insn.h	23;"	d
INST	external/asmjit/src/asmjit/arm/a64instdb.cpp	22;"	d	file:
INST	external/asmjit/src/asmjit/arm/a64instdb.cpp	829;"	d	file:
INST	external/asmjit/src/asmjit/x86/x86instdb.cpp	1792;"	d	file:
INST	external/asmjit/src/asmjit/x86/x86instdb.cpp	51;"	d	file:
IP	src/guest/rv32_qir.cpp	/^    IP = GPR_END,$/;"	e	enum:dbt::qir::rv32::GlobalRegId::__anon29	file:
IS	src/guest/rv32_insn.h	/^struct IS : public Base {  \/\/ imm shifts$/;"	s	namespace:dbt::rv32::insn
ISimdPair	external/asmjit/src/asmjit/arm/a64instdb_p.h	/^struct ISimdPair {$/;"	s	namespace:InstDB::EncodingData
ISimdSV	external/asmjit/src/asmjit/arm/a64instdb_p.h	/^struct ISimdSV {$/;"	s	namespace:InstDB::EncodingData
ISimdVV	external/asmjit/src/asmjit/arm/a64instdb_p.h	/^struct ISimdVV {$/;"	s	namespace:InstDB::EncodingData
ISimdVVV	external/asmjit/src/asmjit/arm/a64instdb_p.h	/^struct ISimdVVV {$/;"	s	namespace:InstDB::EncodingData
ISimdVVVI	external/asmjit/src/asmjit/arm/a64instdb_p.h	/^struct ISimdVVVI {$/;"	s	namespace:InstDB::EncodingData
ISimdVVVV	external/asmjit/src/asmjit/arm/a64instdb_p.h	/^struct ISimdVVVV {$/;"	s	namespace:InstDB::EncodingData
ISimdVVVVx	external/asmjit/src/asmjit/arm/a64instdb_p.h	/^struct ISimdVVVVx {$/;"	s	namespace:InstDB::EncodingData
ISimdVVVe	external/asmjit/src/asmjit/arm/a64instdb_p.h	/^struct ISimdVVVe {$/;"	s	namespace:InstDB::EncodingData
ISimdVVVx	external/asmjit/src/asmjit/arm/a64instdb_p.h	/^struct ISimdVVVx {$/;"	s	namespace:InstDB::EncodingData
ISimdVVx	external/asmjit/src/asmjit/arm/a64instdb_p.h	/^struct ISimdVVx {$/;"	s	namespace:InstDB::EncodingData
ISimdWWV	external/asmjit/src/asmjit/arm/a64instdb_p.h	/^struct ISimdWWV {$/;"	s	namespace:InstDB::EncodingData
Imm	external/asmjit/db/exp.js	/^  Imm: Imm,$/;"	p	class:$scope
Imm	external/asmjit/db/exp.js	/^function Imm(imm) { return new ImmNode(imm); }$/;"	f
Imm	external/asmjit/src/asmjit/core/operand.h	/^class Imm : public Operand {$/;"	c	class:OperandType::RegType::RegGroup::ImmType
ImmBits	external/asmjit/src/asmjit/x86/x86formatter.cpp	/^struct ImmBits {$/;"	s	file:
ImmConv	external/asmjit/src/asmjit/core/support.h	/^  struct ImmConv {$/;"	s	namespace:Support::Internal::Internal
ImmConv	external/asmjit/src/asmjit/core/support.h	/^  struct ImmConv<T, true> {$/;"	s	namespace:Support::Internal::Internal
ImmType	external/asmjit/src/asmjit/core/operand.h	/^enum class ImmType : uint32_t {$/;"	c	class:OperandType::RegType::RegGroup
Impl	external/asmjit/src/asmjit/core/jitallocator.h	/^  struct Impl {$/;"	s	class:JitAllocatorOptions::JitAllocator
In	external/asmjit/src/asmjit/core/rapass.cpp	/^  struct In {$/;"	s	namespace:LiveOps	file:
InArena	src/arena.h	/^struct InArena {$/;"	s
InSegment	src/ir/compile.h	/^    bool InSegment(u32 gip) const { return (gip - gip_base) < size; }$/;"	f	struct:dbt::qir::CodeSegment
IndentedStdoutLogger	external/asmjit/test/asmjit_test_compiler.cpp	/^class IndentedStdoutLogger : public Logger {$/;"	c	file:
IndexedArray_keyOf	external/asmjit/tools/tablegen.js	/^function IndexedArray_keyOf(item) {$/;"	f
Info	external/asmjit/src/asmjit/core/virtmem.h	/^struct Info {$/;"	s	class:VirtMem::CachePolicy
Init	src/arena.cpp	/^void MemArena::Init(size_t size, int prot)$/;"	f	class:MemArena
Init	src/mmu.cpp	/^void mmu::Init()$/;"	f	class:dbt::mmu
Init	src/tcache.cpp	/^void tcache::Init()$/;"	f	class:dbt::tcache
InitArgVectors	src/env.cpp	/^void env::InitArgVectors(ElfImage *elf, int argv_n, char **argv)$/;"	f	class:dbt::env
InitSignals	src/env.cpp	/^void env::InitSignals(UNUSED CPUState *state)$/;"	f	class:dbt::env
InitThread	src/env.cpp	/^void env::InitThread(CPUState *state, ElfImage *elf)$/;"	f	class:dbt::env
Init_	external/asmjit/src/asmjit/core/globals.h	/^struct Init_ {};$/;"	s	namespace:ByteOrder::ResetPolicy::Globals
InputCount	src/ir/qir.h	/^    constexpr static auto InputCount() { return 0; }$/;"	f	struct:dbt::qir::InstNoOperands
InputCount	src/ir/qir.h	/^    constexpr static auto InputCount() { return N_IN; }$/;"	f	struct:dbt::qir::InstWithOperands
Insert	src/tcache.cpp	/^void tcache::Insert(TBlock *tb)$/;"	f	class:dbt::tcache
Inst	external/asmjit/src/asmjit/arm/a64globals.h	/^struct Inst {$/;"	s
Inst	external/asmjit/src/asmjit/x86/x86globals.h	/^namespace Inst {$/;"	n	class:CondCode
InstAPI	external/asmjit/src/asmjit/core/inst.h	/^namespace InstAPI {$/;"	n	class:InstIdParts::InstOptions::InstControlFlow::InstSameRegHint::CpuRWFlags::OpRWFlags::InstRWFlags::ValidationFlags
InstBinop	src/ir/qir.h	/^    InstBinop(Op opcode_, VOperand d, VOperand sl, VOperand sr)$/;"	f	struct:dbt::qir::InstBinop
InstBinop	src/ir/qir.h	/^struct InstBinop : InstWithOperands<1, 2> {$/;"	s	namespace:dbt::qir
InstBr	src/ir/qir.h	/^    InstBr() : InstNoOperands(Op::_br) {}$/;"	f	struct:dbt::qir::InstBr
InstBr	src/ir/qir.h	/^struct InstBr : InstNoOperands {$/;"	s	namespace:dbt::qir
InstBrcc	src/ir/qir.h	/^    InstBrcc(CondCode cc_, VOperand s1, VOperand s2)$/;"	f	struct:dbt::qir::InstBrcc
InstBrcc	src/ir/qir.h	/^struct InstBrcc : InstWithOperands<0, 2> {$/;"	s	namespace:dbt::qir
InstControlFlow	external/asmjit/src/asmjit/core/inst.h	/^enum class InstControlFlow : uint32_t {$/;"	c	class:InstIdParts::InstOptions
InstCt	src/codegen/arch_traits.cpp	/^struct InstCt {$/;"	s	namespace:dbt::qcg	file:
InstDB	external/asmjit/src/asmjit/arm/a64instdb.cpp	/^namespace InstDB {$/;"	n	file:
InstDB	external/asmjit/src/asmjit/arm/a64instdb.h	/^namespace InstDB {$/;"	n
InstDB	external/asmjit/src/asmjit/arm/a64instdb_p.h	/^namespace InstDB {$/;"	n
InstDB	external/asmjit/src/asmjit/x86/x86instdb.h	/^namespace InstDB {$/;"	n
InstDB	external/asmjit/src/asmjit/x86/x86instdb_p.h	/^namespace InstDB {$/;"	n
InstData	external/asmjit/src/asmjit/core/builder.h	/^  struct InstData {$/;"	s	class:NodeType::NodeFlags::SentinelType::BaseNode
InstExNode	external/asmjit/src/asmjit/core/builder.h	/^class InstExNode : public InstNode {$/;"	c	class:NodeType::NodeFlags::SentinelType
InstFlags	external/asmjit/src/asmjit/x86/x86instdb.h	/^enum class InstFlags : uint32_t {$/;"	c	class:InstDB::Mode::OpFlags
InstForm	external/asmjit/test/asmjit_test_perf_x86.cpp	/^enum class InstForm {$/;"	c	file:
InstGBr	src/ir/qir.h	/^    InstGBr(VOperand tpc_) : InstNoOperands(Op::_gbr), tpc(tpc_)$/;"	f	struct:dbt::qir::InstGBr
InstGBr	src/ir/qir.h	/^struct InstGBr : InstNoOperands {$/;"	s	namespace:dbt::qir
InstGBrind	src/ir/qir.h	/^    InstGBrind(VOperand tpc_) : InstWithOperands(Op::_gbrind, {}, {tpc_}) {}$/;"	f	struct:dbt::qir::InstGBrind
InstGBrind	src/ir/qir.h	/^struct InstGBrind : InstWithOperands<0, 1> {$/;"	s	namespace:dbt::qir
InstHcall	src/ir/qir.h	/^    InstHcall(RuntimeStubId stub_, VOperand arg_)$/;"	f	struct:dbt::qir::InstHcall
InstHcall	src/ir/qir.h	/^struct InstHcall : InstWithOperands<0, 1> {$/;"	s	namespace:dbt::qir
InstHints	external/asmjit/src/asmjit/core/archtraits.h	/^enum class InstHints : uint8_t {$/;"	c	class:Arch::SubArch::ArchTypeNameId
InstId	external/asmjit/src/asmjit/core/inst.h	/^typedef uint32_t InstId;$/;"	t
InstIdParts	external/asmjit/src/asmjit/core/inst.h	/^enum class InstIdParts : uint32_t {$/;"	c
InstInfo	external/asmjit/src/asmjit/arm/a64instdb.h	/^struct InstInfo {$/;"	s	namespace:InstDB
InstInfo	external/asmjit/src/asmjit/x86/x86instdb.h	/^struct InstInfo {$/;"	s	class:InstDB::Mode::OpFlags::InstFlags
InstInternal	external/asmjit/src/asmjit/arm/a64instapi_p.h	/^namespace InstInternal {$/;"	n
InstInternal	external/asmjit/src/asmjit/x86/x86instapi_p.h	/^namespace InstInternal {$/;"	n
InstNameIndex	external/asmjit/src/asmjit/arm/a64instdb_p.h	/^struct InstNameIndex {$/;"	s	namespace:InstDB
InstNameIndex	external/asmjit/src/asmjit/x86/x86instdb_p.h	/^struct InstNameIndex {$/;"	s	namespace:InstDB
InstNoOperands	src/ir/qir.h	/^    InstNoOperands(Op opcode_) : Inst(opcode_) {}$/;"	f	struct:dbt::qir::InstNoOperands
InstNoOperands	src/ir/qir.h	/^struct InstNoOperands : Inst {$/;"	s	namespace:dbt::qir
InstNode	external/asmjit/src/asmjit/core/builder.h	/^    : InstNode(cb, instId, options, opCapacity) {}$/;"	f	class:NodeType::NodeFlags::SentinelType::InstExNode
InstNode	external/asmjit/src/asmjit/core/builder.h	/^class InstNode : public BaseNode {$/;"	c	class:NodeType::NodeFlags::SentinelType
InstNode	external/asmjit/src/asmjit/core/compiler.h	/^  inline FuncRetNode(BaseBuilder* ASMJIT_NONNULL(cb)) noexcept : InstNode(cb, BaseInst::kIdAbstract, InstOptions::kNone, 0) {$/;"	f	class:FuncRetNode
InstOperandAccessMixin	src/ir/qir.h	/^                                         InstOperandAccessMixin<Inst>,$/;"	m	namespace:dbt::qir
InstOperandAccessMixin	src/ir/qir.h	/^struct InstOperandAccessMixin {$/;"	s	namespace:dbt::qir
InstOptions	external/asmjit/src/asmjit/core/inst.h	/^enum class InstOptions : uint32_t {$/;"	c	class:InstIdParts
InstRWFlags	external/asmjit/src/asmjit/core/inst.h	/^enum class InstRWFlags : uint32_t {$/;"	c	class:InstIdParts::InstOptions::InstControlFlow::InstSameRegHint::CpuRWFlags::OpRWFlags
InstRWInfo	external/asmjit/src/asmjit/core/inst.h	/^struct InstRWInfo {$/;"	s	class:InstIdParts::InstOptions::InstControlFlow::InstSameRegHint::CpuRWFlags::OpRWFlags::InstRWFlags
InstRWInfoData	external/asmjit/src/asmjit/arm/a64instapi.cpp	/^struct InstRWInfoData {$/;"	s	file:
InstSameRegHint	external/asmjit/src/asmjit/core/inst.h	/^enum class InstSameRegHint : uint8_t {$/;"	c	class:InstIdParts::InstOptions::InstControlFlow
InstSetcc	src/ir/qir.h	/^    InstSetcc(CondCode cc_, VOperand d, VOperand sl, VOperand sr)$/;"	f	struct:dbt::qir::InstSetcc
InstSetcc	src/ir/qir.h	/^struct InstSetcc : InstWithOperands<1, 2> {$/;"	s	namespace:dbt::qir
InstSignature	external/asmjit/src/asmjit/x86/x86instdb.h	/^struct InstSignature {$/;"	s	class:InstDB::Mode::OpFlags
InstUnop	src/ir/qir.h	/^    InstUnop(Op opcode_, VOperand d, VOperand s)$/;"	f	struct:dbt::qir::InstUnop
InstUnop	src/ir/qir.h	/^struct InstUnop : InstWithOperands<1, 1> {$/;"	s	namespace:dbt::qir
InstVMLoad	src/ir/qir.h	/^    InstVMLoad(VType sz_, VSign sgn_, VOperand d, VOperand ptr)$/;"	f	struct:dbt::qir::InstVMLoad
InstVMLoad	src/ir/qir.h	/^struct InstVMLoad : InstWithOperands<1, 1> {$/;"	s	namespace:dbt::qir
InstVMStore	src/ir/qir.h	/^    InstVMStore(VType sz_, VSign sgn_, VOperand ptr, VOperand val)$/;"	f	struct:dbt::qir::InstVMStore
InstVMStore	src/ir/qir.h	/^struct InstVMStore : InstWithOperands<0, 2> {$/;"	s	namespace:dbt::qir
InstVisitor	src/ir/qir.h	/^struct InstVisitor {$/;"	s	namespace:dbt::qir
InstWithOperands	src/ir/qir.h	/^    InstWithOperands(Op opcode_,$/;"	f	struct:dbt::qir::InstWithOperands
InstWithOperands	src/ir/qir.h	/^struct InstWithOperands$/;"	s	namespace:dbt::qir
Int16	external/asmjit/src/asmjit/core/type.h	/^struct Int16 {};$/;"	s	namespace:TypeId::Type
Int32	external/asmjit/src/asmjit/core/type.h	/^struct Int32 {};$/;"	s	namespace:TypeId::Type
Int32Or64	external/asmjit/src/asmjit/core/support.h	/^  struct Int32Or64 : public StdInt<sizeof(T) <= 4 ? size_t(4) : sizeof(T), Unsigned> {};$/;"	s	namespace:Support::Internal
Int64	external/asmjit/src/asmjit/core/type.h	/^struct Int64 {};$/;"	s	namespace:TypeId::Type
Int8	external/asmjit/src/asmjit/core/type.h	/^struct Int8 {};$/;"	s	namespace:TypeId::Type
IntPtr	external/asmjit/src/asmjit/core/type.h	/^struct IntPtr {};$/;"	s	namespace:TypeId::Type
Internal	external/asmjit/src/asmjit/core/support.h	/^namespace Internal {$/;"	n	class:Support::Internal::SortOrder
Internal	external/asmjit/src/asmjit/core/support.h	/^namespace Internal {$/;"	n	namespace:Support
Internal	external/asmjit/src/asmjit/core/support.h	/^namespace Internal {$/;"	n	namespace:Support::Internal
Invalidate	src/tcache.cpp	/^void tcache::Invalidate()$/;"	f	class:dbt::tcache
InvalidatePage	src/tcache.cpp	/^void tcache::InvalidatePage(u32 pvaddr)$/;"	f	class:dbt::tcache
InverseCC	src/ir/qir.h	/^inline CondCode InverseCC(CondCode cc)$/;"	f	namespace:dbt::qir
InvokeNode	external/asmjit/src/asmjit/core/compiler.h	/^class InvokeNode : public InstNode {$/;"	c
IsConst	src/ir/qir.h	/^    bool IsConst() const { return GetKind() == Kind::CONST; }$/;"	f	struct:dbt::qir::VOperand
IsConstexprConstructibleAsImmType	external/asmjit/src/asmjit/core/operand.h	/^  struct IsConstexprConstructibleAsImmType$/;"	s	class:OperandType::RegType::RegGroup::ImmType::Imm
IsConvertibleToImmType	external/asmjit/src/asmjit/core/operand.h	/^  struct IsConvertibleToImmType$/;"	s	class:OperandType::RegType::RegGroup::ImmType::Imm
IsGPR	src/ir/qir.h	/^    bool IsGPR() const { return GetKind() == Kind::GPR; }$/;"	f	struct:dbt::qir::VOperand
IsGSlot	src/ir/qir.h	/^    bool IsGSlot() const { return IsSlot() && f_slot_is_global::decode(value); }$/;"	f	struct:dbt::qir::VOperand
IsGlobal	src/ir/qir.h	/^    bool IsGlobal(RegN idx) const { return idx < glob_info->n_regs; }$/;"	f	struct:dbt::qir::VRegsInfo
IsLSlot	src/ir/qir.h	/^    bool IsLSlot() const$/;"	f	struct:dbt::qir::VOperand
IsLocal	src/ir/qir.h	/^    bool IsLocal(RegN idx) const { return !IsGlobal(idx); }$/;"	f	struct:dbt::qir::VRegsInfo
IsPGPR	src/ir/qir.h	/^    bool IsPGPR() const { return IsGPR() && !FlagV(); }$/;"	f	struct:dbt::qir::VOperand
IsSlot	src/ir/qir.h	/^    bool IsSlot() const { return GetKind() == Kind::SLOT; }$/;"	f	struct:dbt::qir::VOperand
IsTrapPending	src/guest/rv32_cpu.h	/^    bool IsTrapPending() { return trapno == TrapCode::NONE; }$/;"	f	struct:dbt::rv32::CPUStateImpl
IsV	src/ir/qir.h	/^    bool IsV() const$/;"	f	struct:dbt::qir::VOperand
IsVGPR	src/ir/qir.h	/^    bool IsVGPR() const { return IsGPR() && FlagV(); }$/;"	f	struct:dbt::qir::VOperand
Iterator	external/asmjit/src/asmjit/core/cpuinfo.h	/^  typedef Support::BitVectorIterator<BitWord> Iterator;$/;"	t	class:CpuFeatures
J	src/guest/rv32_insn.h	/^struct J : public Base {$/;"	s	namespace:dbt::rv32::insn
JitAllocator	external/asmjit/src/asmjit/core/jitallocator.h	/^class JitAllocator {$/;"	c	class:JitAllocatorOptions
JitAllocatorBlock	external/asmjit/src/asmjit/core/jitallocator.cpp	/^class JitAllocatorBlock : public ZoneTreeNodeT<JitAllocatorBlock>,$/;"	c	file:
JitAllocatorOptions	external/asmjit/src/asmjit/core/jitallocator.h	/^enum class JitAllocatorOptions : uint32_t {$/;"	c
JitAllocatorPool	external/asmjit/src/asmjit/core/jitallocator.cpp	/^class JitAllocatorPool {$/;"	c	file:
JitAllocatorPrivateImpl	external/asmjit/src/asmjit/core/jitallocator.cpp	/^class JitAllocatorPrivateImpl : public JitAllocator::Impl {$/;"	c	file:
JitAllocatorUtils	external/asmjit/src/asmjit/core/jitallocator.cpp	/^namespace JitAllocatorUtils {$/;"	n	file:
JitAllocatorWrapper	external/asmjit/src/asmjit/core/jitallocator.cpp	/^class JitAllocatorWrapper {$/;"	c	file:
JitErrorHandler	src/codegen/emit.h	/^    struct JitErrorHandler : asmjit::ErrorHandler {$/;"	s	struct:dbt::qcg::QEmit
JitRuntime	external/asmjit/src/asmjit/core/jitruntime.h	/^class ASMJIT_VIRTAPI JitRuntime : public Target {$/;"	c
Jump32Rel	src/codegen/jitabi.h	/^    struct Jump32Rel {$/;"	s	struct:dbt::jitabi::ppoint::BranchSlot
Jump64Abs	src/codegen/jitabi.h	/^    struct Jump64Abs {$/;"	s	struct:dbt::jitabi::ppoint::BranchSlot
JumpAnnotation	external/asmjit/src/asmjit/core/compiler.h	/^class JumpAnnotation {$/;"	c
JumpNode	external/asmjit/src/asmjit/core/compiler.h	/^class JumpNode : public InstNode {$/;"	c
KReg	external/asmjit/src/asmjit/x86/x86operand.h	/^class KReg : public Reg { ASMJIT_DEFINE_FINAL_REG(KReg, Reg, RegTraits<RegType::kX86_KReg>) };$/;"	c
Kind	src/ir/qir.h	/^    enum class Kind : u8 {$/;"	c	struct:dbt::qir::VOperand
L1_CACHE_BITS	src/tcache.h	/^    static constexpr u32 L1_CACHE_BITS = 12;$/;"	m	struct:dbt::tcache
LDFLAGS	Makefile	/^LDFLAGS :=$/;"	m
LE	src/ir/qir.h	/^    LE,$/;"	m	class:dbt::qir::CondCode
LEU	src/ir/qir.h	/^    LEU,$/;"	m	class:dbt::qir::CondCode
LL	external/asmjit/src/asmjit/x86/x86assembler.cpp	/^    LL = (X >> 0) & 0x3,$/;"	e	enum:X86CDisp8SHL_T::__anon3	file:
LT	src/ir/qir.h	/^    LT,$/;"	m	class:dbt::qir::CondCode
LTU	src/ir/qir.h	/^    LTU,$/;"	m	class:dbt::qir::CondCode
Label	external/asmjit/src/asmjit/core/operand.h	/^class Label : public Operand {$/;"	c	class:OperandType::RegType::RegGroup
LabelByName	external/asmjit/src/asmjit/core/codeholder.cpp	/^class LabelByName {$/;"	c	file:
LabelEntry	external/asmjit/src/asmjit/core/codeholder.h	/^class LabelEntry : public ZoneHashNode {$/;"	c	class:ExpressionOpType::ExpressionValueType::SectionFlags::CopySectionFlags::OffsetType::RelocType::LabelType
LabelLink	external/asmjit/src/asmjit/core/codeholder.h	/^struct LabelLink {$/;"	s	class:ExpressionOpType::ExpressionValueType::SectionFlags::CopySectionFlags::OffsetType::RelocType::LabelType
LabelLinkIterator	external/asmjit/src/asmjit/core/codeholder.cpp	/^class LabelLinkIterator {$/;"	c	file:
LabelNode	external/asmjit/src/asmjit/core/builder.h	/^class LabelNode : public BaseNode {$/;"	c	class:NodeType::NodeFlags::SentinelType
LabelType	external/asmjit/src/asmjit/core/codeholder.h	/^enum class LabelType : uint8_t {$/;"	c	class:ExpressionOpType::ExpressionValueType::SectionFlags::CopySectionFlags::OffsetType::RelocType
Large	external/asmjit/src/asmjit/core/string.h	/^  struct Large {$/;"	s	class:StringFormatFlags::String::ModifyOp
Layout	external/asmjit/src/asmjit/core/raassignment_p.h	/^  struct Layout {$/;"	s	class:RAAssignment
Link	src/codegen/jitabi.h	/^inline void BranchSlot::Link(void *to)$/;"	f	class:dbt::jitabi::ppoint::BranchSlot
LinkLazyJIT	src/codegen/jitabi.h	/^inline void BranchSlot::LinkLazyJIT()$/;"	f	class:dbt::jitabi::ppoint::BranchSlot
LiveOps	external/asmjit/src/asmjit/core/rapass.cpp	/^namespace LiveOps {$/;"	n	file:
LiveRegData	external/asmjit/src/asmjit/core/radefs_p.h	/^struct LiveRegData {$/;"	s	class:RAStrategyType::RAStrategyFlags
LiveRegSpan	external/asmjit/src/asmjit/core/radefs_p.h	/^typedef RALiveSpan<LiveRegData> LiveRegSpan;$/;"	t	class:RAStrategyType::RAStrategyFlags
LiveRegSpans	external/asmjit/src/asmjit/core/radefs_p.h	/^typedef RALiveSpans<LiveRegSpan> LiveRegSpans;$/;"	t	class:RAStrategyType::RAStrategyFlags
LoadElf	src/env.cpp	/^void env::LoadElf(int fd, ElfImage *elf)$/;"	f	class:dbt::env
LoadStoreInstructions	external/asmjit/src/asmjit/arm/a64emithelper.cpp	/^struct LoadStoreInstructions {$/;"	s	file:
LocFill	src/codegen/emit.cpp	/^void QEmit::LocFill(qir::RegN p, qir::VType type, u16 offs)$/;"	f	class:dbt::qcg::QEmit
LocSpill	src/codegen/emit.cpp	/^void QEmit::LocSpill(qir::RegN p, qir::VType type, u16 offs)$/;"	f	class:dbt::qcg::QEmit
Location	src/codegen/regalloc.cpp	/^        enum class Location : u8 {$/;"	c	struct:dbt::qcg::QRegAlloc::RTrack	file:
Lock	external/asmjit/src/asmjit/core/osutils.h	/^class Lock {$/;"	c
LockCount	external/asmjit/src/asmjit/core/osutils.h	/^    long LockCount;$/;"	m	struct:Lock::Handle
LockGuard	external/asmjit/src/asmjit/core/osutils_p.h	/^class LockGuard {$/;"	c
LockSemaphore	external/asmjit/src/asmjit/core/osutils.h	/^    void* LockSemaphore;$/;"	m	struct:Lock::Handle
Logger	external/asmjit/src/asmjit/core/logger.h	/^class ASMJIT_VIRTAPI Logger {$/;"	c
LogicalImm	external/asmjit/src/asmjit/arm/armutils.h	/^struct LogicalImm {$/;"	s	namespace:Utils
Lookup	src/tcache.h	/^    static TBlock *Lookup(u32 ip)$/;"	f	struct:dbt::tcache
LookupFreeRange	src/mmu.cpp	/^u32 mmu::LookupFreeRange(u32 pvaddr, u32 plen)$/;"	f	class:dbt::mmu
LookupFull	src/tcache.cpp	/^TBlock *tcache::LookupFull(u32 gip)$/;"	f	class:dbt::tcache
LookupUpperBound	src/tcache.cpp	/^TBlock *tcache::LookupUpperBound(u32 gip)$/;"	f	class:dbt::tcache
MAP_ANONYMOUS	external/asmjit/src/asmjit/core/virtmem.cpp	59;"	d	file:
MAP_HUGETLB	external/asmjit/src/asmjit/core/virtmem.cpp	27;"	d	file:
MAP_HUGE_SHIFT	external/asmjit/src/asmjit/core/virtmem.cpp	31;"	d	file:
MAP_JIT	external/asmjit/src/asmjit/core/virtmem.cpp	53;"	d	file:
MAX_VREGS	src/codegen/regalloc.cpp	/^    static constexpr auto MAX_VREGS = 512;  \/\/ TODO: reuse temps$/;"	m	struct:dbt::qcg::QRegAlloc	file:
MEM	src/codegen/regalloc.cpp	/^            MEM,$/;"	m	class:dbt::qcg::QRegAlloc::RTrack::Location	file:
MERGE_FEATURE_EXT	external/asmjit/src/asmjit/core/cpuinfo.cpp	1020;"	d	file:
MERGE_FEATURE_EXT	external/asmjit/src/asmjit/core/cpuinfo.cpp	774;"	d	file:
MERGE_FEATURE_N_A	external/asmjit/src/asmjit/core/cpuinfo.cpp	1021;"	d	file:
MERGE_FEATURE_N_A	external/asmjit/src/asmjit/core/cpuinfo.cpp	773;"	d	file:
MFD_HUGETLB	external/asmjit/src/asmjit/core/virtmem.cpp	35;"	d	file:
MFD_HUGE_SHIFT	external/asmjit/src/asmjit/core/virtmem.cpp	39;"	d	file:
MIN_MMAP_ADDR	src/mmu.h	/^    static constexpr size_t MIN_MMAP_ADDR = 16 * PAGE_SIZE;$/;"	m	struct:dbt::mmu
M_OPCODE	external/asmjit/src/asmjit/arm/a64instdb_p.h	263;"	d
M_OPCODE	external/asmjit/src/asmjit/arm/a64instdb_p.h	757;"	d
MachineRegionInfo	src/codegen/qcg.h	/^struct MachineRegionInfo {$/;"	s	namespace:dbt::qcg
Make	src/codegen/arch_traits.cpp	/^constexpr InstCt<N_OUT, N_IN> InstCt<N_OUT, N_IN>::Make($/;"	f	class:dbt::qcg::InstCt
MakeConst	src/ir/qir.h	/^    static VOperand MakeConst(VType type, u32 cval)$/;"	f	struct:dbt::qir::VOperand
MakeGBr	src/guest/rv32_qir.cpp	/^void RV32Translator::MakeGBr(u32 ip)$/;"	f	class:dbt::qir::rv32::RV32Translator
MakeOpInfo	src/ir/qir.cpp	/^constexpr auto MakeOpInfo(char const *name)$/;"	f	namespace:dbt::qir
MakePGPR	src/ir/qir.h	/^    static VOperand MakePGPR(VType type, RegN reg)$/;"	f	struct:dbt::qir::VOperand
MakeSlot	src/ir/qir.h	/^    static VOperand MakeSlot(bool is_glob, VType type, u16 offs)$/;"	f	struct:dbt::qir::VOperand
MakeVGPR	src/ir/qir.h	/^    static VOperand MakeVGPR(VType type, RegN reg)$/;"	f	struct:dbt::qir::VOperand
MarkFreePages	src/mmu.cpp	/^void mmu::MarkFreePages(u32 pvaddr, u32 plen)$/;"	f	class:dbt::mmu
MarkUsedPages	src/mmu.cpp	/^void mmu::MarkUsedPages(u32 pvaddr, u32 plen)$/;"	f	class:dbt::mmu
Marker	src/ir/marker.h	/^inline Marker<N, S>::Marker(MarkerKeeper *keeper, u8 states)$/;"	f	class:dbt::qir::Marker
Marker	src/ir/marker.h	/^struct Marker {$/;"	s	namespace:dbt::qir
MarkerKeeper	src/ir/marker.h	/^struct MarkerKeeper {$/;"	s	namespace:dbt::qir
Max	external/asmjit/src/asmjit/core/support.h	/^struct Max    { template<typename T> static ASMJIT_INLINE_NODEBUG T op(T x, T y) noexcept { return max<T>(x, y); } };$/;"	s	namespace:Support::Internal
Mem	external/asmjit/src/asmjit/arm/armoperand.h	/^class Mem : public BaseMem {$/;"	c
Mem	external/asmjit/src/asmjit/x86/x86operand.h	/^class Mem : public BaseMem {$/;"	c
MemArena	src/arena.h	/^    MemArena(size_t size, int prot = PROT_READ | PROT_WRITE)$/;"	f	struct:MemArena
MemArena	src/arena.h	/^struct MemArena {$/;"	s
MemArenaSTL	src/arena_objects.h	/^    MemArenaSTL(MemArenaSTL &&rhs) : arena(rhs.arena) { rhs.arena = nullptr; }$/;"	f	struct:MemArenaSTL
MemArenaSTL	src/arena_objects.h	/^    MemArenaSTL(MemArenaSTL const &rhs) : arena(rhs.arena) {}$/;"	f	struct:MemArenaSTL
MemArenaSTL	src/arena_objects.h	/^    MemArenaSTL(MemArenaSTL<U> &&rhs) : arena(rhs.arena)$/;"	f	struct:MemArenaSTL
MemArenaSTL	src/arena_objects.h	/^    MemArenaSTL(MemArenaSTL<U> const &rhs) : arena(rhs.arena)$/;"	f	struct:MemArenaSTL
MemArenaSTL	src/arena_objects.h	/^    explicit MemArenaSTL(MemArena *arena_) : arena(arena_) {}$/;"	f	struct:MemArenaSTL
MemArenaSTL	src/arena_objects.h	/^struct MemArenaSTL {$/;"	s
MemoryFlags	external/asmjit/src/asmjit/core/virtmem.h	/^enum class MemoryFlags : uint32_t {$/;"	c	class:VirtMem::CachePolicy
Min	external/asmjit/src/asmjit/core/support.h	/^struct Min    { template<typename T> static ASMJIT_INLINE_NODEBUG T op(T x, T y) noexcept { return min<T>(x, y); } };$/;"	s	namespace:Support::Internal
Mm	external/asmjit/src/asmjit/x86/x86operand.h	/^class Mm : public Reg { ASMJIT_DEFINE_FINAL_REG(Mm, Reg, RegTraits<RegType::kX86_Mm>) };$/;"	c
Mode	external/asmjit/src/asmjit/x86/x86instdb.h	/^enum class Mode : uint8_t {$/;"	c	namespace:InstDB
ModifyOp	external/asmjit/src/asmjit/core/string.h	/^  enum class ModifyOp : uint32_t {$/;"	c	class:StringFormatFlags::String
MyHashNode	external/asmjit/src/asmjit/core/zonehash.cpp	/^struct MyHashNode : public ZoneHashNode {$/;"	s	file:
MyKeyMatcher	external/asmjit/src/asmjit/core/zonehash.cpp	/^struct MyKeyMatcher {$/;"	s	file:
MyListNode	external/asmjit/src/asmjit/core/zonelist.cpp	/^class MyListNode : public ZoneListNode<MyListNode> {};$/;"	c	file:
MyRBNode	external/asmjit/src/asmjit/core/zonetree.cpp	/^class MyRBNode : public ZoneTreeNodeT<MyRBNode> {$/;"	c	file:
NAME_DATA_INDEX	external/asmjit/src/asmjit/arm/a64instdb.cpp	830;"	d	file:
NAME_DATA_INDEX	external/asmjit/src/asmjit/x86/x86instdb.cpp	1791;"	d	file:
NE	src/ir/qir.h	/^    NE,$/;"	m	class:dbt::qir::CondCode
NEXT	src/guest/rv32_qir.h	/^    enum class Control { NEXT, BRANCH, TB_OVF } control{Control::NEXT};$/;"	m	class:dbt::qir::rv32::RV32Translator::Control
NO	src/codegen/arch_traits.h	/^    NO = 0 << 0,$/;"	m	class:dbt::qcg::RACtImm
NOINLINE	src/util/common.h	35;"	d
NOMINMAX	external/asmjit/src/asmjit/core/api-build_p.h	27;"	d
NONE	src/guest/rv32_cpu.h	/^    NONE = 0,$/;"	m	class:dbt::rv32::TrapCode
NO_COLOR	mk/common.mk	/^NO_COLOR = \\e[0m$/;"	m
NO_COPY	src/util/common.h	43;"	d
NO_MOVE	src/util/common.h	47;"	d
NO_SPILL	src/codegen/regalloc.cpp	/^        static constexpr auto NO_SPILL = static_cast<u16>(-1);$/;"	m	struct:dbt::qcg::QRegAlloc::RTrack	file:
N_PREGS	src/codegen/regalloc.cpp	/^    static constexpr auto N_PREGS = ArchTraits::GPR_NUM;$/;"	m	struct:dbt::qcg::QRegAlloc	file:
NameEntry	external/asmjit/src/asmjit/x86/x86formatter.cpp	/^  struct NameEntry {$/;"	s	struct:RegFormatInfo	file:
New	src/arena.h	/^    T *New(Args &&...args)$/;"	f	struct:MemArena
NoInit_	external/asmjit/src/asmjit/core/globals.h	/^struct NoInit_ {};$/;"	s	namespace:ByteOrder::ResetPolicy::Globals
Node	external/asmjit/src/asmjit/core/constpool.h	/^  class Node : public ZoneTreeNodeT<Node> {$/;"	c	class:ConstPoolScope::ConstPool
Node	external/asmjit/src/asmjit/core/zonehash.h	/^  typedef NodeT Node;$/;"	t	class:ZoneHash
Node	external/asmjit/src/asmjit/core/zonetree.h	/^  typedef NodeT Node;$/;"	t	class:ZoneTree
NodeFlags	external/asmjit/src/asmjit/core/builder.h	/^enum class NodeFlags : uint8_t {$/;"	c	class:NodeType
NodeList	external/asmjit/src/asmjit/core/builder.h	/^class NodeList {$/;"	c	class:NodeType::NodeFlags::SentinelType
NodeType	external/asmjit/src/asmjit/core/builder.h	/^enum class NodeType : uint8_t {$/;"	c
NotAnd	external/asmjit/src/asmjit/core/support.h	/^struct NotAnd { template<typename T> static ASMJIT_INLINE_NODEBUG T op(T x, T y) noexcept { return ~x &  y; } };$/;"	s	namespace:Support::Internal
NumAll	src/ir/qir.h	/^    auto NumAll() const { return glob_info->n_regs + loc_info.size(); }$/;"	f	struct:dbt::qir::VRegsInfo
NumGlobals	src/ir/qir.h	/^    auto NumGlobals() const { return glob_info->n_regs; }$/;"	f	struct:dbt::qir::VRegsInfo
NumLocals	src/ir/qir.h	/^    auto NumLocals() const { return loc_info.size(); }$/;"	f	struct:dbt::qir::VRegsInfo
O	external/asmjit/src/asmjit/x86/x86instdb.cpp	2192;"	d	file:
O	external/asmjit/src/asmjit/x86/x86instdb.cpp	45;"	d	file:
OBJS	Makefile	/^OBJS := $(addprefix $(OUT)\/, $(OBJS))$/;"	m
OBJS	Makefile	/^OBJS := $(patsubst $(ASMJIT_DIR)\/%.cpp,%.o,$(ASMJIT_SRCS))$/;"	m
OP	src/codegen/emit.h	31;"	d
OP	src/codegen/emit.h	33;"	d
OP	src/codegen/qcg.cpp	44;"	d	file:
OP	src/codegen/qcg.cpp	47;"	d	file:
OP	src/guest/rv32_decode.h	14;"	d
OP	src/guest/rv32_decode.h	164;"	d
OP	src/guest/rv32_insn.h	131;"	d
OP	src/guest/rv32_insn.h	139;"	d
OP	src/guest/rv32_insn.h	142;"	d
OP	src/guest/rv32_insn.h	144;"	d
OP	src/guest/rv32_qir.h	15;"	d
OP	src/guest/rv32_qir.h	20;"	d
OP	src/ir/qir.cpp	17;"	d	file:
OP	src/ir/qir.cpp	20;"	d	file:
OP	src/ir/qir.h	329;"	d
OP	src/ir/qir.h	333;"	d
OP	src/ir/qir.h	37;"	d
OP	src/ir/qir.h	40;"	d
OP	src/ir/qir.h	692;"	d
OP	src/ir/qir.h	695;"	d
OP	src/ir/qir.h	707;"	d
OP	src/ir/qir.h	712;"	d
OP	src/ir/qir_builder.h	30;"	d
OP	src/ir/qir_builder.h	38;"	d
OP	src/ir/qir_builder.h	40;"	d
OP	src/ir/qir_builder.h	47;"	d
OP_ILLEGAL	src/guest/rv32_decode.h	15;"	d
OP_ILLEGAL	src/guest/rv32_decode.h	165;"	d
OSUtils	external/asmjit/src/asmjit/core/osutils.h	/^namespace OSUtils {$/;"	n
OSUtils	external/asmjit/src/asmjit/core/osutils_p.h	/^namespace OSUtils {$/;"	n
OUT	Makefile	/^OUT ?= build$/;"	m
OVM	external/asmjit/tools/tablegen-x86.js	/^      "OVM"  : "ByLL",$/;"	p	class:const
O_ENCODE	external/asmjit/src/asmjit/x86/x86instdb.cpp	43;"	d	file:
O_FPU	external/asmjit/src/asmjit/x86/x86instdb.cpp	2195;"	d	file:
O_FPU	external/asmjit/src/asmjit/x86/x86instdb.cpp	48;"	d	file:
ObjectFormat	external/asmjit/src/asmjit/core/environment.h	/^enum class ObjectFormat : uint8_t {$/;"	c	class:Vendor::Platform::PlatformABI
OffsetFormat	external/asmjit/src/asmjit/core/codeholder.h	/^struct OffsetFormat {$/;"	s	class:ExpressionOpType::ExpressionValueType::SectionFlags::CopySectionFlags::OffsetType
OffsetType	external/asmjit/src/asmjit/core/codeholder.h	/^enum class OffsetType : uint8_t {$/;"	c	class:ExpressionOpType::ExpressionValueType::SectionFlags::CopySectionFlags
Op	src/guest/rv32_insn.h	/^enum class Op : u8 {$/;"	c	namespace:dbt::rv32::insn
Op	src/ir/qir.h	/^enum class Op : u8 {$/;"	c	namespace:dbt::qir
OpFlags	external/asmjit/src/asmjit/x86/x86instdb.h	/^enum class OpFlags : uint64_t {$/;"	c	class:InstDB::Mode
OpInfo	src/ir/qir.h	/^    constexpr OpInfo(char const *name_, u8 n_out_, u8 n_in_)$/;"	f	struct:dbt::qir::OpInfo
OpInfo	src/ir/qir.h	/^struct OpInfo {$/;"	s	namespace:dbt::qir
OpRWFlags	external/asmjit/src/asmjit/core/inst.h	/^enum class OpRWFlags {$/;"	c	class:InstIdParts::InstOptions::InstControlFlow::InstSameRegHint::CpuRWFlags
OpRWInfo	external/asmjit/src/asmjit/core/inst.h	/^struct OpRWInfo {$/;"	s	class:InstIdParts::InstOptions::InstControlFlow::InstSameRegHint::CpuRWFlags::OpRWFlags
OpSignature	external/asmjit/src/asmjit/x86/x86instdb.h	/^struct OpSignature {$/;"	s	class:InstDB::Mode::OpFlags
Opcode	external/asmjit/src/asmjit/x86/x86opcode_p.h	/^struct Opcode {$/;"	s
OpenBSDAArch64CPUID	external/asmjit/src/asmjit/core/cpuinfo.cpp	/^enum class OpenBSDAArch64CPUID {$/;"	c	class:arm::AppleFamilyId	file:
Operand	external/asmjit/src/asmjit/core/operand.h	/^      : Operand(Globals::Init, Signature::fromOpType(OperandType::kMem), 0, 0, 0) {}$/;"	f	class:OperandType::RegType::RegGroup::BaseMem
Operand	external/asmjit/src/asmjit/core/operand.h	/^    : Operand(Globals::Init, Signature::fromOpType(OperandType::kImm), 0, 0, 0) {}$/;"	f	class:OperandType::RegType::RegGroup::ImmType::Imm
Operand	external/asmjit/src/asmjit/core/operand.h	/^    : Operand(Globals::Init, Signature::fromOpType(OperandType::kLabel), Globals::kInvalidId, 0, 0) {}$/;"	f	class:OperandType::RegType::RegGroup::Label
Operand	external/asmjit/src/asmjit/core/operand.h	/^    : Operand(Globals::Init, Signature::fromOpType(OperandType::kLabel), id, 0, 0) {}$/;"	f	class:OperandType::RegType::RegGroup::Label
Operand	external/asmjit/src/asmjit/core/operand.h	/^    : Operand(Globals::Init, Signature::fromOpType(OperandType::kReg), kIdBad, 0, 0) {}$/;"	f	class:OperandType::RegType::RegGroup::BaseReg
Operand	external/asmjit/src/asmjit/core/operand.h	/^    : Operand(Globals::Init, other._signature, id, 0, 0) {}$/;"	f	class:OperandType::RegType::RegGroup::BaseReg
Operand	external/asmjit/src/asmjit/core/operand.h	/^    : Operand(Globals::Init, signature, id, 0, 0) {}$/;"	f	class:OperandType::RegType::RegGroup::BaseReg
Operand	external/asmjit/src/asmjit/core/operand.h	/^    : Operand(Globals::Init, u0, baseId, indexId, uint32_t(offset)) {}$/;"	f	class:OperandType::RegType::RegGroup::BaseMem
Operand	external/asmjit/src/asmjit/core/operand.h	/^    : Operand(Globals::Init,$/;"	f	class:OperandType::RegType::RegGroup::BaseMem
Operand	external/asmjit/src/asmjit/core/operand.h	/^    : Operand(Globals::Init,$/;"	f	class:OperandType::RegType::RegGroup::ImmType::Imm
Operand	external/asmjit/src/asmjit/core/operand.h	/^    : Operand(Globals::NoInit) {}$/;"	f	class:OperandType::RegType::RegGroup::BaseMem
Operand	external/asmjit/src/asmjit/core/operand.h	/^    : Operand(Globals::NoInit) {}$/;"	f	class:OperandType::RegType::RegGroup::BaseReg
Operand	external/asmjit/src/asmjit/core/operand.h	/^    : Operand(Globals::NoInit) {}$/;"	f	class:OperandType::RegType::RegGroup::ImmType::Imm
Operand	external/asmjit/src/asmjit/core/operand.h	/^    : Operand(Globals::NoInit) {}$/;"	f	class:OperandType::RegType::RegGroup::Label
Operand	external/asmjit/src/asmjit/core/operand.h	/^    : Operand(other) {}$/;"	f	class:OperandType::RegType::RegGroup::BaseMem
Operand	external/asmjit/src/asmjit/core/operand.h	/^    : Operand(other) {}$/;"	f	class:OperandType::RegType::RegGroup::BaseReg
Operand	external/asmjit/src/asmjit/core/operand.h	/^    : Operand(other) {}$/;"	f	class:OperandType::RegType::RegGroup::ImmType::Imm
Operand	external/asmjit/src/asmjit/core/operand.h	/^    : Operand(other) {}$/;"	f	class:OperandType::RegType::RegGroup::Label
Operand	external/asmjit/src/asmjit/core/operand.h	/^  ASMJIT_INLINE_NODEBUG constexpr explicit Operand(const Operand_& other)$/;"	f	class:OperandType::RegType::RegGroup::Operand
Operand	external/asmjit/src/asmjit/core/operand.h	/^class Operand : public Operand_ {$/;"	c	class:OperandType::RegType::RegGroup
OperandPack	external/asmjit/src/asmjit/core/compiler.h	/^  struct OperandPack {$/;"	s	class:InvokeNode
OperandSignature	external/asmjit/src/asmjit/core/operand.h	/^struct OperandSignature {$/;"	s	class:OperandType::RegType::RegGroup
OperandType	external/asmjit/src/asmjit/core/operand.h	/^enum class OperandType : uint32_t {$/;"	c
Operand_	external/asmjit/src/asmjit/core/operand.h	/^struct Operand_ {$/;"	s	class:OperandType::RegType::RegGroup
Operator	external/asmjit/test/asmjit_test_compiler_a64.cpp	/^  enum Operator {$/;"	g	class:A64Test_JumpTable	file:
Operator	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^  enum Operator {$/;"	g	class:X86Test_JumpTable1	file:
Or	external/asmjit/src/asmjit/core/support.h	/^struct Or     { template<typename T> static ASMJIT_INLINE_NODEBUG T op(T x, T y) noexcept { return  x |  y; } };$/;"	s	namespace:Support::Internal
OutputCount	src/ir/qir.h	/^    constexpr static auto OutputCount() { return 0; }$/;"	f	struct:dbt::qir::InstNoOperands
OutputCount	src/ir/qir.h	/^    constexpr static auto OutputCount() { return N_OUT; }$/;"	f	struct:dbt::qir::InstWithOperands
OwningThread	external/asmjit/src/asmjit/core/osutils.h	/^    void* OwningThread;$/;"	m	struct:Lock::Handle
P	external/asmjit/db/aarch64.js	/^  "P"     : { "bits": 1 },$/;"	p	class:const
P	external/asmjit/db/arm.js	/^  "P"     : { "bits": 1 },$/;"	p	class:const
PAGE_BITS	src/mmu.h	/^    static constexpr size_t PAGE_BITS = 12;  \/\/ true for rv32 and amd64$/;"	m	struct:dbt::mmu
PAGE_MASK	src/mmu.h	/^    static constexpr size_t PAGE_MASK = ~(PAGE_SIZE - 1);$/;"	m	struct:dbt::mmu
PAGE_SIZE	src/mmu.h	/^    static constexpr size_t PAGE_SIZE = 1 << PAGE_BITS;$/;"	m	struct:dbt::mmu
PASS_COLOR	mk/common.mk	/^PASS_COLOR = \\e[32;01m$/;"	m
PCmpStrImm	external/asmjit/src/asmjit/x86/x86globals.h	/^enum class PCmpStrImm : uint8_t {$/;"	c	class:CondCode::FpuStatusWord::FpuControlWord::CmpImm
PERFORMANCETIMER_H_INCLUDED	external/asmjit/test/performancetimer.h	7;"	d
PREGS_POOL	src/codegen/regalloc.cpp	/^    static constexpr auto PREGS_POOL = ArchTraits::GPR_POOL;$/;"	m	struct:dbt::qcg::QRegAlloc	file:
PRINTF	mk/common.mk	/^    PRINTF = env printf$/;"	m
PRINTF	mk/common.mk	/^    PRINTF = printf$/;"	m
Panic	src/util/common.cpp	/^void __attribute__((noreturn)) Panic(char const *msg)$/;"	f	namespace:dbt
Panic	src/util/common.cpp	/^void __attribute__((noreturn)) Panic(std::string const &msg)$/;"	f	namespace:dbt
Pass	external/asmjit/src/asmjit/core/builder.h	/^class ASMJIT_VIRTAPI Pass {$/;"	c	class:NodeType::NodeFlags::SentinelType
Pass	external/asmjit/src/asmjit/core/compiler.cpp	/^  : Pass(name) {}$/;"	f
PathResolution	src/env.cpp	/^static int PathResolution(int dirfd, char const *path, char *resolved)$/;"	f	namespace:dbt
PerformanceTimer	external/asmjit/test/performancetimer.h	/^class PerformanceTimer {$/;"	c
PhysToWorkMap	external/asmjit/src/asmjit/core/raassignment_p.h	/^  struct PhysToWorkMap {$/;"	s	class:RAAssignment
PhysToWorkMap	external/asmjit/src/asmjit/core/ralocal_p.h	/^  typedef RAAssignment::PhysToWorkMap PhysToWorkMap;$/;"	t	class:RALocalAllocator
PhysToWorkMap	external/asmjit/src/asmjit/core/rapass_p.h	/^  typedef RAAssignment::PhysToWorkMap PhysToWorkMap;$/;"	t	class:RABlockFlags::BaseRAPass
PhysToWorkMap	external/asmjit/src/asmjit/core/rapass_p.h	/^  typedef RAAssignment::PhysToWorkMap PhysToWorkMap;$/;"	t	class:RABlockFlags::RABlock
PhysToWorkMap	external/asmjit/src/asmjit/core/rapass_p.h	/^  typedef RAAssignment::PhysToWorkMap PhysToWorkMap;$/;"	t	class:RABlockFlags::RASharedAssignment
Platform	external/asmjit/src/asmjit/core/environment.h	/^enum class Platform : uint8_t {$/;"	c	class:Vendor
PlatformABI	external/asmjit/src/asmjit/core/environment.h	/^enum class PlatformABI : uint8_t {$/;"	c	class:Vendor::Platform
PostponedErrorHandler	external/asmjit/src/asmjit/core/builder.cpp	/^class PostponedErrorHandler : public ErrorHandler {$/;"	c	file:
PreSideeff	src/guest/rv32_qir.cpp	/^void RV32Translator::PreSideeff()$/;"	f	class:dbt::qir::rv32::RV32Translator
Process	src/env.cpp	/^struct env::Process {$/;"	s	class:dbt::env	file:
PrologEpilogInfo	external/asmjit/src/asmjit/arm/a64emithelper.cpp	/^struct PrologEpilogInfo {$/;"	s	file:
Prologue	src/codegen/emit.cpp	/^void QEmit::Prologue(UNUSED u32 ip)$/;"	f	class:dbt::qcg::QEmit
Prologue	src/codegen/regalloc.cpp	/^void QRegAlloc::Prologue()$/;"	f	class:dbt::qcg::QRegAlloc
ProtectJitAccess	external/asmjit/src/asmjit/core/virtmem.h	/^enum class ProtectJitAccess : uint32_t {$/;"	c	class:VirtMem::CachePolicy::MemoryFlags::HardenedRuntimeFlags
ProtectJitReadWriteScope	external/asmjit/src/asmjit/core/virtmem.h	/^class ProtectJitReadWriteScope {$/;"	c	class:VirtMem::CachePolicy::MemoryFlags::HardenedRuntimeFlags::ProtectJitAccess
Q	mk/common.mk	/^    Q := @$/;"	m
Q	mk/common.mk	/^    Q :=$/;"	m
QCodegen	src/codegen/qcg.cpp	/^    QCodegen(qir::Region *region_, QEmit *ce_) : region(region_), ce(ce_) {}$/;"	f	struct:dbt::qcg::QCodegen
QCodegen	src/codegen/qcg.cpp	/^struct QCodegen {$/;"	s	namespace:dbt::qcg	file:
QCodegenVisitor	src/codegen/qcg.cpp	/^    QCodegenVisitor(QCodegen *cg_) : cg(cg_) {}$/;"	f	struct:dbt::qcg::QCodegenVisitor
QCodegenVisitor	src/codegen/qcg.cpp	/^struct QCodegenVisitor : qir::InstVisitor<QCodegenVisitor, void> {$/;"	s	namespace:dbt::qcg	file:
QEmit	src/codegen/emit.cpp	/^QEmit::QEmit(qir::Region *region,$/;"	f	class:dbt::qcg::QEmit
QEmit	src/codegen/emit.h	/^struct QEmit {$/;"	s	namespace:dbt::qcg
QIR_BASE_OPS_LIST	src/ir/qir_ops.h	30;"	d
QIR_CLASS_LIST	src/ir/qir_ops.h	31;"	d
QIR_DEF_APPLY_CLASS2BASE	src/ir/qir_ops.h	3;"	d
QIR_DEF_LIST	src/ir/qir_ops.h	5;"	d
QIR_LEAF_OPS_LIST	src/ir/qir_ops.h	29;"	d
QIR_OPS_LIST	src/ir/qir_ops.h	28;"	d
QMC_FIXED_REGS	src/codegen/arch_traits.h	79;"	d
QRegAlloc	src/codegen/regalloc.cpp	/^QRegAlloc::QRegAlloc(qir::Region *region_)$/;"	f	class:dbt::qcg::QRegAlloc
QRegAlloc	src/codegen/regalloc.cpp	/^struct QRegAlloc {$/;"	s	namespace:dbt::qcg	file:
QRegAllocPass	src/codegen/qcg.h	/^struct QRegAllocPass {$/;"	s	namespace:dbt::qcg
QRegAllocVisitor	src/codegen/regalloc.cpp	/^    QRegAllocVisitor(QRegAlloc *ra_) : ra(ra_) {}$/;"	f	struct:dbt::qcg::QRegAllocVisitor
QRegAllocVisitor	src/codegen/regalloc.cpp	/^struct QRegAllocVisitor : qir::InstVisitor<QRegAllocVisitor, void> {$/;"	s	namespace:dbt::qcg	file:
QSel	src/codegen/select.cpp	/^    QSel(qir::Region *region_, MachineRegionInfo *region_info_)$/;"	f	struct:dbt::qcg::QSel
QSel	src/codegen/select.cpp	/^struct QSel {$/;"	s	namespace:dbt::qcg	file:
QSelPass	src/codegen/qcg.h	/^struct QSelPass {$/;"	s	namespace:dbt::qcg
QSelVisitor	src/codegen/select.cpp	/^    QSelVisitor(QSel *sel_) : sel(sel_) {}$/;"	f	struct:dbt::qcg::QSelVisitor
QSelVisitor	src/codegen/select.cpp	/^struct QSelVisitor : qir::InstVisitor<QSelVisitor, void> {$/;"	s	namespace:dbt::qcg	file:
QSortImpl	external/asmjit/src/asmjit/core/support.h	/^  struct QSortImpl {$/;"	s	namespace:Support::Internal::SortOrder::Internal
QV	external/asmjit/tools/tablegen-x86.js	/^      "QV"   : "ByLL",$/;"	p	class:const
QV	external/asmjit/tools/tablegen-x86.js	/^      "QV": "2",$/;"	p	class:const
QVM	external/asmjit/tools/tablegen-x86.js	/^      "QVM"  : "ByLL",$/;"	p	class:const
QVM	external/asmjit/tools/tablegen-x86.js	/^      "QVM": "2",$/;"	p	class:const
R	external/asmjit/src/asmjit/arm/a64instapi.cpp	100;"	d	file:
R	external/asmjit/src/asmjit/arm/a64instapi.cpp	123;"	d	file:
R	src/codegen/arch_traits.cpp	/^constexpr auto R = ArchTraits::GPR_ALL;$/;"	m	namespace:dbt::qcg::RACtGPR	file:
R	src/guest/rv32_insn.h	/^struct R : public Base {$/;"	s	namespace:dbt::rv32::insn
R8	src/codegen/arch_traits.cpp	/^constexpr auto R8 = ArchTraits::GPR_ALL;$/;"	m	namespace:dbt::qcg::RACtGPR	file:
RAAssignment	external/asmjit/src/asmjit/core/raassignment_p.h	/^class RAAssignment {$/;"	c
RABlock	external/asmjit/src/asmjit/core/rapass_p.h	/^class RABlock {$/;"	c	class:RABlockFlags
RABlockFlags	external/asmjit/src/asmjit/core/rapass_p.h	/^enum class RABlockFlags : uint32_t {$/;"	c
RABlockVisitItem	external/asmjit/src/asmjit/core/rapass.cpp	/^class RABlockVisitItem {$/;"	c	file:
RABlocks	external/asmjit/src/asmjit/core/radefs_p.h	/^typedef ZoneVector<RABlock*> RABlocks;$/;"	t
RACFGBuilder	external/asmjit/src/asmjit/arm/a64rapass.cpp	/^class RACFGBuilder : public RACFGBuilderT<RACFGBuilder> {$/;"	c	file:
RACFGBuilder	external/asmjit/src/asmjit/x86/x86rapass.cpp	/^class RACFGBuilder : public RACFGBuilderT<RACFGBuilder> {$/;"	c	file:
RACFGBuilderT	external/asmjit/src/asmjit/core/rabuilders_p.h	/^class RACFGBuilderT {$/;"	c
RAConsecutiveReg	external/asmjit/src/asmjit/core/rapass.cpp	/^struct RAConsecutiveReg {$/;"	s	file:
RAConstraints	external/asmjit/src/asmjit/core/radefs_p.h	/^class RAConstraints {$/;"	c
RACtDef	src/codegen/arch_traits.cpp	/^    constexpr RACtDef(RegMask cr_) : cr(cr_) {}$/;"	f	struct:dbt::qcg::RACtDef
RACtDef	src/codegen/arch_traits.cpp	/^    constexpr RACtDef(RegMask cr_, RACtImm ci_) : cr(cr_), ci(ci_) {}$/;"	f	struct:dbt::qcg::RACtDef
RACtDef	src/codegen/arch_traits.cpp	/^struct RACtDef {$/;"	s	namespace:dbt::qcg	file:
RACtDefOrAlias	src/codegen/arch_traits.cpp	/^    constexpr RACtDefOrAlias(RACtDef o) : RACtDef(o.cr, o.ci) {}$/;"	f	struct:dbt::qcg::RACtDefOrAlias
RACtDefOrAlias	src/codegen/arch_traits.cpp	/^    constexpr RACtDefOrAlias(u8 alias_) : has_alias(true), alias(alias_) {}$/;"	f	struct:dbt::qcg::RACtDefOrAlias
RACtDefOrAlias	src/codegen/arch_traits.cpp	/^struct RACtDefOrAlias : RACtDef {$/;"	s	namespace:dbt::qcg	file:
RACtGPR	src/codegen/arch_traits.cpp	/^namespace RACtGPR$/;"	n	namespace:dbt::qcg	file:
RACtImm	src/codegen/arch_traits.h	/^enum class RACtImm : u8 {$/;"	c	namespace:dbt::qcg
RAISE_TRAP	src/guest/rv32_interp.cpp	18;"	d	file:
RAInst	external/asmjit/src/asmjit/core/rapass_p.h	/^class RAInst {$/;"	c	class:RABlockFlags
RAInstBuilder	external/asmjit/src/asmjit/core/rapass_p.h	/^class RAInstBuilder {$/;"	c	class:RABlockFlags
RALiveCount	external/asmjit/src/asmjit/core/radefs_p.h	/^class RALiveCount {$/;"	c	class:RAStrategyType::RAStrategyFlags
RALiveInterval	external/asmjit/src/asmjit/core/radefs_p.h	/^struct RALiveInterval {$/;"	s	class:RAStrategyType::RAStrategyFlags
RALiveSpan	external/asmjit/src/asmjit/core/radefs_p.h	/^class RALiveSpan : public RALiveInterval, public T {$/;"	c	class:RAStrategyType::RAStrategyFlags
RALiveSpans	external/asmjit/src/asmjit/core/radefs_p.h	/^class RALiveSpans {$/;"	c	class:RAStrategyType::RAStrategyFlags
RALiveStats	external/asmjit/src/asmjit/core/radefs_p.h	/^class RALiveStats {$/;"	c	class:RAStrategyType::RAStrategyFlags
RALocalAllocator	external/asmjit/src/asmjit/core/ralocal_p.h	/^class RALocalAllocator {$/;"	c
RAOpCt	src/codegen/arch_traits.h	/^struct RAOpCt {$/;"	s	namespace:dbt::qcg
RARegCount	external/asmjit/src/asmjit/core/radefs_p.h	/^struct RARegCount {$/;"	s	class:RAStrategyType::RAStrategyFlags
RARegIndex	external/asmjit/src/asmjit/core/radefs_p.h	/^struct RARegIndex : public RARegCount {$/;"	s	class:RAStrategyType::RAStrategyFlags
RARegMask	external/asmjit/src/asmjit/core/radefs_p.h	/^struct RARegMask {$/;"	s	class:RAStrategyType::RAStrategyFlags
RARegsStats	external/asmjit/src/asmjit/core/radefs_p.h	/^class RARegsStats {$/;"	c	class:RAStrategyType::RAStrategyFlags
RASharedAssignment	external/asmjit/src/asmjit/core/rapass_p.h	/^class RASharedAssignment {$/;"	c	class:RABlockFlags
RAStackAllocator	external/asmjit/src/asmjit/core/rastack_p.h	/^class RAStackAllocator {$/;"	c
RAStackGap	external/asmjit/src/asmjit/core/rastack.cpp	/^struct RAStackGap {$/;"	s	file:
RAStackSlot	external/asmjit/src/asmjit/core/rastack_p.h	/^struct RAStackSlot {$/;"	s
RAStackSlots	external/asmjit/src/asmjit/core/rastack_p.h	/^typedef ZoneVector<RAStackSlot*> RAStackSlots;$/;"	t
RAStrategy	external/asmjit/src/asmjit/core/radefs_p.h	/^struct RAStrategy {$/;"	s	class:RAStrategyType::RAStrategyFlags
RAStrategyFlags	external/asmjit/src/asmjit/core/radefs_p.h	/^enum class RAStrategyFlags : uint8_t {$/;"	c	class:RAStrategyType
RAStrategyType	external/asmjit/src/asmjit/core/radefs_p.h	/^enum class RAStrategyType : uint8_t {$/;"	c
RATiedFlags	external/asmjit/src/asmjit/core/radefs_p.h	/^enum class RATiedFlags : uint32_t {$/;"	c	class:RAStrategyType::RAStrategyFlags
RATiedReg	external/asmjit/src/asmjit/core/radefs_p.h	/^struct RATiedReg {$/;"	s	class:RAStrategyType::RAStrategyFlags::RATiedFlags
RAWorkReg	external/asmjit/src/asmjit/core/radefs_p.h	/^class RAWorkReg {$/;"	c	class:RAStrategyType::RAStrategyFlags::RATiedFlags::RAWorkRegFlags
RAWorkRegFlags	external/asmjit/src/asmjit/core/radefs_p.h	/^enum class RAWorkRegFlags : uint32_t {$/;"	c	class:RAStrategyType::RAStrategyFlags::RATiedFlags
RAWorkRegs	external/asmjit/src/asmjit/core/radefs_p.h	/^typedef ZoneVector<RAWorkReg*> RAWorkRegs;$/;"	t
REDIR	mk/common.mk	/^    REDIR = >\/dev\/null$/;"	m
REDIR	mk/common.mk	/^    REDIR =$/;"	m
REG	src/codegen/regalloc.cpp	/^            REG,$/;"	m	class:dbt::qcg::QRegAlloc::RTrack::Location	file:
REG_MASK_FROM_REG_TYPE_X64	external/asmjit/src/asmjit/x86/x86instapi.cpp	148;"	d	file:
REG_MASK_FROM_REG_TYPE_X64	external/asmjit/src/asmjit/x86/x86instapi.cpp	183;"	d	file:
REG_MASK_FROM_REG_TYPE_X86	external/asmjit/src/asmjit/x86/x86instapi.cpp	129;"	d	file:
REG_MASK_FROM_REG_TYPE_X86	external/asmjit/src/asmjit/x86/x86instapi.cpp	184;"	d	file:
ROW	external/asmjit/src/asmjit/x86/x86instdb.cpp	4736;"	d	file:
ROW	external/asmjit/src/asmjit/x86/x86instdb.cpp	5321;"	d	file:
ROW	external/asmjit/src/asmjit/x86/x86instdb.cpp	5323;"	d	file:
ROW	external/asmjit/src/asmjit/x86/x86instdb.cpp	5501;"	d	file:
RTrack	src/codegen/regalloc.cpp	/^        RTrack() {}$/;"	f	struct:dbt::qcg::QRegAlloc::RTrack
RTrack	src/codegen/regalloc.cpp	/^    struct RTrack {$/;"	s	struct:dbt::qcg::QRegAlloc	file:
RUNTIME_STUBS	src/runtime_stubs.h	17;"	d
RV32Translator	src/guest/rv32_qir.cpp	/^RV32Translator::RV32Translator(UNUSED qir::Region *region_, uptr vmem)$/;"	f	class:dbt::qir::rv32::RV32Translator
RV32Translator	src/guest/rv32_qir.h	/^struct RV32Translator {$/;"	s	namespace:dbt::qir::rv32
RV32_LINUX_SYSCALL_LIST	src/syscalls.h	3;"	d
RV32_OPCODE_LIST	src/guest/rv32_ops.h	3;"	d
RWInfo	external/asmjit/src/asmjit/x86/x86instdb_p.h	/^struct RWInfo {$/;"	s	namespace:InstDB
RWInfoOp	external/asmjit/src/asmjit/x86/x86instdb_p.h	/^struct RWInfoOp {$/;"	s
RWInfoRm	external/asmjit/src/asmjit/x86/x86instdb_p.h	/^struct RWInfoRm {$/;"	s
R_MEMBASE	src/codegen/emit.h	/^    static constexpr auto R_MEMBASE = asmjit::x86::gpq(ArchTraits::MEMBASE);$/;"	m	struct:dbt::qcg::QEmit
R_SP	src/codegen/emit.h	/^    static constexpr auto R_SP = asmjit::x86::gpq(ArchTraits::SP);$/;"	m	struct:dbt::qcg::QEmit
R_STATE	src/codegen/emit.h	/^    static constexpr auto R_STATE = asmjit::x86::gpq(ArchTraits::STATE);$/;"	m	struct:dbt::qcg::QEmit
RaiseTrap	src/execute.h	/^ALWAYS_INLINE void RaiseTrap()$/;"	f	namespace:dbt
Random	external/asmjit/src/asmjit/core/jitallocator.cpp	/^class Random {$/;"	c	file:
Range	external/asmjit/src/asmjit/core/jitallocator.cpp	/^  class Range {$/;"	c	class:JitAllocatorWrapper	file:
Raw	external/asmjit/src/asmjit/core/string.h	/^  union Raw {$/;"	u	class:StringFormatFlags::String::ModifyOp
Record	external/asmjit/src/asmjit/core/jitallocator.cpp	/^    inline Record(void* rx, void* rw, size_t size, uint64_t pattern)$/;"	f	class:JitAllocatorWrapper::Record
Record	external/asmjit/src/asmjit/core/jitallocator.cpp	/^  class Record : public ZoneTreeNodeT<Record>,$/;"	c	class:JitAllocatorWrapper	file:
Record	src/codegen/jitabi.cpp	/^    struct Record {$/;"	s	struct:dbt::jitabi::TraceRing	file:
RecordLink	src/tcache.h	/^    static void RecordLink(jitabi::ppoint::BranchSlot *slot,$/;"	f	struct:dbt::tcache
RecursionCount	external/asmjit/src/asmjit/core/osutils.h	/^    long RecursionCount;$/;"	m	struct:Lock::Handle
Reg	external/asmjit/src/asmjit/arm/armoperand.h	/^class Reg : public BaseReg {$/;"	c
Reg	external/asmjit/src/asmjit/x86/x86operand.h	/^class Reg : public BaseReg {$/;"	c
RegAnalysis	external/asmjit/src/asmjit/x86/x86instapi.cpp	/^struct RegAnalysis {$/;"	s	file:
RegFormatInfo	external/asmjit/src/asmjit/x86/x86formatter.cpp	/^struct RegFormatInfo {$/;"	s	file:
RegFormatInfo_T	external/asmjit/src/asmjit/x86/x86formatter.cpp	/^struct RegFormatInfo_T {$/;"	s	file:
RegGroup	external/asmjit/src/asmjit/core/operand.h	/^enum class RegGroup : uint8_t {$/;"	c	class:OperandType::RegType
RegGroupVirtValues	external/asmjit/src/asmjit/core/operand.h	/^typedef Support::EnumValues<RegGroup, RegGroup::kGp, RegGroup::kMaxVirt> RegGroupVirtValues;$/;"	t	class:OperandType::RegType::RegGroup
RegMask	external/asmjit/src/asmjit/core/operand.h	/^typedef uint32_t RegMask;$/;"	t	class:OperandType
RegMask	src/codegen/arch_traits.h	/^    constexpr RegMask(u32 data_) : data(data_) {}$/;"	f	struct:dbt::qcg::RegMask
RegMask	src/codegen/arch_traits.h	/^struct RegMask {$/;"	s	namespace:dbt::qcg
RegNBad	src/ir/qir.h	/^static constexpr auto RegNBad = static_cast<RegN>(-1);$/;"	m	namespace:dbt::qir
RegOnly	external/asmjit/src/asmjit/core/operand.h	/^struct RegOnly {$/;"	s	class:OperandType::RegType::RegGroup
RegOrder	external/asmjit/src/asmjit/core/func.h	/^  union RegOrder {$/;"	u	struct:CallConvId::CallConvStrategy::CallConvFlags::CallConv
RegPair	external/asmjit/src/asmjit/arm/a64emithelper.cpp	/^  struct RegPair {$/;"	s	struct:PrologEpilogInfo	file:
RegTraits	external/asmjit/src/asmjit/arm/armoperand.h	/^struct RegTraits : public BaseRegTraits {};$/;"	s
RegTraits	external/asmjit/src/asmjit/x86/x86operand.h	/^struct RegTraits : public BaseRegTraits {};$/;"	s
RegType	external/asmjit/src/asmjit/core/operand.h	/^enum class RegType : uint8_t {$/;"	c	class:OperandType
Region	src/ir/qir.h	/^    explicit Region(MemArena *arena_, StateInfo const *state_info_)$/;"	f	struct:dbt::qir::Region
Region	src/ir/qir.h	/^struct Region : InArena {$/;"	s	namespace:dbt::qir
RegionBoundary	src/codegen/regalloc.cpp	/^void QRegAlloc::RegionBoundary()$/;"	f	class:dbt::qcg::QRegAlloc
Release	src/codegen/regalloc.cpp	/^void QRegAlloc::Release(RTrack *v)$/;"	f	class:dbt::qcg::QRegAlloc
RelocEntry	external/asmjit/src/asmjit/core/codeholder.h	/^struct RelocEntry {$/;"	s	class:ExpressionOpType::ExpressionValueType::SectionFlags::CopySectionFlags::OffsetType::RelocType
RelocType	external/asmjit/src/asmjit/core/codeholder.h	/^enum class RelocType : uint32_t {$/;"	c	class:ExpressionOpType::ExpressionValueType::SectionFlags::CopySectionFlags::OffsetType
Reset	src/arena.h	/^    void Reset() { used = 0; }$/;"	f	struct:MemArena
ResetPolicy	external/asmjit/src/asmjit/core/globals.h	/^enum class ResetPolicy : uint32_t {$/;"	c	class:ByteOrder
Rip	external/asmjit/src/asmjit/x86/x86operand.h	/^class Rip : public Reg { ASMJIT_DEFINE_FINAL_REG(Rip, Reg, RegTraits<RegType::kX86_Rip>) };$/;"	c
RoundImm	external/asmjit/src/asmjit/x86/x86globals.h	/^enum class RoundImm : uint8_t {$/;"	c	class:CondCode::FpuStatusWord::FpuControlWord::CmpImm::PCmpStrImm
Run	src/codegen/qcg.cpp	/^void QCodegen::Run(u32 ip)$/;"	f	class:dbt::qcg::QCodegen
Run	src/codegen/regalloc.cpp	/^void QRegAlloc::Run()$/;"	f	class:dbt::qcg::QRegAlloc
Run	src/codegen/select.cpp	/^void QSel::Run()$/;"	f	class:dbt::qcg::QSel
RuntimeStubId	src/runtime_stubs.h	/^enum class RuntimeStubId {$/;"	c	namespace:dbt
RuntimeStubTab	src/runtime_stubs.h	/^    RuntimeStubTab() : data(g_tab.data) {}$/;"	f	struct:dbt::RuntimeStubTab
RuntimeStubTab	src/runtime_stubs.h	/^    RuntimeStubTab(table_t data_) : data(data_) {}$/;"	f	struct:dbt::RuntimeStubTab
RuntimeStubTab	src/runtime_stubs.h	/^struct RuntimeStubTab {$/;"	s	namespace:dbt
S	src/guest/rv32_insn.h	/^struct S : public Base {$/;"	s	namespace:dbt::rv32::insn
S	src/ir/qir.h	/^    S = 1,$/;"	m	class:dbt::qir::VSign
S32	src/codegen/arch_traits.h	/^    S32 = 1 << 1,$/;"	m	class:dbt::qcg::RACtImm
SAME_REG_HINT	external/asmjit/src/asmjit/x86/x86instdb.cpp	2205;"	d	file:
SAME_REG_HINT	external/asmjit/src/asmjit/x86/x86instdb.cpp	2664;"	d	file:
SET_GIP	src/guest/rv32_interp.cpp	17;"	d	file:
SHA1SUM	mk/common.mk	/^        SHA1SUM := echo$/;"	m
SHA1SUM	mk/common.mk	/^    SHA1SUM := $(shell which $(SHA1SUM))$/;"	m
SHA1SUM	mk/common.mk	/^    SHA1SUM = shasum$/;"	m
SHA1SUM	mk/common.mk	/^SHA1SUM := $(shell which $(SHA1SUM))$/;"	m
SHA1SUM	mk/common.mk	/^SHA1SUM = sha1sum$/;"	m
SHELL_HACK	Makefile	/^SHELL_HACK := $(shell mkdir -p $(OUT) $(OUT)\/util $(OUT)\/ir $(OUT)\/codegen $(OUT)\/guest $(OUT)\/asmjit\/core $(OUT)\/asmjit\/x86)$/;"	m
SI	src/codegen/arch_traits.cpp	/^constexpr auto SI = RegMask(0).Set(ArchTraits::RSI);$/;"	m	namespace:dbt::qcg::RACtGPR	file:
SLOT	src/ir/qir.h	/^        SLOT,$/;"	m	class:dbt::qir::VOperand::Kind
SReg	external/asmjit/src/asmjit/x86/x86operand.h	/^class SReg : public Reg {$/;"	c
STRINGIFY	src/util/common.h	26;"	d
STRINGIFY1	src/util/common.h	27;"	d
ScalarOfTypeId	external/asmjit/src/asmjit/core/type.cpp	/^struct ScalarOfTypeId {$/;"	s	namespace:TypeUtils	file:
ScopedHandle	external/asmjit/src/asmjit/core/virtmem.cpp	/^struct ScopedHandle {$/;"	s	file:
Section	external/asmjit/src/asmjit/core/codeholder.h	/^class Section {$/;"	c	class:ExpressionOpType::ExpressionValueType::SectionFlags::CopySectionFlags
SectionFlags	external/asmjit/src/asmjit/core/codeholder.h	/^enum class SectionFlags : uint32_t {$/;"	c	class:ExpressionOpType::ExpressionValueType
SectionNode	external/asmjit/src/asmjit/core/builder.h	/^class SectionNode : public BaseNode {$/;"	c	class:NodeType::NodeFlags::SentinelType
SelectOperands	src/codegen/select.cpp	/^void QSel::SelectOperands(qir::Inst *ins)$/;"	f	class:dbt::qcg::QSel
SentinelData	external/asmjit/src/asmjit/core/builder.h	/^  struct SentinelData {$/;"	s	class:NodeType::NodeFlags::SentinelType::BaseNode
SentinelNode	external/asmjit/src/asmjit/core/builder.h	/^class SentinelNode : public BaseNode {$/;"	c	class:NodeType::NodeFlags::SentinelType
SentinelType	external/asmjit/src/asmjit/core/builder.h	/^enum class SentinelType : uint8_t {$/;"	c	class:NodeType::NodeFlags
Set	external/asmjit/src/asmjit/core/support.h	/^struct Set    { template<typename T> static ASMJIT_INLINE_NODEBUG T op(T x, T y) noexcept { DebugUtils::unused(x); return  y; } };$/;"	s	namespace:Support::Internal
Set	src/codegen/arch_traits.h	/^    constexpr RegMask &Set(qir::RegN r)$/;"	f	struct:dbt::qcg::RegMask
Set	src/ir/marker.h	/^    void Set(N *n, S s)$/;"	f	struct:dbt::qir::Marker
SetAlias	src/codegen/arch_traits.h	/^    constexpr void SetAlias(u8 alias_)$/;"	f	struct:dbt::qcg::RAOpCt
SetBlock	src/codegen/emit.h	/^    void SetBlock(qir::Block *bb_)$/;"	f	struct:dbt::qcg::QEmit
SetCurrent	src/guest/rv32_cpu.h	/^    static void SetCurrent(CPUState *s) { tls_current = s; }$/;"	f	struct:dbt::dbt::CPUState
SetNot	external/asmjit/src/asmjit/core/support.h	/^struct SetNot { template<typename T> static ASMJIT_INLINE_NODEBUG T op(T x, T y) noexcept { DebugUtils::unused(x); return ~y; } };$/;"	s	namespace:Support::Internal
Shift	external/asmjit/src/asmjit/core/archcommons.h	/^class Shift {$/;"	c	class:CondCode::DataType::ShiftOp
ShiftOp	external/asmjit/src/asmjit/core/archcommons.h	/^enum class ShiftOp : uint32_t {$/;"	c	class:CondCode::DataType
Signature	external/asmjit/src/asmjit/core/operand.h	/^  typedef OperandSignature Signature;$/;"	t	struct:OperandType::RegType::RegGroup::Operand_
Signature	external/asmjit/src/asmjit/core/operand.h	/^  typedef OperandSignature Signature;$/;"	t	struct:OperandType::RegType::RegGroup::RegOnly
SimdBicOrr	external/asmjit/src/asmjit/arm/a64instdb_p.h	/^struct SimdBicOrr {$/;"	s	namespace:InstDB::EncodingData
SimdCmp	external/asmjit/src/asmjit/arm/a64instdb_p.h	/^struct SimdCmp {$/;"	s	namespace:InstDB::EncodingData
SimdDot	external/asmjit/src/asmjit/arm/a64instdb_p.h	/^struct SimdDot {$/;"	s	namespace:InstDB::EncodingData
SimdFcadd	external/asmjit/src/asmjit/arm/a64instdb_p.h	/^struct SimdFcadd {$/;"	s	namespace:InstDB::EncodingData
SimdFccmpFccmpe	external/asmjit/src/asmjit/arm/a64instdb_p.h	/^struct SimdFccmpFccmpe {$/;"	s	namespace:InstDB::EncodingData
SimdFcm	external/asmjit/src/asmjit/arm/a64instdb_p.h	/^struct SimdFcm {$/;"	s	namespace:InstDB::EncodingData
SimdFcmla	external/asmjit/src/asmjit/arm/a64instdb_p.h	/^struct SimdFcmla {$/;"	s	namespace:InstDB::EncodingData
SimdFcmpFcmpe	external/asmjit/src/asmjit/arm/a64instdb_p.h	/^struct SimdFcmpFcmpe {$/;"	s	namespace:InstDB::EncodingData
SimdFcvtLN	external/asmjit/src/asmjit/arm/a64instdb_p.h	/^struct SimdFcvtLN {$/;"	s	namespace:InstDB::EncodingData
SimdFcvtSV	external/asmjit/src/asmjit/arm/a64instdb_p.h	/^struct SimdFcvtSV {$/;"	s	namespace:InstDB::EncodingData
SimdFmlal	external/asmjit/src/asmjit/arm/a64instdb_p.h	/^struct SimdFmlal {$/;"	s	namespace:InstDB::EncodingData
SimdLdNStN	external/asmjit/src/asmjit/arm/a64instdb_p.h	/^struct SimdLdNStN {$/;"	s	namespace:InstDB::EncodingData
SimdLdSt	external/asmjit/src/asmjit/arm/a64instdb_p.h	/^struct SimdLdSt {$/;"	s	namespace:InstDB::EncodingData
SimdLdpStp	external/asmjit/src/asmjit/arm/a64instdb_p.h	/^struct SimdLdpStp {$/;"	s	namespace:InstDB::EncodingData
SimdLdurStur	external/asmjit/src/asmjit/arm/a64instdb_p.h	/^struct SimdLdurStur {$/;"	s	namespace:InstDB::EncodingData
SimdMoviMvni	external/asmjit/src/asmjit/arm/a64instdb_p.h	/^struct SimdMoviMvni {$/;"	s	namespace:InstDB::EncodingData
SimdShift	external/asmjit/src/asmjit/arm/a64instdb_p.h	/^struct SimdShift {$/;"	s	namespace:InstDB::EncodingData
SimdShiftES	external/asmjit/src/asmjit/arm/a64instdb_p.h	/^struct SimdShiftES {$/;"	s	namespace:InstDB::EncodingData
SimdSm3tt	external/asmjit/src/asmjit/arm/a64instdb_p.h	/^struct SimdSm3tt {$/;"	s	namespace:InstDB::EncodingData
SimdSmovUmov	external/asmjit/src/asmjit/arm/a64instdb_p.h	/^struct SimdSmovUmov {$/;"	s	namespace:InstDB::EncodingData
SimdSxtlUxtl	external/asmjit/src/asmjit/arm/a64instdb_p.h	/^struct SimdSxtlUxtl {$/;"	s	namespace:InstDB::EncodingData
SimdTblTbx	external/asmjit/src/asmjit/arm/a64instdb_p.h	/^struct SimdTblTbx {$/;"	s	namespace:InstDB::EncodingData
SimpleErrorHandler	external/asmjit/test/asmjit_test_compiler.h	/^  SimpleErrorHandler()$/;"	f	class:SimpleErrorHandler
SimpleErrorHandler	external/asmjit/test/asmjit_test_compiler.h	/^class SimpleErrorHandler : public asmjit::ErrorHandler {$/;"	c
SizeOfTypeId	external/asmjit/src/asmjit/core/type.cpp	/^struct SizeOfTypeId {$/;"	s	namespace:TypeUtils	file:
SizeOp	external/asmjit/src/asmjit/arm/a64assembler.cpp	/^struct SizeOp {$/;"	s	file:
SizeOpTable	external/asmjit/src/asmjit/arm/a64assembler.cpp	/^struct SizeOpTable {$/;"	s	file:
Slot	external/asmjit/src/asmjit/core/zone.h	/^  struct Slot {$/;"	s	class:ZoneAllocator
Small	external/asmjit/src/asmjit/core/string.h	/^  struct Small {$/;"	s	class:StringFormatFlags::String::ModifyOp
SortOrder	external/asmjit/src/asmjit/core/support.h	/^enum class SortOrder : uint32_t {$/;"	c	namespace:Support::Internal
Span	external/asmjit/src/asmjit/core/jitallocator.h	/^  class Span {$/;"	c	class:JitAllocatorOptions::JitAllocator
Spill	src/codegen/regalloc.cpp	/^void QRegAlloc::Spill(RTrack *v)$/;"	f	class:dbt::qcg::QRegAlloc
Spill	src/codegen/regalloc.cpp	/^void QRegAlloc::Spill(qir::RegN p)$/;"	f	class:dbt::qcg::QRegAlloc
SpinCount	external/asmjit/src/asmjit/core/osutils.h	/^    unsigned long* SpinCount;$/;"	m	struct:Lock::Handle
St	external/asmjit/src/asmjit/x86/x86operand.h	/^class St : public Reg { ASMJIT_DEFINE_FINAL_REG(St, Reg, RegTraits<RegType::kX86_St>) };$/;"	c
State	external/asmjit/src/asmjit/core/emitter.h	/^  struct State {$/;"	s	class:AlignMode::EmitterType::EmitterFlags::EncodingOptions::BaseEmitter
StateFill	src/codegen/emit.cpp	/^void QEmit::StateFill(qir::RegN p, qir::VType type, u16 offs)$/;"	f	class:dbt::qcg::QEmit
StateInfo	src/ir/qir.h	/^struct StateInfo {$/;"	s	namespace:dbt::qir
StateReg	src/ir/qir.h	/^struct StateReg {$/;"	s	namespace:dbt::qir
StateSpill	src/codegen/emit.cpp	/^void QEmit::StateSpill(qir::RegN p, qir::VType type, u16 offs)$/;"	f	class:dbt::qcg::QEmit
Statistics	external/asmjit/src/asmjit/core/jitallocator.h	/^  struct Statistics {$/;"	s	class:JitAllocatorOptions::JitAllocator::Span
StdInt	external/asmjit/src/asmjit/core/support.h	/^  struct StdInt {}; \/\/ Fail if not specialized.$/;"	s	namespace:Support::Internal
StdInt	external/asmjit/src/asmjit/core/support.h	/^  template<> struct StdInt<1, 0> { typedef int8_t   Type; };$/;"	s	namespace:Support::Internal
StdInt	external/asmjit/src/asmjit/core/support.h	/^  template<> struct StdInt<1, 1> { typedef uint8_t  Type; };$/;"	s	namespace:Support::Internal
StdInt	external/asmjit/src/asmjit/core/support.h	/^  template<> struct StdInt<2, 0> { typedef int16_t  Type; };$/;"	s	namespace:Support::Internal
StdInt	external/asmjit/src/asmjit/core/support.h	/^  template<> struct StdInt<2, 1> { typedef uint16_t Type; };$/;"	s	namespace:Support::Internal
StdInt	external/asmjit/src/asmjit/core/support.h	/^  template<> struct StdInt<4, 0> { typedef int32_t  Type; };$/;"	s	namespace:Support::Internal
StdInt	external/asmjit/src/asmjit/core/support.h	/^  template<> struct StdInt<4, 1> { typedef uint32_t Type; };$/;"	s	namespace:Support::Internal
StdInt	external/asmjit/src/asmjit/core/support.h	/^  template<> struct StdInt<8, 0> { typedef int64_t  Type; };$/;"	s	namespace:Support::Internal
StdInt	external/asmjit/src/asmjit/core/support.h	/^  template<> struct StdInt<8, 1> { typedef uint64_t Type; };$/;"	s	namespace:Support::Internal
Storage	external/asmjit/src/asmjit/core/zone.h	/^  struct Storage {$/;"	s	class:ZoneTmp
String	external/asmjit/src/asmjit/core/string.h	/^class String {$/;"	c	class:StringFormatFlags
StringFormatFlags	external/asmjit/src/asmjit/core/string.h	/^enum class StringFormatFlags : uint32_t {$/;"	c
StringLogger	external/asmjit/src/asmjit/core/logger.h	/^class ASMJIT_VIRTAPI StringLogger : public Logger {$/;"	c
StringTmp	external/asmjit/src/asmjit/core/string.h	/^class StringTmp : public String {$/;"	c	class:StringFormatFlags::String
String_baseN	external/asmjit/src/asmjit/core/string.cpp	/^static const char String_baseN[] = "0123456789ABCDEF";$/;"	v	file:
StringifyOpArray	external/asmjit/tools/tablegen-x86.js	/^function StringifyOpArray(a, map) {$/;"	f
StrongEnumForImmTests	external/asmjit/src/asmjit/core/operand.cpp	/^enum class StrongEnumForImmTests : uint32_t {$/;"	c	file:
Sub	external/asmjit/src/asmjit/core/support.h	/^struct Sub    { template<typename T> static ASMJIT_INLINE_NODEBUG T op(T x, T y) noexcept { return  x -  y; } };$/;"	s	namespace:Support::Internal
SubArch	external/asmjit/src/asmjit/core/archtraits.h	/^enum class SubArch : uint8_t {$/;"	c	class:Arch
SumIntsFunc	external/asmjit/test/asmjit_test_emitters.cpp	/^typedef void (*SumIntsFunc)(int* dst, const int* a, const int* b);$/;"	t	file:
Support	external/asmjit/src/asmjit/core/globals.h	/^namespace Support {$/;"	n
Support	external/asmjit/src/asmjit/core/operand.h	/^namespace Support {$/;"	n	class:OperandType::RegType::RegGroup::ImmType
Support	external/asmjit/src/asmjit/core/support.h	/^namespace Support {$/;"	n
Support	external/asmjit/src/asmjit/core/support_p.h	/^namespace Support {$/;"	n
SwapCC	src/ir/qir.h	/^inline CondCode SwapCC(CondCode cc)$/;"	f	namespace:dbt::qir
SyncSpill	src/codegen/regalloc.cpp	/^void QRegAlloc::SyncSpill(RTrack *v)$/;"	f	class:dbt::qcg::QRegAlloc
SyscallID	src/env.cpp	/^enum class SyscallID : u32 {$/;"	c	namespace:dbt	file:
SyscallLinux	src/env.cpp	/^void env::SyscallLinux(CPUState *state)$/;"	f	class:dbt::env
SyscallUnhandled	src/env.cpp	/^[[noreturn]] static uabi_long SyscallUnhandled(uabi_ulong no)$/;"	f	namespace:dbt
T	external/asmjit/src/asmjit/core/radefs_p.h	/^  ASMJIT_INLINE_NODEBUG RALiveSpan() noexcept : RALiveInterval(), T() {}$/;"	f	class:RAStrategyType::RAStrategyFlags::RALiveSpan
T	external/asmjit/src/asmjit/core/radefs_p.h	/^  ASMJIT_INLINE_NODEBUG RALiveSpan(const RALiveInterval& interval, const T& data) noexcept : RALiveInterval(interval), T(data) {}$/;"	f	class:RAStrategyType::RAStrategyFlags::RALiveSpan
T	external/asmjit/src/asmjit/core/radefs_p.h	/^  ASMJIT_INLINE_NODEBUG RALiveSpan(const RALiveSpan<T>& other) noexcept : RALiveInterval(other), T() {}$/;"	f	class:RAStrategyType::RAStrategyFlags::RALiveSpan
T	external/asmjit/src/asmjit/core/radefs_p.h	/^  ASMJIT_INLINE_NODEBUG RALiveSpan(uint32_t a, uint32_t b) noexcept : RALiveInterval(a, b), T() {}$/;"	f	class:RAStrategyType::RAStrategyFlags::RALiveSpan
T	external/asmjit/src/asmjit/core/radefs_p.h	/^  ASMJIT_INLINE_NODEBUG RALiveSpan(uint32_t a, uint32_t b, const T& data) noexcept : RALiveInterval(a, b), T(data) {}$/;"	f	class:RAStrategyType::RAStrategyFlags::RALiveSpan
T	external/asmjit/src/asmjit/core/support.h	/^  template<> struct AliasedUInt<uint16_t, 2> { typedef uint16_t ASMJIT_MAY_ALIAS T; };$/;"	t	struct:Support::Internal::AliasedUInt
T	external/asmjit/src/asmjit/core/support.h	/^  template<> struct AliasedUInt<uint32_t, 4> { typedef uint32_t ASMJIT_MAY_ALIAS T; };$/;"	t	struct:Support::Internal::AliasedUInt
T	external/asmjit/src/asmjit/core/support.h	/^  template<> struct AliasedUInt<uint64_t, 8> { typedef uint64_t ASMJIT_MAY_ALIAS T; };$/;"	t	struct:Support::Internal::AliasedUInt
T1F	external/asmjit/tools/tablegen-x86.js	/^      "T1F"  : "None",$/;"	p	class:const
T1S	external/asmjit/tools/tablegen-x86.js	/^      "T1S"  : "None",$/;"	p	class:const
T1S	external/asmjit/tools/tablegen-x86.js	/^      "T1S": "?"$/;"	p	class:const
T1_4X	external/asmjit/tools/tablegen-x86.js	/^      "T1_4X": "None",$/;"	p	class:const
T2	external/asmjit/tools/tablegen-x86.js	/^      "T2"   : "None",$/;"	p	class:const
T4	external/asmjit/tools/tablegen-x86.js	/^      "T4"   : "None",$/;"	p	class:const
T4X	external/asmjit/tools/tablegen-x86.js	/^      "T4X"  : "None"$/;"	p	class:const
T8	external/asmjit/tools/tablegen-x86.js	/^      "T8"   : "None",$/;"	p	class:const
TB_MAX_INSNS	src/guest/rv32_cpu.h	/^static constexpr u16 TB_MAX_INSNS = 64;$/;"	m	namespace:dbt::rv32
TB_POOL_SIZE	src/tcache.h	/^    static constexpr size_t TB_POOL_SIZE = 32 * 1024 * 1024;$/;"	m	struct:dbt::tcache
TERMINATED	src/guest/rv32_cpu.h	/^    TERMINATED,$/;"	m	class:dbt::rv32::TrapCode
TEST_INSTRUCTION	external/asmjit/test/asmjit_test_assembler_a64.cpp	19;"	d	file:
TEST_INSTRUCTION	external/asmjit/test/asmjit_test_assembler_a64.cpp	4016;"	d	file:
TEST_INSTRUCTION	external/asmjit/test/asmjit_test_assembler_x64.cpp	18132;"	d	file:
TEST_INSTRUCTION	external/asmjit/test/asmjit_test_assembler_x64.cpp	19;"	d	file:
TEST_INSTRUCTION	external/asmjit/test/asmjit_test_assembler_x86.cpp	19;"	d	file:
TEST_INSTRUCTION	external/asmjit/test/asmjit_test_assembler_x86.cpp	8549;"	d	file:
TLogImm	external/asmjit/src/asmjit/x86/x86globals.h	/^enum class TLogImm : uint8_t {$/;"	c	class:CondCode::FpuStatusWord::FpuControlWord::CmpImm::PCmpStrImm::RoundImm::VCmpImm::VFixupImm::VFPClassImm::VGetMantImm::VPCmpImm::VPComImm::VRangeImm::VReduceImm
TRANSLATOR	src/guest/rv32_qir.cpp	/^TRANSLATOR(auipc)$/;"	f	namespace:dbt::qir::rv32
TRANSLATOR	src/guest/rv32_qir.cpp	/^TRANSLATOR(jal)$/;"	f	namespace:dbt::qir::rv32
TRANSLATOR	src/guest/rv32_qir.cpp	/^TRANSLATOR(jalr)$/;"	f	namespace:dbt::qir::rv32
TRANSLATOR	src/guest/rv32_qir.cpp	/^TRANSLATOR(lui)$/;"	f	namespace:dbt::qir::rv32
TRANSLATOR	src/guest/rv32_qir.cpp	205;"	d	file:
TRANSLATOR_ArithmRI	src/guest/rv32_qir.cpp	226;"	d	file:
TRANSLATOR_ArithmRR	src/guest/rv32_qir.cpp	233;"	d	file:
TRANSLATOR_Brcc	src/guest/rv32_qir.cpp	240;"	d	file:
TRANSLATOR_Helper	src/guest/rv32_qir.cpp	252;"	d	file:
TRANSLATOR_Load	src/guest/rv32_qir.cpp	246;"	d	file:
TRANSLATOR_Setcc	src/guest/rv32_qir.cpp	243;"	d	file:
TRANSLATOR_Store	src/guest/rv32_qir.cpp	249;"	d	file:
TRANSLATOR_Unimpl	src/guest/rv32_qir.cpp	223;"	d	file:
TT	external/asmjit/src/asmjit/x86/x86assembler.cpp	/^    TT = (X >> 3) << Opcode::kCDTT_Shift,$/;"	e	enum:X86CDisp8SHL_T::__anon3	file:
Target	external/asmjit/src/asmjit/core/target.h	/^class ASMJIT_VIRTAPI Target {$/;"	c
Temporary	external/asmjit/src/asmjit/core/support.h	/^struct Temporary {$/;"	s	class:Support::Internal::SortOrder
Test	src/codegen/arch_traits.h	/^    constexpr bool Test(qir::RegN r) const { return data & (1u << r); }$/;"	f	struct:dbt::qcg::RegMask
TestApp	external/asmjit/test/asmjit_test_compiler.h	/^class TestApp {$/;"	c
TestCase	external/asmjit/test/asmjit_test_compiler.h	/^  TestCase(const char* name, asmjit::Arch arch) {$/;"	f	class:TestCase
TestCase	external/asmjit/test/asmjit_test_compiler.h	/^class TestCase {$/;"	c
TestErrorHandler	external/asmjit/test/asmjit_test_perf.h	/^class TestErrorHandler : public asmjit::ErrorHandler {$/;"	c	namespace:asmjit_perf_utils
TestSettings	external/asmjit/test/asmjit_test_assembler.h	/^struct TestSettings {$/;"	s
TimePoint	external/asmjit/test/performancetimer.h	/^  typedef std::chrono::high_resolution_clock::time_point TimePoint;$/;"	t	class:PerformanceTimer
Tmm	external/asmjit/src/asmjit/x86/x86operand.h	/^class Tmm : public Reg { ASMJIT_DEFINE_FINAL_REG(Tmm, Reg, RegTraits<RegType::kX86_Tmm>) };$/;"	c
TraceRing	src/codegen/jitabi.cpp	/^struct TraceRing {$/;"	s	namespace:dbt::jitabi	file:
Translate	src/guest/rv32_qir.cpp	/^void RV32Translator::Translate(qir::Region *region,$/;"	f	class:dbt::qir::rv32::RV32Translator
TranslateBrcc	src/guest/rv32_qir.cpp	/^void RV32Translator::TranslateBrcc(rv32::insn::B i, CondCode cc)$/;"	f	class:dbt::qir::rv32::RV32Translator
TranslateHelper	src/guest/rv32_qir.cpp	/^inline void RV32Translator::TranslateHelper(insn::Base i, RuntimeStubId stub)$/;"	f	class:dbt::qir::rv32::RV32Translator
TranslateIPRange	src/guest/rv32_qir.cpp	/^void RV32Translator::TranslateIPRange(u32 ip, u32 boundary_ip)$/;"	f	class:dbt::qir::rv32::RV32Translator
TranslateInsn	src/guest/rv32_qir.cpp	/^void RV32Translator::TranslateInsn()$/;"	f	class:dbt::qir::rv32::RV32Translator
TranslateLoad	src/guest/rv32_qir.cpp	/^void RV32Translator::TranslateLoad(insn::I i, VType type, VSign sgn)$/;"	f	class:dbt::qir::rv32::RV32Translator
TranslateSetcc	src/guest/rv32_qir.cpp	/^inline void RV32Translator::TranslateSetcc(rv32::insn::I i, CondCode cc)$/;"	f	class:dbt::qir::rv32::RV32Translator
TranslateSetcc	src/guest/rv32_qir.cpp	/^inline void RV32Translator::TranslateSetcc(rv32::insn::R i, CondCode cc)$/;"	f	class:dbt::qir::rv32::RV32Translator
TranslateStore	src/guest/rv32_qir.cpp	/^void RV32Translator::TranslateStore(insn::S i, VType type, VSign sgn)$/;"	f	class:dbt::qir::rv32::RV32Translator
TrapCode	src/guest/rv32_cpu.h	/^enum class TrapCode : u32 {$/;"	c	namespace:dbt::rv32
Tree	external/asmjit/src/asmjit/core/constpool.h	/^  struct Tree {$/;"	s	class:ConstPoolScope::ConstPool
Tree	external/asmjit/src/asmjit/core/zonetree.cpp	/^  typedef ZoneTree<NodeT> Tree;$/;"	t	struct:ZoneRBUnit	file:
TryLinkBranch	src/codegen/jitabi.cpp	/^static ALWAYS_INLINE _RetPair TryLinkBranch(CPUState *state,$/;"	f	namespace:dbt::jitabi
Type	external/asmjit/src/asmjit/core/support.h	/^  template<> struct StdInt<1, 0> { typedef int8_t   Type; };$/;"	t	struct:Support::Internal::StdInt
Type	external/asmjit/src/asmjit/core/support.h	/^  template<> struct StdInt<1, 1> { typedef uint8_t  Type; };$/;"	t	struct:Support::Internal::StdInt
Type	external/asmjit/src/asmjit/core/support.h	/^  template<> struct StdInt<2, 0> { typedef int16_t  Type; };$/;"	t	struct:Support::Internal::StdInt
Type	external/asmjit/src/asmjit/core/support.h	/^  template<> struct StdInt<2, 1> { typedef uint16_t Type; };$/;"	t	struct:Support::Internal::StdInt
Type	external/asmjit/src/asmjit/core/support.h	/^  template<> struct StdInt<4, 0> { typedef int32_t  Type; };$/;"	t	struct:Support::Internal::StdInt
Type	external/asmjit/src/asmjit/core/support.h	/^  template<> struct StdInt<4, 1> { typedef uint32_t Type; };$/;"	t	struct:Support::Internal::StdInt
Type	external/asmjit/src/asmjit/core/support.h	/^  template<> struct StdInt<8, 0> { typedef int64_t  Type; };$/;"	t	struct:Support::Internal::StdInt
Type	external/asmjit/src/asmjit/core/support.h	/^  template<> struct StdInt<8, 1> { typedef uint64_t Type; };$/;"	t	struct:Support::Internal::StdInt
Type	external/asmjit/src/asmjit/core/type.h	/^namespace Type {$/;"	n	class:TypeId
TypeData	external/asmjit/src/asmjit/core/type.h	/^struct TypeData {$/;"	s	namespace:TypeId::TypeUtils
TypeEntry	external/asmjit/src/asmjit/x86/x86formatter.cpp	/^  struct TypeEntry {$/;"	s	struct:RegFormatInfo	file:
TypeId	external/asmjit/src/asmjit/core/type.h	/^enum class TypeId : uint8_t {$/;"	c
TypeIdOfT	external/asmjit/src/asmjit/core/type.h	/^struct TypeIdOfT {$/;"	s	namespace:TypeId::TypeUtils
TypeIdOfT	external/asmjit/src/asmjit/core/type.h	/^struct TypeIdOfT$/;"	s	namespace:TypeId::TypeUtils
TypeIdOfT	external/asmjit/src/asmjit/core/type.h	/^struct TypeIdOfT<T&> {$/;"	s	namespace:TypeId::TypeUtils
TypeIdOfT	external/asmjit/src/asmjit/core/type.h	/^struct TypeIdOfT<T*> {$/;"	s	namespace:TypeId::TypeUtils
TypeIdOfT_ByCategory	external/asmjit/src/asmjit/core/type.h	/^struct TypeIdOfT_ByCategory {}; \/\/ Fails if not specialized.$/;"	s	namespace:TypeId::TypeUtils
TypeIdOfT_ByCategory	external/asmjit/src/asmjit/core/type.h	/^struct TypeIdOfT_ByCategory<T, kTypeCategoryEnum>$/;"	s	namespace:TypeId::TypeUtils
TypeIdOfT_ByCategory	external/asmjit/src/asmjit/core/type.h	/^struct TypeIdOfT_ByCategory<T, kTypeCategoryFloatingPoint> {$/;"	s	namespace:TypeId::TypeUtils
TypeIdOfT_ByCategory	external/asmjit/src/asmjit/core/type.h	/^struct TypeIdOfT_ByCategory<T, kTypeCategoryFunction> {$/;"	s	namespace:TypeId::TypeUtils
TypeIdOfT_ByCategory	external/asmjit/src/asmjit/core/type.h	/^struct TypeIdOfT_ByCategory<T, kTypeCategoryIntegral> {$/;"	s	namespace:TypeId::TypeUtils
TypeUtils	external/asmjit/src/asmjit/core/type.cpp	/^namespace TypeUtils {$/;"	n	file:
TypeUtils	external/asmjit/src/asmjit/core/type.h	/^namespace TypeUtils {$/;"	n	class:TypeId
U	external/asmjit/src/asmjit/core/support.h	/^  typedef typename std::make_unsigned<X>::type U;$/;"	t	struct:Support::Internal::Int32Or64
U	src/guest/rv32_insn.h	/^struct U : public Base {$/;"	s	namespace:dbt::rv32::insn
U	src/ir/qir.h	/^    U = 0,$/;"	m	class:dbt::qir::VSign
U32	src/codegen/arch_traits.h	/^    U32 = 1 << 2,$/;"	m	class:dbt::qcg::RACtImm
UInt16	external/asmjit/src/asmjit/core/type.h	/^struct UInt16 {};$/;"	s	namespace:TypeId::Type
UInt32	external/asmjit/src/asmjit/core/type.h	/^struct UInt32 {};$/;"	s	namespace:TypeId::Type
UInt64	external/asmjit/src/asmjit/core/type.h	/^struct UInt64 {};$/;"	s	namespace:TypeId::Type
UInt8	external/asmjit/src/asmjit/core/type.h	/^struct UInt8 {};$/;"	s	namespace:TypeId::Type
UIntPtr	external/asmjit/src/asmjit/core/type.h	/^struct UIntPtr {};$/;"	s	namespace:TypeId::Type
UNALIGNED_IP	src/guest/rv32_cpu.h	/^    UNALIGNED_IP,$/;"	m	class:dbt::rv32::TrapCode
UNAME_S	mk/common.mk	/^UNAME_S := $(shell uname -s)$/;"	m
UNDEF	src/ir/qir.h	/^    UNDEF,$/;"	m	class:dbt::qir::VType
UNIT	external/asmjit/src/asmjit/arm/a64instapi.cpp	/^UNIT(arm_inst_api_text) {$/;"	f
UNIT	external/asmjit/src/asmjit/arm/a64operand.cpp	/^UNIT(a64_operand) {$/;"	f
UNIT	external/asmjit/src/asmjit/core/codeholder.cpp	/^UNIT(code_holder) {$/;"	f
UNIT	external/asmjit/src/asmjit/core/constpool.cpp	/^UNIT(const_pool) {$/;"	f
UNIT	external/asmjit/src/asmjit/core/jitallocator.cpp	/^UNIT(jit_allocator) {$/;"	f
UNIT	external/asmjit/src/asmjit/core/operand.cpp	/^UNIT(operand) {$/;"	f	class:StrongEnumForImmTests	file:
UNIT	external/asmjit/src/asmjit/core/string.cpp	/^UNIT(core_string) {$/;"	f
UNIT	external/asmjit/src/asmjit/core/support.cpp	/^UNIT(support) {$/;"	f
UNIT	external/asmjit/src/asmjit/core/zonelist.cpp	/^UNIT(zone_list) {$/;"	f
UNIT	external/asmjit/src/asmjit/core/zonestack.cpp	/^UNIT(zone_stack) {$/;"	f
UNIT	external/asmjit/src/asmjit/core/zonetree.cpp	/^UNIT(zone_rbtree) {$/;"	f
UNIT	external/asmjit/src/asmjit/core/zonevector.cpp	/^UNIT(zone_vector) {$/;"	f
UNIT	external/asmjit/src/asmjit/x86/x86instapi.cpp	/^UNIT(x86_inst_api_cpu_features) {$/;"	f
UNIT	external/asmjit/src/asmjit/x86/x86instapi.cpp	/^UNIT(x86_inst_api_rm_features) {$/;"	f
UNIT	external/asmjit/src/asmjit/x86/x86instapi.cpp	/^UNIT(x86_inst_api_text) {$/;"	f
UNIT	external/asmjit/src/asmjit/x86/x86instdb.cpp	/^UNIT(x86_inst_db) {$/;"	f
UNIT	external/asmjit/src/asmjit/x86/x86operand.cpp	/^UNIT(x86_operand) {$/;"	f
UNIT	external/asmjit/test/broken.h	175;"	d
UNUSED	src/util/common.h	32;"	d
UNameKernelVersion	external/asmjit/src/asmjit/core/cpuinfo.cpp	/^struct UNameKernelVersion {$/;"	s	namespace:arm	file:
Unary	external/asmjit/db/exp.js	/^function Unary(op, child) { return new UnaryNode(op, child); }$/;"	f
Unit	external/asmjit/test/broken.h	/^struct Unit {$/;"	s	namespace:BrokenAPI
Utils	external/asmjit/src/asmjit/arm/armutils.h	/^namespace Utils {$/;"	n
V	external/asmjit/src/asmjit/arm/a64archtraits_p.h	43;"	d
V	external/asmjit/src/asmjit/arm/a64archtraits_p.h	45;"	d
V	external/asmjit/src/asmjit/arm/a64archtraits_p.h	48;"	d
V	external/asmjit/src/asmjit/arm/a64archtraits_p.h	50;"	d
V	external/asmjit/src/asmjit/arm/a64archtraits_p.h	53;"	d
V	external/asmjit/src/asmjit/arm/a64archtraits_p.h	66;"	d
V	external/asmjit/src/asmjit/core/archtraits.cpp	42;"	d	file:
V	external/asmjit/src/asmjit/core/archtraits.cpp	44;"	d	file:
V	external/asmjit/src/asmjit/core/archtraits.cpp	47;"	d	file:
V	external/asmjit/src/asmjit/core/archtraits.cpp	49;"	d	file:
V	external/asmjit/src/asmjit/core/archtraits.cpp	52;"	d	file:
V	external/asmjit/src/asmjit/core/archtraits.cpp	54;"	d	file:
V	external/asmjit/src/asmjit/x86/x86archtraits_p.h	103;"	d
V	external/asmjit/src/asmjit/x86/x86archtraits_p.h	105;"	d
V	external/asmjit/src/asmjit/x86/x86archtraits_p.h	108;"	d
V	external/asmjit/src/asmjit/x86/x86archtraits_p.h	110;"	d
V	external/asmjit/src/asmjit/x86/x86archtraits_p.h	113;"	d
V	external/asmjit/src/asmjit/x86/x86archtraits_p.h	132;"	d
V	external/asmjit/src/asmjit/x86/x86archtraits_p.h	42;"	d
V	external/asmjit/src/asmjit/x86/x86archtraits_p.h	44;"	d
V	external/asmjit/src/asmjit/x86/x86archtraits_p.h	47;"	d
V	external/asmjit/src/asmjit/x86/x86archtraits_p.h	49;"	d
V	external/asmjit/src/asmjit/x86/x86archtraits_p.h	52;"	d
V	external/asmjit/src/asmjit/x86/x86archtraits_p.h	69;"	d
V	external/asmjit/src/asmjit/x86/x86instdb.cpp	2193;"	d	file:
V	external/asmjit/src/asmjit/x86/x86instdb.cpp	46;"	d	file:
VALUE	external/asmjit/src/asmjit/arm/a64assembler.cpp	45;"	d	file:
VALUE	external/asmjit/src/asmjit/arm/a64assembler.cpp	50;"	d	file:
VALUE	external/asmjit/src/asmjit/core/type.cpp	63;"	d	file:
VALUE	external/asmjit/src/asmjit/core/type.cpp	65;"	d	file:
VALUE	external/asmjit/src/asmjit/core/type.cpp	67;"	d	file:
VALUE	external/asmjit/src/asmjit/core/type.cpp	69;"	d	file:
VALUE	external/asmjit/src/asmjit/x86/x86assembler.cpp	205;"	d	file:
VALUE	external/asmjit/src/asmjit/x86/x86assembler.cpp	207;"	d	file:
VALUE	external/asmjit/src/asmjit/x86/x86assembler.cpp	216;"	d	file:
VALUE	external/asmjit/src/asmjit/x86/x86assembler.cpp	218;"	d	file:
VALUE	external/asmjit/src/asmjit/x86/x86assembler.cpp	222;"	d	file:
VALUE	external/asmjit/src/asmjit/x86/x86assembler.cpp	225;"	d	file:
VALUE	external/asmjit/src/asmjit/x86/x86assembler.cpp	229;"	d	file:
VALUE	external/asmjit/src/asmjit/x86/x86assembler.cpp	232;"	d	file:
VALUE	external/asmjit/src/asmjit/x86/x86assembler.cpp	251;"	d	file:
VALUE	external/asmjit/src/asmjit/x86/x86assembler.cpp	253;"	d	file:
VALUE	external/asmjit/src/asmjit/x86/x86assembler.cpp	283;"	d	file:
VALUE	external/asmjit/src/asmjit/x86/x86assembler.cpp	285;"	d	file:
VALUE	external/asmjit/src/asmjit/x86/x86instapi.cpp	108;"	d	file:
VALUE	external/asmjit/src/asmjit/x86/x86instapi.cpp	127;"	d	file:
VCmpImm	external/asmjit/src/asmjit/x86/x86globals.h	/^enum class VCmpImm : uint8_t {$/;"	c	class:CondCode::FpuStatusWord::FpuControlWord::CmpImm::PCmpStrImm::RoundImm
VECHO	mk/common.mk	/^    VECHO = @$(PRINTF)$/;"	m
VECHO	mk/common.mk	/^    VECHO = @true$/;"	m
VFPClassImm	external/asmjit/src/asmjit/x86/x86globals.h	/^enum class VFPClassImm : uint8_t {$/;"	c	class:CondCode::FpuStatusWord::FpuControlWord::CmpImm::PCmpStrImm::RoundImm::VCmpImm::VFixupImm
VFixupImm	external/asmjit/src/asmjit/x86/x86globals.h	/^enum class VFixupImm : uint8_t {$/;"	c	class:CondCode::FpuStatusWord::FpuControlWord::CmpImm::PCmpStrImm::RoundImm::VCmpImm
VGetMantImm	external/asmjit/src/asmjit/x86/x86globals.h	/^enum class VGetMantImm : uint8_t {$/;"	c	class:CondCode::FpuStatusWord::FpuControlWord::CmpImm::PCmpStrImm::RoundImm::VCmpImm::VFixupImm::VFPClassImm
VIS_CLASS	src/ir/qir.h	689;"	d
VOperand	src/ir/qir.h	/^    VOperand(uptr value_) : value(value_) {}$/;"	f	struct:dbt::qir::VOperand
VOperand	src/ir/qir.h	/^    explicit VOperand() : value(f_kind::encode(uptr(0), Kind::BAD)) {}$/;"	f	struct:dbt::qir::VOperand
VOperand	src/ir/qir.h	/^struct VOperand {$/;"	s	namespace:dbt::qir
VOperandSpan	src/ir/qir.h	/^    VOperandSpan(VOperand *head_, u8 size_) : head(head_), len(size_) {}$/;"	f	struct:dbt::qir::VOperandSpan
VOperandSpan	src/ir/qir.h	/^struct VOperandSpan {$/;"	s	namespace:dbt::qir
VPCmpImm	external/asmjit/src/asmjit/x86/x86globals.h	/^enum class VPCmpImm : uint8_t {$/;"	c	class:CondCode::FpuStatusWord::FpuControlWord::CmpImm::PCmpStrImm::RoundImm::VCmpImm::VFixupImm::VFPClassImm::VGetMantImm
VPComImm	external/asmjit/src/asmjit/x86/x86globals.h	/^enum class VPComImm : uint8_t {$/;"	c	class:CondCode::FpuStatusWord::FpuControlWord::CmpImm::PCmpStrImm::RoundImm::VCmpImm::VFixupImm::VFPClassImm::VGetMantImm::VPCmpImm
VRangeImm	external/asmjit/src/asmjit/x86/x86globals.h	/^enum class VRangeImm : uint8_t {$/;"	c	class:CondCode::FpuStatusWord::FpuControlWord::CmpImm::PCmpStrImm::RoundImm::VCmpImm::VFixupImm::VFPClassImm::VGetMantImm::VPCmpImm::VPComImm
VReduceImm	external/asmjit/src/asmjit/x86/x86globals.h	/^enum class VReduceImm : uint8_t {$/;"	c	class:CondCode::FpuStatusWord::FpuControlWord::CmpImm::PCmpStrImm::RoundImm::VCmpImm::VFixupImm::VFPClassImm::VGetMantImm::VPCmpImm::VPComImm::VRangeImm
VRegsInfo	src/ir/qir.h	/^    VRegsInfo(StateInfo const *glob_info_) : glob_info(glob_info_) {}$/;"	f	struct:dbt::qir::VRegsInfo
VRegsInfo	src/ir/qir.h	/^struct VRegsInfo {$/;"	s	namespace:dbt::qir
VSign	src/ir/qir.h	/^enum class VSign : u8 {$/;"	c	namespace:dbt::qir
VType	src/ir/qir.h	/^enum class VType : u8 {$/;"	c	namespace:dbt::qir
VTypeToSize	src/ir/qir.h	/^inline u8 VTypeToSize(VType type)$/;"	f	namespace:dbt::qir
ValidationFlags	external/asmjit/src/asmjit/core/inst.h	/^enum class ValidationFlags : uint32_t {$/;"	c	class:InstIdParts::InstOptions::InstControlFlow::InstSameRegHint::CpuRWFlags::OpRWFlags::InstRWFlags
Value	external/asmjit/src/asmjit/core/codeholder.h	/^  union Value {$/;"	u	struct:ExpressionOpType::ExpressionValueType::Expression
Var	external/asmjit/db/exp.js	/^function Var(name) { return new VarNode(name); }$/;"	f
Var	external/asmjit/src/asmjit/core/funcargscontext_p.h	/^  struct Var {$/;"	s	class:FuncArgsContext
Vec	external/asmjit/src/asmjit/arm/armoperand.h	/^class Vec : public Reg {$/;"	c
Vec	external/asmjit/src/asmjit/x86/x86operand.h	/^class Vec : public Reg {$/;"	c
VecB	external/asmjit/src/asmjit/arm/armoperand.h	/^class VecB : public Vec { ASMJIT_DEFINE_FINAL_REG(VecB, Vec, RegTraits<RegType::kARM_VecB>) };$/;"	c
VecD	external/asmjit/src/asmjit/arm/armoperand.h	/^class VecD : public Vec { ASMJIT_DEFINE_FINAL_REG(VecD, Vec, RegTraits<RegType::kARM_VecD>) };$/;"	c
VecH	external/asmjit/src/asmjit/arm/armoperand.h	/^class VecH : public Vec { ASMJIT_DEFINE_FINAL_REG(VecH, Vec, RegTraits<RegType::kARM_VecH>) };$/;"	c
VecS	external/asmjit/src/asmjit/arm/armoperand.h	/^class VecS : public Vec { ASMJIT_DEFINE_FINAL_REG(VecS, Vec, RegTraits<RegType::kARM_VecS>) };$/;"	c
VecV	external/asmjit/src/asmjit/arm/armoperand.h	/^class VecV : public Vec { ASMJIT_DEFINE_FINAL_REG(VecV, Vec, RegTraits<RegType::kARM_VecV>) };$/;"	c
Vendor	external/asmjit/src/asmjit/core/environment.h	/^enum class Vendor : uint8_t {$/;"	c
VirtMem	external/asmjit/src/asmjit/core/virtmem.h	/^namespace VirtMem {$/;"	n
VirtReg	external/asmjit/src/asmjit/core/compilerdefs.h	/^class VirtReg {$/;"	c
Vmov1_8	external/asmjit/tools/tablegen-x86.js	/^      Vmov1_8: [$/;"	p	class:rwCategoryByData
W	external/asmjit/src/asmjit/arm/a64instapi.cpp	101;"	d	file:
W	external/asmjit/src/asmjit/arm/a64instapi.cpp	124;"	d	file:
W	external/asmjit/src/asmjit/x86/x86assembler.cpp	/^    W  = (X >> 2) & 0x1,$/;"	e	enum:X86CDisp8SHL_T::__anon3	file:
WARN	external/asmjit/tools/gencommons.js	/^function WARN(msg) {$/;"	f
WIN32_LEAN_AND_MEAN	external/asmjit/src/asmjit/core/api-build_p.h	24;"	d
WinPFPMapping	external/asmjit/src/asmjit/core/cpuinfo.cpp	/^struct WinPFPMapping {$/;"	s	class:arm::AppleFamilyId	file:
WorkData	external/asmjit/src/asmjit/core/funcargscontext_p.h	/^  struct WorkData {$/;"	s	class:FuncArgsContext
WorkToPhysMap	external/asmjit/src/asmjit/core/raassignment_p.h	/^  struct WorkToPhysMap {$/;"	s	class:RAAssignment
WorkToPhysMap	external/asmjit/src/asmjit/core/ralocal_p.h	/^  typedef RAAssignment::WorkToPhysMap WorkToPhysMap;$/;"	t	class:RALocalAllocator
WorkToPhysMap	external/asmjit/src/asmjit/core/rapass_p.h	/^  typedef RAAssignment::WorkToPhysMap WorkToPhysMap;$/;"	t	class:RABlockFlags::BaseRAPass
WorkToPhysMap	external/asmjit/src/asmjit/core/rapass_p.h	/^  typedef RAAssignment::WorkToPhysMap WorkToPhysMap;$/;"	t	class:RABlockFlags::RABlock
WorkToPhysMap	external/asmjit/src/asmjit/core/rapass_p.h	/^  typedef RAAssignment::WorkToPhysMap WorkToPhysMap;$/;"	t	class:RABlockFlags::RASharedAssignment
WriteScope	external/asmjit/src/asmjit/core/jitallocator.h	/^  class WriteScope : public WriteScopeData {$/;"	c	class:JitAllocatorOptions::JitAllocator::Span
WriteScopeData	external/asmjit/src/asmjit/core/jitallocator.h	/^  struct WriteScopeData {$/;"	s	class:JitAllocatorOptions::JitAllocator::Span
X	external/asmjit/src/asmjit/arm/a64instapi.cpp	102;"	d	file:
X	external/asmjit/src/asmjit/arm/a64instapi.cpp	125;"	d	file:
X	external/asmjit/src/asmjit/x86/x86instdb.cpp	2203;"	d	file:
X	external/asmjit/src/asmjit/x86/x86instdb.cpp	2666;"	d	file:
X86	external/asmjit/src/asmjit/core/cpuinfo.h	/^  struct X86 : public Data {$/;"	s	class:CpuFeatures
X86BufferWriter	external/asmjit/src/asmjit/x86/x86assembler.cpp	/^class X86BufferWriter : public CodeWriter {$/;"	c	file:
X86CDisp8SHL_T	external/asmjit/src/asmjit/x86/x86assembler.cpp	/^struct X86CDisp8SHL_T {$/;"	s	file:
X86MemInfo_Enum	external/asmjit/src/asmjit/x86/x86assembler.cpp	/^enum X86MemInfo_Enum {$/;"	g	file:
X86MemInfo_T	external/asmjit/src/asmjit/x86/x86assembler.cpp	/^struct X86MemInfo_T {$/;"	s	file:
X86Mod16BaseIndexTable_T	external/asmjit/src/asmjit/x86/x86assembler.cpp	/^struct X86Mod16BaseIndexTable_T {$/;"	s	file:
X86OpcodeMM	external/asmjit/src/asmjit/x86/x86assembler.cpp	/^struct X86OpcodeMM {$/;"	s	file:
X86RAPass	external/asmjit/src/asmjit/x86/x86rapass_p.h	/^class X86RAPass : public BaseRAPass {$/;"	c
X86TestCase	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^  X86TestCase(const char* name = nullptr)$/;"	f	class:X86TestCase
X86TestCase	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^class X86TestCase : public TestCase {$/;"	c	file:
X86Test_AlignBase	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^  X86Test_AlignBase(uint32_t argCount, uint32_t alignment, bool preserveFP)$/;"	f	class:X86Test_AlignBase
X86Test_AlignBase	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^class X86Test_AlignBase : public X86TestCase {$/;"	c	file:
X86Test_AllocAlphaBlend	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^  X86Test_AllocAlphaBlend() : X86TestCase("AllocAlphaBlend") {}$/;"	f	class:X86Test_AllocAlphaBlend
X86Test_AllocAlphaBlend	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^class X86Test_AllocAlphaBlend : public X86TestCase {$/;"	c	file:
X86Test_AllocArgsDouble	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^  X86Test_AllocArgsDouble() : X86TestCase("AllocArgsDouble") {}$/;"	f	class:X86Test_AllocArgsDouble
X86Test_AllocArgsDouble	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^class X86Test_AllocArgsDouble : public X86TestCase {$/;"	c	file:
X86Test_AllocArgsFloat	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^  X86Test_AllocArgsFloat() : X86TestCase("AllocArgsFloat") {}$/;"	f	class:X86Test_AllocArgsFloat
X86Test_AllocArgsFloat	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^class X86Test_AllocArgsFloat : public X86TestCase {$/;"	c	file:
X86Test_AllocArgsIntPtr	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^  X86Test_AllocArgsIntPtr() : X86TestCase("AllocArgsIntPtr") {}$/;"	f	class:X86Test_AllocArgsIntPtr
X86Test_AllocArgsIntPtr	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^class X86Test_AllocArgsIntPtr : public X86TestCase {$/;"	c	file:
X86Test_AllocArgsVec	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^  X86Test_AllocArgsVec() : X86TestCase("AllocArgsVec") {}$/;"	f	class:X86Test_AllocArgsVec
X86Test_AllocArgsVec	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^class X86Test_AllocArgsVec : public X86TestCase {$/;"	c	file:
X86Test_AllocBase	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^  X86Test_AllocBase() : X86TestCase("AllocBase") {}$/;"	f	class:X86Test_AllocBase
X86Test_AllocBase	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^class X86Test_AllocBase : public X86TestCase {$/;"	c	file:
X86Test_AllocExtraBlock	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^  X86Test_AllocExtraBlock() : X86TestCase("AllocExtraBlock") {}$/;"	f	class:X86Test_AllocExtraBlock
X86Test_AllocExtraBlock	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^class X86Test_AllocExtraBlock : public X86TestCase {$/;"	c	file:
X86Test_AllocGpbLo1	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^  X86Test_AllocGpbLo1() : X86TestCase("AllocGpbLo1") {}$/;"	f	class:X86Test_AllocGpbLo1
X86Test_AllocGpbLo1	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^class X86Test_AllocGpbLo1 : public X86TestCase {$/;"	c	file:
X86Test_AllocGpbLo2	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^  X86Test_AllocGpbLo2() : X86TestCase("AllocGpbLo2") {}$/;"	f	class:X86Test_AllocGpbLo2
X86Test_AllocGpbLo2	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^class X86Test_AllocGpbLo2 : public X86TestCase {$/;"	c	file:
X86Test_AllocIdiv1	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^  X86Test_AllocIdiv1() : X86TestCase("AllocIdiv1") {}$/;"	f	class:X86Test_AllocIdiv1
X86Test_AllocIdiv1	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^class X86Test_AllocIdiv1 : public X86TestCase {$/;"	c	file:
X86Test_AllocIfElse1	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^  X86Test_AllocIfElse1() : X86TestCase("AllocIfElse1") {}$/;"	f	class:X86Test_AllocIfElse1
X86Test_AllocIfElse1	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^class X86Test_AllocIfElse1 : public X86TestCase {$/;"	c	file:
X86Test_AllocIfElse2	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^  X86Test_AllocIfElse2() : X86TestCase("AllocIfElse2") {}$/;"	f	class:X86Test_AllocIfElse2
X86Test_AllocIfElse2	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^class X86Test_AllocIfElse2 : public X86TestCase {$/;"	c	file:
X86Test_AllocIfElse3	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^  X86Test_AllocIfElse3() : X86TestCase("AllocIfElse3") {}$/;"	f	class:X86Test_AllocIfElse3
X86Test_AllocIfElse3	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^class X86Test_AllocIfElse3 : public X86TestCase {$/;"	c	file:
X86Test_AllocIfElse4	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^  X86Test_AllocIfElse4() : X86TestCase("AllocIfElse4") {}$/;"	f	class:X86Test_AllocIfElse4
X86Test_AllocIfElse4	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^class X86Test_AllocIfElse4 : public X86TestCase {$/;"	c	file:
X86Test_AllocImul1	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^  X86Test_AllocImul1() : X86TestCase("AllocImul1") {}$/;"	f	class:X86Test_AllocImul1
X86Test_AllocImul1	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^class X86Test_AllocImul1 : public X86TestCase {$/;"	c	file:
X86Test_AllocImul2	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^  X86Test_AllocImul2() : X86TestCase("AllocImul2") {}$/;"	f	class:X86Test_AllocImul2
X86Test_AllocImul2	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^class X86Test_AllocImul2 : public X86TestCase {$/;"	c	file:
X86Test_AllocInt8	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^  X86Test_AllocInt8() : X86TestCase("AllocInt8") {}$/;"	f	class:X86Test_AllocInt8
X86Test_AllocInt8	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^class X86Test_AllocInt8 : public X86TestCase {$/;"	c	file:
X86Test_AllocMany1	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^  X86Test_AllocMany1() : X86TestCase("AllocMany1") {}$/;"	f	class:X86Test_AllocMany1
X86Test_AllocMany1	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^class X86Test_AllocMany1 : public X86TestCase {$/;"	c	file:
X86Test_AllocMany2	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^  X86Test_AllocMany2() : X86TestCase("AllocMany2") {}$/;"	f	class:X86Test_AllocMany2
X86Test_AllocMany2	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^class X86Test_AllocMany2 : public X86TestCase {$/;"	c	file:
X86Test_AllocMemcpy	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^  X86Test_AllocMemcpy() : X86TestCase("AllocMemcpy") {}$/;"	f	class:X86Test_AllocMemcpy
X86Test_AllocMemcpy	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^class X86Test_AllocMemcpy : public X86TestCase {$/;"	c	file:
X86Test_AllocRepMovsb	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^  X86Test_AllocRepMovsb() : X86TestCase("AllocRepMovsb") {}$/;"	f	class:X86Test_AllocRepMovsb
X86Test_AllocRepMovsb	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^class X86Test_AllocRepMovsb : public X86TestCase {$/;"	c	file:
X86Test_AllocRetDouble1	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^  X86Test_AllocRetDouble1() : X86TestCase("AllocRetDouble1") {}$/;"	f	class:X86Test_AllocRetDouble1
X86Test_AllocRetDouble1	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^class X86Test_AllocRetDouble1 : public X86TestCase {$/;"	c	file:
X86Test_AllocRetDouble2	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^  X86Test_AllocRetDouble2() : X86TestCase("AllocRetDouble2") {}$/;"	f	class:X86Test_AllocRetDouble2
X86Test_AllocRetDouble2	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^class X86Test_AllocRetDouble2 : public X86TestCase {$/;"	c	file:
X86Test_AllocRetFloat1	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^  X86Test_AllocRetFloat1() : X86TestCase("AllocRetFloat1") {}$/;"	f	class:X86Test_AllocRetFloat1
X86Test_AllocRetFloat1	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^class X86Test_AllocRetFloat1 : public X86TestCase {$/;"	c	file:
X86Test_AllocRetFloat2	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^  X86Test_AllocRetFloat2() : X86TestCase("AllocRetFloat2") {}$/;"	f	class:X86Test_AllocRetFloat2
X86Test_AllocRetFloat2	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^class X86Test_AllocRetFloat2 : public X86TestCase {$/;"	c	file:
X86Test_AllocSetz	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^  X86Test_AllocSetz() : X86TestCase("AllocSetz") {}$/;"	f	class:X86Test_AllocSetz
X86Test_AllocSetz	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^class X86Test_AllocSetz : public X86TestCase {$/;"	c	file:
X86Test_AllocShlRor	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^  X86Test_AllocShlRor() : X86TestCase("AllocShlRor") {}$/;"	f	class:X86Test_AllocShlRor
X86Test_AllocShlRor	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^class X86Test_AllocShlRor : public X86TestCase {$/;"	c	file:
X86Test_AllocStack	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^  X86Test_AllocStack() : X86TestCase("AllocStack") {}$/;"	f	class:X86Test_AllocStack
X86Test_AllocStack	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^class X86Test_AllocStack : public X86TestCase {$/;"	c	file:
X86Test_AllocUnhandledArg	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^  X86Test_AllocUnhandledArg() : X86TestCase("AllocUnhandledArg") {}$/;"	f	class:X86Test_AllocUnhandledArg
X86Test_AllocUnhandledArg	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^class X86Test_AllocUnhandledArg : public X86TestCase {$/;"	c	file:
X86Test_FuncCallAVXClobber	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^  X86Test_FuncCallAVXClobber() : X86TestCase("FuncCallAVXClobber") {}$/;"	f	class:X86Test_FuncCallAVXClobber
X86Test_FuncCallAVXClobber	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^class X86Test_FuncCallAVXClobber : public X86TestCase {$/;"	c	file:
X86Test_FuncCallBase1	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^  X86Test_FuncCallBase1() : X86TestCase("FuncCallBase1") {}$/;"	f	class:X86Test_FuncCallBase1
X86Test_FuncCallBase1	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^class X86Test_FuncCallBase1 : public X86TestCase {$/;"	c	file:
X86Test_FuncCallBase2	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^  X86Test_FuncCallBase2() : X86TestCase("FuncCallBase2") {}$/;"	f	class:X86Test_FuncCallBase2
X86Test_FuncCallBase2	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^class X86Test_FuncCallBase2 : public X86TestCase {$/;"	c	file:
X86Test_FuncCallConditional	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^  X86Test_FuncCallConditional() : X86TestCase("FuncCallConditional") {}$/;"	f	class:X86Test_FuncCallConditional
X86Test_FuncCallConditional	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^class X86Test_FuncCallConditional : public X86TestCase {$/;"	c	file:
X86Test_FuncCallDoubleAsXmmRet	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^  X86Test_FuncCallDoubleAsXmmRet() : X86TestCase("FuncCallDoubleAsXmmRet") {}$/;"	f	class:X86Test_FuncCallDoubleAsXmmRet
X86Test_FuncCallDoubleAsXmmRet	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^class X86Test_FuncCallDoubleAsXmmRet : public X86TestCase {$/;"	c	file:
X86Test_FuncCallDuplicateArgs	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^  X86Test_FuncCallDuplicateArgs() : X86TestCase("FuncCallDuplicateArgs") {}$/;"	f	class:X86Test_FuncCallDuplicateArgs
X86Test_FuncCallDuplicateArgs	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^class X86Test_FuncCallDuplicateArgs : public X86TestCase {$/;"	c	file:
X86Test_FuncCallFast	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^  X86Test_FuncCallFast() : X86TestCase("FuncCallFast") {}$/;"	f	class:X86Test_FuncCallFast
X86Test_FuncCallFast	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^class X86Test_FuncCallFast : public X86TestCase {$/;"	c	file:
X86Test_FuncCallFloatAsXmmRet	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^  X86Test_FuncCallFloatAsXmmRet() : X86TestCase("FuncCallFloatAsXmmRet") {}$/;"	f	class:X86Test_FuncCallFloatAsXmmRet
X86Test_FuncCallFloatAsXmmRet	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^class X86Test_FuncCallFloatAsXmmRet : public X86TestCase {$/;"	c	file:
X86Test_FuncCallImmArgs	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^  X86Test_FuncCallImmArgs() : X86TestCase("FuncCallImmArgs") {}$/;"	f	class:X86Test_FuncCallImmArgs
X86Test_FuncCallImmArgs	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^class X86Test_FuncCallImmArgs : public X86TestCase {$/;"	c	file:
X86Test_FuncCallInt64Arg	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^  X86Test_FuncCallInt64Arg() : X86TestCase("FuncCallInt64Arg") {}$/;"	f	class:X86Test_FuncCallInt64Arg
X86Test_FuncCallInt64Arg	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^class X86Test_FuncCallInt64Arg : public X86TestCase {$/;"	c	file:
X86Test_FuncCallLight	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^  X86Test_FuncCallLight() : X86TestCase("FuncCallLight") {}$/;"	f	class:X86Test_FuncCallLight
X86Test_FuncCallLight	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^class X86Test_FuncCallLight : public X86TestCase {$/;"	c	file:
X86Test_FuncCallManyArgs	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^  X86Test_FuncCallManyArgs() : X86TestCase("FuncCallManyArgs") {}$/;"	f	class:X86Test_FuncCallManyArgs
X86Test_FuncCallManyArgs	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^class X86Test_FuncCallManyArgs : public X86TestCase {$/;"	c	file:
X86Test_FuncCallMisc1	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^  X86Test_FuncCallMisc1() : X86TestCase("FuncCallMisc1") {}$/;"	f	class:X86Test_FuncCallMisc1
X86Test_FuncCallMisc1	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^class X86Test_FuncCallMisc1 : public X86TestCase {$/;"	c	file:
X86Test_FuncCallMisc2	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^  X86Test_FuncCallMisc2() : X86TestCase("FuncCallMisc2") {}$/;"	f	class:X86Test_FuncCallMisc2
X86Test_FuncCallMisc2	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^class X86Test_FuncCallMisc2 : public X86TestCase {$/;"	c	file:
X86Test_FuncCallMisc3	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^  X86Test_FuncCallMisc3() : X86TestCase("FuncCallMisc3") {}$/;"	f	class:X86Test_FuncCallMisc3
X86Test_FuncCallMisc3	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^class X86Test_FuncCallMisc3 : public X86TestCase {$/;"	c	file:
X86Test_FuncCallMisc4	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^  X86Test_FuncCallMisc4() : X86TestCase("FuncCallMisc4") {}$/;"	f	class:X86Test_FuncCallMisc4
X86Test_FuncCallMisc4	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^class X86Test_FuncCallMisc4 : public X86TestCase {$/;"	c	file:
X86Test_FuncCallMisc5	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^  X86Test_FuncCallMisc5() : X86TestCase("FuncCallMisc5") {}$/;"	f	class:X86Test_FuncCallMisc5
X86Test_FuncCallMisc5	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^class X86Test_FuncCallMisc5 : public X86TestCase {$/;"	c	file:
X86Test_FuncCallMisc6	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^  X86Test_FuncCallMisc6() : X86TestCase("FuncCallMisc6") {}$/;"	f	class:X86Test_FuncCallMisc6
X86Test_FuncCallMisc6	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^class X86Test_FuncCallMisc6 : public X86TestCase {$/;"	c	file:
X86Test_FuncCallMultiple	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^  X86Test_FuncCallMultiple() : X86TestCase("FuncCallMultiple") {}$/;"	f	class:X86Test_FuncCallMultiple
X86Test_FuncCallMultiple	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^class X86Test_FuncCallMultiple : public X86TestCase {$/;"	c	file:
X86Test_FuncCallPtrArgs	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^  X86Test_FuncCallPtrArgs() : X86TestCase("FuncCallPtrArgs") {}$/;"	f	class:X86Test_FuncCallPtrArgs
X86Test_FuncCallPtrArgs	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^class X86Test_FuncCallPtrArgs : public X86TestCase {$/;"	c	file:
X86Test_FuncCallRecursive	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^  X86Test_FuncCallRecursive() : X86TestCase("FuncCallRecursive") {}$/;"	f	class:X86Test_FuncCallRecursive
X86Test_FuncCallRecursive	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^class X86Test_FuncCallRecursive : public X86TestCase {$/;"	c	file:
X86Test_FuncCallRefArgs	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^  X86Test_FuncCallRefArgs() : X86TestCase("FuncCallRefArgs") {}$/;"	f	class:X86Test_FuncCallRefArgs
X86Test_FuncCallRefArgs	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^class X86Test_FuncCallRefArgs : public X86TestCase {$/;"	c	file:
X86Test_FuncCallSIMD	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^  X86Test_FuncCallSIMD(bool useVectorCall)$/;"	f	class:X86Test_FuncCallSIMD
X86Test_FuncCallSIMD	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^class X86Test_FuncCallSIMD : public X86TestCase {$/;"	c	file:
X86Test_FuncCallStd	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^  X86Test_FuncCallStd() : X86TestCase("FuncCallStd") {}$/;"	f	class:X86Test_FuncCallStd
X86Test_FuncCallStd	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^class X86Test_FuncCallStd : public X86TestCase {$/;"	c	file:
X86Test_FuncCallVarArg1	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^  X86Test_FuncCallVarArg1() : X86TestCase("FuncCallVarArg1") {}$/;"	f	class:X86Test_FuncCallVarArg1
X86Test_FuncCallVarArg1	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^class X86Test_FuncCallVarArg1 : public X86TestCase {$/;"	c	file:
X86Test_FuncCallVarArg2	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^  X86Test_FuncCallVarArg2() : X86TestCase("FuncCallVarArg2") {}$/;"	f	class:X86Test_FuncCallVarArg2
X86Test_FuncCallVarArg2	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^class X86Test_FuncCallVarArg2 : public X86TestCase {$/;"	c	file:
X86Test_JumpCross	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^  X86Test_JumpCross() : X86TestCase("JumpCross") {}$/;"	f	class:X86Test_JumpCross
X86Test_JumpCross	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^class X86Test_JumpCross : public X86TestCase {$/;"	c	file:
X86Test_JumpMany	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^  X86Test_JumpMany() : X86TestCase("JumpMany") {}$/;"	f	class:X86Test_JumpMany
X86Test_JumpMany	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^class X86Test_JumpMany : public X86TestCase {$/;"	c	file:
X86Test_JumpMerge	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^  X86Test_JumpMerge() : X86TestCase("JumpMerge") {}$/;"	f	class:X86Test_JumpMerge
X86Test_JumpMerge	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^class X86Test_JumpMerge : public X86TestCase {$/;"	c	file:
X86Test_JumpTable1	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^  X86Test_JumpTable1(bool annotated)$/;"	f	class:X86Test_JumpTable1
X86Test_JumpTable1	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^class X86Test_JumpTable1 : public X86TestCase {$/;"	c	file:
X86Test_JumpTable2	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^  X86Test_JumpTable2()$/;"	f	class:X86Test_JumpTable2
X86Test_JumpTable2	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^class X86Test_JumpTable2 : public X86TestCase {$/;"	c	file:
X86Test_JumpTable3	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^  X86Test_JumpTable3()$/;"	f	class:X86Test_JumpTable3
X86Test_JumpTable3	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^class X86Test_JumpTable3 : public X86TestCase {$/;"	c	file:
X86Test_JumpTable4	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^  X86Test_JumpTable4()$/;"	f	class:X86Test_JumpTable4
X86Test_JumpTable4	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^class X86Test_JumpTable4 : public X86TestCase {$/;"	c	file:
X86Test_JumpUnreachable1	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^  X86Test_JumpUnreachable1() : X86TestCase("JumpUnreachable1") {}$/;"	f	class:X86Test_JumpUnreachable1
X86Test_JumpUnreachable1	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^class X86Test_JumpUnreachable1 : public X86TestCase {$/;"	c	file:
X86Test_JumpUnreachable2	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^  X86Test_JumpUnreachable2() : X86TestCase("JumpUnreachable2") {}$/;"	f	class:X86Test_JumpUnreachable2
X86Test_JumpUnreachable2	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^class X86Test_JumpUnreachable2 : public X86TestCase {$/;"	c	file:
X86Test_MiscGlobalConstPool	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^  X86Test_MiscGlobalConstPool() : X86TestCase("MiscGlobalConstPool") {}$/;"	f	class:X86Test_MiscGlobalConstPool
X86Test_MiscGlobalConstPool	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^class X86Test_MiscGlobalConstPool : public X86TestCase {$/;"	c	file:
X86Test_MiscLocalConstPool	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^  X86Test_MiscLocalConstPool() : X86TestCase("MiscLocalConstPool") {}$/;"	f	class:X86Test_MiscLocalConstPool
X86Test_MiscLocalConstPool	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^class X86Test_MiscLocalConstPool : public X86TestCase {$/;"	c	file:
X86Test_MiscMultiFunc	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^  X86Test_MiscMultiFunc() : X86TestCase("MiscMultiFunc") {}$/;"	f	class:X86Test_MiscMultiFunc
X86Test_MiscMultiFunc	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^class X86Test_MiscMultiFunc : public X86TestCase {$/;"	c	file:
X86Test_MiscMultiRet	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^  X86Test_MiscMultiRet() : X86TestCase("MiscMultiRet") {}$/;"	f	struct:X86Test_MiscMultiRet
X86Test_MiscMultiRet	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^struct X86Test_MiscMultiRet : public X86TestCase {$/;"	s	file:
X86Test_MiscUnfollow	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^  X86Test_MiscUnfollow() : X86TestCase("MiscUnfollow") {}$/;"	f	class:X86Test_MiscUnfollow
X86Test_MiscUnfollow	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^class X86Test_MiscUnfollow : public X86TestCase {$/;"	c	file:
X86Test_NoAlign	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^  X86Test_NoAlign() : X86TestCase("NoAlign") {}$/;"	f	class:X86Test_NoAlign
X86Test_NoAlign	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^class X86Test_NoAlign : public X86TestCase {$/;"	c	file:
X86Test_NoCode	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^  X86Test_NoCode() : X86TestCase("NoCode") {}$/;"	f	class:X86Test_NoCode
X86Test_NoCode	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^class X86Test_NoCode : public X86TestCase {$/;"	c	file:
X86ValidationData	external/asmjit/src/asmjit/x86/x86instapi.cpp	/^struct X86ValidationData {$/;"	s	file:
XMM0	external/asmjit/src/asmjit/x86/x86emitter.h	/^  typedef Xmm XMM0;$/;"	t	struct:EmitterExplicitT
Xmm	external/asmjit/src/asmjit/x86/x86operand.h	/^class Xmm : public Vec {$/;"	c
Xor	external/asmjit/src/asmjit/core/support.h	/^struct Xor    { template<typename T> static ASMJIT_INLINE_NODEBUG T op(T x, T y) noexcept { return  x ^  y; } };$/;"	s	namespace:Support::Internal
Ymm	external/asmjit/src/asmjit/x86/x86operand.h	/^class Ymm : public Vec {$/;"	c
Zmm	external/asmjit/src/asmjit/x86/x86operand.h	/^class Zmm : public Vec {$/;"	c
Zone	external/asmjit/src/asmjit/core/zone.h	/^    : Zone(blockSize, blockAlignment, Support::Temporary(_storage.data, N)) {}$/;"	f	class:ZoneTmp
Zone	external/asmjit/src/asmjit/core/zone.h	/^class Zone {$/;"	c
ZoneAllocator	external/asmjit/src/asmjit/core/zone.h	/^class ZoneAllocator {$/;"	c
ZoneBitVector	external/asmjit/src/asmjit/core/zonevector.h	/^class ZoneBitVector {$/;"	c
ZoneHash	external/asmjit/src/asmjit/core/zonehash.h	/^    : ZoneHash(other) {}$/;"	f	class:ZoneHash
ZoneHash	external/asmjit/src/asmjit/core/zonehash.h	/^class ZoneHash : public ZoneHashBase {$/;"	c
ZoneHashBase	external/asmjit/src/asmjit/core/zonehash.h	/^    : ZoneHashBase() {}$/;"	f	class:ZoneHash
ZoneHashBase	external/asmjit/src/asmjit/core/zonehash.h	/^class ZoneHashBase {$/;"	c
ZoneHashNode	external/asmjit/src/asmjit/core/zonehash.h	/^class ZoneHashNode {$/;"	c
ZoneHash_primeArray	external/asmjit/src/asmjit/core/zonehash.cpp	/^static const HashPrime ZoneHash_primeArray[] = {$/;"	v	file:
ZoneHash_primeShift	external/asmjit/src/asmjit/core/zonehash.cpp	/^static const uint8_t ZoneHash_primeShift[] = {$/;"	v	file:
ZoneList	external/asmjit/src/asmjit/core/zonelist.h	/^class ZoneList {$/;"	c
ZoneListNode	external/asmjit/src/asmjit/core/zonelist.h	/^class ZoneListNode {$/;"	c
ZoneRBUnit	external/asmjit/src/asmjit/core/zonetree.cpp	/^struct ZoneRBUnit {$/;"	s	file:
ZoneStack	external/asmjit/src/asmjit/core/zonestack.h	/^class ZoneStack : public ZoneStackBase {$/;"	c
ZoneStackBase	external/asmjit/src/asmjit/core/zonestack.h	/^class ZoneStackBase {$/;"	c
ZoneString	external/asmjit/src/asmjit/core/zonestring.h	/^class ZoneString {$/;"	c
ZoneStringBase	external/asmjit/src/asmjit/core/zonestring.h	/^struct ZoneStringBase {$/;"	s
ZoneTmp	external/asmjit/src/asmjit/core/zone.h	/^class ZoneTmp : public Zone {$/;"	c
ZoneTree	external/asmjit/src/asmjit/core/zonetree.h	/^class ZoneTree {$/;"	c
ZoneTreeNode	external/asmjit/src/asmjit/core/zonetree.h	/^    : ZoneTreeNode() {}$/;"	f	class:ZoneTreeNodeT
ZoneTreeNode	external/asmjit/src/asmjit/core/zonetree.h	/^class ZoneTreeNode {$/;"	c
ZoneTreeNodeT	external/asmjit/src/asmjit/core/zonetree.h	/^class ZoneTreeNodeT : public ZoneTreeNode {$/;"	c
ZoneVector	external/asmjit/src/asmjit/core/zonevector.h	/^  ASMJIT_INLINE_NODEBUG ZoneVector(ZoneVector&& other) noexcept : ZoneVector(other) {}$/;"	f	class:ZoneVector
ZoneVector	external/asmjit/src/asmjit/core/zonevector.h	/^class ZoneVector : public ZoneVectorBase {$/;"	c
ZoneVectorBase	external/asmjit/src/asmjit/core/zonevector.h	/^  ASMJIT_INLINE_NODEBUG ZoneVector() noexcept : ZoneVectorBase() {}$/;"	f	class:ZoneVector
ZoneVectorBase	external/asmjit/src/asmjit/core/zonevector.h	/^class ZoneVectorBase {$/;"	c
_	external/asmjit/tools/tablegen-x86.js	/^      "_"    : "None",$/;"	p	class:const
_	src/codegen/arch_traits.cpp	104;"	d	file:
_	src/codegen/arch_traits.cpp	131;"	d	file:
_	src/codegen/arch_traits.cpp	138;"	d	file:
_	src/codegen/arch_traits.cpp	90;"	d	file:
_	src/codegen/arch_traits.h	58;"	d
_	src/codegen/arch_traits.h	77;"	d
_	src/codegen/arch_traits.h	84;"	d
_	src/codegen/arch_traits.h	86;"	d
_	src/codegen/arch_traits.h	88;"	d
_	src/codegen/arch_traits.h	90;"	d
_	src/env.cpp	147;"	d	file:
_	src/env.cpp	149;"	d	file:
_	src/env.cpp	156;"	d	file:
_	src/env.cpp	158;"	d	file:
_	src/runtime_stubs.cpp	12;"	d	file:
_	src/runtime_stubs.cpp	16;"	d	file:
_	src/runtime_stubs.cpp	5;"	d	file:
_	src/runtime_stubs.cpp	7;"	d	file:
_	src/runtime_stubs.h	20;"	d
_	src/runtime_stubs.h	22;"	d
_CRT_SECURE_NO_DEPRECATE	external/asmjit/src/asmjit/core/api-build_p.h	14;"	d
_CRT_SECURE_NO_WARNINGS	external/asmjit/src/asmjit/core/api-build_p.h	17;"	d
_GB	src/util/common.h	/^inline constexpr size_t operator""_GB(unsigned long long n)$/;"	f
_KB	src/util/common.h	/^inline constexpr size_t operator""_KB(unsigned long long n)$/;"	f
_MB	src/util/common.h	/^inline constexpr size_t operator""_MB(unsigned long long n)$/;"	f
_RetPair	src/codegen/jitabi.cpp	/^struct _RetPair {$/;"	s	namespace:dbt::jitabi	file:
_aPtr	external/asmjit/src/asmjit/core/support.h	/^  const T* _aPtr;$/;"	m	class:Support::Internal::BitVectorOpIterator
_additionalInfoIndex	external/asmjit/src/asmjit/x86/x86instdb.h	/^  uint32_t _additionalInfoIndex : 8;$/;"	m	struct:InstDB::Mode::OpFlags::InstFlags::InstInfo
_additionalInfoTable	external/asmjit/src/asmjit/x86/x86instdb.cpp	/^const InstDB::AdditionalInfo InstDB::_additionalInfoTable[] = {$/;"	m	class:InstDB	file:
_address	external/asmjit/src/asmjit/core/codeholder.h	/^  uint64_t _address;$/;"	m	class:ExpressionOpType::ExpressionValueType::SectionFlags::CopySectionFlags::AddressTableEntry
_addressTableEntries	external/asmjit/src/asmjit/core/codeholder.h	/^  ZoneTree<AddressTableEntry> _addressTableEntries;$/;"	m	class:ExpressionOpType::ExpressionValueType::SectionFlags::CopySectionFlags::OffsetType::RelocType::LabelType::CodeHolder
_addressTableSection	external/asmjit/src/asmjit/core/codeholder.cpp	/^    _addressTableSection(nullptr) {}$/;"	f
_addressTableSection	external/asmjit/src/asmjit/core/codeholder.h	/^  Section* _addressTableSection;$/;"	m	class:ExpressionOpType::ExpressionValueType::SectionFlags::CopySectionFlags::OffsetType::RelocType::LabelType::CodeHolder
_aggregatedFlags	external/asmjit/src/asmjit/core/rapass_p.h	/^  RATiedFlags _aggregatedFlags;$/;"	m	class:RABlockFlags::RAInstBuilder
_alignData	external/asmjit/src/asmjit/core/builder.h	/^    AlignData _alignData;$/;"	m	union:NodeType::NodeFlags::SentinelType::BaseNode::__anon13
_alignMode	external/asmjit/src/asmjit/core/builder.h	/^    AlignMode _alignMode;$/;"	m	struct:NodeType::NodeFlags::SentinelType::BaseNode::AlignData
_alignment	external/asmjit/src/asmjit/core/builder.h	/^  uint32_t _alignment;$/;"	m	class:NodeType::NodeFlags::SentinelType::AlignNode
_alignment	external/asmjit/src/asmjit/core/codeholder.h	/^  uint32_t _alignment;$/;"	m	class:ExpressionOpType::ExpressionValueType::SectionFlags::CopySectionFlags::Section
_alignment	external/asmjit/src/asmjit/core/compilerdefs.h	/^  uint8_t _alignment = 0;$/;"	m	class:VirtReg
_alignment	external/asmjit/src/asmjit/core/constpool.h	/^  size_t _alignment;$/;"	m	class:ConstPoolScope::ConstPool
_alignment	external/asmjit/src/asmjit/core/rastack_p.h	/^  uint32_t _alignment = 1;$/;"	m	class:RAStackAllocator
_alignment	external/asmjit/src/asmjit/core/rastack_p.h	/^  uint8_t _alignment;$/;"	m	struct:RAStackSlot
_alignment	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^  uint32_t _alignment;$/;"	m	class:X86Test_AlignBase	file:
_allocatedMask	external/asmjit/src/asmjit/core/radefs_p.h	/^  RegMask _allocatedMask = 0;$/;"	m	class:RAStrategyType::RAStrategyFlags::RATiedFlags::RAWorkRegFlags::RAWorkReg
_allocationCount	external/asmjit/src/asmjit/core/jitallocator.h	/^    size_t _allocationCount;$/;"	m	struct:JitAllocatorOptions::JitAllocator::Span::Statistics
_allocator	external/asmjit/src/asmjit/core/builder.h	/^  ZoneAllocator _allocator;$/;"	m	class:NodeType::NodeFlags::SentinelType::BaseBuilder
_allocator	external/asmjit/src/asmjit/core/codeholder.h	/^  ZoneAllocator _allocator;$/;"	m	class:ExpressionOpType::ExpressionValueType::SectionFlags::CopySectionFlags::OffsetType::RelocType::LabelType::CodeHolder
_allocator	external/asmjit/src/asmjit/core/jitallocator.cpp	/^  JitAllocator _allocator;$/;"	m	class:JitAllocatorWrapper	file:
_allocator	external/asmjit/src/asmjit/core/jitallocator.h	/^    JitAllocator* _allocator;$/;"	m	struct:JitAllocatorOptions::JitAllocator::Span::WriteScopeData
_allocator	external/asmjit/src/asmjit/core/jitruntime.cpp	/^  : _allocator(params) {$/;"	f
_allocator	external/asmjit/src/asmjit/core/jitruntime.h	/^  JitAllocator _allocator;$/;"	m	class:JitRuntime
_altOpcodeIndex	external/asmjit/src/asmjit/x86/x86instdb.h	/^  uint8_t _altOpcodeIndex;$/;"	m	struct:InstDB::Mode::OpFlags::InstFlags::InstInfo
_altOpcodeTable	external/asmjit/src/asmjit/x86/x86instdb.cpp	/^const uint32_t InstDB::_altOpcodeTable[] = {$/;"	m	class:InstDB	file:
_annotated	external/asmjit/test/asmjit_test_compiler_a64.cpp	/^  bool _annotated;$/;"	m	class:A64Test_JumpTable	file:
_annotated	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^  bool _annotated;$/;"	m	class:X86Test_JumpTable1	file:
_annotation	external/asmjit/src/asmjit/core/compiler.h	/^      _annotation(annotation) {$/;"	f	class:JumpNode
_annotation	external/asmjit/src/asmjit/core/compiler.h	/^  JumpAnnotation* _annotation;$/;"	m	class:JumpNode
_annotationId	external/asmjit/src/asmjit/core/compiler.h	/^      _annotationId(annotationId) {}$/;"	f	class:JumpAnnotation
_annotationId	external/asmjit/src/asmjit/core/compiler.h	/^  uint32_t _annotationId;$/;"	m	class:JumpAnnotation
_any	external/asmjit/src/asmjit/core/builder.h	/^    AnyData _any;$/;"	m	union:NodeType::NodeFlags::SentinelType::BaseNode::__anon13
_arch	external/asmjit/src/asmjit/arm/a64rapass.cpp	/^  Arch _arch;$/;"	m	class:RACFGBuilder	file:
_arch	external/asmjit/src/asmjit/core/cpuinfo.h	/^  Arch _arch;$/;"	m	class:CpuInfo
_arch	external/asmjit/src/asmjit/core/environment.h	/^  Arch _arch;$/;"	m	class:Vendor::Platform::PlatformABI::Environment
_arch	external/asmjit/src/asmjit/core/func.h	/^  Arch _arch;$/;"	m	class:CallConvId::CallConvStrategy::CallConvFlags::FuncAttributes::FuncFrame
_arch	external/asmjit/src/asmjit/core/func.h	/^  Arch _arch;$/;"	m	struct:CallConvId::CallConvStrategy::CallConvFlags::CallConv
_arch	external/asmjit/src/asmjit/core/funcargscontext_p.h	/^  Arch _arch = Arch::kUnknown;$/;"	m	class:FuncArgsContext
_arch	external/asmjit/src/asmjit/x86/x86rapass.cpp	/^  Arch _arch;$/;"	m	class:RACFGBuilder	file:
_arch	external/asmjit/test/asmjit_test_compiler.h	/^  asmjit::Arch _arch;$/;"	m	class:TestCase
_arch	external/asmjit/test/asmjit_test_compiler.h	/^  const char* _arch = nullptr;$/;"	m	class:TestApp
_archMask	external/asmjit/src/asmjit/core/emitter.h	/^  uint64_t _archMask = 0;$/;"	m	class:AlignMode::EmitterType::EmitterFlags::EncodingOptions::BaseEmitter
_archRegs	external/asmjit/src/asmjit/core/funcargscontext_p.h	/^    RegMask _archRegs;$/;"	m	struct:FuncArgsContext::WorkData
_archTraits	external/asmjit/src/asmjit/core/archtraits.cpp	/^ASMJIT_VARAPI const ArchTraits _archTraits[uint32_t(Arch::kMaxValue) + 1] = {$/;"	v
_archTraits	external/asmjit/src/asmjit/core/archtraits.h	/^ASMJIT_VARAPI const ArchTraits _archTraits[uint32_t(Arch::kMaxValue) + 1];$/;"	m	class:Arch::SubArch::ArchTypeNameId::InstHints
_archTraits	external/asmjit/src/asmjit/core/funcargscontext_p.h	/^  const ArchTraits* _archTraits = nullptr;$/;"	m	class:FuncArgsContext
_archTraits	external/asmjit/src/asmjit/core/ralocal_p.h	/^  const ArchTraits* _archTraits;$/;"	m	class:RALocalAllocator
_archTraits	external/asmjit/src/asmjit/core/rapass_p.h	/^  const ArchTraits* _archTraits = nullptr;$/;"	m	class:RABlockFlags::BaseRAPass
_areaSize	external/asmjit/src/asmjit/core/jitallocator.cpp	/^  uint32_t _areaSize = 0;$/;"	m	class:JitAllocatorBlock	file:
_areaUsed	external/asmjit/src/asmjit/core/jitallocator.cpp	/^  uint32_t _areaUsed = 0;$/;"	m	class:JitAllocatorBlock	file:
_argCount	external/asmjit/src/asmjit/core/func.h	/^  uint8_t _argCount = 0;$/;"	m	class:CallConvId::CallConvStrategy::CallConvFlags::FuncAttributes::FuncDetail
_argCount	external/asmjit/src/asmjit/core/func.h	/^  uint8_t _argCount;$/;"	m	struct:CallConvId::CallConvStrategy::CallConvFlags::FuncSignature
_argCount	external/asmjit/test/asmjit_test_compiler_a64.cpp	/^  uint32_t _argCount;$/;"	m	class:A64Test_GpArgs	file:
_argCount	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^  uint32_t _argCount;$/;"	m	class:X86Test_AlignBase	file:
_argIndex	external/asmjit/src/asmjit/core/radefs_p.h	/^  uint8_t _argIndex = kNoArgIndex;$/;"	m	class:RAStrategyType::RAStrategyFlags::RATiedFlags::RAWorkRegFlags::RAWorkReg
_argPacks	external/asmjit/src/asmjit/core/func.h	/^  FuncValuePack _argPacks[Globals::kMaxFuncArgs];$/;"	m	class:CallConvId::CallConvStrategy::CallConvFlags::FuncAttributes::FuncArgsAssignment
_argStackSize	external/asmjit/src/asmjit/core/func.h	/^  uint32_t _argStackSize = 0;$/;"	m	class:CallConvId::CallConvStrategy::CallConvFlags::FuncAttributes::FuncDetail
_argValueIndex	external/asmjit/src/asmjit/core/radefs_p.h	/^  uint8_t _argValueIndex = 0;$/;"	m	class:RAStrategyType::RAStrategyFlags::RATiedFlags::RAWorkRegFlags::RAWorkReg
_argc	external/asmjit/test/broken.cpp	/^  int _argc;$/;"	m	struct:BrokenGlobal	file:
_argc	external/asmjit/test/cmdline.h	/^  int _argc;$/;"	m	class:CmdLine
_args	external/asmjit/src/asmjit/core/compiler.h	/^      _args(nullptr) {$/;"	f	class:FuncNode
_args	external/asmjit/src/asmjit/core/compiler.h	/^      _args(nullptr) {$/;"	f	class:InvokeNode
_args	external/asmjit/src/asmjit/core/compiler.h	/^  ArgPack* _args;$/;"	m	class:FuncNode
_args	external/asmjit/src/asmjit/core/compiler.h	/^  OperandPack* _args;$/;"	m	class:InvokeNode
_args	external/asmjit/src/asmjit/core/func.h	/^  const TypeId* _args;$/;"	m	struct:CallConvId::CallConvStrategy::CallConvFlags::FuncSignature
_argv	external/asmjit/test/broken.cpp	/^  const char** _argv;$/;"	m	struct:BrokenGlobal	file:
_argv	external/asmjit/test/cmdline.h	/^  const char* const* _argv;$/;"	m	class:CmdLine
_assignedRegs	external/asmjit/src/asmjit/core/funcargscontext_p.h	/^    RegMask _assignedRegs;$/;"	m	struct:FuncArgsContext::WorkData
_attributes	external/asmjit/src/asmjit/core/func.h	/^  FuncAttributes _attributes;$/;"	m	class:CallConvId::CallConvStrategy::CallConvFlags::FuncAttributes::FuncFrame
_availableRegCount	external/asmjit/src/asmjit/core/rapass_p.h	/^  RARegCount _availableRegCount = RARegCount();$/;"	m	class:RABlockFlags::BaseRAPass
_availableRegs	external/asmjit/src/asmjit/core/ralocal_p.h	/^  RARegMask _availableRegs;$/;"	m	class:RALocalAllocator
_availableRegs	external/asmjit/src/asmjit/core/rapass_p.h	/^  RARegMask _availableRegs = RARegMask();$/;"	m	class:RABlockFlags::BaseRAPass
_avx512Enabled	external/asmjit/src/asmjit/x86/x86emithelper_p.h	/^      _avx512Enabled(avx512Enabled) {}$/;"	f	class:EmitHelper
_avx512Enabled	external/asmjit/src/asmjit/x86/x86emithelper_p.h	/^  bool _avx512Enabled;$/;"	m	class:EmitHelper
_avx512Flags	external/asmjit/src/asmjit/x86/x86instdb.h	/^  uint32_t _avx512Flags : 11;$/;"	m	struct:InstDB::Mode::OpFlags::InstFlags::CommonInfo
_avxEnabled	external/asmjit/src/asmjit/x86/x86emithelper_p.h	/^  bool _avxEnabled;$/;"	m	class:EmitHelper
_avxEnabled	external/asmjit/src/asmjit/x86/x86rapass.cpp	/^  bool _avxEnabled;$/;"	m	class:RACFGBuilder	file:
_bPtr	external/asmjit/src/asmjit/core/support.h	/^  const T* _bPtr;$/;"	m	class:Support::Internal::BitVectorOpIterator
_base	external/asmjit/src/asmjit/core/zonestring.h	/^    ZoneStringBase _base;$/;"	m	union:ZoneString::__anon21
_baseAddress	external/asmjit/src/asmjit/core/codeholder.h	/^  uint64_t _baseAddress;$/;"	m	class:ExpressionOpType::ExpressionValueType::SectionFlags::CopySectionFlags::OffsetType::RelocType::LabelType::CodeHolder
_baseId	external/asmjit/src/asmjit/core/operand.h	/^  uint32_t _baseId;$/;"	m	struct:OperandType::RegType::RegGroup::Operand_
_baseInst	external/asmjit/src/asmjit/core/builder.h	/^      _baseInst(instId, options) {$/;"	f	class:NodeType::NodeFlags::SentinelType::InstNode
_baseInst	external/asmjit/src/asmjit/core/builder.h	/^  BaseInst _baseInst;$/;"	m	class:NodeType::NodeFlags::SentinelType::InstNode
_baseLabelId	external/asmjit/src/asmjit/core/builder.h	/^  uint32_t _baseLabelId;$/;"	m	class:NodeType::NodeFlags::SentinelType::EmbedLabelDeltaNode
_baseRegId	external/asmjit/src/asmjit/core/rastack_p.h	/^  uint8_t _baseRegId;$/;"	m	struct:RAStackSlot
_bitWord	external/asmjit/src/asmjit/core/jitallocator.cpp	/^  T _bitWord;$/;"	m	class:BitVectorRangeIterator	file:
_bitWord	external/asmjit/src/asmjit/core/support.h	/^    : _bitWord(bitWord) {}$/;"	f	class:Support::Internal::BitWordIterator
_bitWord	external/asmjit/src/asmjit/core/support.h	/^  T _bitWord;$/;"	m	class:Support::Internal::BitWordIterator
_bits	external/asmjit/src/asmjit/core/cpuinfo.h	/^    Support::Array<BitWord, kNumBitWords> _bits;$/;"	m	struct:CpuFeatures::Data
_bits	external/asmjit/src/asmjit/core/operand.h	/^  uint32_t _bits;$/;"	m	struct:OperandType::RegType::RegGroup::OperandSignature
_block	external/asmjit/src/asmjit/core/jitallocator.h	/^    void* _block = nullptr;$/;"	m	class:JitAllocatorOptions::JitAllocator::Span::Flags
_block	external/asmjit/src/asmjit/core/ralocal_p.h	/^  RABlock* _block;$/;"	m	class:RALocalAllocator
_block	external/asmjit/src/asmjit/core/rapass.cpp	/^  RABlock* _block;$/;"	m	class:RABlockVisitItem	file:
_block	external/asmjit/src/asmjit/core/rapass_p.h	/^  RABlock* _block;$/;"	m	class:RABlockFlags::RAInst
_block	external/asmjit/src/asmjit/core/zone.h	/^  Block* _block;$/;"	m	class:Zone
_blockAlignmentShift	external/asmjit/src/asmjit/core/zone.h	/^      size_t _blockAlignmentShift : 3;$/;"	m	struct:Zone::__anon16::__anon17
_blockCount	external/asmjit/src/asmjit/core/jitallocator.h	/^    size_t _blockCount;$/;"	m	struct:JitAllocatorOptions::JitAllocator::Span::Statistics
_blockId	external/asmjit/src/asmjit/core/rapass_p.h	/^  uint32_t _blockId = kUnassignedId;$/;"	m	class:RABlockFlags::RABlock
_blockSize	external/asmjit/src/asmjit/core/jitallocator.cpp	/^  size_t _blockSize = 0;$/;"	m	class:JitAllocatorBlock	file:
_blockSize	external/asmjit/src/asmjit/core/zone.h	/^      size_t _blockSize : Support::bitSizeOf<size_t>() - 4;$/;"	m	struct:Zone::__anon16::__anon17
_brand	external/asmjit/src/asmjit/core/cpuinfo.h	/^  FixedString<64> _brand;$/;"	m	class:CpuInfo
_brandId	external/asmjit/src/asmjit/core/cpuinfo.h	/^  uint32_t _brandId;$/;"	m	class:CpuInfo
_brokenGlobal	external/asmjit/test/broken.cpp	/^static BrokenGlobal _brokenGlobal;$/;"	v	file:
_bucketsCount	external/asmjit/src/asmjit/core/zonehash.h	/^  uint32_t _bucketsCount;$/;"	m	class:ZoneHashBase
_bucketsGrow	external/asmjit/src/asmjit/core/zonehash.h	/^  uint32_t _bucketsGrow;$/;"	m	class:ZoneHashBase
_buffer	external/asmjit/src/asmjit/core/codeholder.h	/^  CodeBuffer _buffer;$/;"	m	class:ExpressionOpType::ExpressionValueType::SectionFlags::CopySectionFlags::Section
_bufferData	external/asmjit/src/asmjit/core/assembler.h	/^  uint8_t* _bufferData = nullptr;$/;"	m	class:BaseAssembler
_bufferEnd	external/asmjit/src/asmjit/core/assembler.h	/^  uint8_t* _bufferEnd = nullptr;$/;"	m	class:BaseAssembler
_bufferPtr	external/asmjit/src/asmjit/core/assembler.h	/^  uint8_t* _bufferPtr = nullptr;$/;"	m	class:BaseAssembler
_builderArgList	external/asmjit/src/asmjit/core/func.h	/^  TypeId _builderArgList[Globals::kMaxFuncArgs];$/;"	m	class:CallConvId::CallConvStrategy::CallConvFlags::FuncSignatureBuilder
_cacheLineSize	external/asmjit/src/asmjit/core/cpuinfo.h	/^  uint32_t _cacheLineSize;$/;"	m	class:CpuInfo
_callStackAlignment	external/asmjit/src/asmjit/core/func.h	/^  uint8_t _callStackAlignment;$/;"	m	class:CallConvId::CallConvStrategy::CallConvFlags::FuncAttributes::FuncFrame
_callStackSize	external/asmjit/src/asmjit/core/func.h	/^  uint32_t _callStackSize;$/;"	m	class:CallConvId::CallConvStrategy::CallConvFlags::FuncAttributes::FuncFrame
_calleeStackCleanup	external/asmjit/src/asmjit/core/func.h	/^  uint16_t _calleeStackCleanup;$/;"	m	class:CallConvId::CallConvStrategy::CallConvFlags::FuncAttributes::FuncFrame
_capacity	external/asmjit/src/asmjit/core/codebuffer.h	/^  size_t _capacity;$/;"	m	struct:CodeBufferFlags::CodeBuffer
_capacity	external/asmjit/src/asmjit/core/zonevector.h	/^      _capacity(other._capacity) {}$/;"	f	class:ZoneBitVector
_capacity	external/asmjit/src/asmjit/core/zonevector.h	/^      _capacity(other._capacity) {}$/;"	f	class:ZoneVectorBase
_capacity	external/asmjit/src/asmjit/core/zonevector.h	/^  size_type _capacity = 0;$/;"	m	class:ZoneVectorBase
_capacity	external/asmjit/src/asmjit/core/zonevector.h	/^  uint32_t _capacity = 0;$/;"	m	class:ZoneBitVector
_cb	external/asmjit/src/asmjit/core/builder.h	/^  BaseBuilder* _cb = nullptr;$/;"	m	class:NodeType::NodeFlags::SentinelType::Pass
_cc	external/asmjit/src/asmjit/core/rabuilders_p.h	/^  BaseCompiler* _cc = nullptr;$/;"	m	class:RACFGBuilderT
_cc	external/asmjit/src/asmjit/core/ralocal_p.h	/^  BaseCompiler* _cc;$/;"	m	class:RALocalAllocator
_ccId	external/asmjit/src/asmjit/core/func.h	/^  CallConvId _ccId;$/;"	m	struct:CallConvId::CallConvStrategy::CallConvFlags::FuncSignature
_clobberSurvivalMask	external/asmjit/src/asmjit/core/radefs_p.h	/^  RegMask _clobberSurvivalMask = 0;$/;"	m	class:RAStrategyType::RAStrategyFlags::RATiedFlags::RAWorkRegFlags::RAWorkReg
_clobbered	external/asmjit/src/asmjit/core/rapass_p.h	/^  RARegMask _clobbered;$/;"	m	class:RABlockFlags::RAInstBuilder
_clobberedRegs	external/asmjit/src/asmjit/core/ralocal_p.h	/^  RARegMask _clobberedRegs;$/;"	m	class:RALocalAllocator
_clobberedRegs	external/asmjit/src/asmjit/core/rapass_p.h	/^  RARegMask _clobberedRegs = RARegMask();$/;"	m	class:RABlockFlags::BaseRAPass
_clobberedRegs	external/asmjit/src/asmjit/core/rapass_p.h	/^  RARegMask _clobberedRegs;$/;"	m	class:RABlockFlags::RAInst
_cmovccTable	external/asmjit/src/asmjit/x86/x86globals.h	/^    static constexpr uint16_t _cmovccTable[] = { ASMJIT_INST_FROM_COND(Inst::kIdCmov) };$/;"	m	namespace:CondCode::Inst
_code	external/asmjit/src/asmjit/core/emitter.h	/^  CodeHolder* _code = nullptr;$/;"	m	class:AlignMode::EmitterType::EmitterFlags::EncodingOptions::BaseEmitter
_codeZone	external/asmjit/src/asmjit/core/builder.h	/^  Zone _codeZone;$/;"	m	class:NodeType::NodeFlags::SentinelType::BaseBuilder
_commonInfoIndex	external/asmjit/src/asmjit/x86/x86instdb.h	/^  uint32_t _commonInfoIndex : 10;$/;"	m	struct:InstDB::Mode::OpFlags::InstFlags::InstInfo
_commonInfoTable	external/asmjit/src/asmjit/x86/x86instdb.cpp	/^const InstDB::CommonInfo InstDB::_commonInfoTable[] = {$/;"	m	class:InstDB	file:
_commonInfoTable	external/asmjit/src/asmjit/x86/x86instdb.h	/^ASMJIT_VARAPI const CommonInfo _commonInfoTable[];$/;"	m	class:InstDB::Mode::OpFlags::InstFlags
_compiler	external/asmjit/src/asmjit/core/compiler.h	/^  BaseCompiler* _compiler;$/;"	m	class:JumpAnnotation
_consecutiveLeadCount	external/asmjit/src/asmjit/core/inst.h	/^  uint8_t _consecutiveLeadCount;$/;"	m	struct:InstIdParts::InstOptions::InstControlFlow::InstSameRegHint::CpuRWFlags::OpRWFlags::OpRWInfo
_consecutiveMask	external/asmjit/src/asmjit/core/radefs_p.h	/^  RegMask _consecutiveMask = 0xFFFFFFFFu;$/;"	m	class:RAStrategyType::RAStrategyFlags::RATiedFlags::RAWorkRegFlags::RAWorkReg
_consecutiveParent	external/asmjit/src/asmjit/core/radefs_p.h	/^  uint32_t _consecutiveParent;$/;"	m	struct:RAStrategyType::RAStrategyFlags::RATiedFlags::RATiedReg
_constPool	external/asmjit/src/asmjit/core/builder.h	/^  ConstPool _constPool;$/;"	m	class:NodeType::NodeFlags::SentinelType::ConstPoolNode
_constPools	external/asmjit/src/asmjit/core/compiler.h	/^  ConstPoolNode* _constPools[2];$/;"	m	class:BaseCompiler
_constraints	external/asmjit/src/asmjit/core/funcargscontext_p.h	/^  const RAConstraints* _constraints = nullptr;$/;"	m	class:FuncArgsContext
_content	external/asmjit/src/asmjit/core/logger.h	/^  String _content;$/;"	m	class:StringLogger
_controlFlow	external/asmjit/src/asmjit/x86/x86instdb.h	/^  uint32_t _controlFlow : 3;$/;"	m	struct:InstDB::Mode::OpFlags::InstFlags::CommonInfo
_count	external/asmjit/src/asmjit/core/rapass_p.h	/^  RARegCount _count;$/;"	m	class:RABlockFlags::RAInstBuilder
_cpuFeatures	external/asmjit/src/asmjit/core/codeholder.h	/^  CpuFeatures _cpuFeatures;$/;"	m	class:ExpressionOpType::ExpressionValueType::SectionFlags::CopySectionFlags::OffsetType::RelocType::LabelType::CodeHolder
_cpuFeatures	external/asmjit/src/asmjit/core/target.h	/^  CpuFeatures _cpuFeatures;$/;"	m	class:Target
_createdBlockCount	external/asmjit/src/asmjit/core/rapass_p.h	/^  uint32_t _createdBlockCount = 0;$/;"	m	class:RABlockFlags::BaseRAPass
_cur	external/asmjit/src/asmjit/core/rapass_p.h	/^  RATiedReg* _cur;$/;"	m	class:RABlockFlags::RAInstBuilder
_curAssignment	external/asmjit/src/asmjit/core/ralocal_p.h	/^  RAAssignment _curAssignment;$/;"	m	class:RALocalAllocator
_curBlock	external/asmjit/src/asmjit/core/rabuilders_p.h	/^  RABlock* _curBlock = nullptr;$/;"	m	class:RACFGBuilderT
_current	external/asmjit/src/asmjit/core/support.h	/^  T _current;$/;"	m	class:Support::Internal::BitVectorIterator
_current	external/asmjit/src/asmjit/core/support.h	/^  T _current;$/;"	m	class:Support::Internal::BitVectorOpIterator
_cursor	external/asmjit/src/asmjit/core/builder.h	/^  BaseNode* _cursor = nullptr;$/;"	m	class:NodeType::NodeFlags::SentinelType::BaseBuilder
_cursor	external/asmjit/src/asmjit/core/codewriter_p.h	/^  uint8_t* _cursor;$/;"	m	class:CodeWriter
_customData	external/asmjit/src/asmjit/core/zonehash.h	/^  uint32_t _customData;$/;"	m	class:ZoneHashNode
_daOffset	external/asmjit/src/asmjit/core/func.h	/^  uint32_t _daOffset;$/;"	m	class:CallConvId::CallConvStrategy::CallConvFlags::FuncAttributes::FuncFrame
_data	external/asmjit/src/asmjit/core/codebuffer.h	/^  uint8_t* _data;$/;"	m	struct:CodeBufferFlags::CodeBuffer
_data	external/asmjit/src/asmjit/core/compiler.h	/^    Operand_ _data[Globals::kMaxValuePack];$/;"	m	struct:InvokeNode::OperandPack
_data	external/asmjit/src/asmjit/core/compiler.h	/^    RegOnly _data[Globals::kMaxValuePack];$/;"	m	struct:FuncNode::ArgPack
_data	external/asmjit/src/asmjit/core/func.h	/^  uint32_t _data;$/;"	m	struct:CallConvId::CallConvStrategy::CallConvFlags::FuncValue
_data	external/asmjit/src/asmjit/core/jitallocator.h	/^    size_t _data[64];$/;"	m	struct:JitAllocatorOptions::JitAllocator::Span::WriteScopeData
_data	external/asmjit/src/asmjit/core/operand.h	/^  uint32_t _data[2];$/;"	m	struct:OperandType::RegType::RegGroup::Operand_
_data	external/asmjit/src/asmjit/core/radefs_p.h	/^  ASMJIT_INLINE_NODEBUG RALiveSpans() noexcept : _data() {}$/;"	f	class:RAStrategyType::RAStrategyFlags::RALiveSpans
_data	external/asmjit/src/asmjit/core/radefs_p.h	/^  ZoneVector<T> _data;$/;"	m	class:RAStrategyType::RAStrategyFlags::RALiveSpans
_data	external/asmjit/src/asmjit/core/support.h	/^  T _data[N];$/;"	m	struct:Support::Internal::SortOrder::Array
_data	external/asmjit/src/asmjit/core/support.h	/^  void* _data;$/;"	m	struct:Support::Internal::SortOrder::Temporary
_data	external/asmjit/src/asmjit/core/zonehash.h	/^  ZoneHashNode** _data;$/;"	m	class:ZoneHashBase
_data	external/asmjit/src/asmjit/core/zonevector.h	/^  BitWord* _data = nullptr;$/;"	m	class:ZoneBitVector
_data	external/asmjit/src/asmjit/core/zonevector.h	/^  void* _data = nullptr;$/;"	m	class:ZoneVectorBase
_dataSize	external/asmjit/src/asmjit/core/builder.h	/^      _dataSize(dataSize) {}$/;"	f	class:NodeType::NodeFlags::SentinelType::EmbedLabelDeltaNode
_dataSize	external/asmjit/src/asmjit/core/builder.h	/^      _dataSize(dataSize) {}$/;"	f	class:NodeType::NodeFlags::SentinelType::EmbedLabelNode
_dataSize	external/asmjit/src/asmjit/core/builder.h	/^  uint32_t _dataSize;$/;"	m	class:NodeType::NodeFlags::SentinelType::EmbedLabelDeltaNode
_dataSize	external/asmjit/src/asmjit/core/builder.h	/^  uint32_t _dataSize;$/;"	m	class:NodeType::NodeFlags::SentinelType::EmbedLabelNode
_dataSize	external/asmjit/src/asmjit/core/constpool.cpp	/^    _dataSize(dataSize) {}$/;"	f	struct:ConstPoolFill
_dataSize	external/asmjit/src/asmjit/core/constpool.cpp	/^  size_t _dataSize;$/;"	m	struct:ConstPoolFill	file:
_dataSize	external/asmjit/src/asmjit/core/constpool.h	/^        _dataSize(dataSize) {}$/;"	f	struct:ConstPoolScope::ConstPool::Tree
_dataSize	external/asmjit/src/asmjit/core/constpool.h	/^      : _dataSize(dataSize) {}$/;"	f	class:ConstPoolScope::ConstPool::Compare
_dataSize	external/asmjit/src/asmjit/core/constpool.h	/^    size_t _dataSize;$/;"	m	class:ConstPoolScope::ConstPool::Compare
_dataSize	external/asmjit/src/asmjit/core/constpool.h	/^    size_t _dataSize;$/;"	m	struct:ConstPoolScope::ConstPool::Tree
_dataZone	external/asmjit/src/asmjit/core/builder.h	/^  Zone _dataZone;$/;"	m	class:NodeType::NodeFlags::SentinelType::BaseBuilder
_diagnosticOptions	external/asmjit/src/asmjit/core/emitter.h	/^  DiagnosticOptions _diagnosticOptions = DiagnosticOptions::kNone;$/;"	m	class:AlignMode::EmitterType::EmitterFlags::EncodingOptions::BaseEmitter
_dirtyRegs	external/asmjit/src/asmjit/core/func.h	/^  Support::Array<RegMask, Globals::kNumVirtGroups> _dirtyRegs;$/;"	m	class:CallConvId::CallConvStrategy::CallConvFlags::FuncAttributes::FuncFrame
_dirtySectionLinks	external/asmjit/src/asmjit/core/builder.h	/^  bool _dirtySectionLinks = false;$/;"	m	class:NodeType::NodeFlags::SentinelType::BaseBuilder
_dst	external/asmjit/src/asmjit/core/constpool.cpp	/^  uint8_t* _dst;$/;"	m	struct:ConstPoolFill	file:
_dstRegs	external/asmjit/src/asmjit/core/funcargscontext_p.h	/^    RegMask _dstRegs;$/;"	m	struct:FuncArgsContext::WorkData
_dstShuf	external/asmjit/src/asmjit/core/funcargscontext_p.h	/^    RegMask _dstShuf;$/;"	m	struct:FuncArgsContext::WorkData
_dummy	external/asmjit/src/asmjit/core/zonestring.h	/^      void* _dummy;$/;"	m	struct:ZoneStringBase::__anon18::__anon20
_dumpAsm	external/asmjit/test/asmjit_test_compiler.h	/^  bool _dumpAsm = false;$/;"	m	class:TestApp
_dumpHex	external/asmjit/test/asmjit_test_compiler.h	/^  bool _dumpHex = false;$/;"	m	class:TestApp
_elementOp	external/asmjit/src/asmjit/arm/a64instdb_p.h	/^  uint32_t _elementOp;$/;"	m	struct:InstDB::EncodingData::FSimdVVVe
_elementOp	external/asmjit/src/asmjit/arm/a64instdb_p.h	/^  uint32_t _elementOp;$/;"	m	struct:InstDB::EncodingData::SimdFcmla
_elementOp	external/asmjit/src/asmjit/arm/a64instdb_p.h	/^  uint32_t _elementOp;$/;"	m	struct:InstDB::EncodingData::SimdFmlal
_embed	external/asmjit/src/asmjit/core/builder.h	/^    EmbedData _embed;$/;"	m	union:NodeType::NodeFlags::SentinelType::BaseNode::__anon13
_embedded	external/asmjit/src/asmjit/core/zonehash.h	/^  ZoneHashNode* _embedded[1];$/;"	m	class:ZoneHashBase
_embedded	external/asmjit/src/asmjit/core/zonestring.h	/^      char _embedded[sizeof(void*) * 2 - 4];$/;"	m	struct:ZoneStringBase::__anon18::__anon19
_embeddedData	external/asmjit/src/asmjit/core/string.h	/^  char _embeddedData[Support::alignUp(N + 1, sizeof(size_t))];$/;"	m	class:StringFormatFlags::String::StringTmp
_emit	external/asmjit/src/asmjit/core/builder.cpp	/^Error BaseBuilder::_emit(InstId instId, const Operand_& o0, const Operand_& o1, const Operand_& o2, const Operand_* opExt) {$/;"	f	class:BaseBuilder
_emit	external/asmjit/src/asmjit/core/emitter.cpp	/^Error BaseEmitter::_emit(InstId instId, const Operand_& o0, const Operand_& o1, const Operand_& o2, const Operand_* oExt) {$/;"	f	class:BaseEmitter
_emit	external/asmjit/src/asmjit/x86/x86assembler.cpp	/^ASMJIT_FAVOR_SPEED Error Assembler::_emit(InstId instId, const Operand_& o0, const Operand_& o1, const Operand_& o2, const Operand_* opExt) {$/;"	f	class:X86BufferWriter::Assembler
_emitHelper	external/asmjit/src/asmjit/arm/a64rapass_p.h	/^  EmitHelper _emitHelper;$/;"	m	class:ARMRAPass
_emitHelper	external/asmjit/src/asmjit/x86/x86rapass_p.h	/^  EmitHelper _emitHelper;$/;"	m	class:X86RAPass
_emitI	external/asmjit/src/asmjit/core/emitter.cpp	/^Error BaseEmitter::_emitI(InstId instId) {$/;"	f	class:BaseEmitter
_emitI	external/asmjit/src/asmjit/core/emitter.cpp	/^Error BaseEmitter::_emitI(InstId instId, const Operand_& o0) {$/;"	f	class:BaseEmitter
_emitI	external/asmjit/src/asmjit/core/emitter.cpp	/^Error BaseEmitter::_emitI(InstId instId, const Operand_& o0, const Operand_& o1) {$/;"	f	class:BaseEmitter
_emitI	external/asmjit/src/asmjit/core/emitter.cpp	/^Error BaseEmitter::_emitI(InstId instId, const Operand_& o0, const Operand_& o1, const Operand_& o2) {$/;"	f	class:BaseEmitter
_emitI	external/asmjit/src/asmjit/core/emitter.cpp	/^Error BaseEmitter::_emitI(InstId instId, const Operand_& o0, const Operand_& o1, const Operand_& o2, const Operand_& o3) {$/;"	f	class:BaseEmitter
_emitI	external/asmjit/src/asmjit/core/emitter.cpp	/^Error BaseEmitter::_emitI(InstId instId, const Operand_& o0, const Operand_& o1, const Operand_& o2, const Operand_& o3, const Operand_& o4) {$/;"	f	class:BaseEmitter
_emitI	external/asmjit/src/asmjit/core/emitter.cpp	/^Error BaseEmitter::_emitI(InstId instId, const Operand_& o0, const Operand_& o1, const Operand_& o2, const Operand_& o3, const Operand_& o4, const Operand_& o5) {$/;"	f	class:BaseEmitter
_emitOpArray	external/asmjit/src/asmjit/core/emitter.cpp	/^Error BaseEmitter::_emitOpArray(InstId instId, const Operand_* operands, size_t opCount) {$/;"	f	class:BaseEmitter
_emitter	external/asmjit/src/asmjit/core/emithelper_p.h	/^    : _emitter(emitter) {}$/;"	f	class:BaseEmitHelper
_emitter	external/asmjit/src/asmjit/core/emithelper_p.h	/^  BaseEmitter* _emitter;$/;"	m	class:BaseEmitHelper
_emitterFlags	external/asmjit/src/asmjit/core/emitter.h	/^  EmitterFlags _emitterFlags = EmitterFlags::kNone;$/;"	m	class:AlignMode::EmitterType::EmitterFlags::EncodingOptions::BaseEmitter
_emitterType	external/asmjit/src/asmjit/core/emitter.cpp	/^  : _emitterType(emitterType) {}$/;"	f
_emitterType	external/asmjit/src/asmjit/core/emitter.h	/^  EmitterType _emitterType = EmitterType::kNone;$/;"	m	class:AlignMode::EmitterType::EmitterFlags::EncodingOptions::BaseEmitter
_emitters	external/asmjit/src/asmjit/core/codeholder.h	/^  ZoneVector<BaseEmitter*> _emitters;$/;"	m	class:ExpressionOpType::ExpressionValueType::SectionFlags::CopySectionFlags::OffsetType::RelocType::LabelType::CodeHolder
_encoding	external/asmjit/src/asmjit/arm/a64instdb.h	/^  uint32_t _encoding : 8;$/;"	m	struct:InstDB::InstInfo
_encoding	external/asmjit/src/asmjit/x86/x86instdb.h	/^  uint8_t _encoding;$/;"	m	struct:InstDB::Mode::OpFlags::InstFlags::InstInfo
_encodingDataIndex	external/asmjit/src/asmjit/arm/a64instdb.h	/^  uint32_t _encodingDataIndex : 8;$/;"	m	struct:InstDB::InstInfo
_encodingOptions	external/asmjit/src/asmjit/core/emitter.h	/^  EncodingOptions _encodingOptions = EncodingOptions::kNone;$/;"	m	class:AlignMode::EmitterType::EmitterFlags::EncodingOptions::BaseEmitter
_end	external/asmjit/src/asmjit/core/compiler.h	/^  SentinelNode* _end;$/;"	m	class:FuncNode
_end	external/asmjit/src/asmjit/core/jitallocator.cpp	/^  size_t _end;$/;"	m	class:BitVectorRangeIterator	file:
_end	external/asmjit/src/asmjit/core/support.h	/^  size_t _end;$/;"	m	class:Support::Internal::BitVectorIterator
_end	external/asmjit/src/asmjit/core/support.h	/^  size_t _end;$/;"	m	class:Support::Internal::BitVectorOpIterator
_end	external/asmjit/src/asmjit/core/zone.h	/^  uint8_t* _end;$/;"	m	class:Zone
_end	external/asmjit/src/asmjit/core/zonestack.h	/^    void* _end;$/;"	m	struct:ZoneStackBase::Block
_endPosition	external/asmjit/src/asmjit/core/rapass_p.h	/^  uint32_t _endPosition = 0;$/;"	m	class:RABlockFlags::RABlock
_entryPhysToWorkMap	external/asmjit/src/asmjit/core/rapass_p.h	/^  PhysToWorkMap* _entryPhysToWorkMap = nullptr;$/;"	m	class:RABlockFlags::RABlock
_entryScratchGpRegs	external/asmjit/src/asmjit/core/rapass_p.h	/^  RegMask _entryScratchGpRegs = 0;$/;"	m	class:RABlockFlags::RABlock
_entryScratchGpRegs	external/asmjit/src/asmjit/core/rapass_p.h	/^  RegMask _entryScratchGpRegs = 0;$/;"	m	class:RABlockFlags::RASharedAssignment
_environment	external/asmjit/src/asmjit/core/codeholder.h	/^  Environment _environment;$/;"	m	class:ExpressionOpType::ExpressionValueType::SectionFlags::CopySectionFlags::OffsetType::RelocType::LabelType::CodeHolder
_environment	external/asmjit/src/asmjit/core/target.h	/^  Environment _environment;$/;"	m	class:Target
_err	external/asmjit/test/asmjit_test_compiler.h	/^  asmjit::Error _err;$/;"	m	class:SimpleErrorHandler
_errorHandler	external/asmjit/src/asmjit/core/codeholder.h	/^  ErrorHandler* _errorHandler;$/;"	m	class:ExpressionOpType::ExpressionValueType::SectionFlags::CopySectionFlags::OffsetType::RelocType::LabelType::CodeHolder
_errorHandler	external/asmjit/src/asmjit/core/emitter.h	/^  ErrorHandler* _errorHandler = nullptr;$/;"	m	class:AlignMode::EmitterType::EmitterFlags::EncodingOptions::BaseEmitter
_exitLabelId	external/asmjit/src/asmjit/core/rabuilders_p.h	/^  uint32_t _exitLabelId = Globals::kInvalidId;$/;"	m	class:RACFGBuilderT
_exitNode	external/asmjit/src/asmjit/core/compiler.h	/^  LabelNode* _exitNode;$/;"	m	class:FuncNode
_exitScratchGpRegs	external/asmjit/src/asmjit/core/rapass_p.h	/^  RegMask _exitScratchGpRegs = 0;$/;"	m	class:RABlockFlags::RABlock
_expression	external/asmjit/test/broken.h	/^  const char* _expression = nullptr;$/;"	m	class:BrokenAPI::Failure
_extendByteMask	external/asmjit/src/asmjit/core/inst.h	/^  uint64_t _extendByteMask;$/;"	m	struct:InstIdParts::InstOptions::InstControlFlow::InstSameRegHint::CpuRWFlags::OpRWFlags::OpRWInfo
_external	external/asmjit/src/asmjit/core/zonestring.h	/^      char* _external;$/;"	m	struct:ZoneStringBase::__anon18::__anon20
_externalData	external/asmjit/src/asmjit/core/builder.h	/^    uint8_t* _externalData;$/;"	m	union:NodeType::NodeFlags::SentinelType::EmbedDataNode::__anon15
_extraBlock	external/asmjit/src/asmjit/core/rapass_p.h	/^  BaseNode* _extraBlock = nullptr;$/;"	m	class:RABlockFlags::BaseRAPass
_extraReg	external/asmjit/src/asmjit/core/inst.h	/^      _extraReg() {}$/;"	f	class:InstIdParts::InstOptions::InstControlFlow::InstSameRegHint::BaseInst
_extraReg	external/asmjit/src/asmjit/core/inst.h	/^      _extraReg(extraReg) {}$/;"	f	class:InstIdParts::InstOptions::InstControlFlow::InstSameRegHint::BaseInst
_extraReg	external/asmjit/src/asmjit/core/inst.h	/^  OpRWInfo _extraReg;$/;"	m	struct:InstIdParts::InstOptions::InstControlFlow::InstSameRegHint::CpuRWFlags::OpRWFlags::InstRWFlags::InstRWInfo
_extraReg	external/asmjit/src/asmjit/core/inst.h	/^  RegOnly _extraReg;$/;"	m	class:InstIdParts::InstOptions::InstControlFlow::InstSameRegHint::BaseInst
_extraRegSaveOffset	external/asmjit/src/asmjit/core/func.h	/^  uint32_t _extraRegSaveOffset;$/;"	m	class:CallConvId::CallConvStrategy::CallConvFlags::FuncAttributes::FuncFrame
_extraRegSaveSize	external/asmjit/src/asmjit/core/func.h	/^  uint16_t _extraRegSaveSize;$/;"	m	class:CallConvId::CallConvStrategy::CallConvFlags::FuncAttributes::FuncFrame
_f	src/env.cpp	/^    char _f[20 - 2 * sizeof(u32) - sizeof(u32)];$/;"	m	struct:dbt::env_syscall::uabi_sysinfo	file:
_familyId	external/asmjit/src/asmjit/core/cpuinfo.h	/^  uint32_t _familyId;$/;"	m	class:CpuInfo
_features	external/asmjit/src/asmjit/core/cpuinfo.h	/^    : _features(Globals::NoInit) {};$/;"	f	class:CpuInfo
_features	external/asmjit/src/asmjit/core/cpuinfo.h	/^  CpuFeatures _features;$/;"	m	class:CpuInfo
_features	external/asmjit/src/asmjit/x86/x86instdb_p.h	/^  uint8_t _features[6];$/;"	m	struct:InstDB::AdditionalInfo
_file	external/asmjit/src/asmjit/core/logger.cpp	/^  : _file(file) {}$/;"	f
_file	external/asmjit/src/asmjit/core/logger.h	/^  FILE* _file;$/;"	m	class:FileLogger
_file	external/asmjit/test/broken.cpp	/^  FILE* _file;$/;"	m	struct:BrokenGlobal	file:
_file	external/asmjit/test/broken.h	/^  const char* _file = nullptr;$/;"	m	class:BrokenAPI::Failure
_finalStackAlignment	external/asmjit/src/asmjit/core/func.h	/^  uint8_t _finalStackAlignment;$/;"	m	class:CallConvId::CallConvStrategy::CallConvFlags::FuncAttributes::FuncFrame
_finalStackSize	external/asmjit/src/asmjit/core/func.h	/^  uint32_t _finalStackSize;$/;"	m	class:CallConvId::CallConvStrategy::CallConvFlags::FuncAttributes::FuncFrame
_first	external/asmjit/src/asmjit/core/builder.h	/^  BaseNode* _first = nullptr;$/;"	m	class:NodeType::NodeFlags::SentinelType::NodeList
_first	external/asmjit/src/asmjit/core/rapass_p.h	/^  BaseNode* _first = nullptr;$/;"	m	class:RABlockFlags::RABlock
_firstPosition	external/asmjit/src/asmjit/core/rapass_p.h	/^  uint32_t _firstPosition = 0;$/;"	m	class:RABlockFlags::RABlock
_flags	external/asmjit/src/asmjit/arm/a64instdb.h	/^  uint16_t _flags;$/;"	m	struct:InstDB::InstInfo
_flags	external/asmjit/src/asmjit/core/codebuffer.h	/^  CodeBufferFlags _flags;$/;"	m	struct:CodeBufferFlags::CodeBuffer
_flags	external/asmjit/src/asmjit/core/codeholder.h	/^  SectionFlags _flags;$/;"	m	class:ExpressionOpType::ExpressionValueType::SectionFlags::CopySectionFlags::Section
_flags	external/asmjit/src/asmjit/core/codeholder.h	/^  uint8_t _flags;$/;"	m	struct:ExpressionOpType::ExpressionValueType::SectionFlags::CopySectionFlags::OffsetType::OffsetFormat
_flags	external/asmjit/src/asmjit/core/formatter.h	/^  FormatFlags _flags = FormatFlags::kNone;$/;"	m	class:FormatFlags::FormatIndentationGroup::FormatPaddingGroup::FormatOptions
_flags	external/asmjit/src/asmjit/core/func.h	/^  CallConvFlags _flags;$/;"	m	struct:CallConvId::CallConvStrategy::CallConvFlags::CallConv
_flags	external/asmjit/src/asmjit/core/jitallocator.cpp	/^  uint32_t _flags = 0;$/;"	m	class:JitAllocatorBlock	file:
_flags	external/asmjit/src/asmjit/core/jitallocator.h	/^    Flags _flags = Flags::kNone;$/;"	m	class:JitAllocatorOptions::JitAllocator::Span::Flags
_flags	external/asmjit/src/asmjit/core/jitallocator.h	/^    uint32_t _flags;$/;"	m	struct:JitAllocatorOptions::JitAllocator::Span::WriteScopeData
_flags	external/asmjit/src/asmjit/core/radefs_p.h	/^  RAStrategyFlags _flags = RAStrategyFlags::kNone;$/;"	m	struct:RAStrategyType::RAStrategyFlags::RAStrategy
_flags	external/asmjit/src/asmjit/core/radefs_p.h	/^  RATiedFlags _flags;$/;"	m	struct:RAStrategyType::RAStrategyFlags::RATiedFlags::RATiedReg
_flags	external/asmjit/src/asmjit/core/radefs_p.h	/^  RAWorkRegFlags _flags = RAWorkRegFlags::kNone;$/;"	m	class:RAStrategyType::RAStrategyFlags::RATiedFlags::RAWorkRegFlags::RAWorkReg
_flags	external/asmjit/src/asmjit/core/rapass_p.h	/^  RABlockFlags _flags = RABlockFlags::kNone;$/;"	m	class:RABlockFlags::RABlock
_flags	external/asmjit/src/asmjit/core/rapass_p.h	/^  RATiedFlags _flags;$/;"	m	class:RABlockFlags::RAInst
_flags	external/asmjit/src/asmjit/core/rastack_p.h	/^  uint16_t _flags;$/;"	m	struct:RAStackSlot
_flags	external/asmjit/src/asmjit/x86/x86instdb.h	/^  uint32_t _flags;$/;"	m	struct:InstDB::Mode::OpFlags::InstFlags::CommonInfo
_flags	external/asmjit/src/asmjit/x86/x86instdb.h	/^  uint64_t _flags : 56;$/;"	m	struct:InstDB::Mode::OpFlags::OpSignature
_forbiddenFlags	external/asmjit/src/asmjit/core/rapass_p.h	/^  RATiedFlags _forbiddenFlags;$/;"	m	class:RABlockFlags::RAInstBuilder
_forcedInstOptions	external/asmjit/src/asmjit/core/emitter.h	/^  InstOptions _forcedInstOptions = InstOptions::kReserved;$/;"	m	class:AlignMode::EmitterType::EmitterFlags::EncodingOptions::BaseEmitter
_format	external/asmjit/src/asmjit/core/codeholder.h	/^  OffsetFormat _format;$/;"	m	struct:ExpressionOpType::ExpressionValueType::SectionFlags::CopySectionFlags::OffsetType::RelocType::RelocEntry
_fp	external/asmjit/src/asmjit/core/rapass_p.h	/^  BaseReg _fp = BaseReg();$/;"	m	class:RABlockFlags::BaseRAPass
_fpRegId	external/asmjit/src/asmjit/core/archtraits.h	/^  uint8_t _fpRegId;$/;"	m	struct:Arch::SubArch::ArchTypeNameId::InstHints::ArchTraits
_frame	external/asmjit/src/asmjit/core/compiler.h	/^  FuncFrame _frame;$/;"	m	class:FuncNode
_freq	external/asmjit/src/asmjit/core/radefs_p.h	/^  float _freq = 0.0f;$/;"	m	class:RAStrategyType::RAStrategyFlags::RALiveStats
_func	external/asmjit/src/asmjit/core/compiler.h	/^  FuncNode* _func;$/;"	m	class:BaseCompiler
_func	external/asmjit/src/asmjit/core/rapass_p.h	/^  FuncNode* _func = nullptr;$/;"	m	class:RABlockFlags::BaseRAPass
_funcDetail	external/asmjit/src/asmjit/core/compiler.h	/^  FuncDetail _funcDetail;$/;"	m	class:FuncNode
_funcDetail	external/asmjit/src/asmjit/core/compiler.h	/^  FuncDetail _funcDetail;$/;"	m	class:InvokeNode
_funcDetail	external/asmjit/src/asmjit/core/func.h	/^  const FuncDetail* _funcDetail;$/;"	m	class:CallConvId::CallConvStrategy::CallConvFlags::FuncAttributes::FuncArgsAssignment
_funcNode	external/asmjit/src/asmjit/core/rabuilders_p.h	/^  FuncNode* _funcNode = nullptr;$/;"	m	class:RACFGBuilderT
_gapPool	external/asmjit/src/asmjit/core/constpool.h	/^  Gap* _gapPool;$/;"	m	class:ConstPoolScope::ConstPool
_gaps	external/asmjit/src/asmjit/core/constpool.h	/^  Gap* _gaps[kIndexCount];$/;"	m	class:ConstPoolScope::ConstPool
_generalOp	external/asmjit/src/asmjit/arm/a64instdb_p.h	/^  uint32_t _generalOp : 31;$/;"	m	struct:InstDB::EncodingData::SimdFcvtSV
_globalMaxLiveCount	external/asmjit/src/asmjit/core/rapass_p.h	/^  RALiveCount _globalMaxLiveCount = RALiveCount();$/;"	m	class:RABlockFlags::BaseRAPass
_handle	external/asmjit/src/asmjit/core/osutils.h	/^  Handle _handle;$/;"	m	class:Lock
_handled	external/asmjit/test/broken.h	/^  bool _handled = false;$/;"	m	class:BrokenAPI::Failure
_hasCode	external/asmjit/src/asmjit/core/rabuilders_p.h	/^  bool _hasCode = false;$/;"	m	class:RACFGBuilderT
_hasPreservedFP	external/asmjit/src/asmjit/core/funcargscontext_p.h	/^  bool _hasPreservedFP = false;$/;"	m	class:FuncArgsContext
_hasScalar	external/asmjit/src/asmjit/arm/a64instdb_p.h	/^  uint32_t _hasScalar : 1;$/;"	m	struct:InstDB::EncodingData::SimdFcvtLN
_hasStackSrc	external/asmjit/src/asmjit/core/funcargscontext_p.h	/^  bool _hasStackSrc = false;$/;"	m	class:FuncArgsContext
_hashCode	external/asmjit/src/asmjit/core/codeholder.cpp	/^  uint32_t _hashCode;$/;"	m	class:LabelByName	file:
_hashCode	external/asmjit/src/asmjit/core/zonehash.h	/^  uint32_t _hashCode;$/;"	m	class:ZoneHashNode
_hashNext	external/asmjit/src/asmjit/core/zonehash.h	/^  ZoneHashNode* _hashNext;$/;"	m	class:ZoneHashNode
_heap	external/asmjit/src/asmjit/core/jitallocator.cpp	/^  ZoneAllocator _heap;$/;"	m	class:JitAllocatorWrapper	file:
_helpOnly	external/asmjit/test/asmjit_test_compiler.h	/^  bool _helpOnly = false;$/;"	m	class:TestApp
_hintRegId	external/asmjit/src/asmjit/core/radefs_p.h	/^  uint8_t _hintRegId = BaseReg::kIdBad;$/;"	m	class:RAStrategyType::RAStrategyFlags::RATiedFlags::RAWorkRegFlags::RAWorkReg
_homeRegId	external/asmjit/src/asmjit/core/radefs_p.h	/^  uint8_t _homeRegId = BaseReg::kIdBad;$/;"	m	class:RAStrategyType::RAStrategyFlags::RATiedFlags::RAWorkRegFlags::RAWorkReg
_hwStackAlignment	external/asmjit/src/asmjit/core/archtraits.h	/^  uint8_t _hwStackAlignment;$/;"	m	struct:Arch::SubArch::ArchTypeNameId::InstHints::ArchTraits
_hwThreadCount	external/asmjit/src/asmjit/core/cpuinfo.h	/^  uint32_t _hwThreadCount;$/;"	m	class:CpuInfo
_iEmitHelper	external/asmjit/src/asmjit/core/rapass_p.h	/^  BaseEmitHelper* _iEmitHelper = nullptr;$/;"	m	class:RABlockFlags::BaseRAPass
_iSignatureCount	external/asmjit/src/asmjit/x86/x86instdb.h	/^  uint32_t _iSignatureCount : 5;$/;"	m	struct:InstDB::Mode::OpFlags::InstFlags::CommonInfo
_iSignatureIndex	external/asmjit/src/asmjit/x86/x86instdb.h	/^  uint32_t _iSignatureIndex : 11;$/;"	m	struct:InstDB::Mode::OpFlags::InstFlags::CommonInfo
_id	external/asmjit/src/asmjit/core/builder.h	/^  uint32_t _id;$/;"	m	class:NodeType::NodeFlags::SentinelType::SectionNode
_id	external/asmjit/src/asmjit/core/codeholder.h	/^  uint32_t _id;$/;"	m	class:ExpressionOpType::ExpressionValueType::SectionFlags::CopySectionFlags::Section
_id	external/asmjit/src/asmjit/core/codeholder.h	/^  uint32_t _id;$/;"	m	struct:ExpressionOpType::ExpressionValueType::SectionFlags::CopySectionFlags::OffsetType::RelocType::RelocEntry
_id	external/asmjit/src/asmjit/core/compilerdefs.h	/^  uint32_t _id = 0;$/;"	m	class:VirtReg
_id	external/asmjit/src/asmjit/core/func.h	/^  CallConvId _id;$/;"	m	struct:CallConvId::CallConvStrategy::CallConvFlags::CallConv
_id	external/asmjit/src/asmjit/core/inst.h	/^  InstId _id;$/;"	m	class:InstIdParts::InstOptions::InstControlFlow::InstSameRegHint::BaseInst
_id	external/asmjit/src/asmjit/core/operand.h	/^  uint32_t _id;$/;"	m	struct:OperandType::RegType::RegGroup::RegOnly
_idom	external/asmjit/src/asmjit/core/rapass_p.h	/^  RABlock* _idom = nullptr;$/;"	m	class:RABlockFlags::RABlock
_idx	external/asmjit/src/asmjit/core/jitallocator.cpp	/^  size_t _idx;$/;"	m	class:BitVectorRangeIterator	file:
_idx	external/asmjit/src/asmjit/core/support.h	/^  size_t _idx;$/;"	m	class:Support::Internal::BitVectorIterator
_idx	external/asmjit/src/asmjit/core/support.h	/^  size_t _idx;$/;"	m	class:Support::Internal::BitVectorOpIterator
_immBitCount	external/asmjit/src/asmjit/core/codeholder.h	/^  uint8_t _immBitCount;$/;"	m	struct:ExpressionOpType::ExpressionValueType::SectionFlags::CopySectionFlags::OffsetType::OffsetFormat
_immBitShift	external/asmjit/src/asmjit/core/codeholder.h	/^  uint8_t _immBitShift;$/;"	m	struct:ExpressionOpType::ExpressionValueType::SectionFlags::CopySectionFlags::OffsetType::OffsetFormat
_immDiscardLsb	external/asmjit/src/asmjit/core/codeholder.h	/^  uint8_t _immDiscardLsb;$/;"	m	struct:ExpressionOpType::ExpressionValueType::SectionFlags::CopySectionFlags::OffsetType::OffsetFormat
_impl	external/asmjit/src/asmjit/core/jitallocator.h	/^  Impl* _impl;$/;"	m	class:JitAllocatorOptions::JitAllocator
_implicitOpCount	external/asmjit/src/asmjit/x86/x86instdb.h	/^  uint8_t _implicitOpCount : 3;$/;"	m	struct:InstDB::Mode::OpFlags::InstSignature
_indentation	external/asmjit/test/asmjit_test_compiler.cpp	/^    : _indentation(indentation) {}$/;"	f	class:IndentedStdoutLogger
_indentation	external/asmjit/test/asmjit_test_compiler.cpp	/^  size_t _indentation = 0;$/;"	m	class:IndentedStdoutLogger	file:
_index	external/asmjit/src/asmjit/core/rapass.cpp	/^      _index(index) {}$/;"	f	class:RABlockVisitItem
_index	external/asmjit/src/asmjit/core/rapass.cpp	/^      _index(other._index) {}$/;"	f	class:RABlockVisitItem
_index	external/asmjit/src/asmjit/core/rapass.cpp	/^  uint32_t _index;$/;"	m	class:RABlockVisitItem	file:
_inlineComment	external/asmjit/src/asmjit/core/builder.h	/^  const char* _inlineComment;$/;"	m	class:NodeType::NodeFlags::SentinelType::BaseNode
_inlineComment	external/asmjit/src/asmjit/core/emitter.h	/^  const char* _inlineComment = nullptr;$/;"	m	class:AlignMode::EmitterType::EmitterFlags::EncodingOptions::BaseEmitter
_inlineData	external/asmjit/src/asmjit/core/builder.h	/^    uint8_t _inlineData[kInlineBufferSize];$/;"	m	union:NodeType::NodeFlags::SentinelType::EmbedDataNode::__anon15
_inst	external/asmjit/src/asmjit/core/builder.h	/^    InstData _inst;$/;"	m	union:NodeType::NodeFlags::SentinelType::BaseNode::__anon13
_instFlags	external/asmjit/src/asmjit/core/inst.h	/^  InstRWFlags _instFlags;$/;"	m	struct:InstIdParts::InstOptions::InstControlFlow::InstSameRegHint::CpuRWFlags::OpRWFlags::InstRWFlags::InstRWInfo
_instFlagsIndex	external/asmjit/src/asmjit/x86/x86instdb_p.h	/^  uint8_t _instFlagsIndex;$/;"	m	struct:InstDB::AdditionalInfo
_instFlagsTable	external/asmjit/src/asmjit/x86/x86instdb.cpp	/^const InstRWFlags InstDB::_instFlagsTable[] = {$/;"	m	class:InstDB	file:
_instHints	external/asmjit/src/asmjit/core/archtraits.h	/^  Support::Array<InstHints, Globals::kNumVirtGroups> _instHints;$/;"	m	struct:Arch::SubArch::ArchTypeNameId::InstHints::ArchTraits
_instInfoTable	external/asmjit/src/asmjit/arm/a64instdb.cpp	/^const InstInfo _instInfoTable[] = {$/;"	m	namespace:InstDB	file:
_instInfoTable	external/asmjit/src/asmjit/arm/a64instdb.h	/^ASMJIT_VARAPI const InstInfo _instInfoTable[];$/;"	m	namespace:InstDB
_instInfoTable	external/asmjit/src/asmjit/x86/x86instdb.cpp	/^const InstDB::InstInfo InstDB::_instInfoTable[] = {$/;"	m	class:InstDB	file:
_instInfoTable	external/asmjit/src/asmjit/x86/x86instdb.h	/^ASMJIT_VARAPI const InstInfo _instInfoTable[];$/;"	m	class:InstDB::Mode::OpFlags::InstFlags
_instNameIndexTable	external/asmjit/src/asmjit/arm/a64instdb.cpp	/^const uint32_t InstDB::_instNameIndexTable[] = {$/;"	m	class:InstDB	file:
_instNameIndexTable	external/asmjit/src/asmjit/x86/x86instdb.cpp	/^const uint32_t InstDB::_instNameIndexTable[] = {$/;"	m	class:InstDB	file:
_instNameStringTable	external/asmjit/src/asmjit/arm/a64instdb.cpp	/^const char InstDB::_instNameStringTable[] =$/;"	m	class:InstDB	file:
_instNameStringTable	external/asmjit/src/asmjit/x86/x86instdb.cpp	/^const char InstDB::_instNameStringTable[] =$/;"	m	class:InstDB	file:
_instOptions	external/asmjit/src/asmjit/core/emitter.h	/^  InstOptions _instOptions = InstOptions::kNone;$/;"	m	class:AlignMode::EmitterType::EmitterFlags::EncodingOptions::BaseEmitter
_instRWFlags	external/asmjit/src/asmjit/core/rapass_p.h	/^  InstRWFlags _instRWFlags;$/;"	m	class:RABlockFlags::RAInst
_instRWFlags	external/asmjit/src/asmjit/core/rapass_p.h	/^  InstRWFlags _instRWFlags;$/;"	m	class:RABlockFlags::RAInstBuilder
_instSignatureTable	external/asmjit/src/asmjit/x86/x86instdb.cpp	/^const InstDB::InstSignature InstDB::_instSignatureTable[] = {$/;"	m	class:InstDB	file:
_instSignatureTable	external/asmjit/src/asmjit/x86/x86instdb.h	/^ASMJIT_VARAPI const InstSignature _instSignatureTable[];$/;"	m	class:InstDB::Mode::OpFlags
_instructionCount	external/asmjit/src/asmjit/core/rapass_p.h	/^  uint32_t _instructionCount = 0;$/;"	m	class:RABlockFlags::BaseRAPass
_ipRegId	external/asmjit/src/asmjit/core/archtraits.h	/^  uint8_t _ipRegId;$/;"	m	struct:Arch::SubArch::ArchTypeNameId::InstHints::ArchTraits
_is64Bit	external/asmjit/src/asmjit/x86/x86rapass.cpp	/^  bool _is64Bit;$/;"	m	class:RACFGBuilder	file:
_isCvtxn	external/asmjit/src/asmjit/arm/a64instdb_p.h	/^  uint32_t _isCvtxn : 1;$/;"	m	struct:InstDB::EncodingData::SimdFcvtLN
_isFloatToInt	external/asmjit/src/asmjit/arm/a64instdb_p.h	/^  uint32_t _isFloatToInt : 1;$/;"	m	struct:InstDB::EncodingData::SimdFcvtSV
_isTemporary	external/asmjit/src/asmjit/core/zone.h	/^      size_t _isTemporary : 1;$/;"	m	struct:Zone::__anon16::__anon17
_itemCount	external/asmjit/src/asmjit/core/builder.h	/^  size_t _itemCount;$/;"	m	class:NodeType::NodeFlags::SentinelType::EmbedDataNode
_jccTable	external/asmjit/src/asmjit/x86/x86globals.h	/^    static constexpr uint16_t _jccTable[] = { ASMJIT_INST_FROM_COND(Inst::kIdJ) };$/;"	m	namespace:CondCode::Inst
_jumpAnnotations	external/asmjit/src/asmjit/core/compiler.h	/^  ZoneVector<JumpAnnotation*> _jumpAnnotations;$/;"	m	class:BaseCompiler
_kBaseEnd	external/asmjit/src/asmjit/core/type.h	/^  _kBaseEnd = 44,$/;"	m	class:TypeId
_kBaseStart	external/asmjit/src/asmjit/core/type.h	/^  _kBaseStart = 32,$/;"	m	class:TypeId
_kFloatEnd	external/asmjit/src/asmjit/core/type.h	/^  _kFloatEnd = 44,$/;"	m	class:TypeId
_kFloatStart	external/asmjit/src/asmjit/core/type.h	/^  _kFloatStart  = 42,$/;"	m	class:TypeId
_kIntEnd	external/asmjit/src/asmjit/core/type.h	/^  _kIntEnd = 41,$/;"	m	class:TypeId
_kIntStart	external/asmjit/src/asmjit/core/type.h	/^  _kIntStart = 32,$/;"	m	class:TypeId
_kMaskEnd	external/asmjit/src/asmjit/core/type.h	/^  _kMaskEnd = 48,$/;"	m	class:TypeId
_kMaskStart	external/asmjit/src/asmjit/core/type.h	/^  _kMaskStart = 45,$/;"	m	class:TypeId
_kMmxEnd	external/asmjit/src/asmjit/core/type.h	/^  _kMmxEnd = 50,$/;"	m	class:TypeId
_kMmxStart	external/asmjit/src/asmjit/core/type.h	/^  _kMmxStart = 49,$/;"	m	class:TypeId
_kVec128End	external/asmjit/src/asmjit/core/type.h	/^  _kVec128End = 80,$/;"	m	class:TypeId
_kVec128Start	external/asmjit/src/asmjit/core/type.h	/^  _kVec128Start = 71,$/;"	m	class:TypeId
_kVec256End	external/asmjit/src/asmjit/core/type.h	/^  _kVec256End = 90,$/;"	m	class:TypeId
_kVec256Start	external/asmjit/src/asmjit/core/type.h	/^  _kVec256Start = 81,$/;"	m	class:TypeId
_kVec32End	external/asmjit/src/asmjit/core/type.h	/^  _kVec32End = 60,$/;"	m	class:TypeId
_kVec32Start	external/asmjit/src/asmjit/core/type.h	/^  _kVec32Start  = 51,$/;"	m	class:TypeId
_kVec512End	external/asmjit/src/asmjit/core/type.h	/^  _kVec512End = 100,$/;"	m	class:TypeId
_kVec512Start	external/asmjit/src/asmjit/core/type.h	/^  _kVec512Start = 91,$/;"	m	class:TypeId
_kVec64End	external/asmjit/src/asmjit/core/type.h	/^  _kVec64End = 70,$/;"	m	class:TypeId
_kVec64Start	external/asmjit/src/asmjit/core/type.h	/^  _kVec64Start  = 61,$/;"	m	class:TypeId
_key	external/asmjit/src/asmjit/core/codeholder.cpp	/^  const char* _key;$/;"	m	class:LabelByName	file:
_key	external/asmjit/src/asmjit/core/zonehash.cpp	/^      _key(key) {}$/;"	f	struct:MyHashNode
_key	external/asmjit/src/asmjit/core/zonehash.cpp	/^  uint32_t _key;$/;"	m	struct:MyHashNode	file:
_key	external/asmjit/src/asmjit/core/zonehash.cpp	/^  uint32_t _key;$/;"	v
_key	external/asmjit/src/asmjit/core/zonetree.cpp	/^    : _key(key) {}$/;"	f	class:MyRBNode
_key	external/asmjit/src/asmjit/core/zonetree.cpp	/^  uint32_t _key;$/;"	m	class:MyRBNode	file:
_keySize	external/asmjit/src/asmjit/core/codeholder.cpp	/^  uint32_t _keySize;$/;"	m	class:LabelByName	file:
_labelEntries	external/asmjit/src/asmjit/core/codeholder.h	/^  ZoneVector<LabelEntry*> _labelEntries;$/;"	m	class:ExpressionOpType::ExpressionValueType::SectionFlags::CopySectionFlags::OffsetType::RelocType::LabelType::CodeHolder
_labelId	external/asmjit/src/asmjit/core/builder.h	/^      _labelId(labelId) {}$/;"	f	class:NodeType::NodeFlags::SentinelType::LabelNode
_labelId	external/asmjit/src/asmjit/core/builder.h	/^  uint32_t _labelId;$/;"	m	class:NodeType::NodeFlags::SentinelType::EmbedLabelDeltaNode
_labelId	external/asmjit/src/asmjit/core/builder.h	/^  uint32_t _labelId;$/;"	m	class:NodeType::NodeFlags::SentinelType::EmbedLabelNode
_labelId	external/asmjit/src/asmjit/core/builder.h	/^  uint32_t _labelId;$/;"	m	class:NodeType::NodeFlags::SentinelType::LabelNode
_labelIds	external/asmjit/src/asmjit/core/compiler.h	/^  ZoneVector<uint32_t> _labelIds;$/;"	m	class:JumpAnnotation
_large	external/asmjit/src/asmjit/core/string.h	/^    Large _large;$/;"	m	union:StringFormatFlags::String::ModifyOp::__anon10
_largestUnusedArea	external/asmjit/src/asmjit/core/jitallocator.cpp	/^  uint32_t _largestUnusedArea = 0;$/;"	m	class:JitAllocatorBlock	file:
_last	external/asmjit/src/asmjit/core/builder.h	/^      _last(last) {}$/;"	f	class:NodeType::NodeFlags::SentinelType::NodeList
_last	external/asmjit/src/asmjit/core/builder.h	/^  BaseNode* _last = nullptr;$/;"	m	class:NodeType::NodeFlags::SentinelType::NodeList
_last	external/asmjit/src/asmjit/core/rapass_p.h	/^  BaseNode* _last = nullptr;$/;"	m	class:RABlockFlags::RABlock
_lastLoggedBlock	external/asmjit/src/asmjit/core/rabuilders_p.h	/^  RABlock* _lastLoggedBlock = nullptr;$/;"	m	class:RACFGBuilderT
_lastTimestamp	external/asmjit/src/asmjit/core/rapass_p.h	/^  mutable uint64_t _lastTimestamp = 0;$/;"	m	class:RABlockFlags::BaseRAPass
_layout	external/asmjit/src/asmjit/core/raassignment_p.h	/^  Layout _layout;$/;"	m	class:RAAssignment
_line	external/asmjit/test/broken.h	/^      _line(line) {}$/;"	f	class:BrokenAPI::Failure
_line	external/asmjit/test/broken.h	/^  int _line = 0;$/;"	m	class:BrokenAPI::Failure
_link	external/asmjit/src/asmjit/core/codeholder.cpp	/^  LabelLink* _link;$/;"	m	class:LabelLinkIterator	file:
_link	external/asmjit/src/asmjit/core/zonestack.h	/^    Block* _link[2];$/;"	m	struct:ZoneStackBase::Block
_linkRegId	external/asmjit/src/asmjit/core/archtraits.h	/^  uint8_t _linkRegId;$/;"	m	struct:Arch::SubArch::ArchTypeNameId::InstHints::ArchTraits
_links	external/asmjit/src/asmjit/core/builder.h	/^    BaseNode* _links[2];$/;"	m	union:NodeType::NodeFlags::SentinelType::BaseNode::__anon11
_links	external/asmjit/src/asmjit/core/codeholder.h	/^  LabelLink* _links;$/;"	m	class:ExpressionOpType::ExpressionValueType::SectionFlags::CopySectionFlags::OffsetType::RelocType::LabelType::LabelEntry
_listNodes	external/asmjit/src/asmjit/core/zonelist.h	/^  NodeT* _listNodes[2];$/;"	m	class:ZoneListNode
_liveCount	external/asmjit/src/asmjit/core/rapass_p.h	/^  RALiveCount _liveCount;$/;"	m	class:RABlockFlags::RAInst
_localStackAlignment	external/asmjit/src/asmjit/core/func.h	/^  uint8_t _localStackAlignment;$/;"	m	class:CallConvId::CallConvStrategy::CallConvFlags::FuncAttributes::FuncFrame
_localStackOffset	external/asmjit/src/asmjit/core/func.h	/^  uint32_t _localStackOffset;$/;"	m	class:CallConvId::CallConvStrategy::CallConvFlags::FuncAttributes::FuncFrame
_localStackSize	external/asmjit/src/asmjit/core/func.h	/^  uint32_t _localStackSize;$/;"	m	class:CallConvId::CallConvStrategy::CallConvFlags::FuncAttributes::FuncFrame
_logger	external/asmjit/src/asmjit/core/codeholder.h	/^  Logger* _logger;$/;"	m	class:ExpressionOpType::ExpressionValueType::SectionFlags::CopySectionFlags::OffsetType::RelocType::LabelType::CodeHolder
_logger	external/asmjit/src/asmjit/core/emitter.h	/^  Logger* _logger = nullptr;$/;"	m	class:AlignMode::EmitterType::EmitterFlags::EncodingOptions::BaseEmitter
_logger	external/asmjit/src/asmjit/core/rabuilders_p.h	/^  Logger* _logger = nullptr;$/;"	m	class:RACFGBuilderT
_logger	external/asmjit/src/asmjit/core/rapass_p.h	/^  Logger* _logger = nullptr;$/;"	m	class:RABlockFlags::BaseRAPass
_mainOpcodeIndex	external/asmjit/src/asmjit/x86/x86instdb.h	/^  uint8_t _mainOpcodeIndex;$/;"	m	struct:InstDB::Mode::OpFlags::InstFlags::InstInfo
_mainOpcodeTable	external/asmjit/src/asmjit/x86/x86instdb.cpp	/^const uint32_t InstDB::_mainOpcodeTable[] = {$/;"	m	class:InstDB	file:
_mainOpcodeValue	external/asmjit/src/asmjit/x86/x86instdb.h	/^  uint8_t _mainOpcodeValue;$/;"	m	struct:InstDB::Mode::OpFlags::InstFlags::InstInfo
_masks	external/asmjit/src/asmjit/core/radefs_p.h	/^  Support::Array<RegMask, Globals::kNumVirtGroups> _masks;$/;"	m	struct:RAStrategyType::RAStrategyFlags::RARegMask
_maxLiveCount	external/asmjit/src/asmjit/core/rapass_p.h	/^  RALiveCount _maxLiveCount = RALiveCount();$/;"	m	class:RABlockFlags::RABlock
_maxLogicalProcessors	external/asmjit/src/asmjit/core/cpuinfo.h	/^  uint32_t _maxLogicalProcessors;$/;"	m	class:CpuInfo
_maxStackOffset	external/asmjit/src/asmjit/core/archtraits.h	/^  uint32_t _maxStackOffset;$/;"	m	struct:Arch::SubArch::ArchTypeNameId::InstHints::ArchTraits
_maxWorkRegNameSize	external/asmjit/src/asmjit/core/rapass_p.h	/^  uint32_t _maxWorkRegNameSize = 0;$/;"	m	class:RABlockFlags::BaseRAPass
_message	external/asmjit/src/asmjit/core/builder.cpp	/^  StringTmp<128> _message;$/;"	m	class:PostponedErrorHandler	file:
_message	external/asmjit/test/asmjit_test_compiler.h	/^  asmjit::String _message;$/;"	m	class:SimpleErrorHandler
_minDynamicAlignment	external/asmjit/src/asmjit/core/func.h	/^  uint8_t _minDynamicAlignment;$/;"	m	class:CallConvId::CallConvStrategy::CallConvFlags::FuncAttributes::FuncFrame
_minItemSize	external/asmjit/src/asmjit/core/constpool.h	/^  size_t _minItemSize;$/;"	m	class:ConstPoolScope::ConstPool
_minStackOffset	external/asmjit/src/asmjit/core/archtraits.h	/^  uint32_t _minStackOffset;$/;"	m	struct:Arch::SubArch::ArchTypeNameId::InstHints::ArchTraits
_mode	external/asmjit/src/asmjit/x86/x86instdb.h	/^  uint8_t _mode : 2;$/;"	m	struct:InstDB::Mode::OpFlags::InstSignature
_modelId	external/asmjit/src/asmjit/core/cpuinfo.h	/^  uint32_t _modelId;$/;"	m	class:CpuInfo
_nFailed	external/asmjit/test/asmjit_test_compiler.h	/^  unsigned _nFailed = 0;$/;"	m	class:TestApp
_name	external/asmjit/src/asmjit/core/builder.cpp	/^  : _name(name) {}$/;"	f
_name	external/asmjit/src/asmjit/core/builder.h	/^  const char* _name = nullptr;$/;"	m	class:NodeType::NodeFlags::SentinelType::Pass
_name	external/asmjit/src/asmjit/core/codeholder.h	/^  FixedString<Globals::kMaxSectionNameSize + 1> _name;$/;"	m	class:ExpressionOpType::ExpressionValueType::SectionFlags::CopySectionFlags::Section
_name	external/asmjit/src/asmjit/core/codeholder.h	/^  ZoneString<kStaticNameSize> _name;$/;"	m	class:ExpressionOpType::ExpressionValueType::SectionFlags::CopySectionFlags::OffsetType::RelocType::LabelType::LabelEntry
_name	external/asmjit/test/asmjit_test_compiler.h	/^  asmjit::String _name;$/;"	m	class:TestCase
_namedLabels	external/asmjit/src/asmjit/core/codeholder.h	/^  ZoneHash<LabelEntry> _namedLabels;$/;"	m	class:ExpressionOpType::ExpressionValueType::SectionFlags::CopySectionFlags::OffsetType::RelocType::LabelType::CodeHolder
_naturalStackAlignment	external/asmjit/src/asmjit/core/func.h	/^  uint8_t _naturalStackAlignment;$/;"	m	class:CallConvId::CallConvStrategy::CallConvFlags::FuncAttributes::FuncFrame
_naturalStackAlignment	external/asmjit/src/asmjit/core/func.h	/^  uint8_t _naturalStackAlignment;$/;"	m	struct:CallConvId::CallConvStrategy::CallConvFlags::CallConv
_newConst	external/asmjit/src/asmjit/core/compiler.cpp	/^Error BaseCompiler::_newConst(BaseMem* out, ConstPoolScope scope, const void* data, size_t size) {$/;"	f	class:BaseCompiler
_newReg	external/asmjit/src/asmjit/core/compiler.cpp	/^Error BaseCompiler::_newReg(BaseReg* out, TypeId typeId, const char* name) {$/;"	f	class:BaseCompiler
_newReg	external/asmjit/src/asmjit/core/compiler.cpp	/^Error BaseCompiler::_newReg(BaseReg* out, const BaseReg& ref, const char* name) {$/;"	f	class:BaseCompiler
_newRegFmt	external/asmjit/src/asmjit/core/compiler.cpp	/^Error BaseCompiler::_newRegFmt(BaseReg* out, TypeId typeId, const char* fmt, ...) {$/;"	f	class:BaseCompiler
_newRegFmt	external/asmjit/src/asmjit/core/compiler.cpp	/^Error BaseCompiler::_newRegFmt(BaseReg* out, const BaseReg& ref, const char* fmt, ...) {$/;"	f	class:BaseCompiler
_newRegInternal	external/asmjit/src/asmjit/arm/a64compiler.h	/^  ASMJIT_INLINE_NODEBUG RegT _newRegInternal(const Type& type) {$/;"	f	class:Compiler
_newRegInternal	external/asmjit/src/asmjit/arm/a64compiler.h	/^  ASMJIT_INLINE_NODEBUG RegT _newRegInternal(const Type& type, const char* s, Args&&... args) {$/;"	f	class:Compiler
_newStack	external/asmjit/src/asmjit/core/compiler.cpp	/^Error BaseCompiler::_newStack(BaseMem* out, uint32_t size, uint32_t alignment, const char* name) {$/;"	f	class:BaseCompiler
_next	external/asmjit/src/asmjit/core/builder.h	/^      BaseNode* _next;$/;"	m	struct:NodeType::NodeFlags::SentinelType::BaseNode::__anon11::__anon12
_next	external/asmjit/src/asmjit/core/constpool.h	/^    Gap* _next;$/;"	m	struct:ConstPoolScope::ConstPool::Gap
_nextSection	external/asmjit/src/asmjit/core/builder.h	/^      _nextSection(nullptr) {}$/;"	f	class:NodeType::NodeFlags::SentinelType::SectionNode
_nextSection	external/asmjit/src/asmjit/core/builder.h	/^  SectionNode* _nextSection;$/;"	m	class:NodeType::NodeFlags::SentinelType::SectionNode
_node	external/asmjit/src/asmjit/core/ralocal_p.h	/^  InstNode* _node;$/;"	m	class:RALocalAllocator
_nodeFlags	external/asmjit/src/asmjit/core/builder.h	/^    NodeFlags _nodeFlags;$/;"	m	struct:NodeType::NodeFlags::SentinelType::BaseNode::AlignData
_nodeFlags	external/asmjit/src/asmjit/core/builder.h	/^    NodeFlags _nodeFlags;$/;"	m	struct:NodeType::NodeFlags::SentinelType::BaseNode::AnyData
_nodeFlags	external/asmjit/src/asmjit/core/builder.h	/^    NodeFlags _nodeFlags;$/;"	m	struct:NodeType::NodeFlags::SentinelType::BaseNode::EmbedData
_nodeFlags	external/asmjit/src/asmjit/core/builder.h	/^    NodeFlags _nodeFlags;$/;"	m	struct:NodeType::NodeFlags::SentinelType::BaseNode::InstData
_nodeFlags	external/asmjit/src/asmjit/core/builder.h	/^    NodeFlags _nodeFlags;$/;"	m	struct:NodeType::NodeFlags::SentinelType::BaseNode::SentinelData
_nodeFlags	external/asmjit/src/asmjit/core/builder.h	/^  NodeFlags _nodeFlags = NodeFlags::kNone;$/;"	m	class:NodeType::NodeFlags::SentinelType::BaseBuilder
_nodeList	external/asmjit/src/asmjit/core/builder.h	/^  NodeList _nodeList;$/;"	m	class:NodeType::NodeFlags::SentinelType::BaseBuilder
_nodeType	external/asmjit/src/asmjit/core/builder.h	/^    NodeType _nodeType;$/;"	m	struct:NodeType::NodeFlags::SentinelType::BaseNode::AlignData
_nodeType	external/asmjit/src/asmjit/core/builder.h	/^    NodeType _nodeType;$/;"	m	struct:NodeType::NodeFlags::SentinelType::BaseNode::AnyData
_nodeType	external/asmjit/src/asmjit/core/builder.h	/^    NodeType _nodeType;$/;"	m	struct:NodeType::NodeFlags::SentinelType::BaseNode::EmbedData
_nodeType	external/asmjit/src/asmjit/core/builder.h	/^    NodeType _nodeType;$/;"	m	struct:NodeType::NodeFlags::SentinelType::BaseNode::InstData
_nodeType	external/asmjit/src/asmjit/core/builder.h	/^    NodeType _nodeType;$/;"	m	struct:NodeType::NodeFlags::SentinelType::BaseNode::SentinelData
_numStackArgs	external/asmjit/src/asmjit/core/funcargscontext_p.h	/^    uint8_t _numStackArgs;$/;"	m	struct:FuncArgsContext::WorkData
_numStackArgsToStackSlots	external/asmjit/src/asmjit/core/rapass_p.h	/^  uint32_t _numStackArgsToStackSlots = 0;$/;"	m	class:RABlockFlags::BaseRAPass
_numSwaps	external/asmjit/src/asmjit/core/funcargscontext_p.h	/^    uint8_t _numSwaps;$/;"	m	struct:FuncArgsContext::WorkData
_objectFormat	external/asmjit/src/asmjit/core/environment.h	/^  ObjectFormat _objectFormat;$/;"	m	class:Vendor::Platform::PlatformABI::Environment
_offset	external/asmjit/src/asmjit/core/codeholder.h	/^  uint64_t _offset;$/;"	m	class:ExpressionOpType::ExpressionValueType::SectionFlags::CopySectionFlags::OffsetType::RelocType::LabelType::LabelEntry
_offset	external/asmjit/src/asmjit/core/codeholder.h	/^  uint64_t _offset;$/;"	m	class:ExpressionOpType::ExpressionValueType::SectionFlags::CopySectionFlags::Section
_offset	external/asmjit/src/asmjit/core/constpool.h	/^    size_t _offset;$/;"	m	struct:ConstPoolScope::ConstPool::Gap
_offset	external/asmjit/src/asmjit/core/constpool.h	/^    uint32_t _offset;$/;"	m	class:ConstPoolScope::ConstPool::Node
_offset	external/asmjit/src/asmjit/core/rastack_p.h	/^  int32_t _offset;$/;"	m	struct:RAStackSlot
_op	external/asmjit/src/asmjit/core/archcommons.h	/^  ShiftOp _op;$/;"	m	class:CondCode::DataType::ShiftOp::Shift
_opArray	external/asmjit/src/asmjit/core/builder.h	/^  Operand_ _opArray[kBaseOpCapacity];$/;"	m	class:NodeType::NodeFlags::SentinelType::InstNode
_opArrayEx	external/asmjit/src/asmjit/core/builder.h	/^  Operand_ _opArrayEx[Globals::kMaxOpCount - kBaseOpCapacity];$/;"	m	class:NodeType::NodeFlags::SentinelType::InstExNode
_opCapacity	external/asmjit/src/asmjit/core/builder.h	/^    uint8_t _opCapacity;$/;"	m	struct:NodeType::NodeFlags::SentinelType::BaseNode::InstData
_opCount	external/asmjit/src/asmjit/core/builder.h	/^    uint8_t _opCount;$/;"	m	struct:NodeType::NodeFlags::SentinelType::BaseNode::InstData
_opCount	external/asmjit/src/asmjit/core/inst.h	/^  uint8_t _opCount;$/;"	m	struct:InstIdParts::InstOptions::InstControlFlow::InstSameRegHint::CpuRWFlags::OpRWFlags::InstRWFlags::InstRWInfo
_opCount	external/asmjit/src/asmjit/x86/x86instdb.h	/^  uint8_t _opCount : 3;$/;"	m	struct:InstDB::Mode::OpFlags::InstSignature
_opFlags	external/asmjit/src/asmjit/core/inst.h	/^  OpRWFlags _opFlags;$/;"	m	struct:InstIdParts::InstOptions::InstControlFlow::InstSameRegHint::CpuRWFlags::OpRWFlags::OpRWInfo
_opSignatureIndexes	external/asmjit/src/asmjit/x86/x86instdb.h	/^  uint8_t _opSignatureIndexes[Globals::kMaxOpCount];$/;"	m	struct:InstDB::Mode::OpFlags::InstSignature
_opSignatureTable	external/asmjit/src/asmjit/x86/x86instdb.cpp	/^const InstDB::OpSignature InstDB::_opSignatureTable[] = {$/;"	m	class:InstDB	file:
_opSignatureTable	external/asmjit/src/asmjit/x86/x86instdb.h	/^ASMJIT_VARAPI const OpSignature _opSignatureTable[];$/;"	m	class:InstDB::Mode::OpFlags
_opcode	external/asmjit/src/asmjit/arm/a64instdb_p.h	/^  uint32_t _opcode : 22;$/;"	m	struct:InstDB::EncodingData::SimdFcvtLN
_opcode	external/asmjit/src/asmjit/arm/a64instdb_p.h	/^  uint32_t _opcode;$/;"	m	struct:InstDB::EncodingData::SimdFcadd
_opcode	external/asmjit/src/asmjit/arm/a64instdb_p.h	/^  uint32_t _opcode;$/;"	m	struct:InstDB::EncodingData::SimdFccmpFccmpe
_opcode	external/asmjit/src/asmjit/arm/a64instdb_p.h	/^  uint32_t _opcode;$/;"	m	struct:InstDB::EncodingData::SimdFcmpFcmpe
_operands	external/asmjit/src/asmjit/core/inst.h	/^  OpRWInfo _operands[Globals::kMaxOpCount];$/;"	m	struct:InstIdParts::InstOptions::InstControlFlow::InstSameRegHint::CpuRWFlags::OpRWFlags::InstRWFlags::InstRWInfo
_optionalQ	external/asmjit/src/asmjit/arm/a64instdb_p.h	/^  uint8_t _optionalQ;$/;"	m	struct:InstDB::EncodingData::SimdFmlal
_options	external/asmjit/src/asmjit/core/inst.h	/^  InstOptions _options;$/;"	m	class:InstIdParts::InstOptions::InstControlFlow::InstSameRegHint::BaseInst
_options	external/asmjit/src/asmjit/core/logger.cpp	/^  : _options() {}$/;"	f
_options	external/asmjit/src/asmjit/core/logger.h	/^  FormatOptions _options;$/;"	m	class:Logger
_order	external/asmjit/src/asmjit/core/codeholder.h	/^  int32_t _order;$/;"	m	class:ExpressionOpType::ExpressionValueType::SectionFlags::CopySectionFlags::Section
_outId	external/asmjit/src/asmjit/core/radefs_p.h	/^      uint8_t _outId;$/;"	m	struct:RAStrategyType::RAStrategyFlags::RATiedFlags::RATiedReg::__anon8::__anon9
_outRegMask	external/asmjit/src/asmjit/core/radefs_p.h	/^  RegMask _outRegMask;$/;"	m	struct:RAStrategyType::RAStrategyFlags::RATiedFlags::RATiedReg
_outRewriteMask	external/asmjit/src/asmjit/core/radefs_p.h	/^  uint32_t _outRewriteMask;$/;"	m	struct:RAStrategyType::RAStrategyFlags::RATiedFlags::RATiedReg
_outputSize	external/asmjit/test/asmjit_test_compiler.h	/^  size_t _outputSize = 0;$/;"	m	class:TestApp
_overheadSize	external/asmjit/src/asmjit/core/jitallocator.h	/^    size_t _overheadSize;$/;"	m	struct:JitAllocatorOptions::JitAllocator::Span::Statistics
_pPrev	external/asmjit/src/asmjit/core/codeholder.cpp	/^  LabelLink** _pPrev;$/;"	m	class:LabelLinkIterator	file:
_packed	external/asmjit/src/asmjit/core/radefs_p.h	/^    uint32_t _packed;$/;"	m	union:RAStrategyType::RAStrategyFlags::RARegCount::__anon7
_packed	external/asmjit/src/asmjit/core/radefs_p.h	/^    uint32_t _packed;$/;"	m	union:RAStrategyType::RAStrategyFlags::RATiedFlags::RATiedReg::__anon8
_packed	external/asmjit/src/asmjit/core/radefs_p.h	/^  uint32_t _packed = 0;$/;"	m	class:RAStrategyType::RAStrategyFlags::RARegsStats
_packedData	external/asmjit/src/asmjit/core/zone.h	/^      _packedData(other._packedData) {$/;"	f	class:Zone
_packedData	external/asmjit/src/asmjit/core/zone.h	/^    size_t _packedData;$/;"	m	union:Zone::__anon16
_parentId	external/asmjit/src/asmjit/core/codeholder.cpp	/^      _parentId(parentId) {}$/;"	f	class:LabelByName
_parentId	external/asmjit/src/asmjit/core/codeholder.cpp	/^  uint32_t _parentId;$/;"	m	class:LabelByName	file:
_parentId	external/asmjit/src/asmjit/core/codeholder.h	/^  uint32_t _parentId;$/;"	m	class:ExpressionOpType::ExpressionValueType::SectionFlags::CopySectionFlags::OffsetType::RelocType::LabelType::LabelEntry
_pass	external/asmjit/src/asmjit/core/rabuilders_p.h	/^  BaseRAPass* _pass = nullptr;$/;"	m	class:RACFGBuilderT
_pass	external/asmjit/src/asmjit/core/ralocal_p.h	/^  BaseRAPass* _pass;$/;"	m	class:RALocalAllocator
_passData	external/asmjit/src/asmjit/core/builder.h	/^  void* _passData;$/;"	m	class:NodeType::NodeFlags::SentinelType::BaseNode
_passZone	external/asmjit/src/asmjit/core/builder.h	/^  Zone _passZone;$/;"	m	class:NodeType::NodeFlags::SentinelType::BaseBuilder
_passedOrder	external/asmjit/src/asmjit/core/func.h	/^  Support::Array<RegOrder, Globals::kNumVirtGroups> _passedOrder;$/;"	m	struct:CallConvId::CallConvStrategy::CallConvFlags::CallConv
_passedRegs	external/asmjit/src/asmjit/core/func.h	/^  Support::Array<RegMask, Globals::kNumVirtGroups> _passedRegs;$/;"	m	struct:CallConvId::CallConvStrategy::CallConvFlags::CallConv
_payload	external/asmjit/src/asmjit/core/codeholder.h	/^  uint64_t _payload;$/;"	m	struct:ExpressionOpType::ExpressionValueType::SectionFlags::CopySectionFlags::OffsetType::RelocType::RelocEntry
_physId	external/asmjit/src/asmjit/core/inst.h	/^  uint8_t _physId;$/;"	m	struct:InstIdParts::InstOptions::InstControlFlow::InstSameRegHint::CpuRWFlags::OpRWFlags::OpRWInfo
_physRegCount	external/asmjit/src/asmjit/core/rapass_p.h	/^  RARegCount _physRegCount = RARegCount();$/;"	m	class:RABlockFlags::BaseRAPass
_physRegIndex	external/asmjit/src/asmjit/core/rapass_p.h	/^  RARegIndex _physRegIndex = RARegIndex();$/;"	m	class:RABlockFlags::BaseRAPass
_physRegTotal	external/asmjit/src/asmjit/core/rapass_p.h	/^  uint32_t _physRegTotal = 0;$/;"	m	class:RABlockFlags::BaseRAPass
_physToVarId	external/asmjit/src/asmjit/core/funcargscontext_p.h	/^    uint8_t _physToVarId[32];$/;"	m	struct:FuncArgsContext::WorkData
_physToWorkIds	external/asmjit/src/asmjit/core/raassignment_p.h	/^  Support::Array<uint32_t*, Globals::kNumVirtGroups> _physToWorkIds;$/;"	m	class:RAAssignment
_physToWorkMap	external/asmjit/src/asmjit/core/raassignment_p.h	/^  PhysToWorkMap* _physToWorkMap;$/;"	m	class:RAAssignment
_physToWorkMap	external/asmjit/src/asmjit/core/rapass_p.h	/^  PhysToWorkMap* _physToWorkMap = nullptr;$/;"	m	class:RABlockFlags::RASharedAssignment
_platform	external/asmjit/src/asmjit/core/environment.h	/^  Platform _platform;$/;"	m	class:Vendor::Platform::PlatformABI::Environment
_platformABI	external/asmjit/src/asmjit/core/environment.h	/^  PlatformABI _platformABI;$/;"	m	class:Vendor::Platform::PlatformABI::Environment
_policy	external/asmjit/src/asmjit/core/jitallocator.h	/^    VirtMem::CachePolicy _policy;$/;"	m	struct:JitAllocatorOptions::JitAllocator::Span::WriteScopeData
_policy	external/asmjit/src/asmjit/core/virtmem.h	/^      _policy(policy) {$/;"	f	class:VirtMem::CachePolicy::MemoryFlags::HardenedRuntimeFlags::ProtectJitAccess::ProtectJitReadWriteScope
_policy	external/asmjit/src/asmjit/core/virtmem.h	/^  CachePolicy _policy;$/;"	m	class:VirtMem::CachePolicy::MemoryFlags::HardenedRuntimeFlags::ProtectJitAccess::ProtectJitReadWriteScope
_position	external/asmjit/src/asmjit/core/builder.h	/^  uint32_t _position;$/;"	m	class:NodeType::NodeFlags::SentinelType::BaseNode
_povOrder	external/asmjit/src/asmjit/core/rapass_p.h	/^  uint32_t _povOrder = 0;$/;"	m	class:RABlockFlags::RABlock
_preferredMask	external/asmjit/src/asmjit/core/radefs_p.h	/^  RegMask _preferredMask = 0xFFFFFFFFu;$/;"	m	class:RAStrategyType::RAStrategyFlags::RATiedFlags::RAWorkRegFlags::RAWorkReg
_preserveFP	external/asmjit/test/asmjit_test_compiler_a64.cpp	/^  bool _preserveFP;$/;"	m	class:A64Test_GpArgs	file:
_preserveFP	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^  bool _preserveFP;$/;"	m	class:X86Test_AlignBase	file:
_preservedRegs	external/asmjit/src/asmjit/core/func.h	/^  Support::Array<RegMask, Globals::kNumVirtGroups> _preservedRegs;$/;"	m	class:CallConvId::CallConvStrategy::CallConvFlags::FuncAttributes::FuncFrame
_preservedRegs	external/asmjit/src/asmjit/core/func.h	/^  Support::Array<RegMask, Globals::kNumVirtGroups> _preservedRegs;$/;"	m	struct:CallConvId::CallConvStrategy::CallConvFlags::CallConv
_prev	external/asmjit/src/asmjit/core/builder.h	/^      BaseNode* _prev;$/;"	m	struct:NodeType::NodeFlags::SentinelType::BaseNode::__anon11::__anon12
_primeIndex	external/asmjit/src/asmjit/core/zonehash.h	/^  uint8_t _primeIndex;$/;"	m	class:ZoneHashBase
_priority	external/asmjit/src/asmjit/core/radefs_p.h	/^  float _priority = 0.0f;$/;"	m	class:RAStrategyType::RAStrategyFlags::RALiveStats
_privateData	external/asmjit/src/asmjit/core/emitter.h	/^  uint32_t _privateData = 0;$/;"	m	class:AlignMode::EmitterType::EmitterFlags::EncodingOptions::BaseEmitter
_processorType	external/asmjit/src/asmjit/core/cpuinfo.h	/^  uint32_t _processorType;$/;"	m	class:CpuInfo
_ptr	external/asmjit/src/asmjit/core/jitallocator.cpp	/^  const T* _ptr;$/;"	m	class:BitVectorRangeIterator	file:
_ptr	external/asmjit/src/asmjit/core/support.h	/^  const T* _ptr;$/;"	m	class:Support::Internal::BitVectorIterator
_ptr	external/asmjit/src/asmjit/core/zone.h	/^  uint8_t* _ptr;$/;"	m	class:Zone
_pushPopSaveOffset	external/asmjit/src/asmjit/core/func.h	/^  uint32_t _pushPopSaveOffset;$/;"	m	class:CallConvId::CallConvStrategy::CallConvFlags::FuncAttributes::FuncFrame
_pushPopSaveSize	external/asmjit/src/asmjit/core/func.h	/^  uint16_t _pushPopSaveSize;$/;"	m	class:CallConvId::CallConvStrategy::CallConvFlags::FuncAttributes::FuncFrame
_ra	external/asmjit/src/asmjit/core/rapass_p.h	/^    : _ra(ra) {}$/;"	f	class:RABlockFlags::RABlock
_ra	external/asmjit/src/asmjit/core/rapass_p.h	/^  BaseRAPass* _ra;$/;"	m	class:RABlockFlags::RABlock
_raInst	external/asmjit/src/asmjit/core/ralocal_p.h	/^  RAInst* _raInst;$/;"	m	class:RALocalAllocator
_raw	external/asmjit/src/asmjit/core/string.h	/^    Raw _raw;$/;"	m	union:StringFormatFlags::String::ModifyOp::__anon10
_rcpShift	external/asmjit/src/asmjit/core/zonehash.h	/^  uint8_t _rcpShift;$/;"	m	class:ZoneHashBase
_rcpValue	external/asmjit/src/asmjit/core/zonehash.h	/^  uint32_t _rcpValue;$/;"	m	class:ZoneHashBase
_readByteMask	external/asmjit/src/asmjit/core/inst.h	/^  uint64_t _readByteMask;$/;"	m	struct:InstIdParts::InstOptions::InstControlFlow::InstSameRegHint::CpuRWFlags::OpRWFlags::OpRWInfo
_readFlags	external/asmjit/src/asmjit/core/inst.h	/^  CpuRWFlags _readFlags;$/;"	m	struct:InstIdParts::InstOptions::InstControlFlow::InstSameRegHint::CpuRWFlags::OpRWFlags::InstRWFlags::InstRWInfo
_records	external/asmjit/src/asmjit/core/jitallocator.cpp	/^  ZoneTree<Record> _records;$/;"	m	class:JitAllocatorWrapper	file:
_redZoneSize	external/asmjit/src/asmjit/core/func.h	/^  uint8_t _redZoneSize;$/;"	m	class:CallConvId::CallConvStrategy::CallConvFlags::FuncAttributes::FuncFrame
_redZoneSize	external/asmjit/src/asmjit/core/func.h	/^  uint8_t _redZoneSize;$/;"	m	struct:CallConvId::CallConvStrategy::CallConvFlags::CallConv
_refCount	external/asmjit/src/asmjit/core/radefs_p.h	/^      uint8_t _refCount;$/;"	m	struct:RAStrategyType::RAStrategyFlags::RATiedFlags::RATiedReg::__anon8::__anon9
_regByteMask	external/asmjit/src/asmjit/core/radefs_p.h	/^  uint64_t _regByteMask = 0;$/;"	m	class:RAStrategyType::RAStrategyFlags::RATiedFlags::RAWorkRegFlags::RAWorkReg
_regCount	external/asmjit/test/asmjit_test_compiler_a64.cpp	/^  uint32_t _regCount;$/;"	m	class:A64Test_ManyRegs	file:
_regMask	external/asmjit/src/asmjit/x86/x86instdb.h	/^  uint64_t _regMask : 8;$/;"	m	struct:InstDB::Mode::OpFlags::OpSignature
_regSignature	external/asmjit/src/asmjit/core/archtraits.h	/^  Support::Array<OperandSignature, uint32_t(RegType::kMaxValue) + 1> _regSignature;$/;"	m	struct:Arch::SubArch::ArchTypeNameId::InstHints::ArchTraits
_regSwapsMask	external/asmjit/src/asmjit/core/funcargscontext_p.h	/^  uint8_t _regSwapsMask = 0;$/;"	m	class:FuncArgsContext
_regTypeToTypeId	external/asmjit/src/asmjit/core/archtraits.h	/^  Support::Array<TypeId, uint32_t(RegType::kMaxValue) + 1> _regTypeToTypeId;$/;"	m	struct:Arch::SubArch::ArchTypeNameId::InstHints::ArchTraits
_regionSize	external/asmjit/src/asmjit/core/codeholder.h	/^  uint8_t _regionSize;$/;"	m	struct:ExpressionOpType::ExpressionValueType::SectionFlags::CopySectionFlags::OffsetType::OffsetFormat
_registerHf	external/asmjit/src/asmjit/arm/a64instdb_p.h	/^  uint32_t _registerHf : 4;$/;"	m	struct:InstDB::EncodingData::SimdFcm
_registerOp	external/asmjit/src/asmjit/arm/a64instdb_p.h	/^  uint32_t _registerOp : 28;$/;"	m	struct:InstDB::EncodingData::SimdFcm
_regs	external/asmjit/src/asmjit/core/radefs_p.h	/^    uint8_t _regs[4];$/;"	m	union:RAStrategyType::RAStrategyFlags::RARegCount::__anon7
_regsStats	external/asmjit/src/asmjit/core/rapass_p.h	/^  RARegsStats _regsStats = RARegsStats();$/;"	m	class:RABlockFlags::RABlock
_regularOp	external/asmjit/src/asmjit/arm/a64instdb_p.h	/^  uint32_t _regularOp;$/;"	m	struct:InstDB::EncodingData::SimdFcmla
_relocType	external/asmjit/src/asmjit/core/codeholder.h	/^  RelocType _relocType;$/;"	m	struct:ExpressionOpType::ExpressionValueType::SectionFlags::CopySectionFlags::OffsetType::RelocType::RelocEntry
_relocations	external/asmjit/src/asmjit/core/codeholder.h	/^  ZoneVector<RelocEntry*> _relocations;$/;"	m	class:ExpressionOpType::ExpressionValueType::SectionFlags::CopySectionFlags::OffsetType::RelocType::LabelType::CodeHolder
_repeatCount	external/asmjit/src/asmjit/core/builder.h	/^  size_t _repeatCount;$/;"	m	class:NodeType::NodeFlags::SentinelType::EmbedDataNode
_reserved	external/asmjit/src/asmjit/arm/a64instdb.h	/^  uint32_t _reserved : 16;$/;"	m	struct:InstDB::InstInfo
_reserved	external/asmjit/src/asmjit/core/archtraits.h	/^  uint8_t _reserved[3];$/;"	m	struct:Arch::SubArch::ArchTypeNameId::InstHints::ArchTraits
_reserved	external/asmjit/src/asmjit/core/builder.h	/^    uint8_t _reserved;$/;"	m	struct:NodeType::NodeFlags::SentinelType::BaseNode::AlignData
_reserved	external/asmjit/src/asmjit/core/codeholder.h	/^  uint8_t _reserved[3];$/;"	m	class:ExpressionOpType::ExpressionValueType::SectionFlags::CopySectionFlags::OffsetType::RelocType::LabelType::LabelEntry
_reserved	external/asmjit/src/asmjit/core/cpuinfo.h	/^  uint8_t _reserved;$/;"	m	class:CpuInfo
_reserved	external/asmjit/src/asmjit/core/environment.h	/^  uint8_t _reserved[2];$/;"	m	class:Vendor::Platform::PlatformABI::Environment
_reserved	external/asmjit/src/asmjit/core/func.h	/^  uint16_t _reserved = 0;$/;"	m	class:CallConvId::CallConvStrategy::CallConvFlags::FuncAttributes::FuncDetail
_reserved	external/asmjit/src/asmjit/core/func.h	/^  uint8_t _reserved[3];$/;"	m	class:CallConvId::CallConvStrategy::CallConvFlags::FuncAttributes::FuncArgsAssignment
_reserved	external/asmjit/src/asmjit/core/funcargscontext_p.h	/^    uint8_t _reserved[6];$/;"	m	struct:FuncArgsContext::WorkData
_reserved	external/asmjit/src/asmjit/core/inst.h	/^  uint8_t _reserved[18];$/;"	m	struct:InstIdParts::InstOptions::InstControlFlow::InstSameRegHint::CpuRWFlags::OpRWFlags::InstRWFlags::InstRWInfo
_reserved	external/asmjit/src/asmjit/core/inst.h	/^  uint8_t _reserved[1];$/;"	m	struct:InstIdParts::InstOptions::InstControlFlow::InstSameRegHint::CpuRWFlags::OpRWFlags::OpRWInfo
_reserved	external/asmjit/src/asmjit/core/jitallocator.h	/^    uint32_t _reserved = 0;$/;"	m	class:JitAllocatorOptions::JitAllocator::Span::Flags
_reserved	external/asmjit/src/asmjit/x86/x86instdb.h	/^  uint32_t _reserved : 14;$/;"	m	struct:InstDB::Mode::OpFlags::InstFlags::InstInfo
_reserved	external/asmjit/src/asmjit/x86/x86instdb.h	/^  uint8_t _reserved;$/;"	m	struct:InstDB::Mode::OpFlags::InstSignature
_reserved0	external/asmjit/src/asmjit/core/builder.h	/^    uint8_t _reserved0;$/;"	m	struct:NodeType::NodeFlags::SentinelType::BaseNode::AnyData
_reserved1	external/asmjit/src/asmjit/core/builder.h	/^    uint8_t _reserved1;$/;"	m	struct:NodeType::NodeFlags::SentinelType::BaseNode::AnyData
_reserved1	external/asmjit/src/asmjit/core/builder.h	/^    uint8_t _reserved1;$/;"	m	struct:NodeType::NodeFlags::SentinelType::BaseNode::SentinelData
_reservedSize	external/asmjit/src/asmjit/core/jitallocator.h	/^    size_t _reservedSize;$/;"	m	struct:JitAllocatorOptions::JitAllocator::Span::Statistics
_reservedU32	external/asmjit/src/asmjit/core/compilerdefs.h	/^  uint32_t _reservedU32 = 0;$/;"	m	class:VirtReg
_ret	external/asmjit/src/asmjit/core/func.h	/^  TypeId _ret;$/;"	m	struct:CallConvId::CallConvStrategy::CallConvFlags::FuncSignature
_retBlock	external/asmjit/src/asmjit/core/rabuilders_p.h	/^  RABlock* _retBlock = nullptr;$/;"	m	class:RACFGBuilderT
_rets	external/asmjit/src/asmjit/core/compiler.h	/^  OperandPack _rets;$/;"	m	class:InvokeNode
_reverseCondTable	external/asmjit/src/asmjit/x86/x86globals.h	/^static constexpr CondCode _reverseCondTable[] = {$/;"	m	class:CondCode
_rmFeature	external/asmjit/src/asmjit/core/inst.h	/^  uint8_t _rmFeature;$/;"	m	struct:InstIdParts::InstOptions::InstControlFlow::InstSameRegHint::CpuRWFlags::OpRWFlags::InstRWFlags::InstRWInfo
_rmSize	external/asmjit/src/asmjit/core/inst.h	/^  uint8_t _rmSize;$/;"	m	struct:InstIdParts::InstOptions::InstControlFlow::InstSameRegHint::CpuRWFlags::OpRWFlags::OpRWInfo
_rmSize	external/asmjit/src/asmjit/core/radefs_p.h	/^      uint8_t _rmSize;$/;"	m	struct:RAStrategyType::RAStrategyFlags::RATiedFlags::RATiedReg::__anon8::__anon9
_rng	external/asmjit/src/asmjit/core/jitallocator.cpp	/^  Random _rng;$/;"	m	class:JitAllocatorWrapper	file:
_root	external/asmjit/src/asmjit/core/zonetree.h	/^    : _root(other._root) {}$/;"	f	class:ZoneTree
_rw	external/asmjit/src/asmjit/core/jitallocator.cpp	/^    void* _rw;$/;"	m	class:JitAllocatorWrapper::Record	file:
_rw	external/asmjit/src/asmjit/core/jitallocator.h	/^    void* _rw = nullptr;$/;"	m	class:JitAllocatorOptions::JitAllocator::Span::Flags
_rwFlagsIndex	external/asmjit/src/asmjit/x86/x86instdb_p.h	/^  uint8_t _rwFlagsIndex;$/;"	m	struct:InstDB::AdditionalInfo
_rwFlagsInfoTable	external/asmjit/src/asmjit/x86/x86instdb.cpp	/^const InstDB::RWFlagsInfoTable InstDB::_rwFlagsInfoTable[] = {$/;"	m	class:InstDB	file:
_rwInfoIndex	external/asmjit/src/asmjit/arm/a64instdb.h	/^  uint16_t _rwInfoIndex;$/;"	m	struct:InstDB::InstInfo
_rx	external/asmjit/src/asmjit/core/jitallocator.h	/^    void* _rx = nullptr;$/;"	m	class:JitAllocatorOptions::JitAllocator::Span::Flags
_rxPtr	external/asmjit/src/asmjit/core/virtmem.h	/^  void* _rxPtr;$/;"	m	class:VirtMem::CachePolicy::MemoryFlags::HardenedRuntimeFlags::ProtectJitAccess::ProtectJitReadWriteScope
_saOffsetFromSA	external/asmjit/src/asmjit/core/func.h	/^  uint32_t _saOffsetFromSA;$/;"	m	class:CallConvId::CallConvStrategy::CallConvFlags::FuncAttributes::FuncFrame
_saOffsetFromSP	external/asmjit/src/asmjit/core/func.h	/^  uint32_t _saOffsetFromSP;$/;"	m	class:CallConvId::CallConvStrategy::CallConvFlags::FuncAttributes::FuncFrame
_saRegId	external/asmjit/src/asmjit/core/func.h	/^  uint8_t _saRegId;$/;"	m	class:CallConvId::CallConvStrategy::CallConvFlags::FuncAttributes::FuncArgsAssignment
_saRegId	external/asmjit/src/asmjit/core/func.h	/^  uint8_t _saRegId;$/;"	m	class:CallConvId::CallConvStrategy::CallConvFlags::FuncAttributes::FuncFrame
_saVarId	external/asmjit/src/asmjit/core/funcargscontext_p.h	/^  uint8_t _saVarId = kVarIdNone;$/;"	m	class:FuncArgsContext
_sameRegHint	external/asmjit/src/asmjit/x86/x86instdb.h	/^  uint32_t _sameRegHint : 2;$/;"	m	struct:InstDB::Mode::OpFlags::InstFlags::CommonInfo
_saveRestoreAlignment	external/asmjit/src/asmjit/core/func.h	/^  Support::Array<uint8_t, Globals::kNumVirtGroups> _saveRestoreAlignment;$/;"	m	class:CallConvId::CallConvStrategy::CallConvFlags::FuncAttributes::FuncFrame
_saveRestoreAlignment	external/asmjit/src/asmjit/core/func.h	/^  Support::Array<uint8_t, Globals::kNumVirtGroups> _saveRestoreAlignment;$/;"	m	struct:CallConvId::CallConvStrategy::CallConvFlags::CallConv
_saveRestoreRegSize	external/asmjit/src/asmjit/core/func.h	/^  Support::Array<uint8_t, Globals::kNumVirtGroups> _saveRestoreRegSize;$/;"	m	class:CallConvId::CallConvStrategy::CallConvFlags::FuncAttributes::FuncFrame
_saveRestoreRegSize	external/asmjit/src/asmjit/core/func.h	/^  Support::Array<uint8_t, Globals::kNumVirtGroups> _saveRestoreRegSize;$/;"	m	struct:CallConvId::CallConvStrategy::CallConvFlags::CallConv
_sb	external/asmjit/src/asmjit/core/rabuilders_p.h	/^  StringTmp<512> _sb;$/;"	m	class:RACFGBuilderT
_scalarHf	external/asmjit/src/asmjit/arm/a64instdb_p.h	/^  uint32_t _scalarHf : 4;$/;"	m	struct:InstDB::EncodingData::FSimdGeneric
_scalarHf	external/asmjit/src/asmjit/arm/a64instdb_p.h	/^  uint32_t _scalarHf : 4;$/;"	m	struct:InstDB::EncodingData::FSimdVVVe
_scalarOp	external/asmjit/src/asmjit/arm/a64instdb_p.h	/^  uint32_t _scalarOp : 28;$/;"	m	struct:InstDB::EncodingData::FSimdGeneric
_scalarOp	external/asmjit/src/asmjit/arm/a64instdb_p.h	/^  uint32_t _scalarOp : 28;$/;"	m	struct:InstDB::EncodingData::FSimdVVVe
_scalarOp	external/asmjit/src/asmjit/arm/a64instdb_p.h	/^  uint32_t _scalarOp;$/;"	m	struct:InstDB::EncodingData::FSimdPair
_searchEnd	external/asmjit/src/asmjit/core/jitallocator.cpp	/^  uint32_t _searchEnd = 0;$/;"	m	class:JitAllocatorBlock	file:
_searchStart	external/asmjit/src/asmjit/core/jitallocator.cpp	/^  uint32_t _searchStart = 0;$/;"	m	class:JitAllocatorBlock	file:
_section	external/asmjit/src/asmjit/core/assembler.h	/^  Section* _section = nullptr;$/;"	m	class:BaseAssembler
_section	external/asmjit/src/asmjit/core/codeholder.h	/^  Section* _section;$/;"	m	class:ExpressionOpType::ExpressionValueType::SectionFlags::CopySectionFlags::OffsetType::RelocType::LabelType::LabelEntry
_sections	external/asmjit/src/asmjit/core/codeholder.h	/^  ZoneVector<Section*> _sections;$/;"	m	class:ExpressionOpType::ExpressionValueType::SectionFlags::CopySectionFlags::OffsetType::RelocType::LabelType::CodeHolder
_sectionsByOrder	external/asmjit/src/asmjit/core/codeholder.h	/^  ZoneVector<Section*> _sectionsByOrder;$/;"	m	class:ExpressionOpType::ExpressionValueType::SectionFlags::CopySectionFlags::OffsetType::RelocType::LabelType::CodeHolder
_sentinel	external/asmjit/src/asmjit/core/builder.h	/^    SentinelData _sentinel;$/;"	m	union:NodeType::NodeFlags::SentinelType::BaseNode::__anon13
_sentinelType	external/asmjit/src/asmjit/core/builder.h	/^    SentinelType _sentinelType;$/;"	m	struct:NodeType::NodeFlags::SentinelType::BaseNode::SentinelData
_setArg	external/asmjit/src/asmjit/core/compiler.h	/^inline Error BaseCompiler::_setArg(size_t argIndex, size_t valueIndex, const BaseReg& reg) {$/;"	f	class:BaseCompiler
_setccTable	external/asmjit/src/asmjit/x86/x86globals.h	/^    static constexpr uint16_t _setccTable[] = { ASMJIT_INST_FROM_COND(Inst::kIdSet) };$/;"	m	namespace:CondCode::Inst
_sharedAssignmentId	external/asmjit/src/asmjit/core/rapass_p.h	/^  uint32_t _sharedAssignmentId = Globals::kInvalidId;$/;"	m	class:RABlockFlags::RABlock
_signature	external/asmjit/src/asmjit/core/operand.h	/^  Signature _signature;$/;"	m	struct:OperandType::RegType::RegGroup::Operand_
_signature	external/asmjit/src/asmjit/core/operand.h	/^  Signature _signature;$/;"	m	struct:OperandType::RegType::RegGroup::RegOnly
_size	external/asmjit/src/asmjit/core/codebuffer.h	/^  size_t _size;$/;"	m	struct:CodeBufferFlags::CodeBuffer
_size	external/asmjit/src/asmjit/core/constpool.h	/^    size_t _size;$/;"	m	struct:ConstPoolScope::ConstPool::Gap
_size	external/asmjit/src/asmjit/core/constpool.h	/^    size_t _size;$/;"	m	struct:ConstPoolScope::ConstPool::Tree
_size	external/asmjit/src/asmjit/core/constpool.h	/^  size_t _size;$/;"	m	class:ConstPoolScope::ConstPool
_size	external/asmjit/src/asmjit/core/jitallocator.h	/^    size_t _size = 0;$/;"	m	class:JitAllocatorOptions::JitAllocator::Span::Flags
_size	external/asmjit/src/asmjit/core/rastack_p.h	/^  uint32_t _size;$/;"	m	struct:RAStackSlot
_size	external/asmjit/src/asmjit/core/support.h	/^      _size(size) {}$/;"	f	struct:Support::Internal::SortOrder::Temporary
_size	external/asmjit/src/asmjit/core/support.h	/^  size_t _size;$/;"	m	struct:Support::Internal::SortOrder::Temporary
_size	external/asmjit/src/asmjit/core/virtmem.h	/^  size_t _size;$/;"	m	class:VirtMem::CachePolicy::MemoryFlags::HardenedRuntimeFlags::ProtectJitAccess::ProtectJitReadWriteScope
_size	external/asmjit/src/asmjit/core/zonehash.h	/^  size_t _size;$/;"	m	class:ZoneHashBase
_size	external/asmjit/src/asmjit/core/zonestring.h	/^      uint32_t _size;$/;"	m	struct:ZoneStringBase::__anon18::__anon19
_size	external/asmjit/src/asmjit/core/zonevector.h	/^  size_type _size = 0;$/;"	m	class:ZoneVectorBase
_size	external/asmjit/src/asmjit/core/zonevector.h	/^  uint32_t _size = 0;$/;"	m	class:ZoneBitVector
_slot	external/asmjit/src/asmjit/core/codeholder.h	/^  uint32_t _slot;$/;"	m	class:ExpressionOpType::ExpressionValueType::SectionFlags::CopySectionFlags::AddressTableEntry
_slots	external/asmjit/src/asmjit/core/rastack_p.h	/^  RAStackSlots _slots;$/;"	m	class:RAStackAllocator
_small	external/asmjit/src/asmjit/core/string.h	/^    Small _small;$/;"	m	union:StringFormatFlags::String::ModifyOp::__anon10
_sourceOffset	external/asmjit/src/asmjit/core/codeholder.h	/^  uint64_t _sourceOffset;$/;"	m	struct:ExpressionOpType::ExpressionValueType::SectionFlags::CopySectionFlags::OffsetType::RelocType::RelocEntry
_sourceSectionId	external/asmjit/src/asmjit/core/codeholder.h	/^  uint32_t _sourceSectionId;$/;"	m	struct:ExpressionOpType::ExpressionValueType::SectionFlags::CopySectionFlags::OffsetType::RelocType::RelocEntry
_sp	external/asmjit/src/asmjit/core/rapass_p.h	/^  BaseReg _sp = BaseReg();$/;"	m	class:RABlockFlags::BaseRAPass
_spRegId	external/asmjit/src/asmjit/core/archtraits.h	/^  uint8_t _spRegId;$/;"	m	struct:Arch::SubArch::ArchTypeNameId::InstHints::ArchTraits
_spRegId	external/asmjit/src/asmjit/core/func.h	/^  uint8_t _spRegId;$/;"	m	class:CallConvId::CallConvStrategy::CallConvFlags::FuncAttributes::FuncFrame
_spillZoneSize	external/asmjit/src/asmjit/core/func.h	/^  uint8_t _spillZoneSize;$/;"	m	class:CallConvId::CallConvStrategy::CallConvFlags::FuncAttributes::FuncFrame
_spillZoneSize	external/asmjit/src/asmjit/core/func.h	/^  uint8_t _spillZoneSize;$/;"	m	struct:CallConvId::CallConvStrategy::CallConvFlags::CallConv
_stackAdjustment	external/asmjit/src/asmjit/core/func.h	/^  uint32_t _stackAdjustment;$/;"	m	class:CallConvId::CallConvStrategy::CallConvFlags::FuncAttributes::FuncFrame
_stackDstMask	external/asmjit/src/asmjit/core/funcargscontext_p.h	/^  uint8_t _stackDstMask = 0;$/;"	m	class:FuncArgsContext
_stackOffset	external/asmjit/src/asmjit/core/compilerdefs.h	/^  int32_t _stackOffset = 0;$/;"	m	class:VirtReg
_stackSlot	external/asmjit/src/asmjit/core/radefs_p.h	/^  RAStackSlot* _stackSlot = nullptr;$/;"	m	class:RAStrategyType::RAStrategyFlags::RATiedFlags::RAWorkRegFlags::RAWorkReg
_start	external/asmjit/src/asmjit/core/zonestack.h	/^    void* _start;$/;"	m	struct:ZoneStackBase::Block
_state	external/asmjit/src/asmjit/core/jitallocator.cpp	/^  uint64_t _state[2];$/;"	m	class:Random	file:
_stats	external/asmjit/src/asmjit/core/rapass_p.h	/^  RARegsStats _stats;$/;"	m	class:RABlockFlags::RAInstBuilder
_stepping	external/asmjit/src/asmjit/core/cpuinfo.h	/^  uint32_t _stepping;$/;"	m	class:CpuInfo
_stop	external/asmjit/src/asmjit/core/rapass_p.h	/^  BaseNode* _stop = nullptr;$/;"	m	class:RABlockFlags::BaseRAPass
_stopBitVector	external/asmjit/src/asmjit/core/jitallocator.cpp	/^      _stopBitVector(stopBitVector) {$/;"	f	class:JitAllocatorBlock
_storage	external/asmjit/src/asmjit/core/zone.h	/^  } _storage;$/;"	m	class:ZoneTmp	typeref:struct:ZoneTmp::Storage
_strategy	external/asmjit/src/asmjit/core/func.h	/^  CallConvStrategy _strategy;$/;"	m	struct:CallConvId::CallConvStrategy::CallConvFlags::CallConv
_strategy	external/asmjit/src/asmjit/core/rapass_p.h	/^  Support::Array<RAStrategy, Globals::kNumVirtGroups> _strategy;$/;"	m	class:RABlockFlags::BaseRAPass
_subArch	external/asmjit/src/asmjit/core/cpuinfo.h	/^  SubArch _subArch;$/;"	m	class:CpuInfo
_subArch	external/asmjit/src/asmjit/core/environment.h	/^  SubArch _subArch;$/;"	m	class:Vendor::Platform::PlatformABI::Environment
_target	external/asmjit/src/asmjit/core/osutils_p.h	/^    : _target(target) { _target.lock(); }$/;"	f	class:LockGuard
_target	external/asmjit/src/asmjit/core/osutils_p.h	/^  Lock& _target;$/;"	m	class:LockGuard
_targetSectionId	external/asmjit/src/asmjit/core/codeholder.h	/^  uint32_t _targetSectionId;$/;"	m	struct:ExpressionOpType::ExpressionValueType::SectionFlags::CopySectionFlags::OffsetType::RelocType::RelocEntry
_temporaryMem	external/asmjit/src/asmjit/core/rapass_p.h	/^  Operand _temporaryMem = Operand();$/;"	m	class:RABlockFlags::BaseRAPass
_tests	external/asmjit/test/asmjit_test_compiler.h	/^  std::vector<std::unique_ptr<TestCase>> _tests;$/;"	m	class:TestApp
_tiedCount	external/asmjit/src/asmjit/core/ralocal_p.h	/^      _tiedCount() {}$/;"	f	class:RALocalAllocator
_tiedCount	external/asmjit/src/asmjit/core/ralocal_p.h	/^  RARegCount _tiedCount;$/;"	m	class:RALocalAllocator
_tiedCount	external/asmjit/src/asmjit/core/rapass_p.h	/^  RARegCount _tiedCount;$/;"	m	class:RABlockFlags::RAInst
_tiedIndex	external/asmjit/src/asmjit/core/rapass_p.h	/^  RARegIndex _tiedIndex;$/;"	m	class:RABlockFlags::RAInst
_tiedReg	external/asmjit/src/asmjit/core/radefs_p.h	/^  RATiedReg* _tiedReg = nullptr;$/;"	m	class:RAStrategyType::RAStrategyFlags::RATiedFlags::RAWorkRegFlags::RAWorkReg
_tiedRegs	external/asmjit/src/asmjit/core/rapass_p.h	/^  RATiedReg _tiedRegs[128];$/;"	m	class:RABlockFlags::RAInstBuilder
_tiedRegs	external/asmjit/src/asmjit/core/rapass_p.h	/^  RATiedReg _tiedRegs[1];$/;"	m	class:RABlockFlags::RAInst
_tiedTotal	external/asmjit/src/asmjit/core/ralocal_p.h	/^  uint32_t _tiedTotal;$/;"	m	class:RALocalAllocator
_tiedTotal	external/asmjit/src/asmjit/core/rapass_p.h	/^  uint32_t _tiedTotal;$/;"	m	class:RABlockFlags::RAInst
_timestamp	external/asmjit/src/asmjit/core/rapass_p.h	/^  mutable uint64_t _timestamp = 0;$/;"	m	class:RABlockFlags::RABlock
_tmpAssignment	external/asmjit/src/asmjit/core/ralocal_p.h	/^  RAAssignment _tmpAssignment;$/;"	m	class:RALocalAllocator
_tmpString	external/asmjit/src/asmjit/core/rapass_p.h	/^  StringTmp<80> _tmpString;$/;"	m	class:RABlockFlags::BaseRAPass
_tmpWorkToPhysMap	external/asmjit/src/asmjit/core/ralocal_p.h	/^  WorkToPhysMap* _tmpWorkToPhysMap;$/;"	m	class:RALocalAllocator
_tree	external/asmjit/src/asmjit/core/constpool.h	/^    ZoneTree<Node> _tree;$/;"	m	struct:ConstPoolScope::ConstPool::Tree
_tree	external/asmjit/src/asmjit/core/constpool.h	/^  Tree _tree[kIndexCount];$/;"	m	class:ConstPoolScope::ConstPool
_type	external/asmjit/src/asmjit/core/codeholder.h	/^  LabelType _type;$/;"	m	class:ExpressionOpType::ExpressionValueType::SectionFlags::CopySectionFlags::OffsetType::RelocType::LabelType::LabelEntry
_type	external/asmjit/src/asmjit/core/codeholder.h	/^  OffsetType _type;$/;"	m	struct:ExpressionOpType::ExpressionValueType::SectionFlags::CopySectionFlags::OffsetType::OffsetFormat
_type	external/asmjit/src/asmjit/core/radefs_p.h	/^  RAStrategyType _type = RAStrategyType::kSimple;$/;"	m	struct:RAStrategyType::RAStrategyFlags::RAStrategy
_type	external/asmjit/src/asmjit/core/string.h	/^    uint8_t _type;$/;"	m	union:StringFormatFlags::String::ModifyOp::__anon10
_typeData	external/asmjit/src/asmjit/core/type.cpp	/^const TypeData _typeData = {$/;"	m	namespace:TypeUtils	file:
_typeData	external/asmjit/src/asmjit/core/type.h	/^ASMJIT_VARAPI const TypeData _typeData;$/;"	m	namespace:TypeId::TypeUtils
_typeId	external/asmjit/src/asmjit/core/builder.h	/^    TypeId _typeId;$/;"	m	struct:NodeType::NodeFlags::SentinelType::BaseNode::EmbedData
_typeId	external/asmjit/src/asmjit/core/compilerdefs.h	/^  TypeId _typeId = TypeId::kVoid;$/;"	m	class:VirtReg
_typeIdToRegType	external/asmjit/src/asmjit/core/archtraits.h	/^  Support::Array<RegType, 32> _typeIdToRegType;$/;"	m	struct:Arch::SubArch::ArchTypeNameId::InstHints::ArchTraits
_typeNameIdTable	external/asmjit/src/asmjit/core/archtraits.h	/^  ArchTypeNameId _typeNameIdTable[4];$/;"	m	struct:Arch::SubArch::ArchTypeNameId::InstHints::ArchTraits
_typeSize	external/asmjit/src/asmjit/core/builder.h	/^    uint8_t _typeSize;$/;"	m	struct:NodeType::NodeFlags::SentinelType::BaseNode::EmbedData
_unitList	external/asmjit/test/broken.cpp	/^  BrokenAPI::Unit* _unitList;$/;"	m	struct:BrokenGlobal	file:
_unitRunning	external/asmjit/test/broken.cpp	/^  BrokenAPI::Unit* _unitRunning;$/;"	m	struct:BrokenGlobal	file:
_unresolvedLinkCount	external/asmjit/src/asmjit/core/codeholder.h	/^  size_t _unresolvedLinkCount;$/;"	m	class:ExpressionOpType::ExpressionValueType::SectionFlags::CopySectionFlags::OffsetType::RelocType::LabelType::CodeHolder
_useCount	external/asmjit/src/asmjit/core/rastack_p.h	/^  uint32_t _useCount;$/;"	m	struct:RAStackSlot
_useId	external/asmjit/src/asmjit/core/radefs_p.h	/^      uint8_t _useId;$/;"	m	struct:RAStrategyType::RAStrategyFlags::RATiedFlags::RATiedReg::__anon8::__anon9
_useIdMask	external/asmjit/src/asmjit/core/radefs_p.h	/^  RegMask _useIdMask = 0;$/;"	m	class:RAStrategyType::RAStrategyFlags::RATiedFlags::RAWorkRegFlags::RAWorkReg
_useRegMask	external/asmjit/src/asmjit/core/radefs_p.h	/^  RegMask _useRegMask;$/;"	m	struct:RAStrategyType::RAStrategyFlags::RATiedFlags::RATiedReg
_useRewriteMask	external/asmjit/src/asmjit/core/radefs_p.h	/^  uint32_t _useRewriteMask;$/;"	m	struct:RAStrategyType::RAStrategyFlags::RATiedFlags::RATiedReg
_useVectorCall	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^  bool _useVectorCall;$/;"	m	class:X86Test_FuncCallSIMD	file:
_used	external/asmjit/src/asmjit/core/rapass_p.h	/^  RARegMask _used;$/;"	m	class:RABlockFlags::RAInstBuilder
_usedRegs	external/asmjit/src/asmjit/core/funcargscontext_p.h	/^    RegMask _usedRegs;$/;"	m	struct:FuncArgsContext::WorkData
_usedRegs	external/asmjit/src/asmjit/core/rapass_p.h	/^  RARegMask _usedRegs;$/;"	m	class:RABlockFlags::RAInst
_usedSize	external/asmjit/src/asmjit/core/jitallocator.h	/^    size_t _usedSize;$/;"	m	struct:JitAllocatorOptions::JitAllocator::Span::Statistics
_userDataPtr	external/asmjit/src/asmjit/core/builder.h	/^    void* _userDataPtr;$/;"	m	union:NodeType::NodeFlags::SentinelType::BaseNode::__anon14
_userDataU64	external/asmjit/src/asmjit/core/builder.h	/^    uint64_t _userDataU64;$/;"	m	union:NodeType::NodeFlags::SentinelType::BaseNode::__anon14
_vRegArray	external/asmjit/src/asmjit/core/compiler.h	/^  ZoneVector<VirtReg*> _vRegArray;$/;"	m	class:BaseCompiler
_vRegZone	external/asmjit/src/asmjit/core/compiler.h	/^  Zone _vRegZone;$/;"	m	class:BaseCompiler
_vaIndex	external/asmjit/src/asmjit/core/func.h	/^  uint8_t _vaIndex = 0;$/;"	m	class:CallConvId::CallConvStrategy::CallConvFlags::FuncAttributes::FuncDetail
_vaIndex	external/asmjit/src/asmjit/core/func.h	/^  uint8_t _vaIndex;$/;"	m	struct:CallConvId::CallConvStrategy::CallConvFlags::FuncSignature
_validationFlags	external/asmjit/src/asmjit/core/emitter.h	/^  ValidationFlags _validationFlags = ValidationFlags::kNone;$/;"	m	class:AlignMode::EmitterType::EmitterFlags::EncodingOptions::BaseEmitter
_value	external/asmjit/src/asmjit/core/archcommons.h	/^      _value(value) {}$/;"	f	class:CondCode::DataType::ShiftOp::Shift
_value	external/asmjit/src/asmjit/core/archcommons.h	/^  uint32_t _value;$/;"	m	class:CondCode::DataType::ShiftOp::Shift
_valueOffset	external/asmjit/src/asmjit/core/codeholder.h	/^  uint8_t _valueOffset;$/;"	m	struct:ExpressionOpType::ExpressionValueType::SectionFlags::CopySectionFlags::OffsetType::OffsetFormat
_valueSize	external/asmjit/src/asmjit/core/codeholder.h	/^  uint8_t _valueSize;$/;"	m	struct:ExpressionOpType::ExpressionValueType::SectionFlags::CopySectionFlags::OffsetType::OffsetFormat
_values	external/asmjit/src/asmjit/core/func.h	/^  FuncValue _values[Globals::kMaxValuePack];$/;"	m	struct:CallConvId::CallConvStrategy::CallConvFlags::FuncValuePack
_varCount	external/asmjit/src/asmjit/core/funcargscontext_p.h	/^  uint32_t _varCount = 0;$/;"	m	class:FuncArgsContext
_vars	external/asmjit/src/asmjit/core/funcargscontext_p.h	/^  Var _vars[Globals::kMaxFuncArgs * Globals::kMaxValuePack + 1];$/;"	m	class:FuncArgsContext
_vectorFpOp	external/asmjit/src/asmjit/arm/a64instdb_p.h	/^  uint32_t _vectorFpOp;$/;"	m	struct:InstDB::EncodingData::SimdFcvtSV
_vectorHf	external/asmjit/src/asmjit/arm/a64instdb_p.h	/^  uint32_t _vectorHf : 4;$/;"	m	struct:InstDB::EncodingData::FSimdGeneric
_vectorIntOp	external/asmjit/src/asmjit/arm/a64instdb_p.h	/^  uint32_t _vectorIntOp;$/;"	m	struct:InstDB::EncodingData::SimdFcvtSV
_vectorOp	external/asmjit/src/asmjit/arm/a64instdb_p.h	/^  uint32_t _vectorOp : 28;$/;"	m	struct:InstDB::EncodingData::FSimdGeneric
_vectorOp	external/asmjit/src/asmjit/arm/a64instdb_p.h	/^  uint32_t _vectorOp;$/;"	m	struct:InstDB::EncodingData::FSimdPair
_vectorOp	external/asmjit/src/asmjit/arm/a64instdb_p.h	/^  uint32_t _vectorOp;$/;"	m	struct:InstDB::EncodingData::FSimdVVVe
_vectorOp	external/asmjit/src/asmjit/arm/a64instdb_p.h	/^  uint32_t _vectorOp;$/;"	m	struct:InstDB::EncodingData::SimdFmlal
_vendor	external/asmjit/src/asmjit/core/cpuinfo.h	/^  FixedString<16> _vendor;$/;"	m	class:CpuInfo
_vendor	external/asmjit/src/asmjit/core/environment.h	/^  Vendor _vendor;$/;"	m	class:Vendor::Platform::PlatformABI::Environment
_verbose	external/asmjit/test/asmjit_test_compiler.h	/^  bool _verbose = false;$/;"	m	class:TestApp
_virtId	external/asmjit/src/asmjit/core/radefs_p.h	/^  uint32_t _virtId = 0;$/;"	m	class:RAStrategyType::RAStrategyFlags::RATiedFlags::RAWorkRegFlags::RAWorkReg
_virtReg	external/asmjit/src/asmjit/core/radefs_p.h	/^  VirtReg* _virtReg = nullptr;$/;"	m	class:RAStrategyType::RAStrategyFlags::RATiedFlags::RAWorkRegFlags::RAWorkReg
_virtSize	external/asmjit/src/asmjit/core/compilerdefs.h	/^  uint32_t _virtSize = 0;$/;"	m	class:VirtReg
_virtualSize	external/asmjit/src/asmjit/core/codeholder.h	/^  uint64_t _virtualSize;$/;"	m	class:ExpressionOpType::ExpressionValueType::SectionFlags::CopySectionFlags::Section
_wasDetected	external/asmjit/src/asmjit/core/cpuinfo.h	/^  bool _wasDetected;$/;"	m	class:CpuInfo
_weight	external/asmjit/src/asmjit/core/compilerdefs.h	/^  uint8_t _weight = 1;$/;"	m	class:VirtReg
_weight	external/asmjit/src/asmjit/core/rapass_p.h	/^  uint32_t _weight = 0;$/;"	m	class:RABlockFlags::RABlock
_weight	external/asmjit/src/asmjit/core/rastack_p.h	/^  uint32_t _weight;$/;"	m	struct:RAStackSlot
_wholeData	external/asmjit/src/asmjit/core/zonestring.h	/^    char _wholeData[kWholeSize];$/;"	m	union:ZoneString::__anon21
_width	external/asmjit/src/asmjit/core/radefs_p.h	/^  uint32_t _width = 0;$/;"	m	class:RAStrategyType::RAStrategyFlags::RALiveStats
_workData	external/asmjit/src/asmjit/core/funcargscontext_p.h	/^  Support::Array<WorkData, Globals::kNumVirtGroups> _workData;$/;"	m	class:FuncArgsContext
_workId	external/asmjit/src/asmjit/core/radefs_p.h	/^  uint32_t _workId = 0;$/;"	m	class:RAStrategyType::RAStrategyFlags::RATiedFlags::RAWorkRegFlags::RAWorkReg
_workId	external/asmjit/src/asmjit/core/radefs_p.h	/^  uint32_t _workId;$/;"	m	struct:RAStrategyType::RAStrategyFlags::RATiedFlags::RATiedReg
_workReg	external/asmjit/src/asmjit/core/compilerdefs.h	/^  RAWorkReg* _workReg = nullptr;$/;"	m	class:VirtReg
_workRegs	external/asmjit/src/asmjit/core/funcargscontext_p.h	/^    RegMask _workRegs;$/;"	m	struct:FuncArgsContext::WorkData
_workRegs	external/asmjit/src/asmjit/core/rapass_p.h	/^  RAWorkRegs _workRegs;$/;"	m	class:RABlockFlags::BaseRAPass
_workRegsOfGroup	external/asmjit/src/asmjit/core/rapass_p.h	/^  Support::Array<RAWorkRegs, Globals::kNumVirtGroups> _workRegsOfGroup;$/;"	m	class:RABlockFlags::BaseRAPass
_workToPhysMap	external/asmjit/src/asmjit/core/raassignment_p.h	/^  WorkToPhysMap* _workToPhysMap;$/;"	m	class:RAAssignment
_writeByteMask	external/asmjit/src/asmjit/core/inst.h	/^  uint64_t _writeByteMask;$/;"	m	struct:InstIdParts::InstOptions::InstControlFlow::InstSameRegHint::CpuRWFlags::OpRWFlags::OpRWInfo
_writeFlags	external/asmjit/src/asmjit/core/inst.h	/^  CpuRWFlags _writeFlags;$/;"	m	struct:InstIdParts::InstOptions::InstControlFlow::InstSameRegHint::CpuRWFlags::OpRWFlags::InstRWFlags::InstRWInfo
_x64ValidationData	external/asmjit/src/asmjit/x86/x86instapi.cpp	/^static const X86ValidationData _x64ValidationData = {$/;"	v	file:
_x86OpFlagFromRegType	external/asmjit/src/asmjit/x86/x86instapi.cpp	/^static const InstDB::OpFlags _x86OpFlagFromRegType[uint32_t(RegType::kMaxValue) + 1] = { ASMJIT_LOOKUP_TABLE_32(VALUE, 0) };$/;"	v	file:
_x86ValidationData	external/asmjit/src/asmjit/x86/x86instapi.cpp	/^static const X86ValidationData _x86ValidationData = {$/;"	v	file:
_zeroBlock	external/asmjit/src/asmjit/core/zone.cpp	/^const Zone::Block Zone::_zeroBlock = { nullptr, nullptr, 0 };$/;"	m	class:Zone	file:
_zeroBlock	external/asmjit/src/asmjit/core/zone.h	/^  static ASMJIT_API const Block _zeroBlock;$/;"	m	class:Zone
_zeroOp	external/asmjit/src/asmjit/arm/a64instdb_p.h	/^  uint32_t _zeroOp : 28;$/;"	m	struct:InstDB::EncodingData::SimdFcm
_zone	external/asmjit/src/asmjit/core/codeholder.cpp	/^    _allocator(&_zone),$/;"	v
_zone	external/asmjit/src/asmjit/core/codeholder.h	/^  Zone _zone;$/;"	m	class:ExpressionOpType::ExpressionValueType::SectionFlags::CopySectionFlags::OffsetType::RelocType::LabelType::CodeHolder
_zone	external/asmjit/src/asmjit/core/constpool.h	/^  Zone* _zone;$/;"	m	class:ConstPoolScope::ConstPool
_zone	external/asmjit/src/asmjit/core/jitallocator.cpp	/^      _heap(&_zone),$/;"	m	class:JitAllocatorWrapper	file:
_zone	external/asmjit/src/asmjit/core/jitallocator.cpp	/^  Zone _zone;$/;"	m	class:JitAllocatorWrapper	file:
_zone	external/asmjit/src/asmjit/core/zone.h	/^    : _zone(zone) {}$/;"	f	class:ZoneAllocator
a	external/asmjit/src/asmjit/core/radefs_p.h	/^  uint32_t a, b;$/;"	m	struct:RAStrategyType::RAStrategyFlags::RALiveInterval
a32Arch	external/asmjit/tools/tablegen-a64.js	/^    var a32Arch = false;$/;"	v
a64Arch	external/asmjit/tools/tablegen-a64.js	/^    var a64Arch = false;$/;"	v
a64ArchTraits	external/asmjit/src/asmjit/arm/a64archtraits_p.h	/^static const constexpr ArchTraits a64ArchTraits = {$/;"	v
aHiId	external/asmjit/src/asmjit/arm/a64instdb_p.h	/^  uint32_t aHiId : 6;$/;"	m	struct:InstDB::EncodingData::BaseRR
aHiId	external/asmjit/src/asmjit/arm/a64instdb_p.h	/^  uint32_t aHiId : 6;$/;"	m	struct:InstDB::EncodingData::BaseRRII
aHiId	external/asmjit/src/asmjit/arm/a64instdb_p.h	/^  uint32_t aHiId : 6;$/;"	m	struct:InstDB::EncodingData::BaseRRR
aHiId	external/asmjit/src/asmjit/arm/a64instdb_p.h	/^  uint32_t aHiId : 6;$/;"	m	struct:InstDB::EncodingData::BaseRRRR
aImmDiscardLsb	external/asmjit/src/asmjit/arm/a64instdb_p.h	/^  uint32_t aImmDiscardLsb : 5;$/;"	m	struct:InstDB::EncodingData::BaseRRII
aImmOffset	external/asmjit/src/asmjit/arm/a64instdb_p.h	/^  uint32_t aImmOffset : 5;$/;"	m	struct:InstDB::EncodingData::BaseRRII
aImmSize	external/asmjit/src/asmjit/arm/a64instdb_p.h	/^  uint32_t aImmSize : 6;$/;"	m	struct:InstDB::EncodingData::BaseRRII
aIndex	external/asmjit/tools/tablegen-x86.js	/^    var aIndex, bIndex;$/;"	v
aShift	external/asmjit/src/asmjit/arm/a64instdb_p.h	/^  uint32_t aShift : 5;$/;"	m	struct:InstDB::EncodingData::BaseRR
aType	external/asmjit/src/asmjit/arm/a64instdb_p.h	/^  uint32_t aType : 2;$/;"	m	struct:InstDB::EncodingData::BaseRR
aType	external/asmjit/src/asmjit/arm/a64instdb_p.h	/^  uint32_t aType : 2;$/;"	m	struct:InstDB::EncodingData::BaseRRII
aType	external/asmjit/src/asmjit/arm/a64instdb_p.h	/^  uint32_t aType : 2;$/;"	m	struct:InstDB::EncodingData::BaseRRR
aType	external/asmjit/src/asmjit/arm/a64instdb_p.h	/^  uint32_t aType : 2;$/;"	m	struct:InstDB::EncodingData::BaseRRRR
access	external/asmjit/tools/tablegen-x86.js	/^            access: op.read && op.write ? "X" : op.read ? "R" : op.write ? "W" : "?",$/;"	p	class:var.d
add	external/asmjit/test/asmjit_test_compiler_a64.cpp	/^  static void add(TestApp& app) {$/;"	f	class:A64Test_Adr
add	external/asmjit/test/asmjit_test_compiler_a64.cpp	/^  static void add(TestApp& app) {$/;"	f	class:A64Test_Branch1
add	external/asmjit/test/asmjit_test_compiler_a64.cpp	/^  static void add(TestApp& app) {$/;"	f	class:A64Test_GpArgs
add	external/asmjit/test/asmjit_test_compiler_a64.cpp	/^  static void add(TestApp& app) {$/;"	f	class:A64Test_Invoke1
add	external/asmjit/test/asmjit_test_compiler_a64.cpp	/^  static void add(TestApp& app) {$/;"	f	class:A64Test_Invoke2
add	external/asmjit/test/asmjit_test_compiler_a64.cpp	/^  static void add(TestApp& app) {$/;"	f	class:A64Test_Invoke3
add	external/asmjit/test/asmjit_test_compiler_a64.cpp	/^  static void add(TestApp& app) {$/;"	f	class:A64Test_JumpTable
add	external/asmjit/test/asmjit_test_compiler_a64.cpp	/^  static void add(TestApp& app) {$/;"	f	class:A64Test_ManyRegs
add	external/asmjit/test/asmjit_test_compiler_a64.cpp	/^  static void add(TestApp& app) {$/;"	f	class:A64Test_Simd1
add	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^  static void add(TestApp& app) {$/;"	f	class:X86Test_AlignBase
add	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^  static void add(TestApp& app) {$/;"	f	class:X86Test_AllocAlphaBlend
add	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^  static void add(TestApp& app) {$/;"	f	class:X86Test_AllocArgsDouble
add	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^  static void add(TestApp& app) {$/;"	f	class:X86Test_AllocArgsFloat
add	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^  static void add(TestApp& app) {$/;"	f	class:X86Test_AllocArgsIntPtr
add	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^  static void add(TestApp& app) {$/;"	f	class:X86Test_AllocArgsVec
add	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^  static void add(TestApp& app) {$/;"	f	class:X86Test_AllocBase
add	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^  static void add(TestApp& app) {$/;"	f	class:X86Test_AllocExtraBlock
add	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^  static void add(TestApp& app) {$/;"	f	class:X86Test_AllocGpbLo1
add	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^  static void add(TestApp& app) {$/;"	f	class:X86Test_AllocGpbLo2
add	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^  static void add(TestApp& app) {$/;"	f	class:X86Test_AllocIdiv1
add	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^  static void add(TestApp& app) {$/;"	f	class:X86Test_AllocIfElse1
add	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^  static void add(TestApp& app) {$/;"	f	class:X86Test_AllocIfElse2
add	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^  static void add(TestApp& app) {$/;"	f	class:X86Test_AllocIfElse3
add	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^  static void add(TestApp& app) {$/;"	f	class:X86Test_AllocIfElse4
add	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^  static void add(TestApp& app) {$/;"	f	class:X86Test_AllocImul1
add	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^  static void add(TestApp& app) {$/;"	f	class:X86Test_AllocImul2
add	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^  static void add(TestApp& app) {$/;"	f	class:X86Test_AllocInt8
add	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^  static void add(TestApp& app) {$/;"	f	class:X86Test_AllocMany1
add	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^  static void add(TestApp& app) {$/;"	f	class:X86Test_AllocMany2
add	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^  static void add(TestApp& app) {$/;"	f	class:X86Test_AllocMemcpy
add	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^  static void add(TestApp& app) {$/;"	f	class:X86Test_AllocRepMovsb
add	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^  static void add(TestApp& app) {$/;"	f	class:X86Test_AllocRetDouble1
add	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^  static void add(TestApp& app) {$/;"	f	class:X86Test_AllocRetDouble2
add	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^  static void add(TestApp& app) {$/;"	f	class:X86Test_AllocRetFloat1
add	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^  static void add(TestApp& app) {$/;"	f	class:X86Test_AllocRetFloat2
add	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^  static void add(TestApp& app) {$/;"	f	class:X86Test_AllocSetz
add	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^  static void add(TestApp& app) {$/;"	f	class:X86Test_AllocShlRor
add	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^  static void add(TestApp& app) {$/;"	f	class:X86Test_AllocStack
add	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^  static void add(TestApp& app) {$/;"	f	class:X86Test_AllocUnhandledArg
add	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^  static void add(TestApp& app) {$/;"	f	class:X86Test_FuncCallAVXClobber
add	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^  static void add(TestApp& app) {$/;"	f	class:X86Test_FuncCallBase1
add	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^  static void add(TestApp& app) {$/;"	f	class:X86Test_FuncCallBase2
add	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^  static void add(TestApp& app) {$/;"	f	class:X86Test_FuncCallConditional
add	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^  static void add(TestApp& app) {$/;"	f	class:X86Test_FuncCallDoubleAsXmmRet
add	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^  static void add(TestApp& app) {$/;"	f	class:X86Test_FuncCallDuplicateArgs
add	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^  static void add(TestApp& app) {$/;"	f	class:X86Test_FuncCallFast
add	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^  static void add(TestApp& app) {$/;"	f	class:X86Test_FuncCallFloatAsXmmRet
add	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^  static void add(TestApp& app) {$/;"	f	class:X86Test_FuncCallImmArgs
add	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^  static void add(TestApp& app) {$/;"	f	class:X86Test_FuncCallInt64Arg
add	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^  static void add(TestApp& app) {$/;"	f	class:X86Test_FuncCallLight
add	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^  static void add(TestApp& app) {$/;"	f	class:X86Test_FuncCallManyArgs
add	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^  static void add(TestApp& app) {$/;"	f	class:X86Test_FuncCallMisc1
add	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^  static void add(TestApp& app) {$/;"	f	class:X86Test_FuncCallMisc2
add	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^  static void add(TestApp& app) {$/;"	f	class:X86Test_FuncCallMisc3
add	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^  static void add(TestApp& app) {$/;"	f	class:X86Test_FuncCallMisc4
add	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^  static void add(TestApp& app) {$/;"	f	class:X86Test_FuncCallMisc5
add	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^  static void add(TestApp& app) {$/;"	f	class:X86Test_FuncCallMisc6
add	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^  static void add(TestApp& app) {$/;"	f	class:X86Test_FuncCallMultiple
add	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^  static void add(TestApp& app) {$/;"	f	class:X86Test_FuncCallPtrArgs
add	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^  static void add(TestApp& app) {$/;"	f	class:X86Test_FuncCallRecursive
add	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^  static void add(TestApp& app) {$/;"	f	class:X86Test_FuncCallRefArgs
add	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^  static void add(TestApp& app) {$/;"	f	class:X86Test_FuncCallSIMD
add	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^  static void add(TestApp& app) {$/;"	f	class:X86Test_FuncCallStd
add	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^  static void add(TestApp& app) {$/;"	f	class:X86Test_FuncCallVarArg1
add	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^  static void add(TestApp& app) {$/;"	f	class:X86Test_FuncCallVarArg2
add	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^  static void add(TestApp& app) {$/;"	f	class:X86Test_JumpCross
add	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^  static void add(TestApp& app) {$/;"	f	class:X86Test_JumpMany
add	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^  static void add(TestApp& app) {$/;"	f	class:X86Test_JumpMerge
add	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^  static void add(TestApp& app) {$/;"	f	class:X86Test_JumpTable1
add	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^  static void add(TestApp& app) {$/;"	f	class:X86Test_JumpTable2
add	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^  static void add(TestApp& app) {$/;"	f	class:X86Test_JumpTable3
add	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^  static void add(TestApp& app) {$/;"	f	class:X86Test_JumpTable4
add	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^  static void add(TestApp& app) {$/;"	f	class:X86Test_JumpUnreachable1
add	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^  static void add(TestApp& app) {$/;"	f	class:X86Test_JumpUnreachable2
add	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^  static void add(TestApp& app) {$/;"	f	class:X86Test_MiscGlobalConstPool
add	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^  static void add(TestApp& app) {$/;"	f	class:X86Test_MiscLocalConstPool
add	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^  static void add(TestApp& app) {$/;"	f	class:X86Test_MiscMultiFunc
add	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^  static void add(TestApp& app) {$/;"	f	class:X86Test_MiscUnfollow
add	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^  static void add(TestApp& app) {$/;"	f	class:X86Test_NoAlign
add	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^  static void add(TestApp& app) {$/;"	f	class:X86Test_NoCode
add	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^  static void add(TestApp& app) {$/;"	f	struct:X86Test_MiscMultiRet
addFunc	external/asmjit/src/asmjit/core/compiler.cpp	/^FuncNode* BaseCompiler::addFunc(FuncNode* func) {$/;"	f	class:BaseCompiler
addFunc	external/asmjit/src/asmjit/core/compiler.h	/^  inline FuncNode* addFunc(const FuncSignature& signature) {$/;"	f	class:BaseCompiler
addFuncNode	external/asmjit/src/asmjit/core/compiler.cpp	/^Error BaseCompiler::addFuncNode(FuncNode** out, const FuncSignature& signature) {$/;"	f	class:BaseCompiler
addFuncRetNode	external/asmjit/src/asmjit/core/compiler.cpp	/^Error BaseCompiler::addFuncRetNode(FuncRetNode** out, const Operand_& o0, const Operand_& o1) {$/;"	f	class:BaseCompiler
addInvokeNode	external/asmjit/src/asmjit/core/compiler.cpp	/^Error BaseCompiler::addInvokeNode(InvokeNode** out, InstId instId, const Operand_& o0, const FuncSignature& signature) {$/;"	f	class:BaseCompiler
addPassT	external/asmjit/src/asmjit/core/builder.h	/^  inline Error addPassT() { return addPass(newPassT<T>()); }$/;"	f	class:NodeType::NodeFlags::SentinelType::BaseBuilder
addPassT	external/asmjit/src/asmjit/core/builder.h	/^  inline Error addPassT(Args&&... args) { return addPass(newPassT<T, Args...>(std::forward<Args>(args)...)); }$/;"	f	class:NodeType::NodeFlags::SentinelType::BaseBuilder
addRet	external/asmjit/src/asmjit/core/compiler.h	/^  inline Error addRet(const Operand_& o0, const Operand_& o1) {$/;"	f	class:BaseCompiler
addT	external/asmjit/test/asmjit_test_compiler.h	/^  inline void addT() { T::add(*this); }$/;"	f	class:TestApp
addr	external/asmjit/src/asmjit/core/jitallocator.cpp	/^    uint8_t* addr;$/;"	m	class:JitAllocatorWrapper::Range	file:
aes_DATA	mk/external.mk	/^aes_DATA = $(OUT)\/aes.elf$/;"	m
aes_DATA_SHA1	mk/external.mk	/^aes_DATA_SHA1 = ba0f4d5a137152a60d3e19903a08401da0c5fff5$/;"	m
ah	external/asmjit/src/asmjit/x86/x86operand.h	/^static constexpr GpbHi ah = GpbHi(Gp::kIdAx);$/;"	m	namespace:regs
al	external/asmjit/src/asmjit/x86/x86operand.h	/^static constexpr GpbLo al = GpbLo(Gp::kIdAx);$/;"	m	namespace:regs
align	external/asmjit/src/asmjit/core/builder.cpp	/^Error BaseBuilder::align(AlignMode alignMode, uint32_t alignment) {$/;"	f	class:BaseBuilder
align	external/asmjit/src/asmjit/core/emitter.cpp	/^Error BaseEmitter::align(AlignMode alignMode, uint32_t alignment) {$/;"	f	class:BaseEmitter
align	external/asmjit/src/asmjit/x86/x86assembler.cpp	/^Error Assembler::align(AlignMode alignMode, uint32_t alignment) {$/;"	f	class:X86BufferWriter::Assembler
alignMode	external/asmjit/src/asmjit/core/builder.h	/^  ASMJIT_API Error newAlignNode(AlignNode** ASMJIT_NONNULL(out), AlignMode alignMode, uint32_t alignment);$/;"	m	class:NodeType::NodeFlags::SentinelType::BaseBuilder
alignment	external/asmjit/src/asmjit/core/builder.h	/^  ASMJIT_API Error newAlignNode(AlignNode** ASMJIT_NONNULL(out), AlignMode alignMode, uint32_t alignment);$/;"	m	class:NodeType::NodeFlags::SentinelType::BaseBuilder
alignment	external/asmjit/src/asmjit/core/compiler.h	/^  ASMJIT_API Error _newStack(BaseMem* ASMJIT_NONNULL(out), uint32_t size, uint32_t alignment, const char* name = nullptr);$/;"	m	class:BaseCompiler
alignof	external/asmjit/src/asmjit/core/osutils_p.h	/^static_assert(alignof(Lock::Handle) == alignof(CRITICAL_SECTION), "asmjit::Lock::Handle alignment must match CRITICAL_SECTION");$/;"	v
allocate	src/arena_objects.h	/^    pointer allocate(size_type n) { return arena->Allocate<T>(n); }$/;"	f	struct:MemArenaSTL
allocationCount	external/asmjit/src/asmjit/core/jitallocator.cpp	/^  size_t allocationCount;$/;"	m	class:JitAllocatorPrivateImpl	file:
allowedMemBaseRegs	external/asmjit/src/asmjit/x86/x86instapi.cpp	/^  uint32_t allowedMemBaseRegs;$/;"	m	struct:X86ValidationData	file:
allowedMemIndexRegs	external/asmjit/src/asmjit/x86/x86instapi.cpp	/^  uint32_t allowedMemIndexRegs;$/;"	m	struct:X86ValidationData	file:
allowedRegMask	external/asmjit/src/asmjit/x86/x86instapi.cpp	/^  RegMask allowedRegMask[uint32_t(RegType::kMaxValue) + 1];$/;"	m	struct:X86ValidationData	file:
annotation	external/asmjit/src/asmjit/core/compiler.h	/^  ASMJIT_API Error newJumpNode(JumpNode** ASMJIT_NONNULL(out), InstId instId, InstOptions instOptions, const Operand_& o0, JumpAnnotation* annotation);$/;"	m	class:BaseCompiler
arch	external/asmjit/test/asmjit_test_compiler.h	/^  inline asmjit::Arch arch() const { return _arch; }$/;"	f	class:TestCase
arch	external/asmjit/tools/tablegen-x86.js	/^    var arch = GenUtils.cpuArchOf(dbInsts);$/;"	v
arena	src/ir/qir.h	/^    MemArena *arena;$/;"	m	struct:dbt::qir::Region
arm	external/asmjit/src/asmjit/core/cpuinfo.cpp	/^namespace arm {$/;"	n	file:
armShiftOpToLdStOptMap	external/asmjit/src/asmjit/arm/a64assembler.cpp	/^static const uint8_t armShiftOpToLdStOptMap[] = { ASMJIT_LOOKUP_TABLE_16(VALUE, 0) };$/;"	v	file:
array	external/asmjit/src/asmjit/arm/a64assembler.cpp	/^  SizeOp array[(uint32_t(RegType::kARM_VecV) - uint32_t(RegType::kARM_VecB) + 1) * 8];$/;"	v
as	src/ir/qir.h	/^requires std::is_base_of_v<B, D> ALWAYS_INLINE D *as(B *b)$/;"	f	namespace:dbt::qir
asmjit	external/asmjit/src/asmjit/core.h	/^namespace asmjit {$/;"	n
asmjit	external/asmjit/src/asmjit/core/api-config.h	/^namespace asmjit {$/;"	n
asmjit_perf_utils	external/asmjit/test/asmjit_test_perf.h	/^namespace asmjit_perf_utils {$/;"	n
asmtest	external/asmjit/test/asmjit_test_misc.h	/^namespace asmtest {$/;"	n
assignEmitterFuncs	external/asmjit/src/asmjit/arm/a64emithelper.cpp	/^void assignEmitterFuncs(BaseEmitter* emitter) {$/;"	f
assignEmitterFuncs	external/asmjit/src/asmjit/x86/x86emithelper.cpp	/^void assignEmitterFuncs(BaseEmitter* emitter) {$/;"	f
assigned	external/asmjit/src/asmjit/core/raassignment_p.h	/^    RARegMask assigned;$/;"	m	struct:RAAssignment::PhysToWorkMap
ax	external/asmjit/src/asmjit/x86/x86operand.h	/^static constexpr Gpw ax = Gpw(Gp::kIdAx);$/;"	m	namespace:regs
b	external/asmjit/src/asmjit/core/radefs_p.h	/^  ASMJIT_INLINE_NODEBUG RALiveInterval(const RALiveInterval& other) noexcept : a(other.a), b(other.b) {}$/;"	f	struct:RAStrategyType::RAStrategyFlags::RALiveInterval
b	external/asmjit/src/asmjit/core/radefs_p.h	/^  ASMJIT_INLINE_NODEBUG RALiveInterval(uint32_t a, uint32_t b) noexcept : a(a), b(b) {}$/;"	f	struct:RAStrategyType::RAStrategyFlags::RALiveInterval
b	external/asmjit/src/asmjit/core/radefs_p.h	/^  uint32_t a, b;$/;"	m	struct:RAStrategyType::RAStrategyFlags::RALiveInterval
b0	external/asmjit/src/asmjit/arm/a64operand.h	/^static constexpr VecB b0 = VecB(0);$/;"	m	namespace:regs
b1	external/asmjit/src/asmjit/arm/a64operand.h	/^static constexpr VecB b1 = VecB(1);$/;"	m	namespace:regs
b10	external/asmjit/src/asmjit/arm/a64operand.h	/^static constexpr VecB b10 = VecB(10);$/;"	m	namespace:regs
b11	external/asmjit/src/asmjit/arm/a64operand.h	/^static constexpr VecB b11 = VecB(11);$/;"	m	namespace:regs
b12	external/asmjit/src/asmjit/arm/a64operand.h	/^static constexpr VecB b12 = VecB(12);$/;"	m	namespace:regs
b13	external/asmjit/src/asmjit/arm/a64operand.h	/^static constexpr VecB b13 = VecB(13);$/;"	m	namespace:regs
b14	external/asmjit/src/asmjit/arm/a64operand.h	/^static constexpr VecB b14 = VecB(14);$/;"	m	namespace:regs
b15	external/asmjit/src/asmjit/arm/a64operand.h	/^static constexpr VecB b15 = VecB(15);$/;"	m	namespace:regs
b16	external/asmjit/src/asmjit/arm/a64operand.h	/^static constexpr VecB b16 = VecB(16);$/;"	m	namespace:regs
b17	external/asmjit/src/asmjit/arm/a64operand.h	/^static constexpr VecB b17 = VecB(17);$/;"	m	namespace:regs
b18	external/asmjit/src/asmjit/arm/a64operand.h	/^static constexpr VecB b18 = VecB(18);$/;"	m	namespace:regs
b19	external/asmjit/src/asmjit/arm/a64operand.h	/^static constexpr VecB b19 = VecB(19);$/;"	m	namespace:regs
b2	external/asmjit/src/asmjit/arm/a64operand.h	/^static constexpr VecB b2 = VecB(2);$/;"	m	namespace:regs
b20	external/asmjit/src/asmjit/arm/a64operand.h	/^static constexpr VecB b20 = VecB(20);$/;"	m	namespace:regs
b21	external/asmjit/src/asmjit/arm/a64operand.h	/^static constexpr VecB b21 = VecB(21);$/;"	m	namespace:regs
b22	external/asmjit/src/asmjit/arm/a64operand.h	/^static constexpr VecB b22 = VecB(22);$/;"	m	namespace:regs
b23	external/asmjit/src/asmjit/arm/a64operand.h	/^static constexpr VecB b23 = VecB(23);$/;"	m	namespace:regs
b24	external/asmjit/src/asmjit/arm/a64operand.h	/^static constexpr VecB b24 = VecB(24);$/;"	m	namespace:regs
b25	external/asmjit/src/asmjit/arm/a64operand.h	/^static constexpr VecB b25 = VecB(25);$/;"	m	namespace:regs
b26	external/asmjit/src/asmjit/arm/a64operand.h	/^static constexpr VecB b26 = VecB(26);$/;"	m	namespace:regs
b27	external/asmjit/src/asmjit/arm/a64operand.h	/^static constexpr VecB b27 = VecB(27);$/;"	m	namespace:regs
b28	external/asmjit/src/asmjit/arm/a64operand.h	/^static constexpr VecB b28 = VecB(28);$/;"	m	namespace:regs
b29	external/asmjit/src/asmjit/arm/a64operand.h	/^static constexpr VecB b29 = VecB(29);$/;"	m	namespace:regs
b3	external/asmjit/src/asmjit/arm/a64operand.h	/^static constexpr VecB b3 = VecB(3);$/;"	m	namespace:regs
b30	external/asmjit/src/asmjit/arm/a64operand.h	/^static constexpr VecB b30 = VecB(30);$/;"	m	namespace:regs
b31	external/asmjit/src/asmjit/arm/a64operand.h	/^static constexpr VecB b31 = VecB(31);$/;"	m	namespace:regs
b4	external/asmjit/src/asmjit/arm/a64operand.h	/^static constexpr VecB b4 = VecB(4);$/;"	m	namespace:regs
b5	external/asmjit/src/asmjit/arm/a64operand.h	/^static constexpr VecB b5 = VecB(5);$/;"	m	namespace:regs
b6	external/asmjit/src/asmjit/arm/a64operand.h	/^static constexpr VecB b6 = VecB(6);$/;"	m	namespace:regs
b7	external/asmjit/src/asmjit/arm/a64operand.h	/^static constexpr VecB b7 = VecB(7);$/;"	m	namespace:regs
b8	external/asmjit/src/asmjit/arm/a64operand.h	/^static constexpr VecB b8 = VecB(8);$/;"	m	namespace:regs
b9	external/asmjit/src/asmjit/arm/a64operand.h	/^static constexpr VecB b9 = VecB(9);$/;"	m	namespace:regs
bHiId	external/asmjit/src/asmjit/arm/a64instdb_p.h	/^  uint32_t bHiId : 6;$/;"	m	struct:InstDB::EncodingData::BaseRR
bHiId	external/asmjit/src/asmjit/arm/a64instdb_p.h	/^  uint32_t bHiId : 6;$/;"	m	struct:InstDB::EncodingData::BaseRRII
bHiId	external/asmjit/src/asmjit/arm/a64instdb_p.h	/^  uint32_t bHiId : 6;$/;"	m	struct:InstDB::EncodingData::BaseRRR
bHiId	external/asmjit/src/asmjit/arm/a64instdb_p.h	/^  uint32_t bHiId : 6;$/;"	m	struct:InstDB::EncodingData::BaseRRRR
bImmDiscardLsb	external/asmjit/src/asmjit/arm/a64instdb_p.h	/^  uint32_t bImmDiscardLsb : 5;$/;"	m	struct:InstDB::EncodingData::BaseRRII
bImmOffset	external/asmjit/src/asmjit/arm/a64instdb_p.h	/^  uint32_t bImmOffset : 5;$/;"	m	struct:InstDB::EncodingData::BaseRRII
bImmSize	external/asmjit/src/asmjit/arm/a64instdb_p.h	/^  uint32_t bImmSize : 6;$/;"	m	struct:InstDB::EncodingData::BaseRRII
bShift	external/asmjit/src/asmjit/arm/a64instdb_p.h	/^  uint32_t bShift : 5;$/;"	m	struct:InstDB::EncodingData::BaseRR
bType	external/asmjit/src/asmjit/arm/a64instdb_p.h	/^  uint32_t bType : 2;$/;"	m	struct:InstDB::EncodingData::BaseRR
bType	external/asmjit/src/asmjit/arm/a64instdb_p.h	/^  uint32_t bType : 2;$/;"	m	struct:InstDB::EncodingData::BaseRRII
bType	external/asmjit/src/asmjit/arm/a64instdb_p.h	/^  uint32_t bType : 2;$/;"	m	struct:InstDB::EncodingData::BaseRRR
bType	external/asmjit/src/asmjit/arm/a64instdb_p.h	/^  uint32_t bType : 2;$/;"	m	struct:InstDB::EncodingData::BaseRRRR
base	src/mmu.h	/^    static u8 *base;$/;"	m	struct:dbt::mmu
baseAddSub	external/asmjit/src/asmjit/arm/a64instdb.cpp	/^const BaseAddSub baseAddSub[4] = {$/;"	m	namespace:InstDB::EncodingData	file:
baseAdr	external/asmjit/src/asmjit/arm/a64instdb.cpp	/^const BaseAdr baseAdr[2] = {$/;"	m	namespace:InstDB::EncodingData	file:
baseAtDcIcTlbi	external/asmjit/src/asmjit/arm/a64instdb.cpp	/^const BaseAtDcIcTlbi baseAtDcIcTlbi[4] = {$/;"	m	namespace:InstDB::EncodingData	file:
baseAtomicCasp	external/asmjit/src/asmjit/arm/a64instdb.cpp	/^const BaseAtomicCasp baseAtomicCasp[4] = {$/;"	m	namespace:InstDB::EncodingData	file:
baseAtomicOp	external/asmjit/src/asmjit/arm/a64instdb.cpp	/^const BaseAtomicOp baseAtomicOp[123] = {$/;"	m	namespace:InstDB::EncodingData	file:
baseAtomicSt	external/asmjit/src/asmjit/arm/a64instdb.cpp	/^const BaseAtomicSt baseAtomicSt[48] = {$/;"	m	namespace:InstDB::EncodingData	file:
baseBfc	external/asmjit/src/asmjit/arm/a64instdb.cpp	/^const BaseBfc baseBfc[1] = {$/;"	m	namespace:InstDB::EncodingData	file:
baseBfi	external/asmjit/src/asmjit/arm/a64instdb.cpp	/^const BaseBfi baseBfi[3] = {$/;"	m	namespace:InstDB::EncodingData	file:
baseBfm	external/asmjit/src/asmjit/arm/a64instdb.cpp	/^const BaseBfm baseBfm[3] = {$/;"	m	namespace:InstDB::EncodingData	file:
baseBfx	external/asmjit/src/asmjit/arm/a64instdb.cpp	/^const BaseBfx baseBfx[3] = {$/;"	m	namespace:InstDB::EncodingData	file:
baseBranchCmp	external/asmjit/src/asmjit/arm/a64instdb.cpp	/^const BaseBranchCmp baseBranchCmp[2] = {$/;"	m	namespace:InstDB::EncodingData	file:
baseBranchReg	external/asmjit/src/asmjit/arm/a64instdb.cpp	/^const BaseBranchReg baseBranchReg[3] = {$/;"	m	namespace:InstDB::EncodingData	file:
baseBranchRel	external/asmjit/src/asmjit/arm/a64instdb.cpp	/^const BaseBranchRel baseBranchRel[2] = {$/;"	m	namespace:InstDB::EncodingData	file:
baseBranchTst	external/asmjit/src/asmjit/arm/a64instdb.cpp	/^const BaseBranchTst baseBranchTst[2] = {$/;"	m	namespace:InstDB::EncodingData	file:
baseCCmp	external/asmjit/src/asmjit/arm/a64instdb.cpp	/^const BaseCCmp baseCCmp[2] = {$/;"	m	namespace:InstDB::EncodingData	file:
baseCInc	external/asmjit/src/asmjit/arm/a64instdb.cpp	/^const BaseCInc baseCInc[3] = {$/;"	m	namespace:InstDB::EncodingData	file:
baseCSel	external/asmjit/src/asmjit/arm/a64instdb.cpp	/^const BaseCSel baseCSel[4] = {$/;"	m	namespace:InstDB::EncodingData	file:
baseCSet	external/asmjit/src/asmjit/arm/a64instdb.cpp	/^const BaseCSet baseCSet[2] = {$/;"	m	namespace:InstDB::EncodingData	file:
baseCmpCmn	external/asmjit/src/asmjit/arm/a64instdb.cpp	/^const BaseCmpCmn baseCmpCmn[2] = {$/;"	m	namespace:InstDB::EncodingData	file:
baseExtend	external/asmjit/src/asmjit/arm/a64instdb.cpp	/^const BaseExtend baseExtend[5] = {$/;"	m	namespace:InstDB::EncodingData	file:
baseExtract	external/asmjit/src/asmjit/arm/a64instdb.cpp	/^const BaseExtract baseExtract[1] = {$/;"	m	namespace:InstDB::EncodingData	file:
baseLdSt	external/asmjit/src/asmjit/arm/a64instdb.cpp	/^const BaseLdSt baseLdSt[9] = {$/;"	m	namespace:InstDB::EncodingData	file:
baseLdpStp	external/asmjit/src/asmjit/arm/a64instdb.cpp	/^const BaseLdpStp baseLdpStp[6] = {$/;"	m	namespace:InstDB::EncodingData	file:
baseLdxp	external/asmjit/src/asmjit/arm/a64instdb.cpp	/^const BaseLdxp baseLdxp[2] = {$/;"	m	namespace:InstDB::EncodingData	file:
baseLogical	external/asmjit/src/asmjit/arm/a64instdb.cpp	/^const BaseLogical baseLogical[8] = {$/;"	m	namespace:InstDB::EncodingData	file:
baseMovKNZ	external/asmjit/src/asmjit/arm/a64instdb.cpp	/^const BaseMovKNZ baseMovKNZ[3] = {$/;"	m	namespace:InstDB::EncodingData	file:
baseMvnNeg	external/asmjit/src/asmjit/arm/a64instdb.cpp	/^const BaseMvnNeg baseMvnNeg[3] = {$/;"	m	namespace:InstDB::EncodingData	file:
baseOp	external/asmjit/src/asmjit/arm/a64instdb.cpp	/^const BaseOp baseOp[23] = {$/;"	m	namespace:InstDB::EncodingData	file:
baseOpImm	external/asmjit/src/asmjit/arm/a64instdb.cpp	/^const BaseOpImm baseOpImm[14] = {$/;"	m	namespace:InstDB::EncodingData	file:
baseR	external/asmjit/src/asmjit/arm/a64instdb.cpp	/^const BaseR baseR[10] = {$/;"	m	namespace:InstDB::EncodingData	file:
baseRM_NoImm	external/asmjit/src/asmjit/arm/a64instdb.cpp	/^const BaseRM_NoImm baseRM_NoImm[21] = {$/;"	m	namespace:InstDB::EncodingData	file:
baseRM_SImm10	external/asmjit/src/asmjit/arm/a64instdb.cpp	/^const BaseRM_SImm10 baseRM_SImm10[2] = {$/;"	m	namespace:InstDB::EncodingData	file:
baseRM_SImm9	external/asmjit/src/asmjit/arm/a64instdb.cpp	/^const BaseRM_SImm9 baseRM_SImm9[23] = {$/;"	m	namespace:InstDB::EncodingData	file:
baseRR	external/asmjit/src/asmjit/arm/a64instdb.cpp	/^const BaseRR baseRR[15] = {$/;"	m	namespace:InstDB::EncodingData	file:
baseRRII	external/asmjit/src/asmjit/arm/a64instdb.cpp	/^const BaseRRII baseRRII[2] = {$/;"	m	namespace:InstDB::EncodingData	file:
baseRRR	external/asmjit/src/asmjit/arm/a64instdb.cpp	/^const BaseRRR baseRRR[26] = {$/;"	m	namespace:InstDB::EncodingData	file:
baseRRRR	external/asmjit/src/asmjit/arm/a64instdb.cpp	/^const BaseRRRR baseRRRR[6] = {$/;"	m	namespace:InstDB::EncodingData	file:
baseShift	external/asmjit/src/asmjit/arm/a64instdb.cpp	/^const BaseShift baseShift[8] = {$/;"	m	namespace:InstDB::EncodingData	file:
baseStx	external/asmjit/src/asmjit/arm/a64instdb.cpp	/^const BaseStx baseStx[3] = {$/;"	m	namespace:InstDB::EncodingData	file:
baseStxp	external/asmjit/src/asmjit/arm/a64instdb.cpp	/^const BaseStxp baseStxp[2] = {$/;"	m	namespace:InstDB::EncodingData	file:
baseTst	external/asmjit/src/asmjit/arm/a64instdb.cpp	/^const BaseTst baseTst[1] = {$/;"	m	namespace:InstDB::EncodingData	file:
bb	src/ir/qir_builder.h	/^    Block *bb;$/;"	m	struct:dbt::qir::Builder
begin	src/util/ilist.h	/^    iterator begin() { return ++iterator(sentinel); }$/;"	f	struct:dbt::IList
benchmarkA64Emitters	external/asmjit/test/asmjit_test_perf_a64.cpp	/^void benchmarkA64Emitters(uint32_t numIterations) {$/;"	f
benchmarkX86Emitters	external/asmjit/test/asmjit_test_perf_x86.cpp	/^void benchmarkX86Emitters(uint32_t numIterations, bool testX86, bool testX64) {$/;"	f
bf_pt	src/util/bitfield.h	/^struct bf_pt {$/;"	s
bf_range	src/util/bitfield.h	/^struct bf_range {$/;"	s
bf_seq	src/util/bitfield.h	/^struct bf_seq {$/;"	s
bf_seq	src/util/bitfield.h	/^struct bf_seq<T, P> {$/;"	s
bh	external/asmjit/src/asmjit/x86/x86operand.h	/^static constexpr GpbHi bh = GpbHi(Gp::kIdBx);$/;"	m	namespace:regs
bind	external/asmjit/src/asmjit/core/assembler.cpp	/^Error BaseAssembler::bind(const Label& label) {$/;"	f	class:BaseAssembler
bind	external/asmjit/src/asmjit/core/builder.cpp	/^Error BaseBuilder::bind(const Label& label) {$/;"	f	class:BaseBuilder
bind	external/asmjit/src/asmjit/core/emitter.cpp	/^Error BaseEmitter::bind(const Label& label) {$/;"	f	class:BaseEmitter
bit_size	src/util/common.h	/^static constexpr size_t bit_size = sizeof(T) * CHAR_BIT;$/;"	v
bl	external/asmjit/src/asmjit/x86/x86operand.h	/^static constexpr GpbLo bl = GpbLo(Gp::kIdBx);$/;"	m	namespace:regs
blendSrcOver	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^  static uint32_t blendSrcOver(uint32_t d, uint32_t s) {$/;"	f	class:X86Test_AllocAlphaBlend
blist	src/ir/qir.h	/^    IList<Block> blist;$/;"	m	struct:dbt::qir::Region
blockCount	external/asmjit/src/asmjit/core/jitallocator.cpp	/^  uint32_t blockCount = 0;$/;"	m	class:JitAllocatorPool	file:
blockSize	external/asmjit/src/asmjit/core/jitallocator.h	/^    uint32_t blockSize = 0;$/;"	m	struct:JitAllocatorOptions::JitAllocator::CreateParams
blockSize	external/asmjit/src/asmjit/core/jitallocator.h	/^    uint32_t blockSize;$/;"	m	struct:JitAllocatorOptions::JitAllocator::Impl
blocks	external/asmjit/src/asmjit/core/jitallocator.cpp	/^  ZoneList<JitAllocatorBlock> blocks;$/;"	m	class:JitAllocatorPool	file:
bnd0	external/asmjit/src/asmjit/x86/x86operand.h	/^static constexpr Bnd bnd0 = Bnd(0);$/;"	m	namespace:regs
bnd1	external/asmjit/src/asmjit/x86/x86operand.h	/^static constexpr Bnd bnd1 = Bnd(1);$/;"	m	namespace:regs
bnd2	external/asmjit/src/asmjit/x86/x86operand.h	/^static constexpr Bnd bnd2 = Bnd(2);$/;"	m	namespace:regs
bnd3	external/asmjit/src/asmjit/x86/x86operand.h	/^static constexpr Bnd bnd3 = Bnd(3);$/;"	m	namespace:regs
bp	external/asmjit/src/asmjit/x86/x86operand.h	/^static constexpr Gpw bp = Gpw(Gp::kIdBp);$/;"	m	namespace:regs
bpl	external/asmjit/src/asmjit/x86/x86operand.h	/^static constexpr GpbLo bpl = GpbLo(Gp::kIdBp);$/;"	m	namespace:regs
br	external/asmjit/src/asmjit/arm/a64compiler.h	/^  ASMJIT_INLINE_NODEBUG Error br(const BaseReg& target, JumpAnnotation* annotation) { return emitAnnotatedJump(Inst::kIdBr, target, annotation); }$/;"	f	class:Compiler
brk	src/env.cpp	/^    uabi_ulong brk;   \/* The initial value for the heap end address, associated$/;"	m	struct:dbt::env::ElfImage	file:
bufferram	src/env.cpp	/^    u32 bufferram;$/;"	m	struct:dbt::env_syscall::uabi_sysinfo	file:
buildCpuRegs	external/asmjit/db/x86.js	/^function buildCpuRegs(defs) {$/;"	f
buildIndexData	external/asmjit/tools/enumgen.js	/^  function buildIndexData() {$/;"	f	function:stringifyEnum
buildStringData	external/asmjit/tools/enumgen.js	/^  function buildStringData() {$/;"	f	function:stringifyEnum
bx	external/asmjit/src/asmjit/x86/x86operand.h	/^static constexpr Gpw bx = Gpw(Gp::kIdBx);$/;"	m	namespace:regs
cHiId	external/asmjit/src/asmjit/arm/a64instdb_p.h	/^  uint32_t cHiId : 6;$/;"	m	struct:InstDB::EncodingData::BaseRRR
cHiId	external/asmjit/src/asmjit/arm/a64instdb_p.h	/^  uint32_t cHiId : 6;$/;"	m	struct:InstDB::EncodingData::BaseRRRR
cType	external/asmjit/src/asmjit/arm/a64instdb_p.h	/^  uint32_t cType : 2;$/;"	m	struct:InstDB::EncodingData::BaseRRR
cType	external/asmjit/src/asmjit/arm/a64instdb_p.h	/^  uint32_t cType : 2;$/;"	m	struct:InstDB::EncodingData::BaseRRRR
calcSum	external/asmjit/test/asmjit_test_compiler_a64.cpp	/^  uint32_t calcSum() const {$/;"	f	class:A64Test_ManyRegs
calledFunc	external/asmjit/test/asmjit_test_compiler_a64.cpp	/^  static double calledFunc(double x, double y) {$/;"	f	class:A64Test_Invoke2
calledFunc	external/asmjit/test/asmjit_test_compiler_a64.cpp	/^  static double calledFunc(double x, double y) {$/;"	f	class:A64Test_Invoke3
calledFunc	external/asmjit/test/asmjit_test_compiler_a64.cpp	/^  static uint32_t calledFunc(uint32_t x, uint32_t y) {$/;"	f	class:A64Test_Invoke1
calledFunc	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^  static double calledFunc() { return 3.14; }$/;"	f	class:X86Test_FuncCallMisc4
calledFunc	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^  static double calledFunc(double a, double b) {$/;"	f	class:X86Test_FuncCallDoubleAsXmmRet
calledFunc	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^  static double calledFunc(size_t n, ...) {$/;"	f	class:X86Test_FuncCallInt64Arg
calledFunc	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^  static double calledFunc(size_t n, ...) {$/;"	f	class:X86Test_FuncCallVarArg2
calledFunc	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^  static float calledFunc(float a, float b) {$/;"	f	class:X86Test_FuncCallFloatAsXmmRet
calledFunc	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^  static int ASMJIT_FASTCALL calledFunc(int* pInt, int index) {$/;"	f	class:X86Test_FuncCallMultiple
calledFunc	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^  static int calledFunc(int a, int b, int c) { return (a + b) * c; }$/;"	f	class:X86Test_FuncCallBase1
calledFunc	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^  static int calledFunc(int a, int b, int c, int d, int e, int f, int g, int h, int i, int j) {$/;"	f	class:X86Test_FuncCallDuplicateArgs
calledFunc	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^  static int calledFunc(int a, int b, int c, int d, int e, int f, int g, int h, int i, int j) {$/;"	f	class:X86Test_FuncCallManyArgs
calledFunc	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^  static int calledFunc(int& a, int& b, int& c, int& d) {$/;"	f	class:X86Test_FuncCallRefArgs
calledFunc	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^  static int calledFunc(size_t n, ...) {$/;"	f	class:X86Test_FuncCallVarArg1
calledFunc	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^  static int calledFunc(void* a, void* b, void* c, void* d, void* e, void* f, void* g, void* h, void* i, void* j) {$/;"	f	class:X86Test_FuncCallPtrArgs
calledFunc	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^  static uint32_t calledFunc(uint32_t x) { return x + 1; }$/;"	f	class:X86Test_FuncCallMisc6
calledFunc	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^  static void calledFunc() {}$/;"	f	class:X86Test_FuncCallMisc5
calledFuncAdd	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^  static int calledFuncAdd(int x, int y) { return x + y; }$/;"	f	class:X86Test_FuncCallConditional
calledFuncMul	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^  static int calledFuncMul(int x, int y) { return x * y; }$/;"	f	class:X86Test_FuncCallConditional
calledFunc_cdecl	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^  static __m128i calledFunc_cdecl(__m128i a, __m128i b) {$/;"	f	class:X86Test_FuncCallSIMD
calledFunc_vcall	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^  static __m128i __vectorcall calledFunc_vcall(__m128i a, __m128i b) {$/;"	f	class:X86Test_FuncCallSIMD
capacity	external/asmjit/src/asmjit/core/string.h	/^    size_t capacity;$/;"	m	struct:StringFormatFlags::String::ModifyOp::Large
cast	src/ir/qir.h	/^ALWAYS_INLINE D *cast(B *b)$/;"	f	namespace:dbt::qir
category	external/asmjit/src/asmjit/x86/x86instdb_p.h	/^  uint8_t category;$/;"	m	namespace:InstDB
category	external/asmjit/src/asmjit/x86/x86instdb_p.h	/^  uint8_t category;$/;"	v
category	external/asmjit/tools/tablegen-x86.js	/^      category: "None",$/;"	p	class:rmInfo
cc	src/ir/qir.h	/^    CondCode cc;$/;"	m	struct:dbt::qir::InstBrcc
cc	src/ir/qir.h	/^    CondCode cc;$/;"	m	struct:dbt::qir::InstSetcc
cdshl	external/asmjit/tools/tablegen-x86.js	/^    var cdshl = "_";$/;"	v
ce	src/codegen/qcg.cpp	/^    QEmit *ce;$/;"	m	struct:dbt::qcg::QCodegen	file:
ch	external/asmjit/src/asmjit/x86/x86operand.h	/^static constexpr GpbHi ch = GpbHi(Gp::kIdCx);$/;"	m	namespace:regs
charTo5Bit	external/asmjit/tools/tablegen.js	/^function charTo5Bit(c) {$/;"	f
check_h2g	src/mmu.h	/^    static ALWAYS_INLINE bool check_h2g(void *hptr)$/;"	f	struct:dbt::mmu
cl	external/asmjit/src/asmjit/x86/x86operand.h	/^static constexpr GpbLo cl = GpbLo(Gp::kIdCx);$/;"	m	namespace:regs
classof	src/ir/qir.h	/^    static bool classof(Inst *op) { return HasOpcode(op->GetOpcode()); }$/;"	f	struct:dbt::qir::InstBinop
classof	src/ir/qir.h	/^    static bool classof(Inst *op) { return HasOpcode(op->GetOpcode()); }$/;"	f	struct:dbt::qir::InstUnop
clearCommutative	external/asmjit/db/base.js	/^  clearCommutative: function(s) { return s.substring(1); },$/;"	m	class:const
clearImplicit	external/asmjit/db/base.js	/^  clearImplicit: function(s) { return s.substring(1, s.length - 1); },$/;"	m	class:const
clearOptional	external/asmjit/db/base.js	/^  clearOptional: function(s) { return s.substring(1, s.length - 1); },$/;"	m	class:const
cmp	external/asmjit/src/asmjit/core/zonetree.h	/^  void insert(NodeT* ASMJIT_NONNULL(node), const CompareT& cmp = CompareT()) noexcept {$/;"	m	class:ZoneTree
cmpsb	external/asmjit/src/asmjit/x86/x86emitter.h	/^  inline Error cmpsb() { return _emitter()->emit(Inst::kIdCmps, EmitterExplicitT<This>::ptr_zsi(0, 1), EmitterExplicitT<This>::ptr_zdi(0, 1)); }$/;"	f	struct:EmitterImplicitT
cmpsd	external/asmjit/src/asmjit/x86/x86emitter.h	/^  inline Error cmpsd() { return _emitter()->emit(Inst::kIdCmps, EmitterExplicitT<This>::ptr_zsi(0, 4), EmitterExplicitT<This>::ptr_zdi(0, 4)); }$/;"	f	struct:EmitterImplicitT
cmpsq	external/asmjit/src/asmjit/x86/x86emitter.h	/^  inline Error cmpsq() { return _emitter()->emit(Inst::kIdCmps, EmitterExplicitT<This>::ptr_zsi(0, 8), EmitterExplicitT<This>::ptr_zdi(0, 8)); }$/;"	f	struct:EmitterImplicitT
cmpsw	external/asmjit/src/asmjit/x86/x86emitter.h	/^  inline Error cmpsw() { return _emitter()->emit(Inst::kIdCmps, EmitterExplicitT<This>::ptr_zsi(0, 2), EmitterExplicitT<This>::ptr_zdi(0, 2)); }$/;"	f	struct:EmitterImplicitT
code	src/codegen/jitabi.h	/^    } __attribute__((packed, may_alias)) code;$/;"	m	struct:dbt::jitabi::ppoint::BranchSlot	typeref:union:dbt::jitabi::ppoint::BranchSlot::__anon27
code	src/tcache.h	/^        void *code;$/;"	m	struct:dbt::tcache::BrindCacheEntry
code_pool	src/tcache.h	/^    static MemArena code_pool;$/;"	m	struct:dbt::tcache
collectCalls	external/asmjit/db/exp.js	/^function collectCalls(node, dst) {$/;"	f
collectVars	external/asmjit/db/exp.js	/^function collectVars(node, dst) {$/;"	f
comment	external/asmjit/src/asmjit/core/assembler.cpp	/^Error BaseAssembler::comment(const char* data, size_t size) {$/;"	f	class:BaseAssembler
comment	external/asmjit/src/asmjit/core/builder.cpp	/^Error BaseBuilder::comment(const char* data, size_t size) {$/;"	f	class:BaseBuilder
comment	external/asmjit/src/asmjit/core/emitter.cpp	/^Error comment(const char* data, size_t size = SIZE_MAX) {$/;"	f
comment	external/asmjit/src/asmjit/core/emitter.h	/^    const char* comment;$/;"	m	struct:AlignMode::EmitterType::EmitterFlags::EncodingOptions::BaseEmitter::State
commentf	external/asmjit/src/asmjit/core/emitter.cpp	/^Error BaseEmitter::commentf(const char* fmt, ...) {$/;"	f	class:BaseEmitter
commentv	external/asmjit/src/asmjit/core/emitter.cpp	/^Error BaseEmitter::commentv(const char* fmt, va_list ap) {$/;"	f	class:BaseEmitter
compactedSize	external/asmjit/tools/enumgen.js	/^function compactedSize(table) {$/;"	f
compare	external/asmjit/tools/enumgen.js	/^function compare(a, b) {$/;"	f
compile	external/asmjit/test/asmjit_test_compiler_a64.cpp	/^  virtual void compile(a64::Compiler& cc) {$/;"	f	class:A64Test_Adr
compile	external/asmjit/test/asmjit_test_compiler_a64.cpp	/^  virtual void compile(a64::Compiler& cc) {$/;"	f	class:A64Test_Branch1
compile	external/asmjit/test/asmjit_test_compiler_a64.cpp	/^  virtual void compile(a64::Compiler& cc) {$/;"	f	class:A64Test_GpArgs
compile	external/asmjit/test/asmjit_test_compiler_a64.cpp	/^  virtual void compile(a64::Compiler& cc) {$/;"	f	class:A64Test_Invoke1
compile	external/asmjit/test/asmjit_test_compiler_a64.cpp	/^  virtual void compile(a64::Compiler& cc) {$/;"	f	class:A64Test_Invoke2
compile	external/asmjit/test/asmjit_test_compiler_a64.cpp	/^  virtual void compile(a64::Compiler& cc) {$/;"	f	class:A64Test_Invoke3
compile	external/asmjit/test/asmjit_test_compiler_a64.cpp	/^  virtual void compile(a64::Compiler& cc) {$/;"	f	class:A64Test_JumpTable
compile	external/asmjit/test/asmjit_test_compiler_a64.cpp	/^  virtual void compile(a64::Compiler& cc) {$/;"	f	class:A64Test_ManyRegs
compile	external/asmjit/test/asmjit_test_compiler_a64.cpp	/^  virtual void compile(a64::Compiler& cc) {$/;"	f	class:A64Test_Simd1
compile	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^  virtual void compile(x86::Compiler& cc) {$/;"	f	class:X86Test_AlignBase
compile	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^  virtual void compile(x86::Compiler& cc) {$/;"	f	class:X86Test_AllocAlphaBlend
compile	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^  virtual void compile(x86::Compiler& cc) {$/;"	f	class:X86Test_AllocArgsDouble
compile	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^  virtual void compile(x86::Compiler& cc) {$/;"	f	class:X86Test_AllocArgsFloat
compile	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^  virtual void compile(x86::Compiler& cc) {$/;"	f	class:X86Test_AllocArgsIntPtr
compile	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^  virtual void compile(x86::Compiler& cc) {$/;"	f	class:X86Test_AllocArgsVec
compile	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^  virtual void compile(x86::Compiler& cc) {$/;"	f	class:X86Test_AllocBase
compile	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^  virtual void compile(x86::Compiler& cc) {$/;"	f	class:X86Test_AllocExtraBlock
compile	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^  virtual void compile(x86::Compiler& cc) {$/;"	f	class:X86Test_AllocGpbLo1
compile	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^  virtual void compile(x86::Compiler& cc) {$/;"	f	class:X86Test_AllocGpbLo2
compile	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^  virtual void compile(x86::Compiler& cc) {$/;"	f	class:X86Test_AllocIdiv1
compile	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^  virtual void compile(x86::Compiler& cc) {$/;"	f	class:X86Test_AllocIfElse1
compile	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^  virtual void compile(x86::Compiler& cc) {$/;"	f	class:X86Test_AllocIfElse2
compile	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^  virtual void compile(x86::Compiler& cc) {$/;"	f	class:X86Test_AllocIfElse3
compile	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^  virtual void compile(x86::Compiler& cc) {$/;"	f	class:X86Test_AllocIfElse4
compile	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^  virtual void compile(x86::Compiler& cc) {$/;"	f	class:X86Test_AllocImul1
compile	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^  virtual void compile(x86::Compiler& cc) {$/;"	f	class:X86Test_AllocImul2
compile	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^  virtual void compile(x86::Compiler& cc) {$/;"	f	class:X86Test_AllocInt8
compile	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^  virtual void compile(x86::Compiler& cc) {$/;"	f	class:X86Test_AllocMany1
compile	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^  virtual void compile(x86::Compiler& cc) {$/;"	f	class:X86Test_AllocMany2
compile	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^  virtual void compile(x86::Compiler& cc) {$/;"	f	class:X86Test_AllocMemcpy
compile	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^  virtual void compile(x86::Compiler& cc) {$/;"	f	class:X86Test_AllocRepMovsb
compile	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^  virtual void compile(x86::Compiler& cc) {$/;"	f	class:X86Test_AllocRetDouble1
compile	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^  virtual void compile(x86::Compiler& cc) {$/;"	f	class:X86Test_AllocRetDouble2
compile	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^  virtual void compile(x86::Compiler& cc) {$/;"	f	class:X86Test_AllocRetFloat1
compile	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^  virtual void compile(x86::Compiler& cc) {$/;"	f	class:X86Test_AllocRetFloat2
compile	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^  virtual void compile(x86::Compiler& cc) {$/;"	f	class:X86Test_AllocSetz
compile	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^  virtual void compile(x86::Compiler& cc) {$/;"	f	class:X86Test_AllocShlRor
compile	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^  virtual void compile(x86::Compiler& cc) {$/;"	f	class:X86Test_AllocStack
compile	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^  virtual void compile(x86::Compiler& cc) {$/;"	f	class:X86Test_AllocUnhandledArg
compile	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^  virtual void compile(x86::Compiler& cc) {$/;"	f	class:X86Test_FuncCallAVXClobber
compile	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^  virtual void compile(x86::Compiler& cc) {$/;"	f	class:X86Test_FuncCallBase1
compile	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^  virtual void compile(x86::Compiler& cc) {$/;"	f	class:X86Test_FuncCallBase2
compile	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^  virtual void compile(x86::Compiler& cc) {$/;"	f	class:X86Test_FuncCallConditional
compile	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^  virtual void compile(x86::Compiler& cc) {$/;"	f	class:X86Test_FuncCallDoubleAsXmmRet
compile	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^  virtual void compile(x86::Compiler& cc) {$/;"	f	class:X86Test_FuncCallDuplicateArgs
compile	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^  virtual void compile(x86::Compiler& cc) {$/;"	f	class:X86Test_FuncCallFast
compile	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^  virtual void compile(x86::Compiler& cc) {$/;"	f	class:X86Test_FuncCallFloatAsXmmRet
compile	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^  virtual void compile(x86::Compiler& cc) {$/;"	f	class:X86Test_FuncCallImmArgs
compile	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^  virtual void compile(x86::Compiler& cc) {$/;"	f	class:X86Test_FuncCallInt64Arg
compile	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^  virtual void compile(x86::Compiler& cc) {$/;"	f	class:X86Test_FuncCallLight
compile	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^  virtual void compile(x86::Compiler& cc) {$/;"	f	class:X86Test_FuncCallManyArgs
compile	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^  virtual void compile(x86::Compiler& cc) {$/;"	f	class:X86Test_FuncCallMisc1
compile	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^  virtual void compile(x86::Compiler& cc) {$/;"	f	class:X86Test_FuncCallMisc2
compile	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^  virtual void compile(x86::Compiler& cc) {$/;"	f	class:X86Test_FuncCallMisc3
compile	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^  virtual void compile(x86::Compiler& cc) {$/;"	f	class:X86Test_FuncCallMisc4
compile	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^  virtual void compile(x86::Compiler& cc) {$/;"	f	class:X86Test_FuncCallMisc5
compile	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^  virtual void compile(x86::Compiler& cc) {$/;"	f	class:X86Test_FuncCallMisc6
compile	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^  virtual void compile(x86::Compiler& cc) {$/;"	f	class:X86Test_FuncCallMultiple
compile	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^  virtual void compile(x86::Compiler& cc) {$/;"	f	class:X86Test_FuncCallPtrArgs
compile	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^  virtual void compile(x86::Compiler& cc) {$/;"	f	class:X86Test_FuncCallRecursive
compile	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^  virtual void compile(x86::Compiler& cc) {$/;"	f	class:X86Test_FuncCallRefArgs
compile	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^  virtual void compile(x86::Compiler& cc) {$/;"	f	class:X86Test_FuncCallSIMD
compile	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^  virtual void compile(x86::Compiler& cc) {$/;"	f	class:X86Test_FuncCallStd
compile	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^  virtual void compile(x86::Compiler& cc) {$/;"	f	class:X86Test_FuncCallVarArg1
compile	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^  virtual void compile(x86::Compiler& cc) {$/;"	f	class:X86Test_FuncCallVarArg2
compile	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^  virtual void compile(x86::Compiler& cc) {$/;"	f	class:X86Test_JumpCross
compile	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^  virtual void compile(x86::Compiler& cc) {$/;"	f	class:X86Test_JumpMany
compile	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^  virtual void compile(x86::Compiler& cc) {$/;"	f	class:X86Test_JumpMerge
compile	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^  virtual void compile(x86::Compiler& cc) {$/;"	f	class:X86Test_JumpTable1
compile	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^  virtual void compile(x86::Compiler& cc) {$/;"	f	class:X86Test_JumpTable2
compile	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^  virtual void compile(x86::Compiler& cc) {$/;"	f	class:X86Test_JumpTable3
compile	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^  virtual void compile(x86::Compiler& cc) {$/;"	f	class:X86Test_JumpTable4
compile	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^  virtual void compile(x86::Compiler& cc) {$/;"	f	class:X86Test_JumpUnreachable1
compile	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^  virtual void compile(x86::Compiler& cc) {$/;"	f	class:X86Test_JumpUnreachable2
compile	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^  virtual void compile(x86::Compiler& cc) {$/;"	f	class:X86Test_MiscGlobalConstPool
compile	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^  virtual void compile(x86::Compiler& cc) {$/;"	f	class:X86Test_MiscLocalConstPool
compile	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^  virtual void compile(x86::Compiler& cc) {$/;"	f	class:X86Test_MiscMultiFunc
compile	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^  virtual void compile(x86::Compiler& cc) {$/;"	f	class:X86Test_MiscUnfollow
compile	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^  virtual void compile(x86::Compiler& cc) {$/;"	f	class:X86Test_NoAlign
compile	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^  virtual void compile(x86::Compiler& cc) {$/;"	f	class:X86Test_NoCode
compile	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^  virtual void compile(x86::Compiler& cc) {$/;"	f	struct:X86Test_MiscMultiRet
compiler_add_a64_tests	external/asmjit/test/asmjit_test_compiler_a64.cpp	/^void compiler_add_a64_tests(TestApp& app) {$/;"	f
compiler_add_x86_tests	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^void compiler_add_x86_tests(TestApp& app) {$/;"	f
composed	external/asmjit/tools/tablegen-x86.js	/^    var composed = composeOpCode({$/;"	v
consecutiveLastIndex	external/asmjit/db/x86.js	/^    var consecutiveLastIndex = 0;$/;"	v
consecutiveLead	external/asmjit/db/x86.js	/^    var consecutiveLead = null;$/;"	v
consecutiveLeadCount	external/asmjit/src/asmjit/x86/x86instdb_p.h	/^  uint8_t consecutiveLeadCount;$/;"	m	struct:RWInfoOp
const_iterator	external/asmjit/src/asmjit/core/support.h	/^  typedef const_pointer const_iterator;$/;"	t	struct:Support::Internal::SortOrder::Array
const_iterator	external/asmjit/src/asmjit/core/zonevector.h	/^  typedef const T* const_iterator;$/;"	t	class:ZoneVector
const_pointer	external/asmjit/src/asmjit/core/support.h	/^  typedef const value_type* const_pointer;$/;"	t	struct:Support::Internal::SortOrder::Array
const_pointer	external/asmjit/src/asmjit/core/zonevector.h	/^  typedef const T* const_pointer;$/;"	t	class:ZoneVector
const_reference	external/asmjit/src/asmjit/core/support.h	/^  typedef const value_type& const_reference;$/;"	t	struct:Support::Internal::SortOrder::Array
const_reference	external/asmjit/src/asmjit/core/zonevector.h	/^  typedef const T& const_reference;$/;"	t	class:ZoneVector
const_reverse_iterator	external/asmjit/src/asmjit/core/zonevector.h	/^  typedef std::reverse_iterator<const_iterator> const_reverse_iterator;$/;"	t	class:ZoneVector
constant	external/asmjit/src/asmjit/core/codeholder.h	/^    uint64_t constant;$/;"	m	union:ExpressionOpType::ExpressionValueType::Expression::Value
container_size	src/util/bitfield.h	/^    static constexpr size_t container_size = h + 1;$/;"	m	struct:bf_range
control	src/guest/rv32_qir.h	/^    enum class Control { NEXT, BRANCH, TB_OVF } control{Control::NEXT};$/;"	c	struct:dbt::qir::rv32::RV32Translator
count	external/asmjit/src/asmjit/x86/x86formatter.cpp	/^    uint8_t count;$/;"	m	struct:RegFormatInfo::NameEntry	file:
count	src/codegen/arch_traits.h	/^    constexpr u8 count() const { return std::popcount(data); }$/;"	f	struct:dbt::qcg::RegMask
cpuInfoInitialized	external/asmjit/src/asmjit/core/cpuinfo.cpp	/^static uint32_t cpuInfoInitialized;$/;"	m	class:arm::AppleFamilyId	file:
cpuid_t	external/asmjit/src/asmjit/core/cpuinfo.cpp	/^struct cpuid_t { uint32_t eax, ebx, ecx, edx; };$/;"	s	namespace:x86	file:
cr0	external/asmjit/src/asmjit/x86/x86operand.h	/^static constexpr CReg cr0 = CReg(0);$/;"	m	namespace:regs
cr1	external/asmjit/src/asmjit/x86/x86operand.h	/^static constexpr CReg cr1 = CReg(1);$/;"	m	namespace:regs
cr10	external/asmjit/src/asmjit/x86/x86operand.h	/^static constexpr CReg cr10 = CReg(10);$/;"	m	namespace:regs
cr11	external/asmjit/src/asmjit/x86/x86operand.h	/^static constexpr CReg cr11 = CReg(11);$/;"	m	namespace:regs
cr12	external/asmjit/src/asmjit/x86/x86operand.h	/^static constexpr CReg cr12 = CReg(12);$/;"	m	namespace:regs
cr13	external/asmjit/src/asmjit/x86/x86operand.h	/^static constexpr CReg cr13 = CReg(13);$/;"	m	namespace:regs
cr14	external/asmjit/src/asmjit/x86/x86operand.h	/^static constexpr CReg cr14 = CReg(14);$/;"	m	namespace:regs
cr15	external/asmjit/src/asmjit/x86/x86operand.h	/^static constexpr CReg cr15 = CReg(15);$/;"	m	namespace:regs
cr2	external/asmjit/src/asmjit/x86/x86operand.h	/^static constexpr CReg cr2 = CReg(2);$/;"	m	namespace:regs
cr3	external/asmjit/src/asmjit/x86/x86operand.h	/^static constexpr CReg cr3 = CReg(3);$/;"	m	namespace:regs
cr4	external/asmjit/src/asmjit/x86/x86operand.h	/^static constexpr CReg cr4 = CReg(4);$/;"	m	namespace:regs
cr5	external/asmjit/src/asmjit/x86/x86operand.h	/^static constexpr CReg cr5 = CReg(5);$/;"	m	namespace:regs
cr6	external/asmjit/src/asmjit/x86/x86operand.h	/^static constexpr CReg cr6 = CReg(6);$/;"	m	namespace:regs
cr7	external/asmjit/src/asmjit/x86/x86operand.h	/^static constexpr CReg cr7 = CReg(7);$/;"	m	namespace:regs
cr8	external/asmjit/src/asmjit/x86/x86operand.h	/^static constexpr CReg cr8 = CReg(8);$/;"	m	namespace:regs
cr9	external/asmjit/src/asmjit/x86/x86operand.h	/^static constexpr CReg cr9 = CReg(9);$/;"	m	namespace:regs
cross_segment	src/codegen/jitabi.h	/^        bool cross_segment : 1 {false};$/;"	m	struct:dbt::jitabi::ppoint::BranchSlot::__anon28
cruntime	src/ir/compile.h	/^    CompilerRuntime *cruntime;$/;"	m	struct:dbt::qir::CompilerJob
cs	external/asmjit/src/asmjit/x86/x86operand.h	/^static constexpr SReg cs = SReg(SReg::kIdCs);$/;"	m	namespace:regs
ct	src/codegen/arch_traits.cpp	/^    ct_desc ct;$/;"	m	struct:dbt::qcg::InstCt	file:
cur	external/asmjit/src/asmjit/core/funcargscontext_p.h	/^    FuncValue cur;$/;"	m	struct:FuncArgsContext::Var
cursor	external/asmjit/src/asmjit/core/jitallocator.cpp	/^  JitAllocatorBlock* cursor = nullptr;$/;"	m	class:JitAllocatorPool	file:
cx	external/asmjit/src/asmjit/x86/x86operand.h	/^static constexpr Gpw cx = Gpw(Gp::kIdCx);$/;"	m	namespace:regs
d	src/ir/qir.h	/^    Derived *d() { return static_cast<Derived *>(this); }$/;"	f	struct:dbt::qir::InstOperandAccessMixin
d0	external/asmjit/src/asmjit/arm/a64operand.h	/^static constexpr VecD d0 = VecD(0);$/;"	m	namespace:regs
d1	external/asmjit/src/asmjit/arm/a64operand.h	/^static constexpr VecD d1 = VecD(1);$/;"	m	namespace:regs
d10	external/asmjit/src/asmjit/arm/a64operand.h	/^static constexpr VecD d10 = VecD(10);$/;"	m	namespace:regs
d11	external/asmjit/src/asmjit/arm/a64operand.h	/^static constexpr VecD d11 = VecD(11);$/;"	m	namespace:regs
d12	external/asmjit/src/asmjit/arm/a64operand.h	/^static constexpr VecD d12 = VecD(12);$/;"	m	namespace:regs
d13	external/asmjit/src/asmjit/arm/a64operand.h	/^static constexpr VecD d13 = VecD(13);$/;"	m	namespace:regs
d14	external/asmjit/src/asmjit/arm/a64operand.h	/^static constexpr VecD d14 = VecD(14);$/;"	m	namespace:regs
d15	external/asmjit/src/asmjit/arm/a64operand.h	/^static constexpr VecD d15 = VecD(15);$/;"	m	namespace:regs
d16	external/asmjit/src/asmjit/arm/a64operand.h	/^static constexpr VecD d16 = VecD(16);$/;"	m	namespace:regs
d17	external/asmjit/src/asmjit/arm/a64operand.h	/^static constexpr VecD d17 = VecD(17);$/;"	m	namespace:regs
d18	external/asmjit/src/asmjit/arm/a64operand.h	/^static constexpr VecD d18 = VecD(18);$/;"	m	namespace:regs
d19	external/asmjit/src/asmjit/arm/a64operand.h	/^static constexpr VecD d19 = VecD(19);$/;"	m	namespace:regs
d2	external/asmjit/src/asmjit/arm/a64operand.h	/^static constexpr VecD d2 = VecD(2);$/;"	m	namespace:regs
d20	external/asmjit/src/asmjit/arm/a64operand.h	/^static constexpr VecD d20 = VecD(20);$/;"	m	namespace:regs
d21	external/asmjit/src/asmjit/arm/a64operand.h	/^static constexpr VecD d21 = VecD(21);$/;"	m	namespace:regs
d22	external/asmjit/src/asmjit/arm/a64operand.h	/^static constexpr VecD d22 = VecD(22);$/;"	m	namespace:regs
d23	external/asmjit/src/asmjit/arm/a64operand.h	/^static constexpr VecD d23 = VecD(23);$/;"	m	namespace:regs
d24	external/asmjit/src/asmjit/arm/a64operand.h	/^static constexpr VecD d24 = VecD(24);$/;"	m	namespace:regs
d25	external/asmjit/src/asmjit/arm/a64operand.h	/^static constexpr VecD d25 = VecD(25);$/;"	m	namespace:regs
d26	external/asmjit/src/asmjit/arm/a64operand.h	/^static constexpr VecD d26 = VecD(26);$/;"	m	namespace:regs
d27	external/asmjit/src/asmjit/arm/a64operand.h	/^static constexpr VecD d27 = VecD(27);$/;"	m	namespace:regs
d28	external/asmjit/src/asmjit/arm/a64operand.h	/^static constexpr VecD d28 = VecD(28);$/;"	m	namespace:regs
d29	external/asmjit/src/asmjit/arm/a64operand.h	/^static constexpr VecD d29 = VecD(29);$/;"	m	namespace:regs
d3	external/asmjit/src/asmjit/arm/a64operand.h	/^static constexpr VecD d3 = VecD(3);$/;"	m	namespace:regs
d30	external/asmjit/src/asmjit/arm/a64operand.h	/^static constexpr VecD d30 = VecD(30);$/;"	m	namespace:regs
d31	external/asmjit/src/asmjit/arm/a64operand.h	/^static constexpr VecD d31 = VecD(31);$/;"	m	namespace:regs
d4	external/asmjit/src/asmjit/arm/a64operand.h	/^static constexpr VecD d4 = VecD(4);$/;"	m	namespace:regs
d5	external/asmjit/src/asmjit/arm/a64operand.h	/^static constexpr VecD d5 = VecD(5);$/;"	m	namespace:regs
d6	external/asmjit/src/asmjit/arm/a64operand.h	/^static constexpr VecD d6 = VecD(6);$/;"	m	namespace:regs
d7	external/asmjit/src/asmjit/arm/a64operand.h	/^static constexpr VecD d7 = VecD(7);$/;"	m	namespace:regs
d8	external/asmjit/src/asmjit/arm/a64operand.h	/^static constexpr VecD d8 = VecD(8);$/;"	m	namespace:regs
d9	external/asmjit/src/asmjit/arm/a64operand.h	/^static constexpr VecD d9 = VecD(9);$/;"	m	namespace:regs
dHiId	external/asmjit/src/asmjit/arm/a64instdb_p.h	/^  uint32_t dHiId : 6;$/;"	m	struct:InstDB::EncodingData::BaseRRRR
dType	external/asmjit/src/asmjit/arm/a64instdb_p.h	/^  uint32_t dType : 2;$/;"	m	struct:InstDB::EncodingData::BaseRRRR
data	external/asmjit/src/asmjit/core/builder.h	/^  ASMJIT_API Error newCommentNode(CommentNode** ASMJIT_NONNULL(out), const char* data, size_t size);$/;"	m	class:NodeType::NodeFlags::SentinelType::BaseBuilder
data	external/asmjit/src/asmjit/core/builder.h	/^  ASMJIT_API Error newEmbedDataNode(EmbedDataNode** ASMJIT_NONNULL(out), TypeId typeId, const void* data, size_t itemCount, size_t repeatCount = 1);$/;"	m	class:NodeType::NodeFlags::SentinelType::BaseBuilder
data	external/asmjit/src/asmjit/core/compiler.h	/^  ASMJIT_API Error _newConst(BaseMem* ASMJIT_NONNULL(out), ConstPoolScope scope, const void* data, size_t size);$/;"	m	class:BaseCompiler
data	external/asmjit/src/asmjit/core/string.h	/^    char data[kSSOCapacity + 1u];$/;"	m	struct:StringFormatFlags::String::ModifyOp::Small
data	external/asmjit/src/asmjit/core/string.h	/^    char* data;$/;"	m	struct:StringFormatFlags::String::ModifyOp::Large
data	external/asmjit/src/asmjit/core/zone.h	/^    char data[N];$/;"	m	struct:ZoneTmp::Storage
data	external/asmjit/src/asmjit/x86/x86assembler.cpp	/^  uint8_t data[3];$/;"	m	struct:X86OpcodeMM	file:
data	external/asmjit/tools/tablegen.js	/^        data: data$/;"	p	class:files
data	external/asmjit/tools/tablegen.js	/^      data: idx,$/;"	p	class:_index
data	src/codegen/arch_traits.h	/^    u32 data;$/;"	m	struct:dbt::qcg::RegMask
data	src/runtime_stubs.h	/^    const table_t data;$/;"	m	struct:dbt::RuntimeStubTab
dataArray	external/asmjit/test/asmjit_test_x86_sections.cpp	/^static const uint8_t dataArray[] = { 2, 9, 4, 7, 1, 3, 8, 5, 6, 0 };$/;"	v	file:
dataTypeIdBySize	external/asmjit/src/asmjit/core/assembler.cpp	/^static const TypeId dataTypeIdBySize[9] = {$/;"	v	file:
data_bits	src/ir/qir.h	/^    static constexpr auto data_bits = bit_size<uptr> - last_::container_size;$/;"	m	struct:dbt::qir::VOperand
db	external/asmjit/src/asmjit/x86/x86emitter.h	/^  inline Error db(uint8_t x, size_t repeatCount = 1) { return _emitter()->embedUInt8(x, repeatCount); }$/;"	f	struct:EmitterExplicitT
dbInsts	external/asmjit/tools/tablegen-x86.js	/^    var dbInsts = inst.dbInsts;$/;"	v
dbi	external/asmjit/tools/tablegen-x86.js	/^    var dbi = dbInsts[0];$/;"	v
dbt	src/codegen/jitabi.h	/^namespace dbt$/;"	n
dbt	src/env.cpp	/^namespace dbt$/;"	n	file:
dbt	src/env.h	/^namespace dbt$/;"	n
dbt	src/execute.cpp	/^namespace dbt$/;"	n	file:
dbt	src/execute.h	/^namespace dbt$/;"	n
dbt	src/guest/rv32_cpu.h	/^namespace dbt$/;"	n	class:dbt
dbt	src/guest/rv32_interp.cpp	/^namespace dbt$/;"	n	file:
dbt	src/ir/compile.h	/^namespace dbt$/;"	n
dbt	src/mmu.cpp	/^namespace dbt$/;"	n	file:
dbt	src/mmu.h	/^namespace dbt$/;"	n
dbt	src/runtime_stubs.cpp	/^namespace dbt$/;"	n	file:
dbt	src/runtime_stubs.h	/^namespace dbt$/;"	n
dbt	src/tcache.cpp	/^namespace dbt$/;"	n	file:
dbt	src/tcache.h	/^namespace dbt$/;"	n
dbt	src/util/allocator.h	/^namespace dbt$/;"	n
dbt	src/util/common.cpp	/^namespace dbt$/;"	n	file:
dbt	src/util/common.h	/^namespace dbt$/;"	n
dbt	src/util/ilist.h	/^namespace dbt$/;"	n
dbt_sigaction_memory	src/env.cpp	/^static void dbt_sigaction_memory(UNUSED int signo,$/;"	f	namespace:dbt
dd	external/asmjit/src/asmjit/x86/x86emitter.h	/^  inline Error dd(uint32_t x, size_t repeatCount = 1) { return _emitter()->embedUInt32(x, repeatCount); }$/;"	f	struct:EmitterExplicitT
deallocate	src/arena_objects.h	/^    void deallocate(UNUSED pointer p, UNUSED size_type n) {}$/;"	f	struct:MemArenaSTL
decode	src/util/bitfield.h	/^    static constexpr T decode(C c)$/;"	f	struct:bf_range
decode	src/util/bitfield.h	/^    static constexpr T decode(C c)$/;"	f	struct:bf_seq
decode_bits	src/util/bitfield.h	/^    static constexpr T decode_bits(C c)$/;"	f	struct:bf_range
decomposeOperand	external/asmjit/db/aarch64.js	/^function decomposeOperand(s) {$/;"	f
deps	Makefile	/^deps := $(OBJS:%.o=%.o.d)$/;"	m
dh	external/asmjit/src/asmjit/x86/x86operand.h	/^static constexpr GpbHi dh = GpbHi(Gp::kIdDx);$/;"	m	namespace:regs
dhrystone_DATA	mk/external.mk	/^dhrystone_DATA = $(OUT)\/dhrystone.elf$/;"	m
dhrystone_DATA_SHA1	mk/external.mk	/^dhrystone_DATA_SHA1 = 5962926fe824619edba696131cdadc78675ce4a0$/;"	m
di	external/asmjit/src/asmjit/x86/x86operand.h	/^static constexpr Gpw di = Gpw(Gp::kIdDi);$/;"	m	namespace:regs
dict	external/asmjit/db/base.js	/^function dict(src) {$/;"	f
difference_type	external/asmjit/src/asmjit/core/support.h	/^  typedef ptrdiff_t difference_type;$/;"	t	struct:Support::Internal::SortOrder::Array
difference_type	external/asmjit/src/asmjit/core/zonevector.h	/^  typedef ptrdiff_t difference_type;$/;"	t	class:ZoneVectorBase
dil	external/asmjit/src/asmjit/x86/x86operand.h	/^static constexpr GpbLo dil = GpbLo(Gp::kIdDi);$/;"	m	namespace:regs
dirty	external/asmjit/src/asmjit/core/raassignment_p.h	/^    RARegMask dirty;$/;"	m	struct:RAAssignment::PhysToWorkMap
dl	external/asmjit/src/asmjit/x86/x86operand.h	/^static constexpr GpbLo dl = GpbLo(Gp::kIdDx);$/;"	m	namespace:regs
done	external/asmjit/tools/tablegen.js	/^    var done = false;$/;"	v
download	mk/external.mk	/^define download$/;"	m
dq	external/asmjit/src/asmjit/x86/x86emitter.h	/^  inline Error dq(uint64_t x, size_t repeatCount = 1) { return _emitter()->embedUInt64(x, repeatCount); }$/;"	f	struct:EmitterExplicitT
dr0	external/asmjit/src/asmjit/x86/x86operand.h	/^static constexpr DReg dr0 = DReg(0);$/;"	m	namespace:regs
dr1	external/asmjit/src/asmjit/x86/x86operand.h	/^static constexpr DReg dr1 = DReg(1);$/;"	m	namespace:regs
dr10	external/asmjit/src/asmjit/x86/x86operand.h	/^static constexpr DReg dr10 = DReg(10);$/;"	m	namespace:regs
dr11	external/asmjit/src/asmjit/x86/x86operand.h	/^static constexpr DReg dr11 = DReg(11);$/;"	m	namespace:regs
dr12	external/asmjit/src/asmjit/x86/x86operand.h	/^static constexpr DReg dr12 = DReg(12);$/;"	m	namespace:regs
dr13	external/asmjit/src/asmjit/x86/x86operand.h	/^static constexpr DReg dr13 = DReg(13);$/;"	m	namespace:regs
dr14	external/asmjit/src/asmjit/x86/x86operand.h	/^static constexpr DReg dr14 = DReg(14);$/;"	m	namespace:regs
dr15	external/asmjit/src/asmjit/x86/x86operand.h	/^static constexpr DReg dr15 = DReg(15);$/;"	m	namespace:regs
dr2	external/asmjit/src/asmjit/x86/x86operand.h	/^static constexpr DReg dr2 = DReg(2);$/;"	m	namespace:regs
dr3	external/asmjit/src/asmjit/x86/x86operand.h	/^static constexpr DReg dr3 = DReg(3);$/;"	m	namespace:regs
dr4	external/asmjit/src/asmjit/x86/x86operand.h	/^static constexpr DReg dr4 = DReg(4);$/;"	m	namespace:regs
dr5	external/asmjit/src/asmjit/x86/x86operand.h	/^static constexpr DReg dr5 = DReg(5);$/;"	m	namespace:regs
dr6	external/asmjit/src/asmjit/x86/x86operand.h	/^static constexpr DReg dr6 = DReg(6);$/;"	m	namespace:regs
dr7	external/asmjit/src/asmjit/x86/x86operand.h	/^static constexpr DReg dr7 = DReg(7);$/;"	m	namespace:regs
dr8	external/asmjit/src/asmjit/x86/x86operand.h	/^static constexpr DReg dr8 = DReg(8);$/;"	m	namespace:regs
dr9	external/asmjit/src/asmjit/x86/x86operand.h	/^static constexpr DReg dr9 = DReg(9);$/;"	m	namespace:regs
ds	external/asmjit/src/asmjit/x86/x86operand.h	/^static constexpr SReg ds = SReg(SReg::kIdDs);$/;"	m	namespace:regs
dstruct	external/asmjit/src/asmjit/x86/x86emitter.h	/^  inline Error dstruct(const T& x) { return _emitter()->embed(&x, uint32_t(sizeof(T))); }$/;"	f	struct:EmitterExplicitT
dualMappingFilter	external/asmjit/src/asmjit/core/virtmem.cpp	/^static const constexpr MemoryFlags dualMappingFilter[2] = {$/;"	v	file:
dummy	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^  static void dummy(int, int) {}$/;"	f	class:X86Test_FuncCallMisc1
dumpRwToData	external/asmjit/tools/tablegen-x86.js	/^    function dumpRwToData(dbInsts) {$/;"	f	function:queryRwByData
duration	external/asmjit/test/performancetimer.h	/^  inline double duration() const {$/;"	f	class:PerformanceTimer
dw	external/asmjit/src/asmjit/x86/x86emitter.h	/^  inline Error dw(uint16_t x, size_t repeatCount = 1) { return _emitter()->embedUInt16(x, repeatCount); }$/;"	f	struct:EmitterExplicitT
dx	external/asmjit/src/asmjit/x86/x86operand.h	/^static constexpr Gpw dx = Gpw(Gp::kIdDx);$/;"	m	namespace:regs
eax	external/asmjit/src/asmjit/core/cpuinfo.cpp	/^struct cpuid_t { uint32_t eax, ebx, ecx, edx; };$/;"	m	struct:x86::cpuid_t	file:
eax	external/asmjit/src/asmjit/core/cpuinfo.cpp	/^struct xgetbv_t { uint32_t eax, edx; };$/;"	m	struct:x86::xgetbv_t	file:
eax	external/asmjit/src/asmjit/x86/x86operand.h	/^static constexpr Gpd eax = Gpd(Gp::kIdAx);$/;"	m	namespace:regs
ebp	external/asmjit/src/asmjit/x86/x86operand.h	/^static constexpr Gpd ebp = Gpd(Gp::kIdBp);$/;"	m	namespace:regs
ebx	external/asmjit/src/asmjit/core/cpuinfo.cpp	/^struct cpuid_t { uint32_t eax, ebx, ecx, edx; };$/;"	m	struct:x86::cpuid_t	file:
ebx	external/asmjit/src/asmjit/x86/x86operand.h	/^static constexpr Gpd ebx = Gpd(Gp::kIdBx);$/;"	m	namespace:regs
ecx	external/asmjit/src/asmjit/core/cpuinfo.cpp	/^struct cpuid_t { uint32_t eax, ebx, ecx, edx; };$/;"	m	struct:x86::cpuid_t	file:
ecx	external/asmjit/src/asmjit/x86/x86operand.h	/^static constexpr Gpd ecx = Gpd(Gp::kIdCx);$/;"	m	namespace:regs
edi	external/asmjit/src/asmjit/x86/x86operand.h	/^static constexpr Gpd edi = Gpd(Gp::kIdDi);$/;"	m	namespace:regs
edx	external/asmjit/src/asmjit/core/cpuinfo.cpp	/^struct cpuid_t { uint32_t eax, ebx, ecx, edx; };$/;"	m	struct:x86::cpuid_t	file:
edx	external/asmjit/src/asmjit/core/cpuinfo.cpp	/^struct xgetbv_t { uint32_t eax, edx; };$/;"	m	struct:x86::xgetbv_t	file:
edx	external/asmjit/src/asmjit/x86/x86operand.h	/^static constexpr Gpd edx = Gpd(Gp::kIdDx);$/;"	m	namespace:regs
ehdr	src/env.cpp	/^    Elf32_Ehdr ehdr; \/* elf header *\/$/;"	m	struct:dbt::env::ElfImage	file:
elementOp	external/asmjit/src/asmjit/arm/a64instdb_p.h	/^  uint32_t elementOp : 26; \/\/ 22 bits used.$/;"	m	struct:InstDB::EncodingData::ISimdVVVe
elementOp	external/asmjit/src/asmjit/arm/a64instdb_p.h	/^  uint32_t elementOp;    \/\/ 22 bits used.$/;"	m	struct:InstDB::EncodingData::SimdDot
elementTypeSize	external/asmjit/src/asmjit/arm/a64instapi.cpp	/^static const uint8_t elementTypeSize[8] = { 0, 1, 2, 4, 8, 4, 4, 0 };$/;"	v	file:
elementVecType	external/asmjit/src/asmjit/arm/a64instdb_p.h	/^  uint32_t elementVecType : 6;$/;"	m	struct:InstDB::EncodingData::ISimdVVVe
embed	external/asmjit/src/asmjit/core/assembler.cpp	/^Error BaseAssembler::embed(const void* data, size_t dataSize) {$/;"	f	class:BaseAssembler
embed	external/asmjit/src/asmjit/core/builder.cpp	/^Error BaseBuilder::embed(const void* data, size_t dataSize) {$/;"	f	class:BaseBuilder
embed	external/asmjit/src/asmjit/core/emitter.cpp	/^Error BaseEmitter::embed(const void* data, size_t dataSize) {$/;"	f	class:BaseEmitter
embedConstPool	external/asmjit/src/asmjit/core/assembler.cpp	/^Error BaseAssembler::embedConstPool(const Label& label, const ConstPool& pool) {$/;"	f	class:BaseAssembler
embedConstPool	external/asmjit/src/asmjit/core/builder.cpp	/^Error BaseBuilder::embedConstPool(const Label& label, const ConstPool& pool) {$/;"	f	class:BaseBuilder
embedDataArray	external/asmjit/src/asmjit/core/assembler.cpp	/^Error BaseAssembler::embedDataArray(TypeId typeId, const void* data, size_t itemCount, size_t repeatCount) {$/;"	f	class:BaseAssembler
embedDataArray	external/asmjit/src/asmjit/core/builder.cpp	/^Error BaseBuilder::embedDataArray(TypeId typeId, const void* data, size_t itemCount, size_t itemRepeat) {$/;"	f	class:BaseBuilder
embedDataArray	external/asmjit/src/asmjit/core/emitter.cpp	/^Error BaseEmitter::embedDataArray(TypeId typeId, const void* data, size_t itemCount, size_t repeatCount) {$/;"	f	class:BaseEmitter
embedDouble	external/asmjit/src/asmjit/core/emitter.h	/^  ASMJIT_INLINE_NODEBUG Error embedDouble(double value, size_t repeatCount = 1) { return embedDataArray(TypeId(TypeUtils::TypeIdOfT<double>::kTypeId), &value, 1, repeatCount); }$/;"	f	class:AlignMode::EmitterType::EmitterFlags::EncodingOptions::BaseEmitter
embedFloat	external/asmjit/src/asmjit/core/emitter.h	/^  ASMJIT_INLINE_NODEBUG Error embedFloat(float value, size_t repeatCount = 1) { return embedDataArray(TypeId(TypeUtils::TypeIdOfT<float>::kTypeId), &value, 1, repeatCount); }$/;"	f	class:AlignMode::EmitterType::EmitterFlags::EncodingOptions::BaseEmitter
embedInt16	external/asmjit/src/asmjit/core/emitter.h	/^  ASMJIT_INLINE_NODEBUG Error embedInt16(int16_t value, size_t repeatCount = 1) { return embedDataArray(TypeId::kInt16, &value, 1, repeatCount); }$/;"	f	class:AlignMode::EmitterType::EmitterFlags::EncodingOptions::BaseEmitter
embedInt32	external/asmjit/src/asmjit/core/emitter.h	/^  ASMJIT_INLINE_NODEBUG Error embedInt32(int32_t value, size_t repeatCount = 1) { return embedDataArray(TypeId::kInt32, &value, 1, repeatCount); }$/;"	f	class:AlignMode::EmitterType::EmitterFlags::EncodingOptions::BaseEmitter
embedInt64	external/asmjit/src/asmjit/core/emitter.h	/^  ASMJIT_INLINE_NODEBUG Error embedInt64(int64_t value, size_t repeatCount = 1) { return embedDataArray(TypeId::kInt64, &value, 1, repeatCount); }$/;"	f	class:AlignMode::EmitterType::EmitterFlags::EncodingOptions::BaseEmitter
embedInt8	external/asmjit/src/asmjit/core/emitter.h	/^  ASMJIT_INLINE_NODEBUG Error embedInt8(int8_t value, size_t repeatCount = 1) { return embedDataArray(TypeId::kInt8, &value, 1, repeatCount); }$/;"	f	class:AlignMode::EmitterType::EmitterFlags::EncodingOptions::BaseEmitter
embedLabel	external/asmjit/src/asmjit/core/assembler.cpp	/^Error BaseAssembler::embedLabel(const Label& label, size_t dataSize) {$/;"	f	class:BaseAssembler
embedLabel	external/asmjit/src/asmjit/core/builder.cpp	/^Error BaseBuilder::embedLabel(const Label& label, size_t dataSize) {$/;"	f	class:BaseBuilder
embedLabel	external/asmjit/src/asmjit/core/emitter.cpp	/^Error BaseEmitter::embedLabel(const Label& label, size_t dataSize) {$/;"	f	class:BaseEmitter
embedLabelDelta	external/asmjit/src/asmjit/core/assembler.cpp	/^Error BaseAssembler::embedLabelDelta(const Label& label, const Label& base, size_t dataSize) {$/;"	f	class:BaseAssembler
embedLabelDelta	external/asmjit/src/asmjit/core/builder.cpp	/^Error BaseBuilder::embedLabelDelta(const Label& label, const Label& base, size_t dataSize) {$/;"	f	class:BaseBuilder
embedLabelDelta	external/asmjit/src/asmjit/core/emitter.cpp	/^Error BaseEmitter::embedLabelDelta(const Label& label, const Label& base, size_t dataSize) {$/;"	f	class:BaseEmitter
embedUInt16	external/asmjit/src/asmjit/core/emitter.h	/^  ASMJIT_INLINE_NODEBUG Error embedUInt16(uint16_t value, size_t repeatCount = 1) { return embedDataArray(TypeId::kUInt16, &value, 1, repeatCount); }$/;"	f	class:AlignMode::EmitterType::EmitterFlags::EncodingOptions::BaseEmitter
embedUInt32	external/asmjit/src/asmjit/core/emitter.h	/^  ASMJIT_INLINE_NODEBUG Error embedUInt32(uint32_t value, size_t repeatCount = 1) { return embedDataArray(TypeId::kUInt32, &value, 1, repeatCount); }$/;"	f	class:AlignMode::EmitterType::EmitterFlags::EncodingOptions::BaseEmitter
embedUInt64	external/asmjit/src/asmjit/core/emitter.h	/^  ASMJIT_INLINE_NODEBUG Error embedUInt64(uint64_t value, size_t repeatCount = 1) { return embedDataArray(TypeId::kUInt64, &value, 1, repeatCount); }$/;"	f	class:AlignMode::EmitterType::EmitterFlags::EncodingOptions::BaseEmitter
embedUInt8	external/asmjit/src/asmjit/core/emitter.h	/^  ASMJIT_INLINE_NODEBUG Error embedUInt8(uint8_t value, size_t repeatCount = 1) { return embedDataArray(TypeId::kUInt8, &value, 1, repeatCount); }$/;"	f	class:AlignMode::EmitterType::EmitterFlags::EncodingOptions::BaseEmitter
emit	external/asmjit/src/asmjit/core/emitter.h	/^  ASMJIT_INLINE_NODEBUG Error emit(InstId instId, Args&&... operands) {$/;"	f	class:AlignMode::EmitterType::EmitterFlags::EncodingOptions::BaseEmitter
emitAnnotatedJump	external/asmjit/src/asmjit/core/compiler.cpp	/^Error BaseCompiler::emitAnnotatedJump(InstId instId, const Operand_& o0, JumpAnnotation* annotation) {$/;"	f	class:BaseCompiler
emitArgMove	external/asmjit/src/asmjit/arm/a64emithelper.cpp	/^Error EmitHelper::emitArgMove($/;"	f	class:EmitHelper
emitArgMove	external/asmjit/src/asmjit/core/emithelper.cpp	/^Error BaseEmitHelper::emitArgMove(const BaseReg& dst_, TypeId dstTypeId, const Operand_& src_, TypeId srcTypeId, const char* comment) {$/;"	f	class:BaseEmitHelper
emitArgMove	external/asmjit/src/asmjit/x86/x86emithelper.cpp	/^ASMJIT_FAVOR_SIZE Error EmitHelper::emitArgMove($/;"	f	class:EmitHelper
emitArgsAssignment	external/asmjit/src/asmjit/core/emithelper.cpp	/^ASMJIT_FAVOR_SIZE Error BaseEmitHelper::emitArgsAssignment(const FuncFrame& frame, const FuncArgsAssignment& args) {$/;"	f	class:BaseEmitHelper
emitArgsAssignment	external/asmjit/src/asmjit/core/emitter.cpp	/^Error BaseEmitter::emitArgsAssignment(const FuncFrame& frame, const FuncArgsAssignment& args) {$/;"	f	class:BaseEmitter
emitArgsAssignment	external/asmjit/src/asmjit/core/emitter.h	/^    EmitArgsAssignment emitArgsAssignment;$/;"	m	struct:AlignMode::EmitterType::EmitterFlags::EncodingOptions::BaseEmitter::Funcs
emitEpilog	external/asmjit/src/asmjit/arm/a64emithelper.cpp	/^ASMJIT_FAVOR_SIZE Error EmitHelper::emitEpilog(const FuncFrame& frame) {$/;"	f	class:EmitHelper
emitEpilog	external/asmjit/src/asmjit/core/emitter.cpp	/^Error BaseEmitter::emitEpilog(const FuncFrame& frame) {$/;"	f	class:BaseEmitter
emitEpilog	external/asmjit/src/asmjit/core/emitter.h	/^    EmitEpilog emitEpilog;$/;"	m	struct:AlignMode::EmitterType::EmitterFlags::EncodingOptions::BaseEmitter::Funcs
emitEpilog	external/asmjit/src/asmjit/x86/x86emithelper.cpp	/^ASMJIT_FAVOR_SIZE Error EmitHelper::emitEpilog(const FuncFrame& frame) {$/;"	f	class:EmitHelper
emitInst	external/asmjit/src/asmjit/core/emitter.h	/^  ASMJIT_FORCE_INLINE Error emitInst(const BaseInst& inst, const Operand_* operands, size_t opCount) {$/;"	f	class:AlignMode::EmitterType::EmitterFlags::EncodingOptions::BaseEmitter
emitOpArray	external/asmjit/src/asmjit/core/emitter.h	/^  ASMJIT_INLINE_NODEBUG Error emitOpArray(InstId instId, const Operand_* operands, size_t opCount) {$/;"	f	class:AlignMode::EmitterType::EmitterFlags::EncodingOptions::BaseEmitter
emitProlog	external/asmjit/src/asmjit/arm/a64emithelper.cpp	/^ASMJIT_FAVOR_SIZE Error EmitHelper::emitProlog(const FuncFrame& frame) {$/;"	f	class:EmitHelper
emitProlog	external/asmjit/src/asmjit/core/emitter.cpp	/^Error BaseEmitter::emitProlog(const FuncFrame& frame) {$/;"	f	class:BaseEmitter
emitProlog	external/asmjit/src/asmjit/core/emitter.h	/^    EmitProlog emitProlog;$/;"	m	struct:AlignMode::EmitterType::EmitterFlags::EncodingOptions::BaseEmitter::Funcs
emitProlog	external/asmjit/src/asmjit/x86/x86emithelper.cpp	/^ASMJIT_FAVOR_SIZE Error EmitHelper::emitProlog(const FuncFrame& frame) {$/;"	f	class:EmitHelper
emitRegMove	external/asmjit/src/asmjit/arm/a64emithelper.cpp	/^ASMJIT_FAVOR_SIZE Error EmitHelper::emitRegMove($/;"	f	class:EmitHelper
emitRegMove	external/asmjit/src/asmjit/core/emithelper.cpp	/^Error BaseEmitHelper::emitRegMove(const Operand_& dst_, const Operand_& src_, TypeId typeId, const char* comment) {$/;"	f	class:BaseEmitHelper
emitRegMove	external/asmjit/src/asmjit/x86/x86emithelper.cpp	/^ASMJIT_FAVOR_SIZE Error EmitHelper::emitRegMove($/;"	f	class:EmitHelper
emitRegSwap	external/asmjit/src/asmjit/arm/a64emithelper.cpp	/^Error EmitHelper::emitRegSwap($/;"	f	class:EmitHelper
emitRegSwap	external/asmjit/src/asmjit/core/emithelper.cpp	/^Error BaseEmitHelper::emitRegSwap(const BaseReg& a, const BaseReg& b, const char* comment) {$/;"	f	class:BaseEmitHelper
emitRegSwap	external/asmjit/src/asmjit/x86/x86emithelper.cpp	/^Error EmitHelper::emitRegSwap($/;"	f	class:EmitHelper
empty	src/util/ilist.h	/^    bool empty() const { return IListNode<T>::getPrev() == this; }$/;"	f	struct:dbt::IListSentinel
empty	src/util/ilist.h	/^    bool empty() const { return sentinel.empty(); }$/;"	f	struct:dbt::IList
emptyBlockCount	external/asmjit/src/asmjit/core/jitallocator.cpp	/^  uint8_t emptyBlockCount = 0;$/;"	m	class:JitAllocatorPool	file:
encode	src/util/bitfield.h	/^    static constexpr C encode(C c, E_ e)$/;"	f	struct:bf_range
encode	src/util/bitfield.h	/^    static constexpr C encode(C c, T t)$/;"	f	struct:bf_range
encode_bits	src/util/bitfield.h	/^    static constexpr C encode_bits(C c, T t)$/;"	f	struct:bf_range
encoding	external/asmjit/tools/tablegen-x86.js	/^    var encoding = dbi.encoding;$/;"	v
encodingIds	external/asmjit/tools/tablegen-a64.js	/^    var encodingIds = "";$/;"	v
end	external/asmjit/src/asmjit/arm/a64instdb_p.h	/^  uint16_t end;$/;"	m	struct:InstDB::InstNameIndex
end	external/asmjit/src/asmjit/x86/x86instdb_p.h	/^  uint16_t end;$/;"	m	struct:InstDB::InstNameIndex
end	src/util/ilist.h	/^    iterator end() { return iterator(sentinel); }$/;"	f	struct:dbt::IList
endFunc	external/asmjit/src/asmjit/core/compiler.cpp	/^Error BaseCompiler::endFunc() {$/;"	f	class:BaseCompiler
entry	external/asmjit/test/broken.h	/^  Entry entry;$/;"	m	struct:BrokenAPI::Unit
entry	src/env.cpp	/^    uabi_ulong entry; \/* The address where the program's execution begins *\/$/;"	m	struct:dbt::env::ElfImage	file:
enum_	external/asmjit/tools/tablegen-x86.js	/^    var enum_ = name[0].toUpperCase() + name.substr(1);$/;"	v
enum_bits	src/util/common.h	/^constexpr size_t enum_bits(Enum e)$/;"	f
env	src/env.h	/^struct env {$/;"	s	namespace:dbt
env_syscall	src/env.cpp	/^namespace env_syscall$/;"	n	namespace:dbt	file:
erase	src/util/ilist.h	/^    iterator erase(iterator it)$/;"	f	struct:dbt::IList
es	external/asmjit/src/asmjit/x86/x86operand.h	/^static constexpr SReg es = SReg(SReg::kIdEs);$/;"	m	namespace:regs
esi	external/asmjit/src/asmjit/x86/x86operand.h	/^static constexpr Gpd esi = Gpd(Gp::kIdSi);$/;"	m	namespace:regs
esp	external/asmjit/src/asmjit/x86/x86operand.h	/^static constexpr Gpd esp = Gpd(Gp::kIdSp);$/;"	m	namespace:regs
evexCount	external/asmjit/tools/tablegen-x86.js	/^    var evexCount = 0;$/;"	v
evexW	external/asmjit/tools/tablegen-x86.js	/^    var evexW = undefined;$/;"	v
exe_elf_image	src/env.h	/^    static ElfImage exe_elf_image;$/;"	m	struct:dbt::env
expression	external/asmjit/src/asmjit/core/codeholder.h	/^    Expression* expression;$/;"	m	union:ExpressionOpType::ExpressionValueType::Expression::Value
extendedOp	external/asmjit/src/asmjit/arm/a64instdb_p.h	/^  uint32_t extendedOp : 10; \/\/ sf|.......|..|.|Rm|Opt|Imm3|Rn|11111|$/;"	m	struct:InstDB::EncodingData::BaseCmpCmn
extendedOp	external/asmjit/src/asmjit/arm/a64instdb_p.h	/^  uint32_t extendedOp : 10; \/\/ sf|.......|..|.|Rm|Opt|Imm3|Rn|Rd|$/;"	m	struct:InstDB::EncodingData::BaseAddSub
extraReg	external/asmjit/src/asmjit/core/emitter.h	/^    RegOnly extraReg;$/;"	m	struct:AlignMode::EmitterType::EmitterFlags::EncodingOptions::BaseEmitter::State
fSimdPair	external/asmjit/src/asmjit/arm/a64instdb.cpp	/^const FSimdPair fSimdPair[5] = {$/;"	m	namespace:InstDB::EncodingData	file:
fSimdSV	external/asmjit/src/asmjit/arm/a64instdb.cpp	/^const FSimdSV fSimdSV[4] = {$/;"	m	namespace:InstDB::EncodingData	file:
fSimdVV	external/asmjit/src/asmjit/arm/a64instdb.cpp	/^const FSimdVV fSimdVV[17] = {$/;"	m	namespace:InstDB::EncodingData	file:
fSimdVVV	external/asmjit/src/asmjit/arm/a64instdb.cpp	/^const FSimdVVV fSimdVVV[13] = {$/;"	m	namespace:InstDB::EncodingData	file:
fSimdVVVV	external/asmjit/src/asmjit/arm/a64instdb.cpp	/^const FSimdVVVV fSimdVVVV[4] = {$/;"	m	namespace:InstDB::EncodingData	file:
fSimdVVVe	external/asmjit/src/asmjit/arm/a64instdb.cpp	/^const FSimdVVVe fSimdVVVe[4] = {$/;"	m	namespace:InstDB::EncodingData	file:
fail	external/asmjit/test/asmjit_test_x86_sections.cpp	/^static void fail(const char* message, Error err) {$/;"	f	file:
featureId	external/asmjit/src/asmjit/core/cpuinfo.cpp	/^  uint8_t featureId;$/;"	m	struct:arm::AppleFamilyId::HWCapMapping	file:
featureId	external/asmjit/src/asmjit/core/cpuinfo.cpp	/^  uint8_t featureId;$/;"	m	struct:arm::AppleFamilyId::OpenBSDAArch64CPUID::AppleFeatureMapping	file:
featureId	external/asmjit/src/asmjit/core/cpuinfo.cpp	/^  uint8_t featureId;$/;"	m	struct:arm::AppleFamilyId::WinPFPMapping	file:
features	external/asmjit/tools/tablegen-x86.js	/^    var features = GenUtils.cpuFeaturesOf(dbInsts);$/;"	v
fillPattern	external/asmjit/src/asmjit/core/jitallocator.h	/^    uint32_t fillPattern = 0;$/;"	m	struct:JitAllocatorOptions::JitAllocator::CreateParams
fillPattern	external/asmjit/src/asmjit/core/jitallocator.h	/^    uint32_t fillPattern;$/;"	m	struct:JitAllocatorOptions::JitAllocator::Impl
final	src/execute.cpp	/^struct JITCompilerRuntime final : CompilerRuntime {$/;"	s	namespace:dbt	file:
finalize	external/asmjit/src/asmjit/arm/a64builder.cpp	/^Error Builder::finalize() {$/;"	f	class:Builder
finalize	external/asmjit/src/asmjit/arm/a64compiler.cpp	/^Error Compiler::finalize() {$/;"	f	class:Compiler
finalize	external/asmjit/src/asmjit/core/emitter.cpp	/^Error BaseEmitter::finalize() {$/;"	f	class:BaseEmitter
finalize	external/asmjit/src/asmjit/x86/x86builder.cpp	/^Error Builder::finalize() {$/;"	f	class:Builder
finalize	external/asmjit/src/asmjit/x86/x86compiler.cpp	/^Error Compiler::finalize() {$/;"	f	class:Compiler
findSignaturesIndex	external/asmjit/tools/tablegen-x86.js	/^    function findSignaturesIndex(rows) {$/;"	f
fixedSize	external/asmjit/src/asmjit/x86/x86instdb_p.h	/^  uint8_t fixedSize;$/;"	v
flags	external/asmjit/src/asmjit/core/virtmem.h	/^  HardenedRuntimeFlags flags;$/;"	m	struct:VirtMem::CachePolicy::MemoryFlags::HardenedRuntimeFlags::HardenedRuntimeInfo
flags	external/asmjit/src/asmjit/x86/x86instdb_p.h	/^  OpRWFlags flags;$/;"	m	struct:RWInfoOp
flags	external/asmjit/src/asmjit/x86/x86instdb_p.h	/^  uint8_t flags;$/;"	v
flags	external/asmjit/test/broken.h	/^  unsigned flags;$/;"	m	struct:BrokenAPI::Unit
flags	src/codegen/jitabi.h	/^    } flags;$/;"	m	struct:dbt::jitabi::ppoint::BranchSlot	typeref:struct:dbt::jitabi::ppoint::BranchSlot::__anon28
fmt	external/asmjit/src/asmjit/core/compiler.h	/^  ASMJIT_API Error _newRegFmt(BaseReg* ASMJIT_NONNULL(out), TypeId typeId, const char* fmt, ...);$/;"	m	class:BaseCompiler
fmt	external/asmjit/src/asmjit/core/compiler.h	/^  ASMJIT_API Error _newRegFmt(BaseReg* ASMJIT_NONNULL(out), const BaseReg& ref, const char* fmt, ...);$/;"	m	class:BaseCompiler
format	external/asmjit/src/asmjit/core/codeholder.h	/^  OffsetFormat format;$/;"	m	struct:ExpressionOpType::ExpressionValueType::SectionFlags::CopySectionFlags::OffsetType::RelocType::LabelType::LabelLink
formatEmit	external/asmjit/tools/tablegen-x86.js	/^    function formatEmit(dbi) {$/;"	f
formatIndex	external/asmjit/src/asmjit/x86/x86formatter.cpp	/^    uint8_t formatIndex;$/;"	m	struct:RegFormatInfo::NameEntry	file:
formatInstruction	external/asmjit/src/asmjit/core/emitter.h	/^    FormatInstruction formatInstruction;$/;"	m	struct:AlignMode::EmitterType::EmitterFlags::EncodingOptions::BaseEmitter::Funcs
freehigh	src/env.cpp	/^    u32 freehigh;$/;"	m	struct:dbt::env_syscall::uabi_sysinfo	file:
freeram	src/env.cpp	/^    u32 freeram;$/;"	m	struct:dbt::env_syscall::uabi_sysinfo	file:
freeswap	src/env.cpp	/^    u32 freeswap;$/;"	m	struct:dbt::env_syscall::uabi_sysinfo	file:
fs	external/asmjit/src/asmjit/x86/x86operand.h	/^static constexpr SReg fs = SReg(SReg::kIdFs);$/;"	m	namespace:regs
fsroot	src/env.cpp	/^    std::string fsroot;$/;"	m	struct:dbt::env::Process	file:
g2h	src/mmu.h	/^    static ALWAYS_INLINE void *g2h(u32 gptr) { return base + gptr; }$/;"	f	struct:dbt::mmu
g_tab	src/runtime_stubs.cpp	/^const RuntimeStubTab RuntimeStubTab::g_tab = RuntimeStubTab::Create();$/;"	m	class:dbt::RuntimeStubTab	file:
g_tab	src/runtime_stubs.h	/^    static const RuntimeStubTab g_tab;$/;"	m	struct:dbt::RuntimeStubTab
gen_flags	src/guest/rv32_insn.h	/^    static constexpr Flags::Types gen_flags = Flags::HasRd;$/;"	m	struct:dbt::rv32::insn::I
gen_flags	src/guest/rv32_insn.h	/^    static constexpr Flags::Types gen_flags = Flags::HasRd;$/;"	m	struct:dbt::rv32::insn::IS
gen_flags	src/guest/rv32_insn.h	/^    static constexpr Flags::Types gen_flags = Flags::HasRd;$/;"	m	struct:dbt::rv32::insn::J
gen_flags	src/guest/rv32_insn.h	/^    static constexpr Flags::Types gen_flags = Flags::HasRd;$/;"	m	struct:dbt::rv32::insn::R
gen_flags	src/guest/rv32_insn.h	/^    static constexpr Flags::Types gen_flags = Flags::HasRd;$/;"	m	struct:dbt::rv32::insn::U
gen_flags	src/guest/rv32_insn.h	/^    static constexpr Flags::Types gen_flags = Flags::None;$/;"	m	struct:dbt::rv32::insn::B
gen_flags	src/guest/rv32_insn.h	/^    static constexpr Flags::Types gen_flags = Flags::None;$/;"	m	struct:dbt::rv32::insn::Base
gen_flags	src/guest/rv32_insn.h	/^    static constexpr Flags::Types gen_flags = Flags::None;$/;"	m	struct:dbt::rv32::insn::S
gen_flags	src/guest/rv32_insn.h	/^    static constexpr Flags::Types gen_flags =$/;"	m	struct:dbt::rv32::insn::A
generateAvx512Sequence	external/asmjit/test/asmjit_test_perf_x86.cpp	/^static void generateAvx512Sequence(BaseEmitter& emitter, InstForm form, bool emitPrologEpilog) {$/;"	f	file:
generateAvx512SequenceInternal	external/asmjit/test/asmjit_test_perf_x86.cpp	/^static void generateAvx512SequenceInternal($/;"	f	file:
generateAvx512SequenceInternalRegMem	external/asmjit/test/asmjit_test_perf_x86.cpp	/^static void generateAvx512SequenceInternalRegMem($/;"	f	file:
generateAvx512SequenceInternalRegOnly	external/asmjit/test/asmjit_test_perf_x86.cpp	/^static void generateAvx512SequenceInternalRegOnly($/;"	f	file:
generateAvxSequence	external/asmjit/test/asmjit_test_perf_x86.cpp	/^static void generateAvxSequence(BaseEmitter& emitter, InstForm form, bool emitPrologEpilog) {$/;"	f	file:
generateAvxSequenceInternal	external/asmjit/test/asmjit_test_perf_x86.cpp	/^static void generateAvxSequenceInternal($/;"	f	file:
generateAvxSequenceInternalRegMem	external/asmjit/test/asmjit_test_perf_x86.cpp	/^static void generateAvxSequenceInternalRegMem($/;"	f	file:
generateAvxSequenceInternalRegOnly	external/asmjit/test/asmjit_test_perf_x86.cpp	/^static void generateAvxSequenceInternalRegOnly($/;"	f	file:
generateGpSequence	external/asmjit/test/asmjit_test_perf_a64.cpp	/^static void generateGpSequence(BaseEmitter& emitter, bool emitPrologEpilog) {$/;"	f	file:
generateGpSequence	external/asmjit/test/asmjit_test_perf_x86.cpp	/^static void generateGpSequence(BaseEmitter& emitter, InstForm form, bool emitPrologEpilog) {$/;"	f	file:
generateGpSequenceInternal	external/asmjit/test/asmjit_test_perf_a64.cpp	/^static void generateGpSequenceInternal($/;"	f	file:
generateGpSequenceInternal	external/asmjit/test/asmjit_test_perf_x86.cpp	/^static void generateGpSequenceInternal($/;"	f	file:
generateSseAlphaBlend	external/asmjit/test/asmjit_test_misc.h	/^static void generateSseAlphaBlend(asmjit::BaseEmitter& emitter, bool emitPrologEpilog) {$/;"	f	namespace:asmtest
generateSseAlphaBlendInternal	external/asmjit/test/asmjit_test_misc.h	/^static void generateSseAlphaBlendInternal($/;"	f	namespace:asmtest
generateSseSequence	external/asmjit/test/asmjit_test_perf_x86.cpp	/^static void generateSseSequence(BaseEmitter& emitter, InstForm form, bool emitPrologEpilog) {$/;"	f	file:
generateSseSequenceInternal	external/asmjit/test/asmjit_test_perf_x86.cpp	/^static void generateSseSequenceInternal($/;"	f	file:
getIListNode	src/util/ilist.h	/^    auto getIListNode() const { return pos; }$/;"	f	struct:dbt::IListIterator
getIter	src/util/ilist.h	/^    IListIterator<T> getIter() { return IListIterator<T>(*this); }$/;"	f	struct:dbt::IListNode
getMemIndexes	external/asmjit/tools/tablegen-x86.js	/^    function getMemIndexes(inst) { return maskOf(inst, function(op) { return op.isMem(); }); };$/;"	f
getNext	src/util/ilist.h	/^    IListNode *getNext() const$/;"	f	struct:dbt::IListNode
getNext	src/util/ilist.h	/^    IListNodeBase *getNext() const { return nnext; }$/;"	f	struct:dbt::IListNodeBase
getPrev	src/util/ilist.h	/^    IListNode *getPrev() const$/;"	f	struct:dbt::IListNode
getPrev	src/util/ilist.h	/^    IListNodeBase *getPrev() const { return nprev; }$/;"	f	struct:dbt::IListNodeBase
getRegIndexes	external/asmjit/tools/tablegen-x86.js	/^    function getRegIndexes(inst) { return maskOf(inst, function(op) { return op.isReg(); }); };$/;"	f
getXmmMovInst	external/asmjit/src/asmjit/x86/x86emithelper.cpp	/^static inline uint32_t getXmmMovInst(const FuncFrame& frame) {$/;"	f	file:
gip	src/codegen/jitabi.cpp	/^        u32 gip;$/;"	m	struct:dbt::jitabi::TraceRing::Record	file:
gip	src/codegen/jitabi.h	/^    u32 gip;$/;"	m	struct:dbt::jitabi::ppoint::BranchSlot
gip	src/tcache.h	/^        u32 gip; \/\/ global instruction pointer$/;"	m	struct:dbt::tcache::BrindCacheEntry
gip_base	src/ir/compile.h	/^    u32 gip_base;$/;"	m	struct:dbt::qir::CodeSegment
globalJmpBuf	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^static jmp_buf globalJmpBuf;$/;"	v	file:
gpr_num	src/guest/rv32_cpu.h	/^    static constexpr u8 gpr_num = 32; \/* general-purpose registers numbers *\/$/;"	m	struct:dbt::rv32::CPUStateImpl
gprop	src/guest/rv32_qir.cpp	/^static inline VOperand gprop(u8 id, VType type = VType::I32)$/;"	f	namespace:dbt::qir::rv32
granularity	external/asmjit/src/asmjit/core/jitallocator.cpp	/^  uint16_t granularity = 0;$/;"	m	class:JitAllocatorPool	file:
granularity	external/asmjit/src/asmjit/core/jitallocator.h	/^    uint32_t granularity = 0;$/;"	m	struct:JitAllocatorOptions::JitAllocator::CreateParams
granularity	external/asmjit/src/asmjit/core/jitallocator.h	/^    uint32_t granularity;$/;"	m	struct:JitAllocatorOptions::JitAllocator::Impl
granularityLog2	external/asmjit/src/asmjit/core/jitallocator.cpp	/^  uint8_t granularityLog2 = 0;$/;"	m	class:JitAllocatorPool	file:
groups	external/asmjit/db/base.js	/^      groups: 0                          \/\/ Number of grouped instructions (having unique name).$/;"	p	class:stats
groups	external/asmjit/src/asmjit/arm/a64emithelper.cpp	/^  Support::Array<GroupData, 2> groups;$/;"	m	struct:PrologEpilogInfo	file:
gs	external/asmjit/src/asmjit/x86/x86operand.h	/^static constexpr SReg gs = SReg(SReg::kIdGs);$/;"	m	namespace:regs
h	src/util/bitfield.h	/^    static constexpr auto h = h_;$/;"	m	struct:bf_pt
h0	external/asmjit/src/asmjit/arm/a64operand.h	/^static constexpr VecH h0 = VecH(0);$/;"	m	namespace:regs
h1	external/asmjit/src/asmjit/arm/a64operand.h	/^static constexpr VecH h1 = VecH(1);$/;"	m	namespace:regs
h10	external/asmjit/src/asmjit/arm/a64operand.h	/^static constexpr VecH h10 = VecH(10);$/;"	m	namespace:regs
h11	external/asmjit/src/asmjit/arm/a64operand.h	/^static constexpr VecH h11 = VecH(11);$/;"	m	namespace:regs
h12	external/asmjit/src/asmjit/arm/a64operand.h	/^static constexpr VecH h12 = VecH(12);$/;"	m	namespace:regs
h13	external/asmjit/src/asmjit/arm/a64operand.h	/^static constexpr VecH h13 = VecH(13);$/;"	m	namespace:regs
h14	external/asmjit/src/asmjit/arm/a64operand.h	/^static constexpr VecH h14 = VecH(14);$/;"	m	namespace:regs
h15	external/asmjit/src/asmjit/arm/a64operand.h	/^static constexpr VecH h15 = VecH(15);$/;"	m	namespace:regs
h16	external/asmjit/src/asmjit/arm/a64operand.h	/^static constexpr VecH h16 = VecH(16);$/;"	m	namespace:regs
h17	external/asmjit/src/asmjit/arm/a64operand.h	/^static constexpr VecH h17 = VecH(17);$/;"	m	namespace:regs
h18	external/asmjit/src/asmjit/arm/a64operand.h	/^static constexpr VecH h18 = VecH(18);$/;"	m	namespace:regs
h19	external/asmjit/src/asmjit/arm/a64operand.h	/^static constexpr VecH h19 = VecH(19);$/;"	m	namespace:regs
h2	external/asmjit/src/asmjit/arm/a64operand.h	/^static constexpr VecH h2 = VecH(2);$/;"	m	namespace:regs
h20	external/asmjit/src/asmjit/arm/a64operand.h	/^static constexpr VecH h20 = VecH(20);$/;"	m	namespace:regs
h21	external/asmjit/src/asmjit/arm/a64operand.h	/^static constexpr VecH h21 = VecH(21);$/;"	m	namespace:regs
h22	external/asmjit/src/asmjit/arm/a64operand.h	/^static constexpr VecH h22 = VecH(22);$/;"	m	namespace:regs
h23	external/asmjit/src/asmjit/arm/a64operand.h	/^static constexpr VecH h23 = VecH(23);$/;"	m	namespace:regs
h24	external/asmjit/src/asmjit/arm/a64operand.h	/^static constexpr VecH h24 = VecH(24);$/;"	m	namespace:regs
h25	external/asmjit/src/asmjit/arm/a64operand.h	/^static constexpr VecH h25 = VecH(25);$/;"	m	namespace:regs
h26	external/asmjit/src/asmjit/arm/a64operand.h	/^static constexpr VecH h26 = VecH(26);$/;"	m	namespace:regs
h27	external/asmjit/src/asmjit/arm/a64operand.h	/^static constexpr VecH h27 = VecH(27);$/;"	m	namespace:regs
h28	external/asmjit/src/asmjit/arm/a64operand.h	/^static constexpr VecH h28 = VecH(28);$/;"	m	namespace:regs
h29	external/asmjit/src/asmjit/arm/a64operand.h	/^static constexpr VecH h29 = VecH(29);$/;"	m	namespace:regs
h2g	src/mmu.h	/^    static ALWAYS_INLINE u32 h2g(void *hptr)$/;"	f	struct:dbt::mmu
h3	external/asmjit/src/asmjit/arm/a64operand.h	/^static constexpr VecH h3 = VecH(3);$/;"	m	namespace:regs
h30	external/asmjit/src/asmjit/arm/a64operand.h	/^static constexpr VecH h30 = VecH(30);$/;"	m	namespace:regs
h31	external/asmjit/src/asmjit/arm/a64operand.h	/^static constexpr VecH h31 = VecH(31);$/;"	m	namespace:regs
h4	external/asmjit/src/asmjit/arm/a64operand.h	/^static constexpr VecH h4 = VecH(4);$/;"	m	namespace:regs
h5	external/asmjit/src/asmjit/arm/a64operand.h	/^static constexpr VecH h5 = VecH(5);$/;"	m	namespace:regs
h6	external/asmjit/src/asmjit/arm/a64operand.h	/^static constexpr VecH h6 = VecH(6);$/;"	m	namespace:regs
h7	external/asmjit/src/asmjit/arm/a64operand.h	/^static constexpr VecH h7 = VecH(7);$/;"	m	namespace:regs
h8	external/asmjit/src/asmjit/arm/a64operand.h	/^static constexpr VecH h8 = VecH(8);$/;"	m	namespace:regs
h9	external/asmjit/src/asmjit/arm/a64operand.h	/^static constexpr VecH h9 = VecH(9);$/;"	m	namespace:regs
handleArgs	external/asmjit/test/asmjit_test_compiler.cpp	/^int TestApp::handleArgs(int argc, const char* const* argv) {$/;"	f	class:TestApp
handleError	external/asmjit/src/asmjit/core/errorhandler.cpp	/^void ErrorHandler::handleError(Error err, const char* message, BaseEmitter* origin) {$/;"	f	class:ErrorHandler
handleError	external/asmjit/test/asmjit_test_compiler.h	/^  virtual void handleError(asmjit::Error err, const char* message, asmjit::BaseEmitter* origin) {$/;"	f	class:SimpleErrorHandler
handleError	external/asmjit/test/asmjit_test_perf.h	/^  void handleError(asmjit::Error err, const char* message, asmjit::BaseEmitter* origin) {$/;"	f	class:asmjit_perf_utils::TestErrorHandler
handler	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^  static void ASMJIT_FASTCALL handler() { longjmp(globalJmpBuf, 1); }$/;"	f	class:X86Test_MiscUnfollow
hasArg	external/asmjit/test/cmdline.h	/^  bool hasArg(const char* key) const {$/;"	f	class:CmdLine
hasFlag	external/asmjit/src/asmjit/arm/a64instdb.h	/^  ASMJIT_INLINE_NODEBUG bool hasFlag(uint32_t flag) const { return (_flags & flag) != 0; }$/;"	f	struct:InstDB::InstInfo
hasReg	external/asmjit/tools/tablegen-x86.js	/^    var hasReg = false;$/;"	v
has_calls	src/codegen/qcg.h	/^    bool has_calls = false;$/;"	m	struct:dbt::qcg::MachineRegionInfo
head	src/codegen/jitabi.cpp	/^    u32 head = 0;$/;"	m	struct:dbt::jitabi::TraceRing	file:
head	src/ir/qir.h	/^    VOperand *head;$/;"	m	struct:dbt::qir::VOperandSpan
highVecUsed	external/asmjit/src/asmjit/x86/x86instapi.cpp	/^  uint32_t highVecUsed;$/;"	m	struct:RegAnalysis	file:
host_mmap	src/mmu.cpp	/^void *host_mmap(void *addr,$/;"	f	namespace:dbt
hwCap2Mapping	external/asmjit/src/asmjit/core/cpuinfo.cpp	/^static const HWCapMapping hwCap2Mapping[] = {$/;"	m	class:arm::AppleFamilyId	file:
hwCapBit	external/asmjit/src/asmjit/core/cpuinfo.cpp	/^  uint8_t hwCapBit;$/;"	m	struct:arm::AppleFamilyId::HWCapMapping	file:
hwCapMapping	external/asmjit/src/asmjit/core/cpuinfo.cpp	/^static const HWCapMapping hwCapMapping[] = {$/;"	m	class:arm::AppleFamilyId	file:
hwCapTags	external/asmjit/src/asmjit/core/cpuinfo.cpp	/^static const unsigned long hwCapTags[2] = { AT_HWCAP, AT_HWCAP2 };$/;"	m	class:arm::AppleFamilyId	file:
i	external/asmjit/db/x86.js	/^    var i;$/;"	v
i	external/asmjit/tools/tablegen-x86.js	/^    var i, j;$/;"	v
i	external/asmjit/tools/tablegen-x86.js	/^    var i;$/;"	v
i	external/asmjit/tools/tablegen.js	/^    var i, len;$/;"	v
i	src/ir/qir.h	/^    VOperand &i(u8 idx)$/;"	f	struct:dbt::qir::InstOperandAccessMixin
i16	src/util/common.h	/^typedef int16_t i16;$/;"	t
i32	src/util/common.h	/^typedef int32_t i32;$/;"	t
i64	src/util/common.h	/^typedef int64_t i64;$/;"	t
i8	src/util/common.h	/^typedef int8_t i8;$/;"	t
iEnd	external/asmjit/tools/tablegen.js	/^    var iEnd   = s.indexOf(end);$/;"	v
iSimdPair	external/asmjit/src/asmjit/arm/a64instdb.cpp	/^const ISimdPair iSimdPair[1] = {$/;"	m	namespace:InstDB::EncodingData	file:
iSimdSV	external/asmjit/src/asmjit/arm/a64instdb.cpp	/^const ISimdSV iSimdSV[7] = {$/;"	m	namespace:InstDB::EncodingData	file:
iSimdVV	external/asmjit/src/asmjit/arm/a64instdb.cpp	/^const ISimdVV iSimdVV[29] = {$/;"	m	namespace:InstDB::EncodingData	file:
iSimdVVV	external/asmjit/src/asmjit/arm/a64instdb.cpp	/^const ISimdVVV iSimdVVV[65] = {$/;"	m	namespace:InstDB::EncodingData	file:
iSimdVVVI	external/asmjit/src/asmjit/arm/a64instdb.cpp	/^const ISimdVVVI iSimdVVVI[2] = {$/;"	m	namespace:InstDB::EncodingData	file:
iSimdVVVV	external/asmjit/src/asmjit/arm/a64instdb.cpp	/^const ISimdVVVV iSimdVVVV[2] = {$/;"	m	namespace:InstDB::EncodingData	file:
iSimdVVVVx	external/asmjit/src/asmjit/arm/a64instdb.cpp	/^const ISimdVVVVx iSimdVVVVx[1] = {$/;"	m	namespace:InstDB::EncodingData	file:
iSimdVVVe	external/asmjit/src/asmjit/arm/a64instdb.cpp	/^const ISimdVVVe iSimdVVVe[25] = {$/;"	m	namespace:InstDB::EncodingData	file:
iSimdVVVx	external/asmjit/src/asmjit/arm/a64instdb.cpp	/^const ISimdVVVx iSimdVVVx[17] = {$/;"	m	namespace:InstDB::EncodingData	file:
iSimdVVx	external/asmjit/src/asmjit/arm/a64instdb.cpp	/^const ISimdVVx iSimdVVx[13] = {$/;"	m	namespace:InstDB::EncodingData	file:
iSimdWWV	external/asmjit/src/asmjit/arm/a64instdb.cpp	/^const ISimdWWV iSimdWWV[8] = {$/;"	m	namespace:InstDB::EncodingData	file:
id	external/asmjit/src/asmjit/core/func.h	/^    uint8_t id[kMaxRegArgsPerGroup];$/;"	m	union:CallConvId::CallConvStrategy::CallConvFlags::CallConv::RegOrder
id	external/asmjit/src/asmjit/core/radefs_p.h	/^  uint32_t id;$/;"	m	struct:RAStrategyType::RAStrategyFlags::LiveRegData
ids	external/asmjit/src/asmjit/arm/a64emithelper.cpp	/^    uint8_t ids[2];$/;"	m	struct:PrologEpilogInfo::RegPair	file:
ilist	src/ir/qir.h	/^    IList<Inst> ilist;$/;"	m	struct:dbt::qir::Block
imm	src/codegen/jitabi.h	/^        u32 imm : 32;$/;"	m	struct:dbt::jitabi::ppoint::BranchSlot::CallTab
imm	src/codegen/jitabi.h	/^        u32 imm : 32;$/;"	m	struct:dbt::jitabi::ppoint::BranchSlot::Jump32Rel
imm	src/codegen/jitabi.h	/^        u64 imm : 64;$/;"	m	struct:dbt::jitabi::ppoint::BranchSlot::Call64Abs
imm	src/codegen/jitabi.h	/^        u64 imm : 64;$/;"	m	struct:dbt::jitabi::ppoint::BranchSlot::Jump64Abs
imm64HasOneBitLess	external/asmjit/src/asmjit/arm/a64instdb_p.h	/^  uint32_t imm64HasOneBitLess : 1;$/;"	m	struct:InstDB::EncodingData::ISimdVVVI
immBits	external/asmjit/src/asmjit/arm/a64instdb_p.h	/^  uint16_t immBits;$/;"	m	struct:InstDB::EncodingData::BaseOpImm
immOffset	external/asmjit/src/asmjit/arm/a64instdb_p.h	/^  uint16_t immOffset;$/;"	m	struct:InstDB::EncodingData::BaseOpImm
immShift	external/asmjit/src/asmjit/arm/a64instdb_p.h	/^  uint32_t immShift : 4;$/;"	m	struct:InstDB::EncodingData::BaseRM_SImm10
immShift	external/asmjit/src/asmjit/arm/a64instdb_p.h	/^  uint32_t immShift : 4;$/;"	m	struct:InstDB::EncodingData::BaseRM_SImm9
immShift	external/asmjit/src/asmjit/arm/a64instdb_p.h	/^  uint32_t immShift : 4;$/;"	m	struct:InstDB::EncodingData::ISimdVVVI
immSize	external/asmjit/src/asmjit/arm/a64instdb_p.h	/^  uint32_t immSize : 4;$/;"	m	struct:InstDB::EncodingData::ISimdVVVI
immVerifyData	external/asmjit/src/asmjit/arm/a64instdb_p.h	/^  uint32_t immVerifyData : 14;$/;"	m	struct:InstDB::EncodingData::BaseAtDcIcTlbi
immVerifyMask	external/asmjit/src/asmjit/arm/a64instdb_p.h	/^  uint32_t immVerifyMask : 14;$/;"	m	struct:InstDB::EncodingData::BaseAtDcIcTlbi
immediateOp	external/asmjit/src/asmjit/arm/a64instdb_p.h	/^  uint32_t immediateOp : 22; \/\/ 22 bits used.$/;"	m	struct:InstDB::EncodingData::SimdShift
immediateOp	external/asmjit/src/asmjit/arm/a64instdb_p.h	/^  uint32_t immediateOp: 10; \/\/ sf|........|N|ImmR:6|ImmS:6|Rn|11111|$/;"	m	struct:InstDB::EncodingData::BaseTst
immediateOp	external/asmjit/src/asmjit/arm/a64instdb_p.h	/^  uint32_t immediateOp: 10; \/\/ sf|........|N|ImmR:6|ImmS:6|Rn|Rd|$/;"	m	struct:InstDB::EncodingData::BaseLogical
immediateOp	external/asmjit/src/asmjit/arm/a64instdb_p.h	/^  uint32_t immediateOp: 10; \/\/ sf|.......|Sh|    Imm:12   |Rn|11111|$/;"	m	struct:InstDB::EncodingData::BaseCmpCmn
immediateOp	external/asmjit/src/asmjit/arm/a64instdb_p.h	/^  uint32_t immediateOp: 10; \/\/ sf|.......|Sh|    Imm:12   |Rn|Rd|$/;"	m	struct:InstDB::EncodingData::BaseAddSub
immediateOp	external/asmjit/src/asmjit/arm/a64instdb_p.h	/^  uint32_t immediateOp;  \/\/ 22 bits used.$/;"	m	struct:InstDB::EncodingData::SimdBicOrr
imul	external/asmjit/src/asmjit/x86/x86emitter.h	/^  inline Error imul(const Gp& o0, const Imm& o1) { return _emitter()->_emitI(Inst::kIdImul, o0, o0, o1); }$/;"	f	struct:EmitterExplicitT
imul	external/asmjit/tools/tablegen-x86.js	/^      "imul"      : "Imul",$/;"	p	class:rwCategoryByName
indent	external/asmjit/tools/enumgen.js	/^function indent(s, indentation) {$/;"	f
index	external/asmjit/db/x86.js	/^          map[index] = { type: type, kind: kind, index: index };$/;"	p	class:map
index	external/asmjit/db/x86.js	/^        map[name] = { type: type, kind: kind, index: i };$/;"	p	class:map
index	external/asmjit/src/asmjit/x86/x86formatter.cpp	/^    uint8_t index;$/;"	m	struct:RegFormatInfo::TypeEntry	file:
indexAltOpcode	external/asmjit/tools/tablegen-x86.js	/^    function indexAltOpcode(opcode) {$/;"	f
indexKind	external/asmjit/tools/tablegen-x86.js	/^    var indexKind = "";$/;"	v
indexMainOpcode	external/asmjit/tools/tablegen-x86.js	/^    function indexMainOpcode(opcode) {$/;"	f
indexSignatures	external/asmjit/tools/tablegen-x86.js	/^    function indexSignatures(signatures) {$/;"	f
indexTypeFromSize	external/asmjit/tools/enumgen.js	/^function indexTypeFromSize(size) {$/;"	f
init	src/codegen/arch_traits.cpp	/^void ArchTraits::init()$/;"	f	class:dbt::qcg::ArchTraits
inputs	src/ir/qir.h	/^    VOperandSpan inputs()$/;"	f	struct:dbt::qir::InstOperandAccessMixin
insert	src/util/ilist.h	/^    void insert(iterator it, pointer n)$/;"	f	struct:dbt::IList
insert	src/util/ilist.h	/^    void insert(iterator it, reference n) { insert(it, &n); }$/;"	f	struct:dbt::IList
insertBefore	src/util/ilist.h	/^    static void insertBefore(IListNodeBase *next, IListNodeBase *node)$/;"	f	struct:dbt::IListBase
insn	src/guest/rv32_decode.h	/^namespace dbt::rv32::insn$/;"	n	class:dbt::rv32
insn	src/guest/rv32_insn.h	/^namespace dbt::rv32::insn$/;"	n	class:dbt::rv32
instId	external/asmjit/src/asmjit/core/builder.h	/^  ASMJIT_API Error newInstNode(InstNode** ASMJIT_NONNULL(out), InstId instId, InstOptions instOptions, uint32_t opCount);$/;"	m	class:NodeType::NodeFlags::SentinelType::BaseBuilder
instId	external/asmjit/src/asmjit/core/compiler.h	/^  ASMJIT_API Error addInvokeNode(InvokeNode** ASMJIT_NONNULL(out), InstId instId, const Operand_& o0, const FuncSignature& signature);$/;"	m	class:BaseCompiler
instId	external/asmjit/src/asmjit/core/compiler.h	/^  ASMJIT_API Error newInvokeNode(InvokeNode** ASMJIT_NONNULL(out), InstId instId, const Operand_& o0, const FuncSignature& signature);$/;"	m	class:BaseCompiler
instId	external/asmjit/src/asmjit/core/compiler.h	/^  ASMJIT_API Error newJumpNode(JumpNode** ASMJIT_NONNULL(out), InstId instId, InstOptions instOptions, const Operand_& o0, JumpAnnotation* annotation);$/;"	m	class:BaseCompiler
instId	external/asmjit/src/asmjit/core/compiler.h	/^  inline InvokeNode(BaseBuilder* ASMJIT_NONNULL(cb), InstId instId, InstOptions options) noexcept$/;"	m	class:InvokeNode
instId	external/asmjit/src/asmjit/core/compiler.h	/^  inline JumpNode(BaseCompiler* ASMJIT_NONNULL(cc), InstId instId, InstOptions options, uint32_t opCount, JumpAnnotation* annotation) noexcept$/;"	m	class:JumpNode
instNameIndex	external/asmjit/src/asmjit/arm/a64instdb.cpp	/^const InstDB::InstNameIndex InstDB::instNameIndex[26] = {$/;"	m	class:InstDB	file:
instNameIndex	external/asmjit/src/asmjit/x86/x86instdb.cpp	/^const InstDB::InstNameIndex InstDB::instNameIndex[26] = {$/;"	m	class:InstDB	file:
instOptions	external/asmjit/src/asmjit/core/builder.h	/^  ASMJIT_API Error newInstNode(InstNode** ASMJIT_NONNULL(out), InstId instId, InstOptions instOptions, uint32_t opCount);$/;"	m	class:NodeType::NodeFlags::SentinelType::BaseBuilder
instOptions	external/asmjit/src/asmjit/core/compiler.h	/^  ASMJIT_API Error newJumpNode(JumpNode** ASMJIT_NONNULL(out), InstId instId, InstOptions instOptions, const Operand_& o0, JumpAnnotation* annotation);$/;"	m	class:BaseCompiler
instRWInfoData	external/asmjit/src/asmjit/arm/a64instapi.cpp	/^static const InstRWInfoData instRWInfoData[] = {$/;"	v	file:
insts	external/asmjit/db/base.js	/^      insts : 0,                         \/\/ Number of all instructions.$/;"	p	class:stats
inverted	external/asmjit/src/asmjit/arm/a64instdb_p.h	/^  uint32_t inverted : 1;$/;"	m	struct:InstDB::EncodingData::SimdMoviMvni
invertedImm	external/asmjit/src/asmjit/arm/a64instdb_p.h	/^  uint32_t invertedImm : 1;$/;"	m	struct:InstDB::EncodingData::SimdShift
invoke	external/asmjit/src/asmjit/arm/a64compiler.h	/^  ASMJIT_INLINE_NODEBUG Error invoke(InvokeNode** out, const Gp& target, const FuncSignature& signature) { return invoke_(out, target, signature); }$/;"	f	class:Compiler
invoke	external/asmjit/src/asmjit/arm/a64compiler.h	/^  ASMJIT_INLINE_NODEBUG Error invoke(InvokeNode** out, const Imm& target, const FuncSignature& signature) { return invoke_(out, target, signature); }$/;"	f	class:Compiler
invoke	external/asmjit/src/asmjit/arm/a64compiler.h	/^  ASMJIT_INLINE_NODEBUG Error invoke(InvokeNode** out, const Label& target, const FuncSignature& signature) { return invoke_(out, target, signature); }$/;"	f	class:Compiler
invoke	external/asmjit/src/asmjit/arm/a64compiler.h	/^  ASMJIT_INLINE_NODEBUG Error invoke(InvokeNode** out, const Mem& target, const FuncSignature& signature) { return invoke_(out, target, signature); }$/;"	f	class:Compiler
invoke	external/asmjit/src/asmjit/arm/a64compiler.h	/^  ASMJIT_INLINE_NODEBUG Error invoke(InvokeNode** out, uint64_t target, const FuncSignature& signature) { return invoke_(out, Imm(int64_t(target)), signature); }$/;"	f	class:Compiler
invoke	external/asmjit/src/asmjit/x86/x86compiler.h	/^  ASMJIT_INLINE_NODEBUG Error invoke(InvokeNode** out, const Gp& target, const FuncSignature& signature) { return invoke_(out, target, signature); }$/;"	f	class:Compiler
invoke	external/asmjit/src/asmjit/x86/x86compiler.h	/^  ASMJIT_INLINE_NODEBUG Error invoke(InvokeNode** out, const Imm& target, const FuncSignature& signature) { return invoke_(out, target, signature); }$/;"	f	class:Compiler
invoke	external/asmjit/src/asmjit/x86/x86compiler.h	/^  ASMJIT_INLINE_NODEBUG Error invoke(InvokeNode** out, const Label& target, const FuncSignature& signature) { return invoke_(out, target, signature); }$/;"	f	class:Compiler
invoke	external/asmjit/src/asmjit/x86/x86compiler.h	/^  ASMJIT_INLINE_NODEBUG Error invoke(InvokeNode** out, const Mem& target, const FuncSignature& signature) { return invoke_(out, target, signature); }$/;"	f	class:Compiler
invoke	external/asmjit/src/asmjit/x86/x86compiler.h	/^  ASMJIT_INLINE_NODEBUG Error invoke(InvokeNode** out, uint64_t target, const FuncSignature& signature) { return invoke_(out, Imm(int64_t(target)), signature); }$/;"	f	class:Compiler
invoke_	external/asmjit/src/asmjit/arm/a64compiler.h	/^  ASMJIT_INLINE_NODEBUG Error invoke_(InvokeNode** out, const Operand_& target, const FuncSignature& signature) {$/;"	f	class:Compiler
invoke_	external/asmjit/src/asmjit/x86/x86compiler.h	/^  ASMJIT_INLINE_NODEBUG Error invoke_(InvokeNode** out, const Operand_& target, const FuncSignature& signature) {$/;"	f	class:Compiler
ip2bb	src/guest/rv32_qir.h	/^    std::map<u32, qir::Block *> ip2bb;$/;"	m	struct:dbt::qir::rv32::RV32Translator
iprange	src/ir/compile.h	/^    IpRangesSet iprange;$/;"	m	struct:dbt::qir::CompilerJob
iptr	src/util/common.h	/^typedef intptr_t iptr;$/;"	t
isCommutative	external/asmjit/db/base.js	/^  isCommutative: function(s) { return s.length > 0 && s.charAt(0) === Symbols.Commutative; },$/;"	m	class:const
isCompatible	external/asmjit/tools/tablegen-x86.js	/^    function isCompatible(vexInst, evexInst) {$/;"	f
isConsecutiveMask	external/asmjit/src/asmjit/core/support.h	/^static ASMJIT_INLINE_NODEBUG constexpr bool isConsecutiveMask(const T& value) {$/;"	f	namespace:Support::Internal
isImplicit	external/asmjit/db/base.js	/^  isImplicit: function(s) { return s.startsWith("<") && s.endsWith(">"); },$/;"	m	class:const
isLsbMask	external/asmjit/src/asmjit/core/support.h	/^static ASMJIT_INLINE_NODEBUG constexpr bool isLsbMask(const T& value) {$/;"	f	namespace:Support::Internal
isOptional	external/asmjit/db/base.js	/^  isOptional: function(s) { return s.startsWith("{") && s.endsWith("}"); },$/;"	m	class:const
isSigned	external/asmjit/src/asmjit/arm/a64instdb_p.h	/^  uint32_t isSigned : 1;$/;"	m	struct:InstDB::EncodingData::SimdSmovUmov
isVecPrefix	external/asmjit/tools/tablegen-x86.js	/^    function isVecPrefix(s) {$/;"	f
is_leaf	src/codegen/emit.h	/^    bool is_leaf;$/;"	m	struct:dbt::qcg::QEmit
it	src/ir/qir_builder.h	/^    IListIterator<Inst> it;$/;"	m	struct:dbt::qir::Builder
itemCount	external/asmjit/src/asmjit/core/builder.h	/^  ASMJIT_API Error newEmbedDataNode(EmbedDataNode** ASMJIT_NONNULL(out), TypeId typeId, const void* data, size_t itemCount, size_t repeatCount = 1);$/;"	m	class:NodeType::NodeFlags::SentinelType::BaseBuilder
iterator	external/asmjit/src/asmjit/core/support.h	/^  typedef pointer iterator;$/;"	t	struct:Support::Internal::SortOrder::Array
iterator	external/asmjit/src/asmjit/core/zonevector.h	/^  typedef T* iterator;$/;"	t	class:ZoneVector
jitabi	src/codegen/jitabi.cpp	/^namespace dbt::jitabi$/;"	n	class:dbt	file:
jitabi	src/codegen/jitabi.h	/^namespace dbt::jitabi$/;"	n	class:dbt
jmp	external/asmjit/src/asmjit/x86/x86compiler.h	/^  ASMJIT_INLINE_NODEBUG Error jmp(const BaseMem& target, JumpAnnotation* annotation) { return emitAnnotatedJump(Inst::kIdJmp, target, annotation); }$/;"	f	class:Compiler
jmp	external/asmjit/src/asmjit/x86/x86compiler.h	/^  ASMJIT_INLINE_NODEBUG Error jmp(const BaseReg& target, JumpAnnotation* annotation) { return emitAnnotatedJump(Inst::kIdJmp, target, annotation); }$/;"	f	class:Compiler
joinOpcodeComponents	external/asmjit/tools/tablegen-x86.js	/^    function joinOpcodeComponents(components) {$/;"	f
k	external/asmjit/tools/tablegen-x86.js	/^    var k;$/;"	v
k	external/asmjit/tools/tablegen.js	/^    var k, kp;$/;"	v
k0	external/asmjit/src/asmjit/core/operand.h	/^  k0 = 0,$/;"	m	class:OperandType::RegType::RegGroup
k0	external/asmjit/src/asmjit/x86/x86globals.h	/^  k0             = 0x00u,       \/\/!< 0 value.$/;"	m	class:CondCode::FpuStatusWord::FpuControlWord::CmpImm::PCmpStrImm::RoundImm::VCmpImm::VFixupImm::VFPClassImm::VGetMantImm::VPCmpImm::VPComImm::VRangeImm::VReduceImm::TLogImm
k0	external/asmjit/src/asmjit/x86/x86opcode_p.h	/^    k0      = 0,                           \/\/ '__' (no prefix, used internally).$/;"	m	struct:Opcode	typeref:enum:Opcode::
k0	external/asmjit/src/asmjit/x86/x86operand.h	/^static constexpr KReg k0 = KReg(0);$/;"	m	namespace:regs
k00	external/asmjit/src/asmjit/arm/a64assembler.cpp	/^    k00 = uint8_t(0 << kSizeShift),$/;"	m	struct:SizeOp	typeref:enum:SizeOp::	file:
k000000	external/asmjit/src/asmjit/x86/x86opcode_p.h	/^    k000000 = kPP_00 | kMM_00,             \/\/ '__' (no prefix, to be the same width as others).$/;"	m	struct:Opcode	typeref:enum:Opcode::
k000F00	external/asmjit/src/asmjit/x86/x86opcode_p.h	/^    k000F00 = kPP_00 | kMM_0F,             \/\/ '0F'$/;"	m	struct:Opcode	typeref:enum:Opcode::
k000F01	external/asmjit/src/asmjit/x86/x86opcode_p.h	/^    k000F01 = kPP_00 | kMM_0F01,           \/\/ '0F01'$/;"	m	struct:Opcode	typeref:enum:Opcode::
k000F0F	external/asmjit/src/asmjit/x86/x86opcode_p.h	/^    k000F0F = kPP_00 | kMM_0F,             \/\/ '0F0F' - 3DNOW, equal to 0x0F, must have special encoding to take effect.$/;"	m	struct:Opcode	typeref:enum:Opcode::
k000F38	external/asmjit/src/asmjit/x86/x86opcode_p.h	/^    k000F38 = kPP_00 | kMM_0F38,           \/\/ 'NP.0F38'$/;"	m	struct:Opcode	typeref:enum:Opcode::
k000F3A	external/asmjit/src/asmjit/x86/x86opcode_p.h	/^    k000F3A = kPP_00 | kMM_0F3A,           \/\/ 'NP.0F3A'$/;"	m	struct:Opcode	typeref:enum:Opcode::
k00MAP5	external/asmjit/src/asmjit/x86/x86opcode_p.h	/^    k00MAP5 = kPP_00 | kMM_MAP5,           \/\/ 'NP.MAP5'$/;"	m	struct:Opcode	typeref:enum:Opcode::
k00MAP6	external/asmjit/src/asmjit/x86/x86opcode_p.h	/^    k00MAP6 = kPP_00 | kMM_MAP6,           \/\/ 'NP.MAP5'$/;"	m	struct:Opcode	typeref:enum:Opcode::
k00Q	external/asmjit/src/asmjit/arm/a64assembler.cpp	/^    k00Q = k00 | kQ,$/;"	m	struct:SizeOp	typeref:enum:SizeOp::	file:
k00S	external/asmjit/src/asmjit/arm/a64assembler.cpp	/^    k00S = k00 | kS,$/;"	m	struct:SizeOp	typeref:enum:SizeOp::	file:
k01	external/asmjit/src/asmjit/arm/a64assembler.cpp	/^    k01 = uint8_t(1 << kSizeShift),$/;"	m	struct:SizeOp	typeref:enum:SizeOp::	file:
k01Q	external/asmjit/src/asmjit/arm/a64assembler.cpp	/^    k01Q = k01 | kQ,$/;"	m	struct:SizeOp	typeref:enum:SizeOp::	file:
k01S	external/asmjit/src/asmjit/arm/a64assembler.cpp	/^    k01S = k01 | kS,$/;"	m	struct:SizeOp	typeref:enum:SizeOp::	file:
k1	external/asmjit/src/asmjit/x86/x86globals.h	/^  k1             = 0xFFu,       \/\/!< 1 value.$/;"	m	class:CondCode::FpuStatusWord::FpuControlWord::CmpImm::PCmpStrImm::RoundImm::VCmpImm::VFixupImm::VFPClassImm::VGetMantImm::VPCmpImm::VPComImm::VRangeImm::VReduceImm::TLogImm
k1	external/asmjit/src/asmjit/x86/x86operand.h	/^static constexpr KReg k1 = KReg(1);$/;"	m	namespace:regs
k10	external/asmjit/src/asmjit/arm/a64assembler.cpp	/^    k10 = uint8_t(2 << kSizeShift),$/;"	m	struct:SizeOp	typeref:enum:SizeOp::	file:
k10Q	external/asmjit/src/asmjit/arm/a64assembler.cpp	/^    k10Q = k10 | kQ,$/;"	m	struct:SizeOp	typeref:enum:SizeOp::	file:
k10S	external/asmjit/src/asmjit/arm/a64assembler.cpp	/^    k10S = k10 | kS,$/;"	m	struct:SizeOp	typeref:enum:SizeOp::	file:
k11	external/asmjit/src/asmjit/arm/a64assembler.cpp	/^    k11 = uint8_t(3 << kSizeShift),$/;"	m	struct:SizeOp	typeref:enum:SizeOp::	file:
k11Q	external/asmjit/src/asmjit/arm/a64assembler.cpp	/^    k11Q = k11 | kQ,$/;"	m	struct:SizeOp	typeref:enum:SizeOp::	file:
k11S	external/asmjit/src/asmjit/arm/a64assembler.cpp	/^    k11S = k11 | kS,$/;"	m	struct:SizeOp	typeref:enum:SizeOp::	file:
k1Div2To1	external/asmjit/src/asmjit/x86/x86globals.h	/^  k1Div2To1      = 0x02u,       \/\/!< Normalization interval is [0.5, 1)$/;"	m	class:CondCode::FpuStatusWord::FpuControlWord::CmpImm::PCmpStrImm::RoundImm::VCmpImm::VFixupImm::VFPClassImm::VGetMantImm
k1Div2To2	external/asmjit/src/asmjit/x86/x86globals.h	/^  k1Div2To2      = 0x01u,       \/\/!< Normalization interval is [0.5, 2)$/;"	m	class:CondCode::FpuStatusWord::FpuControlWord::CmpImm::PCmpStrImm::RoundImm::VCmpImm::VFixupImm::VFPClassImm::VGetMantImm
k1To16	external/asmjit/src/asmjit/x86/x86operand.h	/^    k1To16 = 4,$/;"	m	class:Mem::AddrType::Broadcast
k1To2	external/asmjit/src/asmjit/x86/x86globals.h	/^  k1To2          = 0x00u,       \/\/!< Normalization interval is [1, 2)$/;"	m	class:CondCode::FpuStatusWord::FpuControlWord::CmpImm::PCmpStrImm::RoundImm::VCmpImm::VFixupImm::VFPClassImm::VGetMantImm
k1To2	external/asmjit/src/asmjit/x86/x86operand.h	/^    k1To2 = 1,$/;"	m	class:Mem::AddrType::Broadcast
k1To32	external/asmjit/src/asmjit/x86/x86operand.h	/^    k1To32 = 5,$/;"	m	class:Mem::AddrType::Broadcast
k1To4	external/asmjit/src/asmjit/x86/x86operand.h	/^    k1To4 = 2,$/;"	m	class:Mem::AddrType::Broadcast
k1To64	external/asmjit/src/asmjit/x86/x86operand.h	/^    k1To64 = 6,$/;"	m	class:Mem::AddrType::Broadcast
k1To8	external/asmjit/src/asmjit/x86/x86operand.h	/^    k1To8 = 3,$/;"	m	class:Mem::AddrType::Broadcast
k2	external/asmjit/src/asmjit/x86/x86operand.h	/^static constexpr KReg k2 = KReg(2);$/;"	m	namespace:regs
k3	external/asmjit/src/asmjit/x86/x86operand.h	/^static constexpr KReg k3 = KReg(3);$/;"	m	namespace:regs
k32BitMask	external/asmjit/src/asmjit/core/archtraits.h	/^  k32BitMask = 0x01,$/;"	m	class:Arch
k3DNOW	external/asmjit/src/asmjit/core/cpuinfo.h	/^      k3DNOW,                    \/\/!< CPU has 3DNOW            (3DNOW base instructions) {AMD} (deprecated).$/;"	m	struct:CpuFeatures::X86	typeref:enum:CpuFeatures::X86::
k3DNOW2	external/asmjit/src/asmjit/core/cpuinfo.h	/^      k3DNOW2,                   \/\/!< CPU has 3DNOW2           (enhanced 3DNOW) {AMD} (deprecated).$/;"	m	struct:CpuFeatures::X86	typeref:enum:CpuFeatures::X86::
k3Div4To3Div2	external/asmjit/src/asmjit/x86/x86globals.h	/^  k3Div4To3Div2  = 0x03u,       \/\/!< Normalization interval is [3\/4, 3\/2)$/;"	m	class:CondCode::FpuStatusWord::FpuControlWord::CmpImm::PCmpStrImm::RoundImm::VCmpImm::VFixupImm::VFPClassImm::VGetMantImm
k4	external/asmjit/src/asmjit/x86/x86operand.h	/^static constexpr KReg k4 = KReg(4);$/;"	m	namespace:regs
k5	external/asmjit/src/asmjit/x86/x86operand.h	/^static constexpr KReg k5 = KReg(5);$/;"	m	namespace:regs
k6	external/asmjit/src/asmjit/x86/x86operand.h	/^static constexpr KReg k6 = KReg(6);$/;"	m	namespace:regs
k660000	external/asmjit/src/asmjit/x86/x86opcode_p.h	/^    k660000 = kPP_66 | kMM_00,             \/\/ '66'$/;"	m	struct:Opcode	typeref:enum:Opcode::
k660F00	external/asmjit/src/asmjit/x86/x86opcode_p.h	/^    k660F00 = kPP_66 | kMM_0F,             \/\/ '66.0F'$/;"	m	struct:Opcode	typeref:enum:Opcode::
k660F01	external/asmjit/src/asmjit/x86/x86opcode_p.h	/^    k660F01 = kPP_66 | kMM_0F01,           \/\/ '66.0F01'$/;"	m	struct:Opcode	typeref:enum:Opcode::
k660F38	external/asmjit/src/asmjit/x86/x86opcode_p.h	/^    k660F38 = kPP_66 | kMM_0F38,           \/\/ '66.0F38'$/;"	m	struct:Opcode	typeref:enum:Opcode::
k660F3A	external/asmjit/src/asmjit/x86/x86opcode_p.h	/^    k660F3A = kPP_66 | kMM_0F3A,           \/\/ '66.0F3A'$/;"	m	struct:Opcode	typeref:enum:Opcode::
k66MAP5	external/asmjit/src/asmjit/x86/x86opcode_p.h	/^    k66MAP5 = kPP_66 | kMM_MAP5,           \/\/ '66.MAP5'$/;"	m	struct:Opcode	typeref:enum:Opcode::
k66MAP6	external/asmjit/src/asmjit/x86/x86opcode_p.h	/^    k66MAP6 = kPP_66 | kMM_MAP6,           \/\/ '66.MAP5'$/;"	m	struct:Opcode	typeref:enum:Opcode::
k67H	external/asmjit/src/asmjit/x86/x86assembler.cpp	/^    k67H   = (B == uint32_t(RegType::kX86_Gpw)  && I == uint32_t(RegType::kNone)   ) ? kX86MemInfo_67H_X86   :$/;"	m	struct:X86MemInfo_T	typeref:enum:X86MemInfo_T::	file:
k7	external/asmjit/src/asmjit/x86/x86operand.h	/^static constexpr KReg k7 = KReg(7);$/;"	m	namespace:regs
kA	external/asmjit/src/asmjit/x86/x86globals.h	/^  kA             = 0x07u,       \/\/!< CF==0 & ZF==0  (unsigned > )$/;"	m	class:CondCode
kA	external/asmjit/src/asmjit/x86/x86globals.h	/^  kA             = 0xF0u,       \/\/!< A value.$/;"	m	class:CondCode::FpuStatusWord::FpuControlWord::CmpImm::PCmpStrImm::RoundImm::VCmpImm::VFixupImm::VFPClassImm::VGetMantImm::VPCmpImm::VPComImm::VRangeImm::VReduceImm::TLogImm
kA32_DT	external/asmjit/src/asmjit/core/inst.h	/^  kA32_DT   = 0x000F0000u,$/;"	m	class:InstIdParts
kA32_DT2	external/asmjit/src/asmjit/core/inst.h	/^  kA32_DT2  = 0x00F00000u,$/;"	m	class:InstIdParts
kAA64ISAR0	external/asmjit/src/asmjit/core/cpuinfo.cpp	/^  kAA64ISAR0 = 2,$/;"	m	class:arm::AppleFamilyId::OpenBSDAArch64CPUID	file:
kAA64ISAR1	external/asmjit/src/asmjit/core/cpuinfo.cpp	/^  kAA64ISAR1 = 3,$/;"	m	class:arm::AppleFamilyId::OpenBSDAArch64CPUID	file:
kAA64ISAR2	external/asmjit/src/asmjit/core/cpuinfo.cpp	/^  kAA64ISAR2 = 4,$/;"	m	class:arm::AppleFamilyId::OpenBSDAArch64CPUID	file:
kAA64MMFR0	external/asmjit/src/asmjit/core/cpuinfo.cpp	/^  kAA64MMFR0 = 5,$/;"	m	class:arm::AppleFamilyId::OpenBSDAArch64CPUID	file:
kAA64MMFR1	external/asmjit/src/asmjit/core/cpuinfo.cpp	/^  kAA64MMFR1 = 6,$/;"	m	class:arm::AppleFamilyId::OpenBSDAArch64CPUID	file:
kAA64MMFR2	external/asmjit/src/asmjit/core/cpuinfo.cpp	/^  kAA64MMFR2 = 7,$/;"	m	class:arm::AppleFamilyId::OpenBSDAArch64CPUID	file:
kAA64PFR0	external/asmjit/src/asmjit/core/cpuinfo.cpp	/^  kAA64PFR0 = 8,$/;"	m	class:arm::AppleFamilyId::OpenBSDAArch64CPUID	file:
kAA64PFR1	external/asmjit/src/asmjit/core/cpuinfo.cpp	/^  kAA64PFR1 = 9,$/;"	m	class:arm::AppleFamilyId::OpenBSDAArch64CPUID	file:
kAA64SMFR0	external/asmjit/src/asmjit/core/cpuinfo.cpp	/^  kAA64SMFR0 = 10,$/;"	m	class:arm::AppleFamilyId::OpenBSDAArch64CPUID	file:
kAA64ZFR0	external/asmjit/src/asmjit/core/cpuinfo.cpp	/^  kAA64ZFR0 = 11$/;"	m	class:arm::AppleFamilyId::OpenBSDAArch64CPUID	file:
kAArch64	external/asmjit/src/asmjit/core/archtraits.h	/^  kAArch64 = 6,$/;"	m	class:Arch
kAArch64_ADR	external/asmjit/src/asmjit/core/codeholder.h	/^  kAArch64_ADR,$/;"	m	class:ExpressionOpType::ExpressionValueType::SectionFlags::CopySectionFlags::OffsetType
kAArch64_ADRP	external/asmjit/src/asmjit/core/codeholder.h	/^  kAArch64_ADRP,$/;"	m	class:ExpressionOpType::ExpressionValueType::SectionFlags::CopySectionFlags::OffsetType
kAArch64_BE	external/asmjit/src/asmjit/core/archtraits.h	/^  kAArch64_BE = 12,$/;"	m	class:Arch
kAB	external/asmjit/src/asmjit/x86/x86globals.h	/^  kAB            = kA & kB,     \/\/!< `A & B` expression.$/;"	m	class:CondCode::FpuStatusWord::FpuControlWord::CmpImm::PCmpStrImm::RoundImm::VCmpImm::VFixupImm::VFPClassImm::VGetMantImm::VPCmpImm::VPComImm::VRangeImm::VReduceImm::TLogImm
kABC	external/asmjit/src/asmjit/x86/x86globals.h	/^  kABC           = kAB & kC,    \/\/!< `A & B & C` expression.$/;"	m	class:CondCode::FpuStatusWord::FpuControlWord::CmpImm::PCmpStrImm::RoundImm::VCmpImm::VFixupImm::VFPClassImm::VGetMantImm::VPCmpImm::VPComImm::VRangeImm::VReduceImm::TLogImm
kAC	external/asmjit/src/asmjit/x86/x86globals.h	/^  kAC            = kA & kC,     \/\/!< `A & C` expression.$/;"	m	class:CondCode::FpuStatusWord::FpuControlWord::CmpImm::PCmpStrImm::RoundImm::VCmpImm::VFixupImm::VFPClassImm::VGetMantImm::VPCmpImm::VPComImm::VRangeImm::VReduceImm::TLogImm
kADX	external/asmjit/src/asmjit/core/cpuinfo.h	/^      kADX,                      \/\/!< CPU has ADX              (multi-precision add-carry instruction extensions).$/;"	m	struct:CpuFeatures::X86	typeref:enum:CpuFeatures::X86::
kAE	external/asmjit/src/asmjit/x86/x86globals.h	/^  kAE            = 0x03u,       \/\/!< CF==0          (unsigned >=)$/;"	m	class:CondCode
kAES	external/asmjit/src/asmjit/core/cpuinfo.h	/^      kAES,                      \/\/!< CPU has AES          (ASIMD AES instructions).$/;"	m	struct:CpuFeatures::ARM	typeref:enum:CpuFeatures::ARM::
kAESNI	external/asmjit/src/asmjit/core/cpuinfo.h	/^      kAESNI,                    \/\/!< CPU has AESNI            (AES encode\/decode instructions).$/;"	m	struct:CpuFeatures::X86	typeref:enum:CpuFeatures::X86::
kAFP	external/asmjit/src/asmjit/core/cpuinfo.h	/^      kAFP,                      \/\/!< CPU has AFP          (alternate floating-point behavior) {A64}.$/;"	m	struct:CpuFeatures::ARM	typeref:enum:CpuFeatures::ARM::
kAL	external/asmjit/src/asmjit/core/archcommons.h	/^  kAL             = 0x00u,      \/\/!< (no condition code) (always)$/;"	m	class:CondCode
kALTMOVCR8	external/asmjit/src/asmjit/core/cpuinfo.h	/^      kALTMOVCR8,                \/\/!< CPU has LOCK MOV R<->CR0 (supports `MOV R<->CR8` via `LOCK MOV R<->CR0` in 32-bit mode) {AMD}.$/;"	m	struct:CpuFeatures::X86	typeref:enum:CpuFeatures::X86::
kAMX_BF16	external/asmjit/src/asmjit/core/cpuinfo.h	/^      kAMX_BF16,                 \/\/!< CPU has AMX_BF16         (AMX-BF16 instructions).$/;"	m	struct:CpuFeatures::X86	typeref:enum:CpuFeatures::X86::
kAMX_COMPLEX	external/asmjit/src/asmjit/core/cpuinfo.h	/^      kAMX_COMPLEX,              \/\/!< CPU has AMX_COMPLEX      (AMX-COMPLEX instructions).$/;"	m	struct:CpuFeatures::X86	typeref:enum:CpuFeatures::X86::
kAMX_FP16	external/asmjit/src/asmjit/core/cpuinfo.h	/^      kAMX_FP16,                 \/\/!< CPU has AMX_FP16         (AMX-FP16 instructions).$/;"	m	struct:CpuFeatures::X86	typeref:enum:CpuFeatures::X86::
kAMX_INT8	external/asmjit/src/asmjit/core/cpuinfo.h	/^      kAMX_INT8,                 \/\/!< CPU has AMX_INT8         (AMX-INT8 instructions).$/;"	m	struct:CpuFeatures::X86	typeref:enum:CpuFeatures::X86::
kAMX_TILE	external/asmjit/src/asmjit/core/cpuinfo.h	/^      kAMX_TILE,                 \/\/!< CPU has AMX_TILE         (advanced matrix extensions).$/;"	m	struct:CpuFeatures::X86	typeref:enum:CpuFeatures::X86::
kAPX_F	external/asmjit/src/asmjit/core/cpuinfo.h	/^      kAPX_F,                    \/\/!< CPU has APX_F            (advanced performance extensions - 32 GP registers, REX2 prefix, ...) {X86_64}.$/;"	m	struct:CpuFeatures::X86	typeref:enum:CpuFeatures::X86::
kARM	external/asmjit/src/asmjit/core/archtraits.h	/^  kARM = 5,$/;"	m	class:Arch
kARM_BE	external/asmjit/src/asmjit/core/archtraits.h	/^  kARM_BE = 11,$/;"	m	class:Arch
kARM_Cond	external/asmjit/src/asmjit/core/inst.h	/^  kARM_Cond = 0x78000000u$/;"	m	class:InstIdParts
kARM_GpW	external/asmjit/src/asmjit/core/operand.h	/^  kARM_GpW = kGp32,$/;"	m	class:OperandType::RegType
kARM_GpX	external/asmjit/src/asmjit/core/operand.h	/^  kARM_GpX = kGp64,$/;"	m	class:OperandType::RegType
kARM_PC	external/asmjit/src/asmjit/core/operand.h	/^  kARM_PC = kPC,$/;"	m	class:OperandType::RegType
kARM_VecB	external/asmjit/src/asmjit/core/operand.h	/^  kARM_VecB = kVec8,$/;"	m	class:OperandType::RegType
kARM_VecD	external/asmjit/src/asmjit/core/operand.h	/^  kARM_VecD = kVec64,$/;"	m	class:OperandType::RegType
kARM_VecH	external/asmjit/src/asmjit/core/operand.h	/^  kARM_VecH = kVec16,$/;"	m	class:OperandType::RegType
kARM_VecS	external/asmjit/src/asmjit/core/operand.h	/^  kARM_VecS = kVec32,$/;"	m	class:OperandType::RegType
kARM_VecV	external/asmjit/src/asmjit/core/operand.h	/^  kARM_VecV = kVec128,$/;"	m	class:OperandType::RegType
kARMv6	external/asmjit/src/asmjit/core/cpuinfo.h	/^      kARMv6,                    \/\/!< CPU is at least ARMv6 {A32}.$/;"	m	struct:CpuFeatures::ARM	typeref:enum:CpuFeatures::ARM::
kARMv7	external/asmjit/src/asmjit/core/cpuinfo.h	/^      kARMv7,                    \/\/!< CPU is at least ARMv7 {A32}.$/;"	m	struct:CpuFeatures::ARM	typeref:enum:CpuFeatures::ARM::
kARMv8a	external/asmjit/src/asmjit/core/cpuinfo.h	/^      kARMv8a,                   \/\/!< CPU is at least ARMv8A.$/;"	m	struct:CpuFeatures::ARM	typeref:enum:CpuFeatures::ARM::
kASIMD	external/asmjit/src/asmjit/core/cpuinfo.h	/^      kASIMD,                    \/\/!< CPU has ASIMD        (NEON on ARM\/THUMB).$/;"	m	struct:CpuFeatures::ARM	typeref:enum:CpuFeatures::ARM::
kASR	external/asmjit/src/asmjit/core/archcommons.h	/^  kASR = 0x02u,$/;"	m	class:CondCode::DataType::ShiftOp
kAVALANCHE_BLIZZARD	external/asmjit/src/asmjit/core/cpuinfo.cpp	/^  kAVALANCHE_BLIZZARD = 0XDA33D83Du, \/\/ Apple A15\/M2.$/;"	m	class:arm::AppleFamilyId	file:
kAVX	external/asmjit/src/asmjit/core/cpuinfo.h	/^      kAVX,                      \/\/!< CPU has AVX              (advanced vector extensions).$/;"	m	struct:CpuFeatures::X86	typeref:enum:CpuFeatures::X86::
kAVX2	external/asmjit/src/asmjit/core/cpuinfo.h	/^      kAVX2,                     \/\/!< CPU has AVX2             (advanced vector extensions 2).$/;"	m	struct:CpuFeatures::X86	typeref:enum:CpuFeatures::X86::
kAVX512_4FMAPS	external/asmjit/src/asmjit/core/cpuinfo.h	/^      kAVX512_4FMAPS,            \/\/!< CPU has AVX512_FMAPS     (FMA packed single).$/;"	m	struct:CpuFeatures::X86	typeref:enum:CpuFeatures::X86::
kAVX512_4VNNIW	external/asmjit/src/asmjit/core/cpuinfo.h	/^      kAVX512_4VNNIW,            \/\/!< CPU has AVX512_VNNIW     (vector NN instructions word variable precision).$/;"	m	struct:CpuFeatures::X86	typeref:enum:CpuFeatures::X86::
kAVX512_BF16	external/asmjit/src/asmjit/core/cpuinfo.h	/^      kAVX512_BF16,              \/\/!< CPU has AVX512_BF16      (AVX512 BFLOAT16 support instructions).$/;"	m	struct:CpuFeatures::X86	typeref:enum:CpuFeatures::X86::
kAVX512_BITALG	external/asmjit/src/asmjit/core/cpuinfo.h	/^      kAVX512_BITALG,            \/\/!< CPU has AVX512_BITALG    (AVX512 VPOPCNT[B|W] and VPSHUFBITQMB instructions).$/;"	m	struct:CpuFeatures::X86	typeref:enum:CpuFeatures::X86::
kAVX512_BW	external/asmjit/src/asmjit/core/cpuinfo.h	/^      kAVX512_BW,                \/\/!< CPU has AVX512_BW        (AVX512 integer BYTE|WORD instructions).$/;"	m	struct:CpuFeatures::X86	typeref:enum:CpuFeatures::X86::
kAVX512_CD	external/asmjit/src/asmjit/core/cpuinfo.h	/^      kAVX512_CD,                \/\/!< CPU has AVX512_CD        (AVX512 conflict detection DWORD|QWORD instructions).$/;"	m	struct:CpuFeatures::X86	typeref:enum:CpuFeatures::X86::
kAVX512_CDI	external/asmjit/src/asmjit/core/cpuinfo.h	/^      kAVX512_CDI = kAVX512_CD,$/;"	m	struct:CpuFeatures::X86	typeref:enum:CpuFeatures::X86::
kAVX512_DQ	external/asmjit/src/asmjit/core/cpuinfo.h	/^      kAVX512_DQ,                \/\/!< CPU has AVX512_DQ        (AVX512 integer DWORD|QWORD instructions).$/;"	m	struct:CpuFeatures::X86	typeref:enum:CpuFeatures::X86::
kAVX512_ER	external/asmjit/src/asmjit/core/cpuinfo.h	/^      kAVX512_ER,                \/\/!< CPU has AVX512_ER        (AVX512 exponential and reciprocal instructions).$/;"	m	struct:CpuFeatures::X86	typeref:enum:CpuFeatures::X86::
kAVX512_ERI	external/asmjit/src/asmjit/core/cpuinfo.h	/^      kAVX512_ERI = kAVX512_ER,$/;"	m	struct:CpuFeatures::X86	typeref:enum:CpuFeatures::X86::
kAVX512_F	external/asmjit/src/asmjit/core/cpuinfo.h	/^      kAVX512_F,                 \/\/!< CPU has AVX512_F         (AVX512 foundation).$/;"	m	struct:CpuFeatures::X86	typeref:enum:CpuFeatures::X86::
kAVX512_FP16	external/asmjit/src/asmjit/core/cpuinfo.h	/^      kAVX512_FP16,              \/\/!< CPU has AVX512_FP16      (AVX512 FP16 instructions).$/;"	m	struct:CpuFeatures::X86	typeref:enum:CpuFeatures::X86::
kAVX512_IFMA	external/asmjit/src/asmjit/core/cpuinfo.h	/^      kAVX512_IFMA,              \/\/!< CPU has AVX512_IFMA      (AVX512 integer fused-multiply-add using 52-bit precision).$/;"	m	struct:CpuFeatures::X86	typeref:enum:CpuFeatures::X86::
kAVX512_PF	external/asmjit/src/asmjit/core/cpuinfo.h	/^      kAVX512_PF,                \/\/!< CPU has AVX512_PF        (AVX512 prefetch instructions).$/;"	m	struct:CpuFeatures::X86	typeref:enum:CpuFeatures::X86::
kAVX512_PFI	external/asmjit/src/asmjit/core/cpuinfo.h	/^      kAVX512_PFI = kAVX512_PF,$/;"	m	struct:CpuFeatures::X86	typeref:enum:CpuFeatures::X86::
kAVX512_VBMI	external/asmjit/src/asmjit/core/cpuinfo.h	/^      kAVX512_VBMI,              \/\/!< CPU has AVX512_VBMI      (AVX152 vector byte manipulation instructions).$/;"	m	struct:CpuFeatures::X86	typeref:enum:CpuFeatures::X86::
kAVX512_VBMI2	external/asmjit/src/asmjit/core/cpuinfo.h	/^      kAVX512_VBMI2,             \/\/!< CPU has AVX512_VBMI2     (AVX512 vector byte manipulation instructions v2).$/;"	m	struct:CpuFeatures::X86	typeref:enum:CpuFeatures::X86::
kAVX512_VL	external/asmjit/src/asmjit/core/cpuinfo.h	/^      kAVX512_VL,                \/\/!< CPU has AVX512_VL        (AVX512 vector length extensions).$/;"	m	struct:CpuFeatures::X86	typeref:enum:CpuFeatures::X86::
kAVX512_VNNI	external/asmjit/src/asmjit/core/cpuinfo.h	/^      kAVX512_VNNI,              \/\/!< CPU has AVX512_VNNI      (AVX512 vector neural network instructions).$/;"	m	struct:CpuFeatures::X86	typeref:enum:CpuFeatures::X86::
kAVX512_VP2INTERSECT	external/asmjit/src/asmjit/core/cpuinfo.h	/^      kAVX512_VP2INTERSECT,      \/\/!< CPU has AVX512_VP2INTERSECT$/;"	m	struct:CpuFeatures::X86	typeref:enum:CpuFeatures::X86::
kAVX512_VPOPCNTDQ	external/asmjit/src/asmjit/core/cpuinfo.h	/^      kAVX512_VPOPCNTDQ,         \/\/!< CPU has AVX512_VPOPCNTDQ (AVX512 VPOPCNT[D|Q] instructions).$/;"	m	struct:CpuFeatures::X86	typeref:enum:CpuFeatures::X86::
kAVX_IFMA	external/asmjit/src/asmjit/core/cpuinfo.h	/^      kAVX_IFMA,                 \/\/!< CPU has AVX_IFMA         (AVX\/VEX encoding of vpmadd52huq\/vpmadd52luq).$/;"	m	struct:CpuFeatures::X86	typeref:enum:CpuFeatures::X86::
kAVX_NE_CONVERT	external/asmjit/src/asmjit/core/cpuinfo.h	/^      kAVX_NE_CONVERT,           \/\/!< CPU has AVX_NE_CONVERT.$/;"	m	struct:CpuFeatures::X86	typeref:enum:CpuFeatures::X86::
kAVX_VNNI	external/asmjit/src/asmjit/core/cpuinfo.h	/^      kAVX_VNNI,                 \/\/!< CPU has AVX_VNNI         (AVX\/VEX encoding of vpdpbusd\/vpdpbusds\/vpdpwssd\/vpdpwssds).$/;"	m	struct:CpuFeatures::X86	typeref:enum:CpuFeatures::X86::
kAVX_VNNI_INT16	external/asmjit/src/asmjit/core/cpuinfo.h	/^      kAVX_VNNI_INT16,           \/\/!< CPU has AVX_VNNI_INT16.$/;"	m	struct:CpuFeatures::X86	typeref:enum:CpuFeatures::X86::
kAVX_VNNI_INT8	external/asmjit/src/asmjit/core/cpuinfo.h	/^      kAVX_VNNI_INT8,            \/\/!< CPU has AVX_VNNI_INT8.$/;"	m	struct:CpuFeatures::X86	typeref:enum:CpuFeatures::X86::
kAbs	external/asmjit/src/asmjit/x86/x86operand.h	/^    kAbs = 1,$/;"	m	class:Mem::AddrType
kAbsToAbs	external/asmjit/src/asmjit/core/codeholder.h	/^  kAbsToAbs = 2,$/;"	m	class:ExpressionOpType::ExpressionValueType::SectionFlags::CopySectionFlags::OffsetType::RelocType
kAbsToRel	external/asmjit/src/asmjit/core/codeholder.h	/^  kAbsToRel = 4,$/;"	m	class:ExpressionOpType::ExpressionValueType::SectionFlags::CopySectionFlags::OffsetType::RelocType
kAbstract	external/asmjit/src/asmjit/core/inst.h	/^  kAbstract = 0x80000000u,$/;"	m	class:InstIdParts
kAccessExecute	external/asmjit/src/asmjit/core/virtmem.h	/^  kAccessExecute = 0x00000004u,$/;"	m	class:VirtMem::CachePolicy::MemoryFlags
kAccessRW	external/asmjit/src/asmjit/core/virtmem.h	/^  kAccessRW = kAccessRead | kAccessWrite,$/;"	m	class:VirtMem::CachePolicy::MemoryFlags
kAccessRWX	external/asmjit/src/asmjit/core/virtmem.h	/^  kAccessRWX = kAccessRead | kAccessWrite | kAccessExecute,$/;"	m	class:VirtMem::CachePolicy::MemoryFlags
kAccessRX	external/asmjit/src/asmjit/core/virtmem.h	/^  kAccessRX = kAccessRead | kAccessExecute,$/;"	m	class:VirtMem::CachePolicy::MemoryFlags
kAccessRead	external/asmjit/src/asmjit/core/virtmem.h	/^  kAccessRead = 0x00000001u,$/;"	m	class:VirtMem::CachePolicy::MemoryFlags
kAccessReadWrite	external/asmjit/src/asmjit/core/virtmem.h	/^  kAccessReadWrite = kAccessRead | kAccessWrite,$/;"	m	class:VirtMem::CachePolicy::MemoryFlags
kAccessWrite	external/asmjit/src/asmjit/core/virtmem.h	/^  kAccessWrite = 0x00000002u,$/;"	m	class:VirtMem::CachePolicy::MemoryFlags
kActsAsInst	external/asmjit/src/asmjit/core/builder.h	/^  kActsAsInst = 0x20u,$/;"	m	class:NodeType::NodeFlags
kActsAsLabel	external/asmjit/src/asmjit/core/builder.h	/^  kActsAsLabel = 0x40u,$/;"	m	class:NodeType::NodeFlags
kAdd	external/asmjit/src/asmjit/core/codeholder.h	/^  kAdd = 0,$/;"	m	class:ExpressionOpType
kAlign	external/asmjit/src/asmjit/core/builder.h	/^  kAlign = 4,$/;"	m	class:NodeType
kAlignBlockSizeToLargePage	external/asmjit/src/asmjit/core/jitallocator.h	/^  kAlignBlockSizeToLargePage = 0x00000040u,$/;"	m	class:JitAllocatorOptions
kAlignedVecSR	external/asmjit/src/asmjit/core/func.h	/^  kAlignedVecSR = 0x00000040u,$/;"	m	class:CallConvId::CallConvStrategy::CallConvFlags::FuncAttributes
kAllocAlignment	external/asmjit/src/asmjit/core/globals.h	/^static constexpr uint32_t kAllocAlignment = 8;$/;"	m	namespace:ByteOrder::ResetPolicy::Globals
kAllocOverhead	external/asmjit/src/asmjit/core/globals.h	/^static constexpr uint32_t kAllocOverhead = uint32_t(sizeof(intptr_t) * 4);$/;"	m	namespace:ByteOrder::ResetPolicy::Globals
kAllocated	external/asmjit/src/asmjit/core/radefs_p.h	/^  kAllocated = 0x00000001u,$/;"	m	class:RAStrategyType::RAStrategyFlags::RATiedFlags::RAWorkRegFlags
kAlternate	external/asmjit/src/asmjit/core/string.h	/^  kAlternate = 0x00000004u,$/;"	m	class:StringFormatFlags
kAlways	external/asmjit/src/asmjit/core/archcommons.h	/^  kAlways         = kAL,        \/\/!< No condition code (always).$/;"	m	class:CondCode
kAndroid	external/asmjit/src/asmjit/core/environment.h	/^  kAndroid,$/;"	m	class:Vendor::Platform::PlatformABI
kAnonymous	external/asmjit/src/asmjit/core/codeholder.h	/^  kAnonymous = 0,$/;"	m	class:ExpressionOpType::ExpressionValueType::SectionFlags::CopySectionFlags::OffsetType::RelocType::LabelType
kAny	external/asmjit/src/asmjit/x86/x86instdb.h	/^  kAny = 0x03u$/;"	m	class:InstDB::Mode
kAppend	external/asmjit/src/asmjit/core/string.h	/^    kAppend = 1$/;"	m	class:StringFormatFlags::String::ModifyOp
kAscending	external/asmjit/src/asmjit/core/support.h	/^  kAscending  = 0,$/;"	m	class:Support::Internal::SortOrder
kAssembler	external/asmjit/src/asmjit/core/emitter.h	/^  kAssembler = 1,$/;"	m	class:AlignMode::EmitterType
kAssign	external/asmjit/src/asmjit/core/string.h	/^    kAssign = 0,$/;"	m	class:StringFormatFlags::String::ModifyOp
kAttached	external/asmjit/src/asmjit/core/emitter.h	/^  kAttached = 0x01u,$/;"	m	class:AlignMode::EmitterType::EmitterFlags
kB	external/asmjit/src/asmjit/x86/x86globals.h	/^  kB             = 0x02u,       \/\/!< CF==1          (unsigned < )$/;"	m	class:CondCode
kB	external/asmjit/src/asmjit/x86/x86globals.h	/^  kB             = 0xCCu,       \/\/!< B value.$/;"	m	class:CondCode::FpuStatusWord::FpuControlWord::CmpImm::PCmpStrImm::RoundImm::VCmpImm::VFixupImm::VFPClassImm::VGetMantImm::VPCmpImm::VPComImm::VRangeImm::VReduceImm::TLogImm
kB	external/asmjit/src/asmjit/x86/x86opcode_p.h	/^    kB             = 0x01u << kREX_Shift,  \/\/ Never stored in DB, used by encoder.$/;"	m	struct:Opcode	typeref:enum:Opcode::
kB16	external/asmjit/src/asmjit/x86/x86instdb.h	/^  kB16 = 0x00000010u,$/;"	m	class:InstDB::Mode::OpFlags::InstFlags::Avx512Flags
kB32	external/asmjit/src/asmjit/x86/x86instdb.h	/^  kB32 = 0x00000020u,$/;"	m	class:InstDB::Mode::OpFlags::InstFlags::Avx512Flags
kB64	external/asmjit/src/asmjit/x86/x86instdb.h	/^  kB64 = 0x00000040u,$/;"	m	class:InstDB::Mode::OpFlags::InstFlags::Avx512Flags
kBC	external/asmjit/src/asmjit/x86/x86globals.h	/^  kBC            = kB & kC,     \/\/!< `B & C` expression.$/;"	m	class:CondCode::FpuStatusWord::FpuControlWord::CmpImm::PCmpStrImm::RoundImm::VCmpImm::VFixupImm::VFPClassImm::VGetMantImm::VPCmpImm::VPComImm::VRangeImm::VReduceImm::TLogImm
kBE	external/asmjit/src/asmjit/core/globals.h	/^  kBE = 1,$/;"	m	class:ByteOrder
kBE	external/asmjit/src/asmjit/x86/x86globals.h	/^  kBE            = 0x06u,       \/\/!< CF==1 | ZF==1  (unsigned <=)$/;"	m	class:CondCode
kBF16	external/asmjit/src/asmjit/core/archcommons.h	/^  kBF16 = 14,$/;"	m	class:CondCode::DataType
kBF16	external/asmjit/src/asmjit/core/cpuinfo.h	/^      kBF16,                     \/\/!< CPU has BF16         (BFloat16 instructions) {A64}.$/;"	m	struct:CpuFeatures::ARM	typeref:enum:CpuFeatures::ARM::
kBMI	external/asmjit/src/asmjit/core/cpuinfo.h	/^      kBMI,                      \/\/!< CPU has BMI              (bit manipulation instructions #1).$/;"	m	struct:CpuFeatures::X86	typeref:enum:CpuFeatures::X86::
kBMI2	external/asmjit/src/asmjit/core/cpuinfo.h	/^      kBMI2,                     \/\/!< CPU has BMI2             (bit manipulation instructions #2).$/;"	m	struct:CpuFeatures::X86	typeref:enum:CpuFeatures::X86::
kBTI	external/asmjit/src/asmjit/core/cpuinfo.h	/^      kBTI,                      \/\/!< CPU has BTI          (branch target identification).$/;"	m	struct:CpuFeatures::ARM	typeref:enum:CpuFeatures::ARM::
kBase	external/asmjit/src/asmjit/x86/x86assembler.cpp	/^    kBase  = (B >= uint32_t(RegType::kX86_Gpw)  && B <= uint32_t(RegType::kX86_Gpq)) ? kX86MemInfo_BaseGp    :$/;"	m	struct:X86MemInfo_T	typeref:enum:X86MemInfo_T::	file:
kBigEndian	external/asmjit/src/asmjit/core/archtraits.h	/^  kBigEndian = kARM_BE,$/;"	m	class:Arch
kBitMask	external/asmjit/src/asmjit/x86/x86globals.h	/^  kBitMask       = 0x00u << 6,  \/\/!< IntRes2 is returned as the mask to the least significant bits of XMM0.$/;"	m	class:CondCode::FpuStatusWord::FpuControlWord::CmpImm::PCmpStrImm
kBranch	external/asmjit/src/asmjit/core/inst.h	/^  kBranch = 2u,$/;"	m	class:InstIdParts::InstOptions::InstControlFlow
kBuilder	external/asmjit/src/asmjit/core/emitter.h	/^  kBuilder = 2,$/;"	m	class:AlignMode::EmitterType
kBusy	external/asmjit/src/asmjit/x86/x86globals.h	/^  kBusy          = 0x8000u      \/\/!< FPU is busy.$/;"	m	class:CondCode::FpuStatusWord
kByte	external/asmjit/src/asmjit/core/archtraits.h	/^  kByte,$/;"	m	class:Arch::SubArch::ArchTypeNameId
kC	external/asmjit/src/asmjit/x86/x86globals.h	/^  kC             = 0x02u,       \/\/!< CF==1$/;"	m	class:CondCode
kC	external/asmjit/src/asmjit/x86/x86globals.h	/^  kC             = 0xAAu,       \/\/!< C value.$/;"	m	class:CondCode::FpuStatusWord::FpuControlWord::CmpImm::PCmpStrImm::RoundImm::VCmpImm::VFixupImm::VFPClassImm::VGetMantImm::VPCmpImm::VPComImm::VRangeImm::VReduceImm::TLogImm
kC0	external/asmjit/src/asmjit/x86/x86globals.h	/^  kC0            = 0x0100u,     \/\/!< C0 flag.$/;"	m	class:CondCode::FpuStatusWord
kC1	external/asmjit/src/asmjit/x86/x86globals.h	/^  kC1            = 0x0200u,     \/\/!< C1 flag.$/;"	m	class:CondCode::FpuStatusWord
kC2	external/asmjit/src/asmjit/x86/x86globals.h	/^  kC2            = 0x0400u,     \/\/!< C2 flag.$/;"	m	class:CondCode::FpuStatusWord
kC3	external/asmjit/src/asmjit/x86/x86globals.h	/^  kC3            = 0x4000u,     \/\/!< C3 flag.$/;"	m	class:CondCode::FpuStatusWord
kCC	external/asmjit/src/asmjit/core/archcommons.h	/^  kCC             = 0x05u,      \/\/!< C==0                (unsigned < )$/;"	m	class:CondCode
kCCIDX	external/asmjit/src/asmjit/core/cpuinfo.h	/^      kCCIDX,                    \/\/!< CPU has CCIDX        (extend of the CCSIDR number of sets).$/;"	m	struct:CpuFeatures::ARM	typeref:enum:CpuFeatures::ARM::
kCDSHL_0	external/asmjit/src/asmjit/x86/x86opcode_p.h	/^    kCDSHL_0       = 0x0u << kCDSHL_Shift, \/\/ N << 0.$/;"	m	struct:Opcode	typeref:enum:Opcode::
kCDSHL_1	external/asmjit/src/asmjit/x86/x86opcode_p.h	/^    kCDSHL_1       = 0x1u << kCDSHL_Shift, \/\/ N << 1.$/;"	m	struct:Opcode	typeref:enum:Opcode::
kCDSHL_2	external/asmjit/src/asmjit/x86/x86opcode_p.h	/^    kCDSHL_2       = 0x2u << kCDSHL_Shift, \/\/ N << 2.$/;"	m	struct:Opcode	typeref:enum:Opcode::
kCDSHL_3	external/asmjit/src/asmjit/x86/x86opcode_p.h	/^    kCDSHL_3       = 0x3u << kCDSHL_Shift, \/\/ N << 3.$/;"	m	struct:Opcode	typeref:enum:Opcode::
kCDSHL_4	external/asmjit/src/asmjit/x86/x86opcode_p.h	/^    kCDSHL_4       = 0x4u << kCDSHL_Shift, \/\/ N << 4.$/;"	m	struct:Opcode	typeref:enum:Opcode::
kCDSHL_5	external/asmjit/src/asmjit/x86/x86opcode_p.h	/^    kCDSHL_5       = 0x5u << kCDSHL_Shift, \/\/ N << 5.$/;"	m	struct:Opcode	typeref:enum:Opcode::
kCDSHL_Mask	external/asmjit/src/asmjit/x86/x86opcode_p.h	/^    kCDSHL_Mask    = 0x7u << kCDSHL_Shift,$/;"	m	struct:Opcode	typeref:enum:Opcode::
kCDSHL_Shift	external/asmjit/src/asmjit/x86/x86opcode_p.h	/^    kCDSHL_Shift   = 13,$/;"	m	struct:Opcode	typeref:enum:Opcode::
kCDSHL__	external/asmjit/src/asmjit/x86/x86opcode_p.h	/^    kCDSHL__       = 0x0u << kCDSHL_Shift, \/\/ Base element size not used.$/;"	m	struct:Opcode	typeref:enum:Opcode::
kCDTT_128	external/asmjit/src/asmjit/x86/x86opcode_p.h	/^    kCDTT_128      = kCDTT_None,$/;"	m	struct:Opcode	typeref:enum:Opcode::
kCDTT_ByLL	external/asmjit/src/asmjit/x86/x86opcode_p.h	/^    kCDTT_ByLL     = 0x1u << kCDTT_Shift,  \/\/ Scales by LL (1x 2x 4x).$/;"	m	struct:Opcode	typeref:enum:Opcode::
kCDTT_DUP	external/asmjit/src/asmjit/x86/x86opcode_p.h	/^    kCDTT_DUP      = 0x3u << kCDTT_Shift,  \/\/ Special 'VMOVDDUP' case.$/;"	m	struct:Opcode	typeref:enum:Opcode::
kCDTT_FV	external/asmjit/src/asmjit/x86/x86opcode_p.h	/^    kCDTT_FV       = kCDTT_ByLL,$/;"	m	struct:Opcode	typeref:enum:Opcode::
kCDTT_FVM	external/asmjit/src/asmjit/x86/x86opcode_p.h	/^    kCDTT_FVM      = kCDTT_ByLL,$/;"	m	struct:Opcode	typeref:enum:Opcode::
kCDTT_HV	external/asmjit/src/asmjit/x86/x86opcode_p.h	/^    kCDTT_HV       = kCDTT_ByLL,$/;"	m	struct:Opcode	typeref:enum:Opcode::
kCDTT_HVM	external/asmjit/src/asmjit/x86/x86opcode_p.h	/^    kCDTT_HVM      = kCDTT_ByLL,$/;"	m	struct:Opcode	typeref:enum:Opcode::
kCDTT_Mask	external/asmjit/src/asmjit/x86/x86opcode_p.h	/^    kCDTT_Mask     = 0x3u << kCDTT_Shift,$/;"	m	struct:Opcode	typeref:enum:Opcode::
kCDTT_None	external/asmjit/src/asmjit/x86/x86opcode_p.h	/^    kCDTT_None     = 0x0u << kCDTT_Shift,  \/\/ Does nothing.$/;"	m	struct:Opcode	typeref:enum:Opcode::
kCDTT_OVM	external/asmjit/src/asmjit/x86/x86opcode_p.h	/^    kCDTT_OVM      = kCDTT_ByLL,$/;"	m	struct:Opcode	typeref:enum:Opcode::
kCDTT_QV	external/asmjit/src/asmjit/x86/x86opcode_p.h	/^    kCDTT_QV       = kCDTT_ByLL,$/;"	m	struct:Opcode	typeref:enum:Opcode::
kCDTT_QVM	external/asmjit/src/asmjit/x86/x86opcode_p.h	/^    kCDTT_QVM      = kCDTT_ByLL,$/;"	m	struct:Opcode	typeref:enum:Opcode::
kCDTT_Shift	external/asmjit/src/asmjit/x86/x86opcode_p.h	/^    kCDTT_Shift    = 16,$/;"	m	struct:Opcode	typeref:enum:Opcode::
kCDTT_T1F	external/asmjit/src/asmjit/x86/x86opcode_p.h	/^    kCDTT_T1F      = kCDTT_None,$/;"	m	struct:Opcode	typeref:enum:Opcode::
kCDTT_T1S	external/asmjit/src/asmjit/x86/x86opcode_p.h	/^    kCDTT_T1S      = kCDTT_None,$/;"	m	struct:Opcode	typeref:enum:Opcode::
kCDTT_T1W	external/asmjit/src/asmjit/x86/x86opcode_p.h	/^    kCDTT_T1W      = 0x2u << kCDTT_Shift,  \/\/ Used to add 'W' to the shift.$/;"	m	struct:Opcode	typeref:enum:Opcode::
kCDTT_T1_4X	external/asmjit/src/asmjit/x86/x86opcode_p.h	/^    kCDTT_T1_4X    = kCDTT_None,$/;"	m	struct:Opcode	typeref:enum:Opcode::
kCDTT_T2	external/asmjit/src/asmjit/x86/x86opcode_p.h	/^    kCDTT_T2       = kCDTT_None,$/;"	m	struct:Opcode	typeref:enum:Opcode::
kCDTT_T4	external/asmjit/src/asmjit/x86/x86opcode_p.h	/^    kCDTT_T4       = kCDTT_None,$/;"	m	struct:Opcode	typeref:enum:Opcode::
kCDTT_T4X	external/asmjit/src/asmjit/x86/x86opcode_p.h	/^    kCDTT_T4X      = kCDTT_None,           \/\/ Alias to have only 3 letters.$/;"	m	struct:Opcode	typeref:enum:Opcode::
kCDTT_T8	external/asmjit/src/asmjit/x86/x86opcode_p.h	/^    kCDTT_T8       = kCDTT_None,$/;"	m	struct:Opcode	typeref:enum:Opcode::
kCDTT__	external/asmjit/src/asmjit/x86/x86opcode_p.h	/^    kCDTT__        = kCDTT_None,$/;"	m	struct:Opcode	typeref:enum:Opcode::
kCDecl	external/asmjit/src/asmjit/core/func.h	/^  kCDecl = 1,$/;"	m	class:CallConvId
kCET_IBT	external/asmjit/src/asmjit/core/cpuinfo.h	/^      kCET_IBT,                  \/\/!< CPU has CET-IBT          (indirect branch tracking).$/;"	m	struct:CpuFeatures::X86	typeref:enum:CpuFeatures::X86::
kCET_SS	external/asmjit/src/asmjit/core/cpuinfo.h	/^      kCET_SS,                   \/\/!< CPU has CET-SS.$/;"	m	struct:CpuFeatures::X86	typeref:enum:CpuFeatures::X86::
kCET_SSS	external/asmjit/src/asmjit/core/cpuinfo.h	/^      kCET_SSS,                  \/\/!< CPU has CET-SSS.$/;"	m	struct:CpuFeatures::X86	typeref:enum:CpuFeatures::X86::
kCF	external/asmjit/src/asmjit/core/inst.h	/^  kCF = 0x00000001u,$/;"	m	class:InstIdParts::InstOptions::InstControlFlow::InstSameRegHint::CpuRWFlags
kCHK	external/asmjit/src/asmjit/core/cpuinfo.h	/^      kCHK,                      \/\/!< CPU has CHK          (CHKFEAT instruction) {A64}.$/;"	m	struct:CpuFeatures::ARM	typeref:enum:CpuFeatures::ARM::
kCLDEMOTE	external/asmjit/src/asmjit/core/cpuinfo.h	/^      kCLDEMOTE,                 \/\/!< CPU has CLDEMOTE         (cache line demote).$/;"	m	struct:CpuFeatures::X86	typeref:enum:CpuFeatures::X86::
kCLFLUSH	external/asmjit/src/asmjit/core/cpuinfo.h	/^      kCLFLUSH,                  \/\/!< CPU has CLFUSH           (cache Line flush).$/;"	m	struct:CpuFeatures::X86	typeref:enum:CpuFeatures::X86::
kCLFLUSHOPT	external/asmjit/src/asmjit/core/cpuinfo.h	/^      kCLFLUSHOPT,               \/\/!< CPU has CLFUSHOPT        (cache Line flush - optimized).$/;"	m	struct:CpuFeatures::X86	typeref:enum:CpuFeatures::X86::
kCLRBHB	external/asmjit/src/asmjit/core/cpuinfo.h	/^      kCLRBHB,                   \/\/!< CPU has CLRBHB       (clear BHB instruction).$/;"	m	struct:CpuFeatures::ARM	typeref:enum:CpuFeatures::ARM::
kCLWB	external/asmjit/src/asmjit/core/cpuinfo.h	/^      kCLWB,                     \/\/!< CPU has CLWB.$/;"	m	struct:CpuFeatures::X86	typeref:enum:CpuFeatures::X86::
kCLZERO	external/asmjit/src/asmjit/core/cpuinfo.h	/^      kCLZERO,                   \/\/!< CPU has CLZERO.$/;"	m	struct:CpuFeatures::X86	typeref:enum:CpuFeatures::X86::
kCMOV	external/asmjit/src/asmjit/core/cpuinfo.h	/^      kCMOV,                     \/\/!< CPU has CMOV             (CMOV and FCMOV instructions).$/;"	m	struct:CpuFeatures::X86	typeref:enum:CpuFeatures::X86::
kCMPCCXADD	external/asmjit/src/asmjit/core/cpuinfo.h	/^      kCMPCCXADD,                \/\/!< CPU has CMPCCXADD.$/;"	m	struct:CpuFeatures::X86	typeref:enum:CpuFeatures::X86::
kCMPXCHG16B	external/asmjit/src/asmjit/core/cpuinfo.h	/^      kCMPXCHG16B,               \/\/!< CPU has CMPXCHG16B       (compare-exchange 16 bytes) {X86_64}.$/;"	m	struct:CpuFeatures::X86	typeref:enum:CpuFeatures::X86::
kCMPXCHG8B	external/asmjit/src/asmjit/core/cpuinfo.h	/^      kCMPXCHG8B,                \/\/!< CPU has CMPXCHG8B        (compare-exchange 8 bytes).$/;"	m	struct:CpuFeatures::X86	typeref:enum:CpuFeatures::X86::
kCOFF	external/asmjit/src/asmjit/core/environment.h	/^  kCOFF,$/;"	m	class:Vendor::Platform::PlatformABI::ObjectFormat
kCPUID	external/asmjit/src/asmjit/core/cpuinfo.h	/^      kCPUID,                    \/\/!< CPU has CPUID        (CPUID registers accessible in user-space).$/;"	m	struct:CpuFeatures::ARM	typeref:enum:CpuFeatures::ARM::
kCRC32	external/asmjit/src/asmjit/core/cpuinfo.h	/^      kCRC32,                    \/\/!< CPU has CRC32        (CRC32 instructions).$/;"	m	struct:CpuFeatures::ARM	typeref:enum:CpuFeatures::ARM::
kCS	external/asmjit/src/asmjit/core/archcommons.h	/^  kCS             = 0x04u,      \/\/!< C==1                (unsigned >=)$/;"	m	class:CondCode
kCSSC	external/asmjit/src/asmjit/core/cpuinfo.h	/^      kCSSC,                     \/\/!< CPU has CSSC         (common short sequence compression) {A64}.$/;"	m	struct:CpuFeatures::ARM	typeref:enum:CpuFeatures::ARM::
kCYCLONE	external/asmjit/src/asmjit/core/cpuinfo.cpp	/^  kCYCLONE            = 0x37A09642u, \/\/ Apple A7 (ARMv8.0-A).$/;"	m	class:arm::AppleFamilyId	file:
kCall	external/asmjit/src/asmjit/core/inst.h	/^  kCall = 3u,$/;"	m	class:InstIdParts::InstOptions::InstControlFlow
kCalleePopsStack	external/asmjit/src/asmjit/core/func.h	/^  kCalleePopsStack = 0x0001u,$/;"	m	class:CallConvId::CallConvStrategy::CallConvFlags
kCategoryConsistent	external/asmjit/src/asmjit/x86/x86instdb_p.h	/^    kCategoryConsistent,$/;"	m	struct:RWInfoRm	typeref:enum:RWInfoRm::
kCategoryFixed	external/asmjit/src/asmjit/x86/x86instdb_p.h	/^    kCategoryFixed,$/;"	m	struct:RWInfoRm	typeref:enum:RWInfoRm::
kCategoryGenericEx	external/asmjit/src/asmjit/x86/x86instdb_p.h	/^    kCategoryGenericEx,$/;"	m	struct:InstDB::RWInfo	typeref:enum:InstDB::RWInfo::
kCategoryHalf	external/asmjit/src/asmjit/x86/x86instdb_p.h	/^    kCategoryHalf,$/;"	m	struct:RWInfoRm	typeref:enum:RWInfoRm::
kCategoryImul	external/asmjit/src/asmjit/x86/x86instdb_p.h	/^    kCategoryImul,$/;"	m	struct:InstDB::RWInfo	typeref:enum:InstDB::RWInfo::
kCategoryMov	external/asmjit/src/asmjit/x86/x86instdb_p.h	/^    kCategoryMov,$/;"	m	struct:InstDB::RWInfo	typeref:enum:InstDB::RWInfo::
kCategoryMovabs	external/asmjit/src/asmjit/x86/x86instdb_p.h	/^    kCategoryMovabs,$/;"	m	struct:InstDB::RWInfo	typeref:enum:InstDB::RWInfo::
kCategoryMovh64	external/asmjit/src/asmjit/x86/x86instdb_p.h	/^    kCategoryMovh64,$/;"	m	struct:InstDB::RWInfo	typeref:enum:InstDB::RWInfo::
kCategoryPunpcklxx	external/asmjit/src/asmjit/x86/x86instdb_p.h	/^    kCategoryPunpcklxx,$/;"	m	struct:InstDB::RWInfo	typeref:enum:InstDB::RWInfo::
kCategoryQuarter	external/asmjit/src/asmjit/x86/x86instdb_p.h	/^    kCategoryQuarter,$/;"	m	struct:RWInfoRm	typeref:enum:RWInfoRm::
kCategoryVmaskmov	external/asmjit/src/asmjit/x86/x86instdb_p.h	/^    kCategoryVmaskmov,$/;"	m	struct:InstDB::RWInfo	typeref:enum:InstDB::RWInfo::
kCategoryVmov1_2	external/asmjit/src/asmjit/x86/x86instdb_p.h	/^    kCategoryVmov1_2,$/;"	m	struct:InstDB::RWInfo	typeref:enum:InstDB::RWInfo::
kCategoryVmov1_4	external/asmjit/src/asmjit/x86/x86instdb_p.h	/^    kCategoryVmov1_4,$/;"	m	struct:InstDB::RWInfo	typeref:enum:InstDB::RWInfo::
kCategoryVmov1_8	external/asmjit/src/asmjit/x86/x86instdb_p.h	/^    kCategoryVmov1_8,$/;"	m	struct:InstDB::RWInfo	typeref:enum:InstDB::RWInfo::
kCategoryVmov2_1	external/asmjit/src/asmjit/x86/x86instdb_p.h	/^    kCategoryVmov2_1,$/;"	m	struct:InstDB::RWInfo	typeref:enum:InstDB::RWInfo::
kCategoryVmov4_1	external/asmjit/src/asmjit/x86/x86instdb_p.h	/^    kCategoryVmov4_1,$/;"	m	struct:InstDB::RWInfo	typeref:enum:InstDB::RWInfo::
kCategoryVmovddup	external/asmjit/src/asmjit/x86/x86instdb_p.h	/^    kCategoryVmovddup,$/;"	m	struct:InstDB::RWInfo	typeref:enum:InstDB::RWInfo::
kCategoryVmovmskpd	external/asmjit/src/asmjit/x86/x86instdb_p.h	/^    kCategoryVmovmskpd,$/;"	m	struct:InstDB::RWInfo	typeref:enum:InstDB::RWInfo::
kCategoryVmovmskps	external/asmjit/src/asmjit/x86/x86instdb_p.h	/^    kCategoryVmovmskps,$/;"	m	struct:InstDB::RWInfo	typeref:enum:InstDB::RWInfo::
kCoalesced	external/asmjit/src/asmjit/core/radefs_p.h	/^  kCoalesced = 0x00000002u,$/;"	m	class:RAStrategyType::RAStrategyFlags::RATiedFlags::RAWorkRegFlags
kCode	external/asmjit/src/asmjit/core/emitter.h	/^  kCode = 0,$/;"	m	class:AlignMode
kCode	external/asmjit/src/asmjit/core/formatter.h	/^  kCode = 0u,$/;"	m	class:FormatFlags::FormatIndentationGroup
kComment	external/asmjit/src/asmjit/core/builder.h	/^  kComment = 9,$/;"	m	class:NodeType
kComment	external/asmjit/src/asmjit/core/codeholder.h	/^  kComment = 0x00000008u,$/;"	m	class:ExpressionOpType::ExpressionValueType::SectionFlags
kComment	external/asmjit/src/asmjit/core/formatter.h	/^  kComment = 2u,$/;"	m	class:FormatFlags::FormatIndentationGroup
kCompiler	external/asmjit/src/asmjit/core/emitter.h	/^  kCompiler = 3,$/;"	m	class:AlignMode::EmitterType
kComplex	external/asmjit/src/asmjit/core/radefs_p.h	/^  kComplex = 1$/;"	m	class:RAStrategyType
kConsecutive	external/asmjit/src/asmjit/core/inst.h	/^  kConsecutive = 0x00000008u,$/;"	m	class:InstIdParts::InstOptions::InstControlFlow::InstSameRegHint::CpuRWFlags::OpRWFlags
kConsecutiveData	external/asmjit/src/asmjit/core/radefs_p.h	/^  kConsecutiveData = 0x00006000u,$/;"	m	class:RAStrategyType::RAStrategyFlags::RATiedFlags
kConsecutiveRegs	external/asmjit/src/asmjit/x86/x86instdb.h	/^  kConsecutiveRegs = 0x20000000u$/;"	m	class:InstDB::Mode::OpFlags::InstFlags
kConstPool	external/asmjit/src/asmjit/core/builder.h	/^  kConstPool = 8,$/;"	m	class:NodeType
kConstant	external/asmjit/src/asmjit/core/codeholder.h	/^  kConstant = 1,$/;"	m	class:ExpressionOpType::ExpressionValueType
kCount	external/asmjit/src/asmjit/core/operand.h	/^    kCount = 0,$/;"	m	struct:OperandType::RegType::RegGroup::BaseRegTraits	typeref:enum:OperandType::RegType::RegGroup::BaseRegTraits::
kCount	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^  enum { kCount = 17 };$/;"	e	enum:X86Test_AllocAlphaBlend::__anon25	file:
kCount	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^  enum { kCount = 32 };$/;"	e	enum:X86Test_AllocMemcpy::__anon24	file:
kCount	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^  enum { kCount = 8 };$/;"	e	enum:X86Test_AllocMany1::__anon22	file:
kCurrent	external/asmjit/src/asmjit/x86/x86globals.h	/^  kCurrent       = 0x04u,       \/\/!< Round to the current rounding mode set (ignores other RC bits).$/;"	m	class:CondCode::FpuStatusWord::FpuControlWord::CmpImm::PCmpStrImm::RoundImm
kCustomFillPattern	external/asmjit/src/asmjit/core/jitallocator.h	/^  kCustomFillPattern = 0x10000000u$/;"	m	class:JitAllocatorOptions
kCygwin	external/asmjit/src/asmjit/core/environment.h	/^  kCygwin,$/;"	m	class:Vendor::Platform::PlatformABI
kD128	external/asmjit/src/asmjit/core/cpuinfo.h	/^      kD128,                     \/\/!< CPU has D128         (128-bit translation tables, 56 bit PA) {A64}.$/;"	m	struct:CpuFeatures::ARM	typeref:enum:CpuFeatures::ARM::
kDB	external/asmjit/src/asmjit/core/archtraits.h	/^  kDB = 0,$/;"	m	class:Arch::SubArch::ArchTypeNameId
kDD	external/asmjit/src/asmjit/core/archtraits.h	/^  kDD,$/;"	m	class:Arch::SubArch::ArchTypeNameId
kDGH	external/asmjit/src/asmjit/core/cpuinfo.h	/^      kDGH,                      \/\/!< CPU has DGH          (data gathering hint) {A64}.$/;"	m	struct:CpuFeatures::ARM	typeref:enum:CpuFeatures::ARM::
kDIT	external/asmjit/src/asmjit/core/cpuinfo.h	/^      kDIT,                      \/\/!< CPU has DIT          (data independent timing of instructions).$/;"	m	struct:CpuFeatures::ARM	typeref:enum:CpuFeatures::ARM::
kDOTPROD	external/asmjit/src/asmjit/core/cpuinfo.h	/^      kDOTPROD,                  \/\/!< CPU has DOTPROD      (ASIMD Int8 dot product instructions).$/;"	m	struct:CpuFeatures::ARM	typeref:enum:CpuFeatures::ARM::
kDPB	external/asmjit/src/asmjit/core/cpuinfo.h	/^      kDPB,                      \/\/!< CPU has DPB          (DC CVAP instruction) {A64}.$/;"	m	struct:CpuFeatures::ARM	typeref:enum:CpuFeatures::ARM::
kDPB2	external/asmjit/src/asmjit/core/cpuinfo.h	/^      kDPB2,                     \/\/!< CPU has DPB2         (DC CVADP instruction) {A64}.$/;"	m	struct:CpuFeatures::ARM	typeref:enum:CpuFeatures::ARM::
kDQ	external/asmjit/src/asmjit/core/archtraits.h	/^  kDQ,$/;"	m	class:Arch::SubArch::ArchTypeNameId
kDW	external/asmjit/src/asmjit/core/archtraits.h	/^  kDW,$/;"	m	class:Arch::SubArch::ArchTypeNameId
kDWord	external/asmjit/src/asmjit/core/archtraits.h	/^  kDWord,$/;"	m	class:Arch::SubArch::ArchTypeNameId
kData	external/asmjit/src/asmjit/core/emitter.h	/^  kData = 1,$/;"	m	class:AlignMode
kDataImmValueHi	external/asmjit/src/asmjit/core/operand.h	/^    kDataImmValueHi = ASMJIT_ARCH_LE ? 1 : 0$/;"	m	struct:OperandType::RegType::RegGroup::Operand_	typeref:enum:OperandType::RegType::RegGroup::Operand_::
kDataImmValueLo	external/asmjit/src/asmjit/core/operand.h	/^    kDataImmValueLo = ASMJIT_ARCH_LE ? 0 : 1,$/;"	m	struct:OperandType::RegType::RegGroup::Operand_	typeref:enum:OperandType::RegType::RegGroup::Operand_::
kDataMemOffsetLo	external/asmjit/src/asmjit/core/operand.h	/^    kDataMemOffsetLo = 1,$/;"	m	struct:OperandType::RegType::RegGroup::Operand_	typeref:enum:OperandType::RegType::RegGroup::Operand_::
kDefault	external/asmjit/src/asmjit/core/func.h	/^  kDefault = 0,$/;"	m	class:CallConvId::CallConvStrategy
kDefault	external/asmjit/src/asmjit/core/virtmem.h	/^  kDefault = 0,$/;"	m	class:VirtMem::CachePolicy
kDefault	external/asmjit/src/asmjit/x86/x86operand.h	/^    kDefault = 0,$/;"	m	class:Mem::AddrType
kDenormal	external/asmjit/src/asmjit/x86/x86globals.h	/^  kDenormal      = 0x20u,       \/\/!< Checks for denormal.$/;"	m	class:CondCode::FpuStatusWord::FpuControlWord::CmpImm::PCmpStrImm::RoundImm::VCmpImm::VFixupImm::VFPClassImm
kDenormalized	external/asmjit/src/asmjit/x86/x86globals.h	/^  kDenormalized  = 0x0002u,     \/\/!< Denormalized operand.$/;"	m	class:CondCode::FpuStatusWord
kDescending	external/asmjit/src/asmjit/core/support.h	/^  kDescending = 1$/;"	m	class:Support::Internal::SortOrder
kDestroyed	external/asmjit/src/asmjit/core/emitter.h	/^  kDestroyed = 0x80u$/;"	m	class:AlignMode::EmitterType::EmitterFlags
kDisableInitialPadding	external/asmjit/src/asmjit/core/jitallocator.h	/^  kDisableInitialPadding = 0x00000010u,$/;"	m	class:JitAllocatorOptions
kDivByZero	external/asmjit/src/asmjit/x86/x86globals.h	/^  kDivByZero     = 0x0004u,     \/\/!< Division by zero.$/;"	m	class:CondCode::FpuStatusWord
kDouble	external/asmjit/src/asmjit/core/operand.h	/^  kDouble = 1$/;"	m	class:OperandType::RegType::RegGroup::ImmType
kDown	external/asmjit/src/asmjit/x86/x86globals.h	/^  kDown          = 0x01u,       \/\/!< Round to down toward -INF (floor),$/;"	m	class:CondCode::FpuStatusWord::FpuControlWord::CmpImm::PCmpStrImm::RoundImm
kDragonFlyBSD	external/asmjit/src/asmjit/core/environment.h	/^  kDragonFlyBSD,$/;"	m	class:Vendor::Platform
kDuplicate	external/asmjit/src/asmjit/core/radefs_p.h	/^  kDuplicate = 0x00010000u,$/;"	m	class:RAStrategyType::RAStrategyFlags::RATiedFlags
kE	external/asmjit/src/asmjit/x86/x86globals.h	/^  kE             = 0x04u,       \/\/!<         ZF==1  (any_sign ==)$/;"	m	class:CondCode
kEBF16	external/asmjit/src/asmjit/core/cpuinfo.h	/^      kEBF16,                    \/\/!< CPU has EBF16        (extended BFloat16 mode) {A64}.$/;"	m	struct:CpuFeatures::ARM	typeref:enum:CpuFeatures::ARM::
kECV	external/asmjit/src/asmjit/core/cpuinfo.h	/^      kECV,                      \/\/!< CPU has ECV          (enhanced counter virtualization).$/;"	m	struct:CpuFeatures::ARM	typeref:enum:CpuFeatures::ARM::
kEDSP	external/asmjit/src/asmjit/core/cpuinfo.h	/^      kEDSP,                     \/\/!< CPU has EDSP         (ARM\/THUMB only).$/;"	m	struct:CpuFeatures::ARM	typeref:enum:CpuFeatures::ARM::
kELF	external/asmjit/src/asmjit/core/environment.h	/^  kELF,$/;"	m	class:Vendor::Platform::PlatformABI::ObjectFormat
kEM_Denormal	external/asmjit/src/asmjit/x86/x86globals.h	/^  kEM_Denormal   = 0x0002u,     \/\/!< Denormalized operand exception.$/;"	m	class:CondCode::FpuStatusWord::FpuControlWord
kEM_DivByZero	external/asmjit/src/asmjit/x86/x86globals.h	/^  kEM_DivByZero  = 0x0004u,     \/\/!< Division by zero exception.$/;"	m	class:CondCode::FpuStatusWord::FpuControlWord
kEM_Inexact	external/asmjit/src/asmjit/x86/x86globals.h	/^  kEM_Inexact    = 0x0020u,     \/\/!< Inexact operation exception.$/;"	m	class:CondCode::FpuStatusWord::FpuControlWord
kEM_Invalid	external/asmjit/src/asmjit/x86/x86globals.h	/^  kEM_Invalid    = 0x0001u,     \/\/!< Invalid operation exception.$/;"	m	class:CondCode::FpuStatusWord::FpuControlWord
kEM_Mask	external/asmjit/src/asmjit/x86/x86globals.h	/^  kEM_Mask       = 0x003Fu,     \/\/!< Exception mask (0x3F).$/;"	m	class:CondCode::FpuStatusWord::FpuControlWord
kEM_Overflow	external/asmjit/src/asmjit/x86/x86globals.h	/^  kEM_Overflow   = 0x0008u,     \/\/!< Overflow exception.$/;"	m	class:CondCode::FpuStatusWord::FpuControlWord
kEM_Underflow	external/asmjit/src/asmjit/x86/x86globals.h	/^  kEM_Underflow  = 0x0010u,     \/\/!< Underflow exception.$/;"	m	class:CondCode::FpuStatusWord::FpuControlWord
kENCLV	external/asmjit/src/asmjit/core/cpuinfo.h	/^      kENCLV,                    \/\/!< CPU has ENCLV.$/;"	m	struct:CpuFeatures::X86	typeref:enum:CpuFeatures::X86::
kENQCMD	external/asmjit/src/asmjit/core/cpuinfo.h	/^      kENQCMD,                   \/\/!< CPU has ENQCMD           (enqueue stores).$/;"	m	struct:CpuFeatures::X86	typeref:enum:CpuFeatures::X86::
kEQ	external/asmjit/src/asmjit/core/archcommons.h	/^  kEQ             = 0x02u,      \/\/!<        Z==1         (any_sign ==)$/;"	m	class:CondCode
kEQ	external/asmjit/src/asmjit/x86/x86globals.h	/^  kEQ            = 0x00u,       \/\/!< Equal (Quiet), same as \\ref VCmpImm::kEQ_OQ.$/;"	m	class:CondCode::FpuStatusWord::FpuControlWord::CmpImm
kEQ	external/asmjit/src/asmjit/x86/x86globals.h	/^  kEQ            = 0x00u,       \/\/!< Equal.$/;"	m	class:CondCode::FpuStatusWord::FpuControlWord::CmpImm::PCmpStrImm::RoundImm::VCmpImm::VFixupImm::VFPClassImm::VGetMantImm::VPCmpImm
kEQ	external/asmjit/src/asmjit/x86/x86globals.h	/^  kEQ            = 0x04u,       \/\/!< Equal.$/;"	m	class:CondCode::FpuStatusWord::FpuControlWord::CmpImm::PCmpStrImm::RoundImm::VCmpImm::VFixupImm::VFPClassImm::VGetMantImm::VPCmpImm::VPComImm
kEQ_OQ	external/asmjit/src/asmjit/x86/x86globals.h	/^  kEQ_OQ         = 0x00u,       \/\/!< Equal             (Quiet    , Ordered)  , same as \\ref CmpImm::kEQ.$/;"	m	class:CondCode::FpuStatusWord::FpuControlWord::CmpImm::PCmpStrImm::RoundImm::VCmpImm
kEQ_OS	external/asmjit/src/asmjit/x86/x86globals.h	/^  kEQ_OS         = 0x10u,       \/\/!< Equal             (Signaling, Ordered).$/;"	m	class:CondCode::FpuStatusWord::FpuControlWord::CmpImm::PCmpStrImm::RoundImm::VCmpImm
kEQ_UQ	external/asmjit/src/asmjit/x86/x86globals.h	/^  kEQ_UQ         = 0x08u,       \/\/!< Equal             (Quiet    , Unordered).$/;"	m	class:CondCode::FpuStatusWord::FpuControlWord::CmpImm::PCmpStrImm::RoundImm::VCmpImm
kEQ_US	external/asmjit/src/asmjit/x86/x86globals.h	/^  kEQ_US         = 0x18u,       \/\/!< Equal             (Signaling, Unordered).$/;"	m	class:CondCode::FpuStatusWord::FpuControlWord::CmpImm::PCmpStrImm::RoundImm::VCmpImm
kER	external/asmjit/src/asmjit/x86/x86instdb.h	/^  kER = 0x00000004u,$/;"	m	class:InstDB::Mode::OpFlags::InstFlags::Avx512Flags
kERMS	external/asmjit/src/asmjit/core/cpuinfo.h	/^      kERMS,                     \/\/!< CPU has ERMS             (enhanced REP MOVSB\/STOSB).$/;"	m	struct:CpuFeatures::X86	typeref:enum:CpuFeatures::X86::
kEVEREST_SAWTOOTH	external/asmjit/src/asmjit/core/cpuinfo.cpp	/^  kEVEREST_SAWTOOTH   = 0X8765EDEAu  \/\/ Apple A16.$/;"	m	class:arm::AppleFamilyId	file:
kEmbedData	external/asmjit/src/asmjit/core/builder.h	/^  kEmbedData = 5,$/;"	m	class:NodeType
kEmbedLabel	external/asmjit/src/asmjit/core/builder.h	/^  kEmbedLabel = 6,$/;"	m	class:NodeType
kEmbedLabelDelta	external/asmjit/src/asmjit/core/builder.h	/^  kEmbedLabelDelta = 7,$/;"	m	class:NodeType
kEmitterPreservedFlags	external/asmjit/src/asmjit/core/emitter.cpp	/^static constexpr EmitterFlags kEmitterPreservedFlags = EmitterFlags::kOwnLogger | EmitterFlags::kOwnErrorHandler;$/;"	v	file:
kEmscripten	external/asmjit/src/asmjit/core/environment.h	/^  kEmscripten,$/;"	m	class:Vendor::Platform
kEnableVirtRegs	external/asmjit/src/asmjit/core/inst.h	/^  kEnableVirtRegs = 0x01u$/;"	m	class:InstIdParts::InstOptions::InstControlFlow::InstSameRegHint::CpuRWFlags::OpRWFlags::InstRWFlags::ValidationFlags
kEnabled	external/asmjit/src/asmjit/core/virtmem.h	/^  kEnabled = 0x00000001u,$/;"	m	class:VirtMem::CachePolicy::MemoryFlags::HardenedRuntimeFlags
kEqual	external/asmjit/src/asmjit/core/archcommons.h	/^  kEqual          = kEQ,        \/\/!< Equal     `a == b`.$/;"	m	class:CondCode
kEqual	external/asmjit/src/asmjit/x86/x86globals.h	/^  kEqual         = kE,          \/\/!< `a == b` (equal).$/;"	m	class:CondCode
kEqualAny	external/asmjit/src/asmjit/x86/x86globals.h	/^  kEqualAny      = 0x00u << 2,  \/\/!< The arithmetic comparison is "equal".$/;"	m	class:CondCode::FpuStatusWord::FpuControlWord::CmpImm::PCmpStrImm
kEqualEach	external/asmjit/src/asmjit/x86/x86globals.h	/^  kEqualEach     = 0x02u << 2,  \/\/!< The arithmetic comparison is "equal".$/;"	m	class:CondCode::FpuStatusWord::FpuControlWord::CmpImm::PCmpStrImm
kEqualOrdered	external/asmjit/src/asmjit/x86/x86globals.h	/^  kEqualOrdered  = 0x03u << 2,  \/\/!< The arithmetic comparison is "equal".$/;"	m	class:CondCode::FpuStatusWord::FpuControlWord::CmpImm::PCmpStrImm
kEvex	external/asmjit/src/asmjit/x86/x86instdb.h	/^  kEvex = 0x00800000u,$/;"	m	class:InstDB::Mode::OpFlags::InstFlags
kEvexCompat	external/asmjit/src/asmjit/x86/x86instdb.h	/^  kEvexCompat = 0x02000000u,$/;"	m	class:InstDB::Mode::OpFlags::InstFlags
kEvexKReg	external/asmjit/src/asmjit/x86/x86instdb.h	/^  kEvexKReg = 0x04000000u,$/;"	m	class:InstDB::Mode::OpFlags::InstFlags
kEvexTransformable	external/asmjit/src/asmjit/x86/x86instdb.h	/^  kEvexTransformable = 0x10000000u,$/;"	m	class:InstDB::Mode::OpFlags::InstFlags
kEvexTwoOp	external/asmjit/src/asmjit/x86/x86instdb.h	/^  kEvexTwoOp = 0x08000000u,$/;"	m	class:InstDB::Mode::OpFlags::InstFlags
kEvex_W_0	external/asmjit/src/asmjit/x86/x86opcode_p.h	/^    kEvex_W_0      = 0u << kEvex_W_Shift,  \/\/ EVEX.W is 0 (W0).$/;"	m	struct:Opcode	typeref:enum:Opcode::
kEvex_W_1	external/asmjit/src/asmjit/x86/x86opcode_p.h	/^    kEvex_W_1      = 1u << kEvex_W_Shift,  \/\/ EVEX.W is 1 (W1).$/;"	m	struct:Opcode	typeref:enum:Opcode::
kEvex_W_I	external/asmjit/src/asmjit/x86/x86opcode_p.h	/^    kEvex_W_I      = 0u << kEvex_W_Shift,  \/\/ EVEX.W is ignored (WIG).$/;"	m	struct:Opcode	typeref:enum:Opcode::
kEvex_W_Mask	external/asmjit/src/asmjit/x86/x86opcode_p.h	/^    kEvex_W_Mask   = 1u << kEvex_W_Shift,$/;"	m	struct:Opcode	typeref:enum:Opcode::
kEvex_W_Shift	external/asmjit/src/asmjit/x86/x86opcode_p.h	/^    kEvex_W_Shift  = 28,$/;"	m	struct:Opcode	typeref:enum:Opcode::
kEvex_W__	external/asmjit/src/asmjit/x86/x86opcode_p.h	/^    kEvex_W__      = 0u << kEvex_W_Shift,  \/\/ EVEX.W is unspecified (not EVEX instruction).$/;"	m	struct:Opcode	typeref:enum:Opcode::
kEvex_W_x	external/asmjit/src/asmjit/x86/x86opcode_p.h	/^    kEvex_W_x      = 0u << kEvex_W_Shift,  \/\/ EVEX.W is based on instruction operands.$/;"	m	struct:Opcode	typeref:enum:Opcode::
kExecutable	external/asmjit/src/asmjit/core/codeholder.h	/^  kExecutable = 0x00000001u,$/;"	m	class:ExpressionOpType::ExpressionValueType::SectionFlags
kExplainImms	external/asmjit/src/asmjit/core/formatter.h	/^  kExplainImms = 0x00000002u,$/;"	m	class:FormatFlags
kExpression	external/asmjit/src/asmjit/core/codeholder.h	/^  kExpression = 1,$/;"	m	class:ExpressionOpType::ExpressionValueType::SectionFlags::CopySectionFlags::OffsetType::RelocType
kExpression	external/asmjit/src/asmjit/core/codeholder.h	/^  kExpression = 3$/;"	m	class:ExpressionOpType::ExpressionValueType
kExternal	external/asmjit/src/asmjit/core/codeholder.h	/^  kExternal = 3,$/;"	m	class:ExpressionOpType::ExpressionValueType::SectionFlags::CopySectionFlags::OffsetType::RelocType::LabelType
kExtra	external/asmjit/src/asmjit/core/operand.h	/^  kExtra = 18,$/;"	m	class:OperandType::RegType
kExtraNonVirt	external/asmjit/src/asmjit/core/operand.h	/^  kExtraNonVirt = 5,$/;"	m	class:OperandType::RegType::RegGroup
kExtraVirt2	external/asmjit/src/asmjit/core/operand.h	/^  kExtraVirt2 = 2,$/;"	m	class:OperandType::RegType::RegGroup
kExtraVirt3	external/asmjit/src/asmjit/core/operand.h	/^  kExtraVirt3 = 3,$/;"	m	class:OperandType::RegType::RegGroup
kF16	external/asmjit/src/asmjit/core/archcommons.h	/^  kF16 = 10,$/;"	m	class:CondCode::DataType
kF16C	external/asmjit/src/asmjit/core/cpuinfo.h	/^      kF16C,                     \/\/!< CPU has F16C             (AVX FP16 conversion instructions).$/;"	m	struct:CpuFeatures::X86	typeref:enum:CpuFeatures::X86::
kF20000	external/asmjit/src/asmjit/x86/x86opcode_p.h	/^    kF20000 = kPP_F2 | kMM_00,             \/\/ 'F2'$/;"	m	struct:Opcode	typeref:enum:Opcode::
kF20F00	external/asmjit/src/asmjit/x86/x86opcode_p.h	/^    kF20F00 = kPP_F2 | kMM_0F,             \/\/ 'F2.0F'$/;"	m	struct:Opcode	typeref:enum:Opcode::
kF20F01	external/asmjit/src/asmjit/x86/x86opcode_p.h	/^    kF20F01 = kPP_F2 | kMM_0F01,           \/\/ 'F2.0F01'$/;"	m	struct:Opcode	typeref:enum:Opcode::
kF20F38	external/asmjit/src/asmjit/x86/x86opcode_p.h	/^    kF20F38 = kPP_F2 | kMM_0F38,           \/\/ 'F2.0F38'$/;"	m	struct:Opcode	typeref:enum:Opcode::
kF20F3A	external/asmjit/src/asmjit/x86/x86opcode_p.h	/^    kF20F3A = kPP_F2 | kMM_0F3A,           \/\/ 'F2.0F3A'$/;"	m	struct:Opcode	typeref:enum:Opcode::
kF2MAP5	external/asmjit/src/asmjit/x86/x86opcode_p.h	/^    kF2MAP5 = kPP_F2 | kMM_MAP5,           \/\/ 'F2.MAP5'$/;"	m	struct:Opcode	typeref:enum:Opcode::
kF2MAP6	external/asmjit/src/asmjit/x86/x86opcode_p.h	/^    kF2MAP6 = kPP_F2 | kMM_MAP6,           \/\/ 'F2.MAP5'$/;"	m	struct:Opcode	typeref:enum:Opcode::
kF30000	external/asmjit/src/asmjit/x86/x86opcode_p.h	/^    kF30000 = kPP_F3 | kMM_00,             \/\/ 'F3'$/;"	m	struct:Opcode	typeref:enum:Opcode::
kF30F00	external/asmjit/src/asmjit/x86/x86opcode_p.h	/^    kF30F00 = kPP_F3 | kMM_0F,             \/\/ 'F3.0F'$/;"	m	struct:Opcode	typeref:enum:Opcode::
kF30F01	external/asmjit/src/asmjit/x86/x86opcode_p.h	/^    kF30F01 = kPP_F3 | kMM_0F01,           \/\/ 'F3.0F01'$/;"	m	struct:Opcode	typeref:enum:Opcode::
kF30F38	external/asmjit/src/asmjit/x86/x86opcode_p.h	/^    kF30F38 = kPP_F3 | kMM_0F38,           \/\/ 'F3.0F38'$/;"	m	struct:Opcode	typeref:enum:Opcode::
kF30F3A	external/asmjit/src/asmjit/x86/x86opcode_p.h	/^    kF30F3A = kPP_F3 | kMM_0F3A,           \/\/ 'F3.0F3A'$/;"	m	struct:Opcode	typeref:enum:Opcode::
kF32	external/asmjit/src/asmjit/core/archcommons.h	/^  kF32 = 11,$/;"	m	class:CondCode::DataType
kF3MAP5	external/asmjit/src/asmjit/x86/x86opcode_p.h	/^    kF3MAP5 = kPP_F3 | kMM_MAP5,           \/\/ 'F3.MAP5'$/;"	m	struct:Opcode	typeref:enum:Opcode::
kF3MAP6	external/asmjit/src/asmjit/x86/x86opcode_p.h	/^    kF3MAP6 = kPP_F3 | kMM_MAP6,           \/\/ 'F3.MAP5'$/;"	m	struct:Opcode	typeref:enum:Opcode::
kF64	external/asmjit/src/asmjit/core/archcommons.h	/^  kF64 = 12,$/;"	m	class:CondCode::DataType
kFALSE	external/asmjit/src/asmjit/x86/x86globals.h	/^  kFALSE         = 0x03u,       \/\/!< False.$/;"	m	class:CondCode::FpuStatusWord::FpuControlWord::CmpImm::PCmpStrImm::RoundImm::VCmpImm::VFixupImm::VFPClassImm::VGetMantImm::VPCmpImm
kFALSE	external/asmjit/src/asmjit/x86/x86globals.h	/^  kFALSE         = 0x06u,       \/\/!< False.$/;"	m	class:CondCode::FpuStatusWord::FpuControlWord::CmpImm::PCmpStrImm::RoundImm::VCmpImm::VFixupImm::VFPClassImm::VGetMantImm::VPCmpImm::VPComImm
kFALSE_OQ	external/asmjit/src/asmjit/x86/x86globals.h	/^  kFALSE_OQ      = 0x0Bu,       \/\/!< False             (Quiet    , Ordered).$/;"	m	class:CondCode::FpuStatusWord::FpuControlWord::CmpImm::PCmpStrImm::RoundImm::VCmpImm
kFALSE_OS	external/asmjit/src/asmjit/x86/x86globals.h	/^  kFALSE_OS      = 0x1Bu,       \/\/!< False             (Signaling, Ordered).$/;"	m	class:CondCode::FpuStatusWord::FpuControlWord::CmpImm::PCmpStrImm::RoundImm::VCmpImm
kFCMA	external/asmjit/src/asmjit/core/cpuinfo.h	/^      kFCMA,                     \/\/!< CPU has FCMA         (FCADD\/FCMLA).$/;"	m	struct:CpuFeatures::ARM	typeref:enum:CpuFeatures::ARM::
kFGT	external/asmjit/src/asmjit/core/cpuinfo.h	/^      kFGT,                      \/\/!< CPU has FGT          (fine-grained traps).$/;"	m	struct:CpuFeatures::ARM	typeref:enum:CpuFeatures::ARM::
kFGT2	external/asmjit/src/asmjit/core/cpuinfo.h	/^      kFGT2,                     \/\/!< CPU has FGT2         (fine-grained traps 2).$/;"	m	struct:CpuFeatures::ARM	typeref:enum:CpuFeatures::ARM::
kFHM	external/asmjit/src/asmjit/core/cpuinfo.h	/^      kFHM,                      \/\/!< CPU has FHM          (half-precision floating-point FMLAL instructions).$/;"	m	struct:CpuFeatures::ARM	typeref:enum:CpuFeatures::ARM::
kFIRESTORM_ICESTORM	external/asmjit/src/asmjit/core/cpuinfo.cpp	/^  kFIRESTORM_ICESTORM = 0x1B588BB3u, \/\/ Apple A14\/M1 (ARMv8.5-A).$/;"	m	class:arm::AppleFamilyId	file:
kFLAGM	external/asmjit/src/asmjit/core/cpuinfo.h	/^      kFLAGM,                    \/\/!< CPU has FLAGM        (condition flag manipulation) {A64}.$/;"	m	struct:CpuFeatures::ARM	typeref:enum:CpuFeatures::ARM::
kFLAGM2	external/asmjit/src/asmjit/core/cpuinfo.h	/^      kFLAGM2,                   \/\/!< CPU has FLAGM2       (condition flag manipulation version v2) {A64}.$/;"	m	struct:CpuFeatures::ARM	typeref:enum:CpuFeatures::ARM::
kFMA	external/asmjit/src/asmjit/core/cpuinfo.h	/^      kFMA,                      \/\/!< CPU has FMA              (AVX fused-multiply-add - 3 operand form).$/;"	m	struct:CpuFeatures::X86	typeref:enum:CpuFeatures::X86::
kFMA4	external/asmjit/src/asmjit/core/cpuinfo.h	/^      kFMA4,                     \/\/!< CPU has FMA4             (AVX fused-multiply-add - 4 operand form) (deprecated).$/;"	m	struct:CpuFeatures::X86	typeref:enum:CpuFeatures::X86::
kFMAC	external/asmjit/src/asmjit/core/cpuinfo.h	/^      kFMAC,                     \/\/!< CPU has FMAC         (ARM\/THUMB only).$/;"	m	struct:CpuFeatures::ARM	typeref:enum:CpuFeatures::ARM::
kFP	external/asmjit/src/asmjit/core/cpuinfo.h	/^      kFP,                       \/\/!< CPU has FP           (floating-point) (on 32-bit ARM this means VFPv3).$/;"	m	struct:CpuFeatures::ARM	typeref:enum:CpuFeatures::ARM::
kFP16	external/asmjit/src/asmjit/core/cpuinfo.h	/^      kFP16,                     \/\/!< CPU has FP16         (half-precision floating-point data processing).$/;"	m	struct:CpuFeatures::ARM	typeref:enum:CpuFeatures::ARM::
kFP16CONV	external/asmjit/src/asmjit/core/cpuinfo.h	/^      kFP16CONV,                 \/\/!< CPU has FP16CONV     (half-precision float conversion).$/;"	m	struct:CpuFeatures::ARM	typeref:enum:CpuFeatures::ARM::
kFPU	external/asmjit/src/asmjit/core/cpuinfo.h	/^      kFPU,                      \/\/!< CPU has FPU              (FPU support).$/;"	m	struct:CpuFeatures::X86	typeref:enum:CpuFeatures::X86::
kFPU_00	external/asmjit/src/asmjit/x86/x86opcode_p.h	/^    kFPU_00 = kPP_00 | kMM_00,             \/\/ '__' (FPU)$/;"	m	struct:Opcode	typeref:enum:Opcode::
kFPU_2B_Mask	external/asmjit/src/asmjit/x86/x86opcode_p.h	/^    kFPU_2B_Mask   = 0xFF << kFPU_2B_Shift,$/;"	m	struct:Opcode	typeref:enum:Opcode::
kFPU_2B_Shift	external/asmjit/src/asmjit/x86/x86opcode_p.h	/^    kFPU_2B_Shift  = 10,$/;"	m	struct:Opcode	typeref:enum:Opcode::
kFPU_9B	external/asmjit/src/asmjit/x86/x86opcode_p.h	/^    kFPU_9B = kPP_9B | kMM_00,             \/\/ '9B' (FPU)$/;"	m	struct:Opcode	typeref:enum:Opcode::
kFRINTTS	external/asmjit/src/asmjit/core/cpuinfo.h	/^      kFRINTTS,                  \/\/!< CPU has FRINTTS      (FRINT[32|64][X|Z] instructions) {A64}.$/;"	m	struct:CpuFeatures::ARM	typeref:enum:CpuFeatures::ARM::
kFSGSBASE	external/asmjit/src/asmjit/core/cpuinfo.h	/^      kFSGSBASE,                 \/\/!< CPU has FSGSBASE.$/;"	m	struct:CpuFeatures::X86	typeref:enum:CpuFeatures::X86::
kFSRC	external/asmjit/src/asmjit/core/cpuinfo.h	/^      kFSRC,                     \/\/!< CPU has FSRC             (fast short REP CMPSB|SCASB).$/;"	m	struct:CpuFeatures::X86	typeref:enum:CpuFeatures::X86::
kFSRM	external/asmjit/src/asmjit/core/cpuinfo.h	/^      kFSRM,                     \/\/!< CPU has FSRM             (fast short REP MOVSB).$/;"	m	struct:CpuFeatures::X86	typeref:enum:CpuFeatures::X86::
kFSRS	external/asmjit/src/asmjit/core/cpuinfo.h	/^      kFSRS,                     \/\/!< CPU has FSRS             (fast short REP STOSB)$/;"	m	struct:CpuFeatures::X86	typeref:enum:CpuFeatures::X86::
kFXSR	external/asmjit/src/asmjit/core/cpuinfo.h	/^      kFXSR,                     \/\/!< CPU has FXSR             (FXSAVE\/FXRSTOR instructions).$/;"	m	struct:CpuFeatures::X86	typeref:enum:CpuFeatures::X86::
kFXSROPT	external/asmjit/src/asmjit/core/cpuinfo.h	/^      kFXSROPT,                  \/\/!< CPU has FXSROTP          (FXSAVE\/FXRSTOR is optimized).$/;"	m	struct:CpuFeatures::X86	typeref:enum:CpuFeatures::X86::
kFZRM	external/asmjit/src/asmjit/core/cpuinfo.h	/^      kFZRM,                     \/\/!< CPU has FZRM             (fast zero-length REP MOVSB).$/;"	m	struct:CpuFeatures::X86	typeref:enum:CpuFeatures::X86::
kFastCall	external/asmjit/src/asmjit/core/func.h	/^  kFastCall = 3,$/;"	m	class:CallConvId
kFillUnusedMemory	external/asmjit/src/asmjit/core/jitallocator.h	/^  kFillUnusedMemory = 0x00000004u,$/;"	m	class:JitAllocatorOptions
kFinalized	external/asmjit/src/asmjit/core/emitter.h	/^  kFinalized = 0x40u,$/;"	m	class:AlignMode::EmitterType::EmitterFlags
kFixedImmMask	external/asmjit/src/asmjit/x86/x86globals.h	/^  kFixedImmMask  = 0xF0u        \/\/!< Fixed length value mask.$/;"	m	class:CondCode::FpuStatusWord::FpuControlWord::CmpImm::PCmpStrImm::RoundImm::VCmpImm::VFixupImm::VFPClassImm::VGetMantImm::VPCmpImm::VPComImm::VRangeImm::VReduceImm
kFlagAmbiguous	external/asmjit/src/asmjit/x86/x86instdb_p.h	/^    kFlagAmbiguous = 0x01,$/;"	e	enum:uint8_t
kFlagFeatureIfRMI	external/asmjit/src/asmjit/x86/x86instdb_p.h	/^    kFlagFeatureIfRMI = 0x08$/;"	e	enum:uint8_t
kFlagImplicit	external/asmjit/src/asmjit/x86/x86instdb.h	/^  kFlagImplicit    = 0x0080000000000000u, \/\/!< Flag: Operand is implicit.$/;"	m	class:InstDB::Mode::OpFlags
kFlagIsDone	external/asmjit/src/asmjit/core/func.h	/^    kFlagIsDone       = 0x00000800u,   \/\/!< Used internally by arguments allocator.$/;"	m	struct:CallConvId::CallConvStrategy::CallConvFlags::FuncValue	typeref:enum:CallConvId::CallConvStrategy::CallConvFlags::FuncValue::
kFlagIsIndirect	external/asmjit/src/asmjit/core/func.h	/^    kFlagIsIndirect   = 0x00000400u,   \/\/!< Passed indirectly by reference (internally a pointer).$/;"	m	struct:CallConvId::CallConvStrategy::CallConvFlags::FuncValue	typeref:enum:CallConvId::CallConvStrategy::CallConvFlags::FuncValue::
kFlagIsReg	external/asmjit/src/asmjit/core/func.h	/^    kFlagIsReg        = 0x00000100u,   \/\/!< Passed by register.$/;"	m	struct:CallConvId::CallConvStrategy::CallConvFlags::FuncValue	typeref:enum:CallConvId::CallConvStrategy::CallConvFlags::FuncValue::
kFlagIsStack	external/asmjit/src/asmjit/core/func.h	/^    kFlagIsStack      = 0x00000200u,   \/\/!< Passed by stack.$/;"	m	struct:CallConvId::CallConvStrategy::CallConvFlags::FuncValue	typeref:enum:CallConvId::CallConvStrategy::CallConvFlags::FuncValue::
kFlagMask	external/asmjit/src/asmjit/x86/x86instdb.h	/^  kFlagMask        = 0x009F000000000000u, \/\/!< Mask of all flags.$/;"	m	class:InstDB::Mode::OpFlags
kFlagMemBase	external/asmjit/src/asmjit/x86/x86instdb.h	/^  kFlagMemBase     = 0x0001000000000000u, \/\/!< Flag: Only memory base is allowed (no index, no offset).$/;"	m	class:InstDB::Mode::OpFlags
kFlagMemDs	external/asmjit/src/asmjit/x86/x86instdb.h	/^  kFlagMemDs       = 0x0002000000000000u, \/\/!< Flag: Implicit memory operand's DS segment.$/;"	m	class:InstDB::Mode::OpFlags
kFlagMemEs	external/asmjit/src/asmjit/x86/x86instdb.h	/^  kFlagMemEs       = 0x0004000000000000u, \/\/!< Flag: Implicit memory operand's ES segment.$/;"	m	class:InstDB::Mode::OpFlags
kFlagMib	external/asmjit/src/asmjit/x86/x86instdb.h	/^  kFlagMib         = 0x0008000000000000u, \/\/!< Flag: Operand is MIB (base+index) pointer.$/;"	m	class:InstDB::Mode::OpFlags
kFlagMovssMovsd	external/asmjit/src/asmjit/x86/x86instdb_p.h	/^    kFlagMovssMovsd = 0x04,$/;"	e	enum:uint8_t
kFlagPextrw	external/asmjit/src/asmjit/x86/x86instdb_p.h	/^    kFlagPextrw = 0x02,$/;"	e	enum:uint8_t
kFlagStackArg	external/asmjit/src/asmjit/core/rastack_p.h	/^    kFlagStackArg = 0x0002u$/;"	m	struct:RAStackSlot	typeref:enum:RAStackSlot::
kFlagTMem	external/asmjit/src/asmjit/x86/x86instdb.h	/^  kFlagTMem        = 0x0010000000000000u, \/\/!< Flag: Operand is TMEM (sib_mem), AMX memory pointer.$/;"	m	class:InstDB::Mode::OpFlags
kFloat32	external/asmjit/src/asmjit/core/type.h	/^  kFloat32 = 42,$/;"	m	class:TypeId
kFloat32x1	external/asmjit/src/asmjit/core/type.h	/^  kFloat32x1 = 59,$/;"	m	class:TypeId
kFloat32x16	external/asmjit/src/asmjit/core/type.h	/^  kFloat32x16 = 99,$/;"	m	class:TypeId
kFloat32x2	external/asmjit/src/asmjit/core/type.h	/^  kFloat32x2 = 69,$/;"	m	class:TypeId
kFloat32x4	external/asmjit/src/asmjit/core/type.h	/^  kFloat32x4 = 79,$/;"	m	class:TypeId
kFloat32x8	external/asmjit/src/asmjit/core/type.h	/^  kFloat32x8 = 89,$/;"	m	class:TypeId
kFloat64	external/asmjit/src/asmjit/core/type.h	/^  kFloat64 = 43,$/;"	m	class:TypeId
kFloat64x1	external/asmjit/src/asmjit/core/type.h	/^  kFloat64x1 = 70,$/;"	m	class:TypeId
kFloat64x2	external/asmjit/src/asmjit/core/type.h	/^  kFloat64x2 = 80,$/;"	m	class:TypeId
kFloat64x4	external/asmjit/src/asmjit/core/type.h	/^  kFloat64x4 = 90,$/;"	m	class:TypeId
kFloat64x8	external/asmjit/src/asmjit/core/type.h	/^  kFloat64x8 = 100,$/;"	m	class:TypeId
kFloat80	external/asmjit/src/asmjit/core/type.h	/^  kFloat80 = 44,$/;"	m	class:TypeId
kFlushAfterWrite	external/asmjit/src/asmjit/core/virtmem.h	/^  kFlushAfterWrite = 1,$/;"	m	class:VirtMem::CachePolicy
kFormatIndex	external/asmjit/src/asmjit/x86/x86formatter.cpp	/^    kFormatIndex  = X == uint32_t(RegType::kX86_GpbLo) ? 1   :$/;"	e	enum:RegFormatInfo_T::__anon2	file:
kFpu	external/asmjit/src/asmjit/x86/x86instdb.h	/^  kFpu = 0x00000100u,$/;"	m	class:InstDB::Mode::OpFlags::InstFlags
kFpuM16	external/asmjit/src/asmjit/x86/x86instdb.h	/^  kFpuM16 = 0x00000800u,$/;"	m	class:InstDB::Mode::OpFlags::InstFlags
kFpuM32	external/asmjit/src/asmjit/x86/x86instdb.h	/^  kFpuM32 = 0x00001000u,$/;"	m	class:InstDB::Mode::OpFlags::InstFlags
kFpuM64	external/asmjit/src/asmjit/x86/x86instdb.h	/^  kFpuM64 = 0x00002000u,$/;"	m	class:InstDB::Mode::OpFlags::InstFlags
kFpuM80	external/asmjit/src/asmjit/x86/x86instdb.h	/^  kFpuM80 = 0x00000800u,$/;"	m	class:InstDB::Mode::OpFlags::InstFlags
kFreeBSD	external/asmjit/src/asmjit/core/environment.h	/^  kFreeBSD,$/;"	m	class:Vendor::Platform
kFunc	external/asmjit/src/asmjit/core/builder.h	/^  kFunc = 16,$/;"	m	class:NodeType
kFuncEnd	external/asmjit/src/asmjit/core/builder.h	/^  kFuncEnd = 1u$/;"	m	class:NodeType::NodeFlags::SentinelType
kFuncRet	external/asmjit/src/asmjit/core/builder.h	/^  kFuncRet = 17,$/;"	m	class:NodeType
kG	external/asmjit/src/asmjit/x86/x86globals.h	/^  kG             = 0x0Fu,       \/\/!< ZF==0 & SF==OF (signed > )$/;"	m	class:CondCode
kGCS	external/asmjit/src/asmjit/core/cpuinfo.h	/^      kGCS,                      \/\/!< CPU has GCS          (guarded control stack extension) {A64}.$/;"	m	struct:CpuFeatures::ARM	typeref:enum:CpuFeatures::ARM::
kGE	external/asmjit/src/asmjit/core/archcommons.h	/^  kGE             = 0x0Cu,      \/\/!<               N==V  (signed   >=)$/;"	m	class:CondCode
kGE	external/asmjit/src/asmjit/x86/x86globals.h	/^  kGE            = 0x03u,       \/\/!< Greater\/Equal.$/;"	m	class:CondCode::FpuStatusWord::FpuControlWord::CmpImm::PCmpStrImm::RoundImm::VCmpImm::VFixupImm::VFPClassImm::VGetMantImm::VPCmpImm::VPComImm
kGE	external/asmjit/src/asmjit/x86/x86globals.h	/^  kGE            = 0x05u,       \/\/!< Greater\/Equal.$/;"	m	class:CondCode::FpuStatusWord::FpuControlWord::CmpImm::PCmpStrImm::RoundImm::VCmpImm::VFixupImm::VFPClassImm::VGetMantImm::VPCmpImm
kGE	external/asmjit/src/asmjit/x86/x86globals.h	/^  kGE            = 0x0Du,       \/\/!<         SF==OF (signed >=)$/;"	m	class:CondCode
kGEODE	external/asmjit/src/asmjit/core/cpuinfo.h	/^      kGEODE,                    \/\/!< CPU has GEODE extensions (GEODE 3DNOW additions) (deprecated).$/;"	m	struct:CpuFeatures::X86	typeref:enum:CpuFeatures::X86::
kGE_OQ	external/asmjit/src/asmjit/x86/x86globals.h	/^  kGE_OQ         = 0x1Du,       \/\/!< Greater\/Equal     (Quiet    , Ordered).$/;"	m	class:CondCode::FpuStatusWord::FpuControlWord::CmpImm::PCmpStrImm::RoundImm::VCmpImm
kGE_OS	external/asmjit/src/asmjit/x86/x86globals.h	/^  kGE_OS         = 0x0Du,       \/\/!< Greater\/Equal     (Signaling, Ordered).$/;"	m	class:CondCode::FpuStatusWord::FpuControlWord::CmpImm::PCmpStrImm::RoundImm::VCmpImm
kGFNI	external/asmjit/src/asmjit/core/cpuinfo.h	/^      kGFNI,                     \/\/!< CPU has GFNI             (galois field instructions).$/;"	m	struct:CpuFeatures::X86	typeref:enum:CpuFeatures::X86::
kGNU	external/asmjit/src/asmjit/core/environment.h	/^  kGNU,$/;"	m	class:Vendor::Platform::PlatformABI
kGT	external/asmjit/src/asmjit/core/archcommons.h	/^  kGT             = 0x0Eu,      \/\/!<        Z==0 & N==V  (signed   > )$/;"	m	class:CondCode
kGT	external/asmjit/src/asmjit/x86/x86globals.h	/^  kGT            = 0x02u,       \/\/!< Greater.$/;"	m	class:CondCode::FpuStatusWord::FpuControlWord::CmpImm::PCmpStrImm::RoundImm::VCmpImm::VFixupImm::VFPClassImm::VGetMantImm::VPCmpImm::VPComImm
kGT	external/asmjit/src/asmjit/x86/x86globals.h	/^  kGT            = 0x06u,       \/\/!< Greater.$/;"	m	class:CondCode::FpuStatusWord::FpuControlWord::CmpImm::PCmpStrImm::RoundImm::VCmpImm::VFixupImm::VFPClassImm::VGetMantImm::VPCmpImm
kGT_OQ	external/asmjit/src/asmjit/x86/x86globals.h	/^  kGT_OQ         = 0x1Eu,       \/\/!< Greater           (Quiet    , Ordered).$/;"	m	class:CondCode::FpuStatusWord::FpuControlWord::CmpImm::PCmpStrImm::RoundImm::VCmpImm
kGT_OS	external/asmjit/src/asmjit/x86/x86globals.h	/^  kGT_OS         = 0x0Eu,       \/\/!< Greater           (Signaling, Ordered).$/;"	m	class:CondCode::FpuStatusWord::FpuControlWord::CmpImm::PCmpStrImm::RoundImm::VCmpImm
kGlobal	external/asmjit/src/asmjit/core/codeholder.h	/^  kGlobal = 2,$/;"	m	class:ExpressionOpType::ExpressionValueType::SectionFlags::CopySectionFlags::OffsetType::RelocType::LabelType
kGlobal	external/asmjit/src/asmjit/core/constpool.h	/^  kGlobal = 1,$/;"	m	class:ConstPoolScope
kGp	external/asmjit/src/asmjit/core/operand.h	/^  kGp = 0,$/;"	m	class:OperandType::RegType::RegGroup
kGp16	external/asmjit/src/asmjit/core/operand.h	/^  kGp16 = 5,$/;"	m	class:OperandType::RegType
kGp32	external/asmjit/src/asmjit/core/operand.h	/^  kGp32 = 6,$/;"	m	class:OperandType::RegType
kGp64	external/asmjit/src/asmjit/core/operand.h	/^  kGp64 = 7,$/;"	m	class:OperandType::RegType
kGp8Hi	external/asmjit/src/asmjit/core/operand.h	/^  kGp8Hi = 4,$/;"	m	class:OperandType::RegType
kGp8Lo	external/asmjit/src/asmjit/core/operand.h	/^  kGp8Lo = 3,$/;"	m	class:OperandType::RegType
kGroup	external/asmjit/src/asmjit/core/operand.h	/^    kGroup = uint32_t(RegGroup::kGp),$/;"	m	struct:OperandType::RegType::RegGroup::BaseRegTraits	typeref:enum:OperandType::RegType::RegGroup::BaseRegTraits::
kGrowThreshold	external/asmjit/src/asmjit/core/globals.h	/^static constexpr uint32_t kGrowThreshold = 1024 * 1024 * 16;$/;"	m	namespace:ByteOrder::ResetPolicy::Globals
kHBC	external/asmjit/src/asmjit/core/cpuinfo.h	/^      kHBC,                      \/\/!< CPU has HBC          (hinted conditional branches) {A64}$/;"	m	struct:CpuFeatures::ARM	typeref:enum:CpuFeatures::ARM::
kHCX	external/asmjit/src/asmjit/core/cpuinfo.h	/^      kHCX,                      \/\/!< CPU has HCX          (support for the HCRX_EL2 register) {A64}.$/;"	m	struct:CpuFeatures::ARM	typeref:enum:CpuFeatures::ARM::
kHI	external/asmjit/src/asmjit/core/archcommons.h	/^  kHI             = 0x0Au,      \/\/!< C==1 & Z==0         (unsigned > )$/;"	m	class:CondCode
kHLE	external/asmjit/src/asmjit/core/cpuinfo.h	/^      kHLE,                      \/\/!< CPU has HLE.$/;"	m	struct:CpuFeatures::X86	typeref:enum:CpuFeatures::X86::
kHRESET	external/asmjit/src/asmjit/core/cpuinfo.h	/^      kHRESET,                   \/\/!< CPU has HRESET.$/;"	m	struct:CpuFeatures::X86	typeref:enum:CpuFeatures::X86::
kHS	external/asmjit/src/asmjit/core/archcommons.h	/^  kHS             = 0x04u,      \/\/!< C==1                (unsigned >=)$/;"	m	class:CondCode
kHURRICANE	external/asmjit/src/asmjit/core/cpuinfo.cpp	/^  kHURRICANE          = 0x67CEEE93u, \/\/ Apple A10 (ARMv8.1-A).$/;"	m	class:arm::AppleFamilyId	file:
kHWOptional	external/asmjit/src/asmjit/core/cpuinfo.cpp	/^  kHWOptional,$/;"	m	class:arm::AppleFamilyId::OpenBSDAArch64CPUID::AppleFeatureType	file:
kHWord	external/asmjit/src/asmjit/core/archtraits.h	/^  kHWord,$/;"	m	class:Arch::SubArch::ArchTypeNameId
kHaiku	external/asmjit/src/asmjit/core/environment.h	/^  kHaiku,$/;"	m	class:Vendor::Platform
kHalf	external/asmjit/src/asmjit/core/archtraits.h	/^  kHalf,$/;"	m	class:Arch::SubArch::ArchTypeNameId
kHard	external/asmjit/src/asmjit/core/globals.h	/^  kHard = 1$/;"	m	class:ByteOrder::ResetPolicy
kHardFloat	external/asmjit/src/asmjit/core/func.h	/^  kHardFloat = 10,$/;"	m	class:CallConvId
kHasConsecutive	external/asmjit/src/asmjit/core/rapass_p.h	/^  kHasConsecutive = 0x00000200u,$/;"	m	class:RABlockFlags
kHasFixedRegs	external/asmjit/src/asmjit/core/rapass_p.h	/^  kHasFixedRegs = 0x00000800u,$/;"	m	class:RABlockFlags
kHasFuncCalls	external/asmjit/src/asmjit/core/func.h	/^  kHasFuncCalls = 0x00000020u,$/;"	m	class:CallConvId::CallConvStrategy::CallConvFlags::FuncAttributes
kHasFuncCalls	external/asmjit/src/asmjit/core/rapass_p.h	/^  kHasFuncCalls = 0x00001000u$/;"	m	class:RABlockFlags
kHasJumpTable	external/asmjit/src/asmjit/core/rapass_p.h	/^  kHasJumpTable = 0x00000400u,$/;"	m	class:RABlockFlags
kHasNoEffect	external/asmjit/src/asmjit/core/builder.h	/^  kHasNoEffect = 0x10u,$/;"	m	class:NodeType::NodeFlags
kHasPreservedFP	external/asmjit/src/asmjit/core/func.h	/^  kHasPreservedFP = 0x00000010u,$/;"	m	class:CallConvId::CallConvStrategy::CallConvFlags::FuncAttributes
kHasTerminator	external/asmjit/src/asmjit/core/rapass_p.h	/^  kHasTerminator = 0x00000100u,$/;"	m	class:RABlockFlags
kHasVarArgs	external/asmjit/src/asmjit/core/func.h	/^  kHasVarArgs = 0x00000001u,$/;"	m	class:CallConvId::CallConvStrategy::CallConvFlags::FuncAttributes
kHexImms	external/asmjit/src/asmjit/core/formatter.h	/^  kHexImms = 0x00000004u,$/;"	m	class:FormatFlags
kHexOffsets	external/asmjit/src/asmjit/core/formatter.h	/^  kHexOffsets = 0x00000008u,$/;"	m	class:FormatFlags
kHost	external/asmjit/src/asmjit/core/archtraits.h	/^  kHost =$/;"	m	class:Arch
kHost	external/asmjit/src/asmjit/core/archtraits.h	/^  kHost =$/;"	m	class:Arch::SubArch
kHost	external/asmjit/src/asmjit/core/environment.h	/^  kHost =$/;"	m	class:Vendor
kHost	external/asmjit/src/asmjit/core/environment.h	/^  kHost =$/;"	m	class:Vendor::Platform
kHost	external/asmjit/src/asmjit/core/environment.h	/^  kHost =$/;"	m	class:Vendor::Platform::PlatformABI
kHost	external/asmjit/src/asmjit/core/func.h	/^  kHost =$/;"	m	class:CallConvId
kHurd	external/asmjit/src/asmjit/core/environment.h	/^  kHurd,$/;"	m	class:Vendor::Platform
kI486	external/asmjit/src/asmjit/core/cpuinfo.h	/^      kI486,                     \/\/!< CPU has I486 features    (I486+ support).$/;"	m	struct:CpuFeatures::X86	typeref:enum:CpuFeatures::X86::
kI8MM	external/asmjit/src/asmjit/core/cpuinfo.h	/^      kI8MM,                     \/\/!< CPU has I8MM         (int8 matrix multiplication) {A64}.$/;"	m	struct:CpuFeatures::ARM	typeref:enum:CpuFeatures::ARM::
kIC_Affine	external/asmjit/src/asmjit/x86/x86globals.h	/^  kIC_Affine     = 0x1000u      \/\/!< Affine (default).$/;"	m	class:CondCode::FpuStatusWord::FpuControlWord
kIC_Mask	external/asmjit/src/asmjit/x86/x86globals.h	/^  kIC_Mask       = 0x1000u,     \/\/!< Infinity control.$/;"	m	class:CondCode::FpuStatusWord::FpuControlWord
kIC_Projective	external/asmjit/src/asmjit/x86/x86globals.h	/^  kIC_Projective = 0x0000u,     \/\/!< Projective (not supported on X64).$/;"	m	class:CondCode::FpuStatusWord::FpuControlWord
kIDIVA	external/asmjit/src/asmjit/core/cpuinfo.h	/^      kIDIVA,                    \/\/!< CPU has IDIV         (hardware SDIV and UDIV in ARM mode).$/;"	m	struct:CpuFeatures::ARM	typeref:enum:CpuFeatures::ARM::
kIDIVT	external/asmjit/src/asmjit/core/cpuinfo.h	/^      kIDIVT,                    \/\/!< CPU has IDIV         (hardware SDIV and UDIV in THUMB mode).$/;"	m	struct:CpuFeatures::ARM	typeref:enum:CpuFeatures::ARM::
kIEOnNInf	external/asmjit/src/asmjit/x86/x86globals.h	/^  kIEOnNInf      = 0x20u,$/;"	m	class:CondCode::FpuStatusWord::FpuControlWord::CmpImm::PCmpStrImm::RoundImm::VCmpImm::VFixupImm
kIEOnNegative	external/asmjit/src/asmjit/x86/x86globals.h	/^  kIEOnNegative  = 0x40u,$/;"	m	class:CondCode::FpuStatusWord::FpuControlWord::CmpImm::PCmpStrImm::RoundImm::VCmpImm::VFixupImm
kIEOnOne	external/asmjit/src/asmjit/x86/x86globals.h	/^  kIEOnOne       = 0x08u,$/;"	m	class:CondCode::FpuStatusWord::FpuControlWord::CmpImm::PCmpStrImm::RoundImm::VCmpImm::VFixupImm
kIEOnPInf	external/asmjit/src/asmjit/x86/x86globals.h	/^  kIEOnPInf      = 0x80u$/;"	m	class:CondCode::FpuStatusWord::FpuControlWord::CmpImm::PCmpStrImm::RoundImm::VCmpImm::VFixupImm
kIEOnSNaN	external/asmjit/src/asmjit/x86/x86globals.h	/^  kIEOnSNaN      = 0x10u,$/;"	m	class:CondCode::FpuStatusWord::FpuControlWord::CmpImm::PCmpStrImm::RoundImm::VCmpImm::VFixupImm
kIEOnZero	external/asmjit/src/asmjit/x86/x86globals.h	/^  kIEOnZero      = 0x02u,$/;"	m	class:CondCode::FpuStatusWord::FpuControlWord::CmpImm::PCmpStrImm::RoundImm::VCmpImm::VFixupImm
kINVLPGB	external/asmjit/src/asmjit/core/cpuinfo.h	/^      kINVLPGB,                  \/\/!< CPU has INVLPGB.$/;"	m	struct:CpuFeatures::X86	typeref:enum:CpuFeatures::X86::
kIOS	external/asmjit/src/asmjit/core/environment.h	/^  kIOS,$/;"	m	class:Vendor::Platform
kISortThreshold	external/asmjit/src/asmjit/core/support.h	/^      kISortThreshold = 7$/;"	m	struct:Support::Internal::SortOrder::Internal::QSortImpl	typeref:enum:Support::Internal::SortOrder::Internal::QSortImpl::
kIdAbs_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdAbs_v,                            \/\/!< Instruction 'abs' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdAdc	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdAdc,                              \/\/!< Instruction 'adc'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdAdcs	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdAdcs,                             \/\/!< Instruction 'adcs'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdAdd	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdAdd,                              \/\/!< Instruction 'add'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdAdd_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdAdd_v,                            \/\/!< Instruction 'add' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdAddg	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdAddg,                             \/\/!< Instruction 'addg'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdAddhn2_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdAddhn2_v,                         \/\/!< Instruction 'addhn2' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdAddhn_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdAddhn_v,                          \/\/!< Instruction 'addhn' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdAddp_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdAddp_v,                           \/\/!< Instruction 'addp' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdAdds	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdAdds,                             \/\/!< Instruction 'adds'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdAddv_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdAddv_v,                           \/\/!< Instruction 'addv' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdAdr	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdAdr,                              \/\/!< Instruction 'adr'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdAdrp	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdAdrp,                             \/\/!< Instruction 'adrp'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdAesd_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdAesd_v,                           \/\/!< Instruction 'aesd' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdAese_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdAese_v,                           \/\/!< Instruction 'aese' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdAesimc_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdAesimc_v,                         \/\/!< Instruction 'aesimc' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdAesmc_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdAesmc_v,                          \/\/!< Instruction 'aesmc' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdAnd	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdAnd,                              \/\/!< Instruction 'and'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdAnd_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdAnd_v,                            \/\/!< Instruction 'and' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdAnds	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdAnds,                             \/\/!< Instruction 'ands'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdAsr	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdAsr,                              \/\/!< Instruction 'asr'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdAsrv	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdAsrv,                             \/\/!< Instruction 'asrv'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdAt	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdAt,                               \/\/!< Instruction 'at'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdAutda	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdAutda,                            \/\/!< Instruction 'autda'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdAutdb	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdAutdb,                            \/\/!< Instruction 'autdb'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdAutdza	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdAutdza,                           \/\/!< Instruction 'autdza'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdAutdzb	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdAutdzb,                           \/\/!< Instruction 'autdzb'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdAutia	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdAutia,                            \/\/!< Instruction 'autia'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdAutia1716	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdAutia1716,                        \/\/!< Instruction 'autia1716'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdAutiasp	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdAutiasp,                          \/\/!< Instruction 'autiasp'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdAutiaz	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdAutiaz,                           \/\/!< Instruction 'autiaz'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdAutib	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdAutib,                            \/\/!< Instruction 'autib'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdAutib1716	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdAutib1716,                        \/\/!< Instruction 'autib1716'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdAutibsp	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdAutibsp,                          \/\/!< Instruction 'autibsp'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdAutibz	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdAutibz,                           \/\/!< Instruction 'autibz'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdAutiza	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdAutiza,                           \/\/!< Instruction 'autiza'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdAutizb	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdAutizb,                           \/\/!< Instruction 'autizb'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdAxflag	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdAxflag,                           \/\/!< Instruction 'axflag'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdB	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdB,                                \/\/!< Instruction 'b'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdBcax_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdBcax_v,                           \/\/!< Instruction 'bcax' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdBfc	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdBfc,                              \/\/!< Instruction 'bfc'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdBfcvt_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdBfcvt_v,                          \/\/!< Instruction 'bfcvt' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdBfcvtn2_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdBfcvtn2_v,                        \/\/!< Instruction 'bfcvtn2' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdBfcvtn_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdBfcvtn_v,                         \/\/!< Instruction 'bfcvtn' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdBfdot_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdBfdot_v,                          \/\/!< Instruction 'bfdot' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdBfi	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdBfi,                              \/\/!< Instruction 'bfi'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdBfm	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdBfm,                              \/\/!< Instruction 'bfm'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdBfmlalb_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdBfmlalb_v,                        \/\/!< Instruction 'bfmlalb' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdBfmlalt_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdBfmlalt_v,                        \/\/!< Instruction 'bfmlalt' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdBfmmla_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdBfmmla_v,                         \/\/!< Instruction 'bfmmla' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdBfxil	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdBfxil,                            \/\/!< Instruction 'bfxil'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdBic	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdBic,                              \/\/!< Instruction 'bic'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdBic_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdBic_v,                            \/\/!< Instruction 'bic' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdBics	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdBics,                             \/\/!< Instruction 'bics'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdBif_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdBif_v,                            \/\/!< Instruction 'bif' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdBit_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdBit_v,                            \/\/!< Instruction 'bit' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdBl	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdBl,                               \/\/!< Instruction 'bl'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdBlr	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdBlr,                              \/\/!< Instruction 'blr'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdBr	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdBr,                               \/\/!< Instruction 'br'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdBrk	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdBrk,                              \/\/!< Instruction 'brk'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdBsl_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdBsl_v,                            \/\/!< Instruction 'bsl' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdCas	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdCas,                              \/\/!< Instruction 'cas'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdCasa	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdCasa,                             \/\/!< Instruction 'casa'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdCasab	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdCasab,                            \/\/!< Instruction 'casab'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdCasah	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdCasah,                            \/\/!< Instruction 'casah'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdCasal	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdCasal,                            \/\/!< Instruction 'casal'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdCasalb	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdCasalb,                           \/\/!< Instruction 'casalb'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdCasalh	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdCasalh,                           \/\/!< Instruction 'casalh'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdCasb	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdCasb,                             \/\/!< Instruction 'casb'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdCash	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdCash,                             \/\/!< Instruction 'cash'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdCasl	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdCasl,                             \/\/!< Instruction 'casl'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdCaslb	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdCaslb,                            \/\/!< Instruction 'caslb'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdCaslh	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdCaslh,                            \/\/!< Instruction 'caslh'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdCasp	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdCasp,                             \/\/!< Instruction 'casp'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdCaspa	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdCaspa,                            \/\/!< Instruction 'caspa'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdCaspal	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdCaspal,                           \/\/!< Instruction 'caspal'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdCaspl	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdCaspl,                            \/\/!< Instruction 'caspl'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdCbnz	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdCbnz,                             \/\/!< Instruction 'cbnz'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdCbz	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdCbz,                              \/\/!< Instruction 'cbz'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdCcmn	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdCcmn,                             \/\/!< Instruction 'ccmn'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdCcmp	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdCcmp,                             \/\/!< Instruction 'ccmp'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdCfinv	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdCfinv,                            \/\/!< Instruction 'cfinv'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdCinc	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdCinc,                             \/\/!< Instruction 'cinc'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdCinv	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdCinv,                             \/\/!< Instruction 'cinv'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdClrex	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdClrex,                            \/\/!< Instruction 'clrex'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdCls	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdCls,                              \/\/!< Instruction 'cls'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdCls_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdCls_v,                            \/\/!< Instruction 'cls' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdClz	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdClz,                              \/\/!< Instruction 'clz'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdClz_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdClz_v,                            \/\/!< Instruction 'clz' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdCmeq_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdCmeq_v,                           \/\/!< Instruction 'cmeq' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdCmge_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdCmge_v,                           \/\/!< Instruction 'cmge' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdCmgt_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdCmgt_v,                           \/\/!< Instruction 'cmgt' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdCmhi_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdCmhi_v,                           \/\/!< Instruction 'cmhi' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdCmhs_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdCmhs_v,                           \/\/!< Instruction 'cmhs' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdCmle_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdCmle_v,                           \/\/!< Instruction 'cmle' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdCmlt_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdCmlt_v,                           \/\/!< Instruction 'cmlt' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdCmn	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdCmn,                              \/\/!< Instruction 'cmn'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdCmp	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdCmp,                              \/\/!< Instruction 'cmp'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdCmpp	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdCmpp,                             \/\/!< Instruction 'cmpp'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdCmtst_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdCmtst_v,                          \/\/!< Instruction 'cmtst' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdCneg	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdCneg,                             \/\/!< Instruction 'cneg'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdCnt_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdCnt_v,                            \/\/!< Instruction 'cnt' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdCrc32b	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdCrc32b,                           \/\/!< Instruction 'crc32b'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdCrc32cb	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdCrc32cb,                          \/\/!< Instruction 'crc32cb'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdCrc32ch	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdCrc32ch,                          \/\/!< Instruction 'crc32ch'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdCrc32cw	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdCrc32cw,                          \/\/!< Instruction 'crc32cw'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdCrc32cx	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdCrc32cx,                          \/\/!< Instruction 'crc32cx'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdCrc32h	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdCrc32h,                           \/\/!< Instruction 'crc32h'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdCrc32w	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdCrc32w,                           \/\/!< Instruction 'crc32w'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdCrc32x	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdCrc32x,                           \/\/!< Instruction 'crc32x'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdCsdb	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdCsdb,                             \/\/!< Instruction 'csdb'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdCsel	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdCsel,                             \/\/!< Instruction 'csel'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdCset	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdCset,                             \/\/!< Instruction 'cset'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdCsetm	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdCsetm,                            \/\/!< Instruction 'csetm'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdCsinc	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdCsinc,                            \/\/!< Instruction 'csinc'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdCsinv	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdCsinv,                            \/\/!< Instruction 'csinv'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdCsneg	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdCsneg,                            \/\/!< Instruction 'csneg'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdDc	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdDc,                               \/\/!< Instruction 'dc'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdDcps1	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdDcps1,                            \/\/!< Instruction 'dcps1'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdDcps2	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdDcps2,                            \/\/!< Instruction 'dcps2'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdDcps3	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdDcps3,                            \/\/!< Instruction 'dcps3'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdDgh	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdDgh,                              \/\/!< Instruction 'dgh'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdDmb	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdDmb,                              \/\/!< Instruction 'dmb'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdDrps	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdDrps,                             \/\/!< Instruction 'drps'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdDsb	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdDsb,                              \/\/!< Instruction 'dsb'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdDup_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdDup_v,                            \/\/!< Instruction 'dup' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdEon	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdEon,                              \/\/!< Instruction 'eon'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdEor	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdEor,                              \/\/!< Instruction 'eor'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdEor3_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdEor3_v,                           \/\/!< Instruction 'eor3' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdEor_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdEor_v,                            \/\/!< Instruction 'eor' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdEret	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdEret,                             \/\/!< Instruction 'eret'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdEsb	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdEsb,                              \/\/!< Instruction 'esb'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdExt_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdExt_v,                            \/\/!< Instruction 'ext' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdExtr	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdExtr,                             \/\/!< Instruction 'extr'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdFabd_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdFabd_v,                           \/\/!< Instruction 'fabd' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdFabs_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdFabs_v,                           \/\/!< Instruction 'fabs' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdFacge_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdFacge_v,                          \/\/!< Instruction 'facge' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdFacgt_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdFacgt_v,                          \/\/!< Instruction 'facgt' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdFadd_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdFadd_v,                           \/\/!< Instruction 'fadd' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdFaddp_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdFaddp_v,                          \/\/!< Instruction 'faddp' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdFcadd_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdFcadd_v,                          \/\/!< Instruction 'fcadd' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdFccmp_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdFccmp_v,                          \/\/!< Instruction 'fccmp' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdFccmpe_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdFccmpe_v,                         \/\/!< Instruction 'fccmpe' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdFcmeq_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdFcmeq_v,                          \/\/!< Instruction 'fcmeq' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdFcmge_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdFcmge_v,                          \/\/!< Instruction 'fcmge' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdFcmgt_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdFcmgt_v,                          \/\/!< Instruction 'fcmgt' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdFcmla_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdFcmla_v,                          \/\/!< Instruction 'fcmla' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdFcmle_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdFcmle_v,                          \/\/!< Instruction 'fcmle' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdFcmlt_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdFcmlt_v,                          \/\/!< Instruction 'fcmlt' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdFcmp_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdFcmp_v,                           \/\/!< Instruction 'fcmp' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdFcmpe_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdFcmpe_v,                          \/\/!< Instruction 'fcmpe' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdFcsel_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdFcsel_v,                          \/\/!< Instruction 'fcsel' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdFcvt_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdFcvt_v,                           \/\/!< Instruction 'fcvt' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdFcvtas_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdFcvtas_v,                         \/\/!< Instruction 'fcvtas' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdFcvtau_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdFcvtau_v,                         \/\/!< Instruction 'fcvtau' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdFcvtl2_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdFcvtl2_v,                         \/\/!< Instruction 'fcvtl2' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdFcvtl_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdFcvtl_v,                          \/\/!< Instruction 'fcvtl' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdFcvtms_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdFcvtms_v,                         \/\/!< Instruction 'fcvtms' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdFcvtmu_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdFcvtmu_v,                         \/\/!< Instruction 'fcvtmu' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdFcvtn2_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdFcvtn2_v,                         \/\/!< Instruction 'fcvtn2' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdFcvtn_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdFcvtn_v,                          \/\/!< Instruction 'fcvtn' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdFcvtns_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdFcvtns_v,                         \/\/!< Instruction 'fcvtns' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdFcvtnu_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdFcvtnu_v,                         \/\/!< Instruction 'fcvtnu' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdFcvtps_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdFcvtps_v,                         \/\/!< Instruction 'fcvtps' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdFcvtpu_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdFcvtpu_v,                         \/\/!< Instruction 'fcvtpu' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdFcvtxn2_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdFcvtxn2_v,                        \/\/!< Instruction 'fcvtxn2' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdFcvtxn_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdFcvtxn_v,                         \/\/!< Instruction 'fcvtxn' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdFcvtzs_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdFcvtzs_v,                         \/\/!< Instruction 'fcvtzs' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdFcvtzu_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdFcvtzu_v,                         \/\/!< Instruction 'fcvtzu' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdFdiv_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdFdiv_v,                           \/\/!< Instruction 'fdiv' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdFjcvtzs_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdFjcvtzs_v,                        \/\/!< Instruction 'fjcvtzs' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdFmadd_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdFmadd_v,                          \/\/!< Instruction 'fmadd' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdFmax_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdFmax_v,                           \/\/!< Instruction 'fmax' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdFmaxnm_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdFmaxnm_v,                         \/\/!< Instruction 'fmaxnm' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdFmaxnmp_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdFmaxnmp_v,                        \/\/!< Instruction 'fmaxnmp' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdFmaxnmv_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdFmaxnmv_v,                        \/\/!< Instruction 'fmaxnmv' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdFmaxp_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdFmaxp_v,                          \/\/!< Instruction 'fmaxp' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdFmaxv_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdFmaxv_v,                          \/\/!< Instruction 'fmaxv' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdFmin_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdFmin_v,                           \/\/!< Instruction 'fmin' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdFminnm_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdFminnm_v,                         \/\/!< Instruction 'fminnm' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdFminnmp_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdFminnmp_v,                        \/\/!< Instruction 'fminnmp' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdFminnmv_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdFminnmv_v,                        \/\/!< Instruction 'fminnmv' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdFminp_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdFminp_v,                          \/\/!< Instruction 'fminp' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdFminv_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdFminv_v,                          \/\/!< Instruction 'fminv' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdFmla_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdFmla_v,                           \/\/!< Instruction 'fmla' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdFmlal2_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdFmlal2_v,                         \/\/!< Instruction 'fmlal2' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdFmlal_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdFmlal_v,                          \/\/!< Instruction 'fmlal' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdFmls_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdFmls_v,                           \/\/!< Instruction 'fmls' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdFmlsl2_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdFmlsl2_v,                         \/\/!< Instruction 'fmlsl2' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdFmlsl_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdFmlsl_v,                          \/\/!< Instruction 'fmlsl' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdFmov_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdFmov_v,                           \/\/!< Instruction 'fmov' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdFmsub_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdFmsub_v,                          \/\/!< Instruction 'fmsub' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdFmul_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdFmul_v,                           \/\/!< Instruction 'fmul' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdFmulx_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdFmulx_v,                          \/\/!< Instruction 'fmulx' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdFneg_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdFneg_v,                           \/\/!< Instruction 'fneg' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdFnmadd_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdFnmadd_v,                         \/\/!< Instruction 'fnmadd' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdFnmsub_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdFnmsub_v,                         \/\/!< Instruction 'fnmsub' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdFnmul_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdFnmul_v,                          \/\/!< Instruction 'fnmul' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdFrecpe_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdFrecpe_v,                         \/\/!< Instruction 'frecpe' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdFrecps_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdFrecps_v,                         \/\/!< Instruction 'frecps' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdFrecpx_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdFrecpx_v,                         \/\/!< Instruction 'frecpx' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdFrint32x_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdFrint32x_v,                       \/\/!< Instruction 'frint32x' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdFrint32z_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdFrint32z_v,                       \/\/!< Instruction 'frint32z' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdFrint64x_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdFrint64x_v,                       \/\/!< Instruction 'frint64x' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdFrint64z_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdFrint64z_v,                       \/\/!< Instruction 'frint64z' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdFrinta_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdFrinta_v,                         \/\/!< Instruction 'frinta' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdFrinti_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdFrinti_v,                         \/\/!< Instruction 'frinti' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdFrintm_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdFrintm_v,                         \/\/!< Instruction 'frintm' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdFrintn_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdFrintn_v,                         \/\/!< Instruction 'frintn' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdFrintp_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdFrintp_v,                         \/\/!< Instruction 'frintp' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdFrintx_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdFrintx_v,                         \/\/!< Instruction 'frintx' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdFrintz_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdFrintz_v,                         \/\/!< Instruction 'frintz' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdFrsqrte_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdFrsqrte_v,                        \/\/!< Instruction 'frsqrte' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdFrsqrts_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdFrsqrts_v,                        \/\/!< Instruction 'frsqrts' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdFsqrt_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdFsqrt_v,                          \/\/!< Instruction 'fsqrt' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdFsub_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdFsub_v,                           \/\/!< Instruction 'fsub' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdGmi	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdGmi,                              \/\/!< Instruction 'gmi'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdHint	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdHint,                             \/\/!< Instruction 'hint'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdHlt	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdHlt,                              \/\/!< Instruction 'hlt'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdHvc	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdHvc,                              \/\/!< Instruction 'hvc'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdIc	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdIc,                               \/\/!< Instruction 'ic'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdIns_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdIns_v,                            \/\/!< Instruction 'ins' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdIsb	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdIsb,                              \/\/!< Instruction 'isb'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdLd1_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdLd1_v,                            \/\/!< Instruction 'ld1' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdLd1r_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdLd1r_v,                           \/\/!< Instruction 'ld1r' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdLd2_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdLd2_v,                            \/\/!< Instruction 'ld2' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdLd2r_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdLd2r_v,                           \/\/!< Instruction 'ld2r' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdLd3_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdLd3_v,                            \/\/!< Instruction 'ld3' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdLd3r_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdLd3r_v,                           \/\/!< Instruction 'ld3r' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdLd4_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdLd4_v,                            \/\/!< Instruction 'ld4' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdLd4r_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdLd4r_v,                           \/\/!< Instruction 'ld4r' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdLdadd	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdLdadd,                            \/\/!< Instruction 'ldadd'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdLdadda	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdLdadda,                           \/\/!< Instruction 'ldadda'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdLdaddab	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdLdaddab,                          \/\/!< Instruction 'ldaddab'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdLdaddah	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdLdaddah,                          \/\/!< Instruction 'ldaddah'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdLdaddal	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdLdaddal,                          \/\/!< Instruction 'ldaddal'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdLdaddalb	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdLdaddalb,                         \/\/!< Instruction 'ldaddalb'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdLdaddalh	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdLdaddalh,                         \/\/!< Instruction 'ldaddalh'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdLdaddb	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdLdaddb,                           \/\/!< Instruction 'ldaddb'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdLdaddh	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdLdaddh,                           \/\/!< Instruction 'ldaddh'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdLdaddl	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdLdaddl,                           \/\/!< Instruction 'ldaddl'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdLdaddlb	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdLdaddlb,                          \/\/!< Instruction 'ldaddlb'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdLdaddlh	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdLdaddlh,                          \/\/!< Instruction 'ldaddlh'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdLdar	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdLdar,                             \/\/!< Instruction 'ldar'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdLdarb	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdLdarb,                            \/\/!< Instruction 'ldarb'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdLdarh	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdLdarh,                            \/\/!< Instruction 'ldarh'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdLdaxp	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdLdaxp,                            \/\/!< Instruction 'ldaxp'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdLdaxr	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdLdaxr,                            \/\/!< Instruction 'ldaxr'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdLdaxrb	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdLdaxrb,                           \/\/!< Instruction 'ldaxrb'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdLdaxrh	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdLdaxrh,                           \/\/!< Instruction 'ldaxrh'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdLdclr	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdLdclr,                            \/\/!< Instruction 'ldclr'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdLdclra	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdLdclra,                           \/\/!< Instruction 'ldclra'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdLdclrab	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdLdclrab,                          \/\/!< Instruction 'ldclrab'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdLdclrah	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdLdclrah,                          \/\/!< Instruction 'ldclrah'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdLdclral	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdLdclral,                          \/\/!< Instruction 'ldclral'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdLdclralb	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdLdclralb,                         \/\/!< Instruction 'ldclralb'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdLdclralh	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdLdclralh,                         \/\/!< Instruction 'ldclralh'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdLdclrb	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdLdclrb,                           \/\/!< Instruction 'ldclrb'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdLdclrh	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdLdclrh,                           \/\/!< Instruction 'ldclrh'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdLdclrl	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdLdclrl,                           \/\/!< Instruction 'ldclrl'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdLdclrlb	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdLdclrlb,                          \/\/!< Instruction 'ldclrlb'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdLdclrlh	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdLdclrlh,                          \/\/!< Instruction 'ldclrlh'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdLdeor	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdLdeor,                            \/\/!< Instruction 'ldeor'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdLdeora	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdLdeora,                           \/\/!< Instruction 'ldeora'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdLdeorab	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdLdeorab,                          \/\/!< Instruction 'ldeorab'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdLdeorah	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdLdeorah,                          \/\/!< Instruction 'ldeorah'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdLdeoral	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdLdeoral,                          \/\/!< Instruction 'ldeoral'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdLdeoralb	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdLdeoralb,                         \/\/!< Instruction 'ldeoralb'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdLdeoralh	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdLdeoralh,                         \/\/!< Instruction 'ldeoralh'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdLdeorb	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdLdeorb,                           \/\/!< Instruction 'ldeorb'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdLdeorh	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdLdeorh,                           \/\/!< Instruction 'ldeorh'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdLdeorl	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdLdeorl,                           \/\/!< Instruction 'ldeorl'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdLdeorlb	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdLdeorlb,                          \/\/!< Instruction 'ldeorlb'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdLdeorlh	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdLdeorlh,                          \/\/!< Instruction 'ldeorlh'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdLdg	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdLdg,                              \/\/!< Instruction 'ldg'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdLdgm	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdLdgm,                             \/\/!< Instruction 'ldgm'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdLdlar	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdLdlar,                            \/\/!< Instruction 'ldlar'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdLdlarb	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdLdlarb,                           \/\/!< Instruction 'ldlarb'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdLdlarh	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdLdlarh,                           \/\/!< Instruction 'ldlarh'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdLdnp	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdLdnp,                             \/\/!< Instruction 'ldnp'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdLdnp_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdLdnp_v,                           \/\/!< Instruction 'ldnp' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdLdp	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdLdp,                              \/\/!< Instruction 'ldp'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdLdp_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdLdp_v,                            \/\/!< Instruction 'ldp' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdLdpsw	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdLdpsw,                            \/\/!< Instruction 'ldpsw'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdLdr	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdLdr,                              \/\/!< Instruction 'ldr'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdLdr_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdLdr_v,                            \/\/!< Instruction 'ldr' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdLdraa	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdLdraa,                            \/\/!< Instruction 'ldraa'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdLdrab	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdLdrab,                            \/\/!< Instruction 'ldrab'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdLdrb	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdLdrb,                             \/\/!< Instruction 'ldrb'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdLdrh	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdLdrh,                             \/\/!< Instruction 'ldrh'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdLdrsb	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdLdrsb,                            \/\/!< Instruction 'ldrsb'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdLdrsh	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdLdrsh,                            \/\/!< Instruction 'ldrsh'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdLdrsw	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdLdrsw,                            \/\/!< Instruction 'ldrsw'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdLdset	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdLdset,                            \/\/!< Instruction 'ldset'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdLdseta	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdLdseta,                           \/\/!< Instruction 'ldseta'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdLdsetab	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdLdsetab,                          \/\/!< Instruction 'ldsetab'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdLdsetah	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdLdsetah,                          \/\/!< Instruction 'ldsetah'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdLdsetal	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdLdsetal,                          \/\/!< Instruction 'ldsetal'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdLdsetalb	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdLdsetalb,                         \/\/!< Instruction 'ldsetalb'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdLdsetalh	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdLdsetalh,                         \/\/!< Instruction 'ldsetalh'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdLdsetb	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdLdsetb,                           \/\/!< Instruction 'ldsetb'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdLdseth	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdLdseth,                           \/\/!< Instruction 'ldseth'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdLdsetl	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdLdsetl,                           \/\/!< Instruction 'ldsetl'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdLdsetlb	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdLdsetlb,                          \/\/!< Instruction 'ldsetlb'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdLdsetlh	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdLdsetlh,                          \/\/!< Instruction 'ldsetlh'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdLdsmax	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdLdsmax,                           \/\/!< Instruction 'ldsmax'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdLdsmaxa	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdLdsmaxa,                          \/\/!< Instruction 'ldsmaxa'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdLdsmaxab	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdLdsmaxab,                         \/\/!< Instruction 'ldsmaxab'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdLdsmaxah	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdLdsmaxah,                         \/\/!< Instruction 'ldsmaxah'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdLdsmaxal	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdLdsmaxal,                         \/\/!< Instruction 'ldsmaxal'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdLdsmaxalb	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdLdsmaxalb,                        \/\/!< Instruction 'ldsmaxalb'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdLdsmaxalh	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdLdsmaxalh,                        \/\/!< Instruction 'ldsmaxalh'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdLdsmaxb	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdLdsmaxb,                          \/\/!< Instruction 'ldsmaxb'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdLdsmaxh	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdLdsmaxh,                          \/\/!< Instruction 'ldsmaxh'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdLdsmaxl	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdLdsmaxl,                          \/\/!< Instruction 'ldsmaxl'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdLdsmaxlb	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdLdsmaxlb,                         \/\/!< Instruction 'ldsmaxlb'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdLdsmaxlh	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdLdsmaxlh,                         \/\/!< Instruction 'ldsmaxlh'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdLdsmin	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdLdsmin,                           \/\/!< Instruction 'ldsmin'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdLdsmina	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdLdsmina,                          \/\/!< Instruction 'ldsmina'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdLdsminab	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdLdsminab,                         \/\/!< Instruction 'ldsminab'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdLdsminah	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdLdsminah,                         \/\/!< Instruction 'ldsminah'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdLdsminal	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdLdsminal,                         \/\/!< Instruction 'ldsminal'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdLdsminalb	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdLdsminalb,                        \/\/!< Instruction 'ldsminalb'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdLdsminalh	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdLdsminalh,                        \/\/!< Instruction 'ldsminalh'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdLdsminb	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdLdsminb,                          \/\/!< Instruction 'ldsminb'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdLdsminh	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdLdsminh,                          \/\/!< Instruction 'ldsminh'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdLdsminl	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdLdsminl,                          \/\/!< Instruction 'ldsminl'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdLdsminlb	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdLdsminlb,                         \/\/!< Instruction 'ldsminlb'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdLdsminlh	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdLdsminlh,                         \/\/!< Instruction 'ldsminlh'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdLdtr	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdLdtr,                             \/\/!< Instruction 'ldtr'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdLdtrb	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdLdtrb,                            \/\/!< Instruction 'ldtrb'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdLdtrh	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdLdtrh,                            \/\/!< Instruction 'ldtrh'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdLdtrsb	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdLdtrsb,                           \/\/!< Instruction 'ldtrsb'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdLdtrsh	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdLdtrsh,                           \/\/!< Instruction 'ldtrsh'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdLdtrsw	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdLdtrsw,                           \/\/!< Instruction 'ldtrsw'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdLdumax	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdLdumax,                           \/\/!< Instruction 'ldumax'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdLdumaxa	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdLdumaxa,                          \/\/!< Instruction 'ldumaxa'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdLdumaxab	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdLdumaxab,                         \/\/!< Instruction 'ldumaxab'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdLdumaxah	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdLdumaxah,                         \/\/!< Instruction 'ldumaxah'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdLdumaxal	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdLdumaxal,                         \/\/!< Instruction 'ldumaxal'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdLdumaxalb	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdLdumaxalb,                        \/\/!< Instruction 'ldumaxalb'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdLdumaxalh	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdLdumaxalh,                        \/\/!< Instruction 'ldumaxalh'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdLdumaxb	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdLdumaxb,                          \/\/!< Instruction 'ldumaxb'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdLdumaxh	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdLdumaxh,                          \/\/!< Instruction 'ldumaxh'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdLdumaxl	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdLdumaxl,                          \/\/!< Instruction 'ldumaxl'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdLdumaxlb	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdLdumaxlb,                         \/\/!< Instruction 'ldumaxlb'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdLdumaxlh	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdLdumaxlh,                         \/\/!< Instruction 'ldumaxlh'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdLdumin	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdLdumin,                           \/\/!< Instruction 'ldumin'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdLdumina	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdLdumina,                          \/\/!< Instruction 'ldumina'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdLduminab	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdLduminab,                         \/\/!< Instruction 'lduminab'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdLduminah	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdLduminah,                         \/\/!< Instruction 'lduminah'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdLduminal	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdLduminal,                         \/\/!< Instruction 'lduminal'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdLduminalb	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdLduminalb,                        \/\/!< Instruction 'lduminalb'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdLduminalh	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdLduminalh,                        \/\/!< Instruction 'lduminalh'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdLduminb	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdLduminb,                          \/\/!< Instruction 'lduminb'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdLduminh	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdLduminh,                          \/\/!< Instruction 'lduminh'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdLduminl	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdLduminl,                          \/\/!< Instruction 'lduminl'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdLduminlb	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdLduminlb,                         \/\/!< Instruction 'lduminlb'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdLduminlh	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdLduminlh,                         \/\/!< Instruction 'lduminlh'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdLdur	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdLdur,                             \/\/!< Instruction 'ldur'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdLdur_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdLdur_v,                           \/\/!< Instruction 'ldur' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdLdurb	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdLdurb,                            \/\/!< Instruction 'ldurb'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdLdurh	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdLdurh,                            \/\/!< Instruction 'ldurh'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdLdursb	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdLdursb,                           \/\/!< Instruction 'ldursb'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdLdursh	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdLdursh,                           \/\/!< Instruction 'ldursh'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdLdursw	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdLdursw,                           \/\/!< Instruction 'ldursw'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdLdxp	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdLdxp,                             \/\/!< Instruction 'ldxp'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdLdxr	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdLdxr,                             \/\/!< Instruction 'ldxr'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdLdxrb	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdLdxrb,                            \/\/!< Instruction 'ldxrb'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdLdxrh	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdLdxrh,                            \/\/!< Instruction 'ldxrh'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdLsl	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdLsl,                              \/\/!< Instruction 'lsl'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdLslv	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdLslv,                             \/\/!< Instruction 'lslv'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdLsr	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdLsr,                              \/\/!< Instruction 'lsr'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdLsrv	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdLsrv,                             \/\/!< Instruction 'lsrv'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdMadd	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdMadd,                             \/\/!< Instruction 'madd'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdMla_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdMla_v,                            \/\/!< Instruction 'mla' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdMls_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdMls_v,                            \/\/!< Instruction 'mls' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdMneg	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdMneg,                             \/\/!< Instruction 'mneg'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdMov	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdMov,                              \/\/!< Instruction 'mov'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdMov_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdMov_v,                            \/\/!< Instruction 'mov' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdMovi_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdMovi_v,                           \/\/!< Instruction 'movi' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdMovk	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdMovk,                             \/\/!< Instruction 'movk'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdMovn	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdMovn,                             \/\/!< Instruction 'movn'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdMovz	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdMovz,                             \/\/!< Instruction 'movz'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdMrs	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdMrs,                              \/\/!< Instruction 'mrs'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdMsr	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdMsr,                              \/\/!< Instruction 'msr'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdMsub	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdMsub,                             \/\/!< Instruction 'msub'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdMul	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdMul,                              \/\/!< Instruction 'mul'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdMul_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdMul_v,                            \/\/!< Instruction 'mul' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdMvn	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdMvn,                              \/\/!< Instruction 'mvn'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdMvn_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdMvn_v,                            \/\/!< Instruction 'mvn' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdMvni_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdMvni_v,                           \/\/!< Instruction 'mvni' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdNeg	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdNeg,                              \/\/!< Instruction 'neg'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdNeg_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdNeg_v,                            \/\/!< Instruction 'neg' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdNegs	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdNegs,                             \/\/!< Instruction 'negs'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdNgc	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdNgc,                              \/\/!< Instruction 'ngc'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdNgcs	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdNgcs,                             \/\/!< Instruction 'ngcs'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdNop	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdNop,                              \/\/!< Instruction 'nop'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdNot_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdNot_v,                            \/\/!< Instruction 'not' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdOrn	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdOrn,                              \/\/!< Instruction 'orn'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdOrn_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdOrn_v,                            \/\/!< Instruction 'orn' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdOrr	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdOrr,                              \/\/!< Instruction 'orr'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdOrr_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdOrr_v,                            \/\/!< Instruction 'orr' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdPacda	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdPacda,                            \/\/!< Instruction 'pacda'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdPacdb	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdPacdb,                            \/\/!< Instruction 'pacdb'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdPacdza	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdPacdza,                           \/\/!< Instruction 'pacdza'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdPacdzb	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdPacdzb,                           \/\/!< Instruction 'pacdzb'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdPacga	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdPacga,                            \/\/!< Instruction 'pacga'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdPmul_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdPmul_v,                           \/\/!< Instruction 'pmul' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdPmull2_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdPmull2_v,                         \/\/!< Instruction 'pmull2' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdPmull_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdPmull_v,                          \/\/!< Instruction 'pmull' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdPssbb	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdPssbb,                            \/\/!< Instruction 'pssbb'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdRaddhn2_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdRaddhn2_v,                        \/\/!< Instruction 'raddhn2' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdRaddhn_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdRaddhn_v,                         \/\/!< Instruction 'raddhn' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdRax1_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdRax1_v,                           \/\/!< Instruction 'rax1' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdRbit	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdRbit,                             \/\/!< Instruction 'rbit'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdRbit_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdRbit_v,                           \/\/!< Instruction 'rbit' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdRet	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdRet,                              \/\/!< Instruction 'ret'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdRev	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdRev,                              \/\/!< Instruction 'rev'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdRev16	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdRev16,                            \/\/!< Instruction 'rev16'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdRev16_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdRev16_v,                          \/\/!< Instruction 'rev16' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdRev32	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdRev32,                            \/\/!< Instruction 'rev32'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdRev32_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdRev32_v,                          \/\/!< Instruction 'rev32' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdRev64	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdRev64,                            \/\/!< Instruction 'rev64'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdRev64_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdRev64_v,                          \/\/!< Instruction 'rev64' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdRor	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdRor,                              \/\/!< Instruction 'ror'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdRorv	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdRorv,                             \/\/!< Instruction 'rorv'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdRshrn2_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdRshrn2_v,                         \/\/!< Instruction 'rshrn2' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdRshrn_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdRshrn_v,                          \/\/!< Instruction 'rshrn' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdRsubhn2_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdRsubhn2_v,                        \/\/!< Instruction 'rsubhn2' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdRsubhn_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdRsubhn_v,                         \/\/!< Instruction 'rsubhn' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdSaba_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdSaba_v,                           \/\/!< Instruction 'saba' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdSabal2_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdSabal2_v,                         \/\/!< Instruction 'sabal2' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdSabal_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdSabal_v,                          \/\/!< Instruction 'sabal' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdSabd_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdSabd_v,                           \/\/!< Instruction 'sabd' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdSabdl2_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdSabdl2_v,                         \/\/!< Instruction 'sabdl2' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdSabdl_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdSabdl_v,                          \/\/!< Instruction 'sabdl' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdSadalp_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdSadalp_v,                         \/\/!< Instruction 'sadalp' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdSaddl2_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdSaddl2_v,                         \/\/!< Instruction 'saddl2' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdSaddl_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdSaddl_v,                          \/\/!< Instruction 'saddl' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdSaddlp_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdSaddlp_v,                         \/\/!< Instruction 'saddlp' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdSaddlv_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdSaddlv_v,                         \/\/!< Instruction 'saddlv' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdSaddw2_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdSaddw2_v,                         \/\/!< Instruction 'saddw2' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdSaddw_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdSaddw_v,                          \/\/!< Instruction 'saddw' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdSbc	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdSbc,                              \/\/!< Instruction 'sbc'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdSbcs	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdSbcs,                             \/\/!< Instruction 'sbcs'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdSbfiz	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdSbfiz,                            \/\/!< Instruction 'sbfiz'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdSbfm	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdSbfm,                             \/\/!< Instruction 'sbfm'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdSbfx	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdSbfx,                             \/\/!< Instruction 'sbfx'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdScvtf_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdScvtf_v,                          \/\/!< Instruction 'scvtf' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdSdiv	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdSdiv,                             \/\/!< Instruction 'sdiv'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdSdot_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdSdot_v,                           \/\/!< Instruction 'sdot' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdSetf16	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdSetf16,                           \/\/!< Instruction 'setf16'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdSetf8	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdSetf8,                            \/\/!< Instruction 'setf8'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdSev	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdSev,                              \/\/!< Instruction 'sev'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdSevl	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdSevl,                             \/\/!< Instruction 'sevl'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdSha1c_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdSha1c_v,                          \/\/!< Instruction 'sha1c' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdSha1h_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdSha1h_v,                          \/\/!< Instruction 'sha1h' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdSha1m_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdSha1m_v,                          \/\/!< Instruction 'sha1m' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdSha1p_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdSha1p_v,                          \/\/!< Instruction 'sha1p' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdSha1su0_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdSha1su0_v,                        \/\/!< Instruction 'sha1su0' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdSha1su1_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdSha1su1_v,                        \/\/!< Instruction 'sha1su1' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdSha256h2_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdSha256h2_v,                       \/\/!< Instruction 'sha256h2' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdSha256h_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdSha256h_v,                        \/\/!< Instruction 'sha256h' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdSha256su0_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdSha256su0_v,                      \/\/!< Instruction 'sha256su0' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdSha256su1_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdSha256su1_v,                      \/\/!< Instruction 'sha256su1' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdSha512h2_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdSha512h2_v,                       \/\/!< Instruction 'sha512h2' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdSha512h_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdSha512h_v,                        \/\/!< Instruction 'sha512h' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdSha512su0_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdSha512su0_v,                      \/\/!< Instruction 'sha512su0' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdSha512su1_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdSha512su1_v,                      \/\/!< Instruction 'sha512su1' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdShadd_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdShadd_v,                          \/\/!< Instruction 'shadd' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdShl_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdShl_v,                            \/\/!< Instruction 'shl' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdShll2_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdShll2_v,                          \/\/!< Instruction 'shll2' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdShll_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdShll_v,                           \/\/!< Instruction 'shll' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdShrn2_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdShrn2_v,                          \/\/!< Instruction 'shrn2' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdShrn_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdShrn_v,                           \/\/!< Instruction 'shrn' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdShsub_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdShsub_v,                          \/\/!< Instruction 'shsub' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdSli_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdSli_v,                            \/\/!< Instruction 'sli' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdSm3partw1_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdSm3partw1_v,                      \/\/!< Instruction 'sm3partw1' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdSm3partw2_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdSm3partw2_v,                      \/\/!< Instruction 'sm3partw2' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdSm3ss1_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdSm3ss1_v,                         \/\/!< Instruction 'sm3ss1' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdSm3tt1a_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdSm3tt1a_v,                        \/\/!< Instruction 'sm3tt1a' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdSm3tt1b_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdSm3tt1b_v,                        \/\/!< Instruction 'sm3tt1b' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdSm3tt2a_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdSm3tt2a_v,                        \/\/!< Instruction 'sm3tt2a' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdSm3tt2b_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdSm3tt2b_v,                        \/\/!< Instruction 'sm3tt2b' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdSm4e_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdSm4e_v,                           \/\/!< Instruction 'sm4e' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdSm4ekey_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdSm4ekey_v,                        \/\/!< Instruction 'sm4ekey' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdSmaddl	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdSmaddl,                           \/\/!< Instruction 'smaddl'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdSmax_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdSmax_v,                           \/\/!< Instruction 'smax' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdSmaxp_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdSmaxp_v,                          \/\/!< Instruction 'smaxp' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdSmaxv_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdSmaxv_v,                          \/\/!< Instruction 'smaxv' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdSmc	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdSmc,                              \/\/!< Instruction 'smc'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdSmin_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdSmin_v,                           \/\/!< Instruction 'smin' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdSminp_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdSminp_v,                          \/\/!< Instruction 'sminp' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdSminv_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdSminv_v,                          \/\/!< Instruction 'sminv' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdSmlal2_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdSmlal2_v,                         \/\/!< Instruction 'smlal2' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdSmlal_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdSmlal_v,                          \/\/!< Instruction 'smlal' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdSmlsl2_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdSmlsl2_v,                         \/\/!< Instruction 'smlsl2' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdSmlsl_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdSmlsl_v,                          \/\/!< Instruction 'smlsl' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdSmmla_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdSmmla_v,                          \/\/!< Instruction 'smmla' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdSmnegl	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdSmnegl,                           \/\/!< Instruction 'smnegl'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdSmov_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdSmov_v,                           \/\/!< Instruction 'smov' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdSmsubl	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdSmsubl,                           \/\/!< Instruction 'smsubl'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdSmulh	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdSmulh,                            \/\/!< Instruction 'smulh'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdSmull	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdSmull,                            \/\/!< Instruction 'smull'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdSmull2_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdSmull2_v,                         \/\/!< Instruction 'smull2' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdSmull_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdSmull_v,                          \/\/!< Instruction 'smull' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdSqabs_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdSqabs_v,                          \/\/!< Instruction 'sqabs' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdSqadd_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdSqadd_v,                          \/\/!< Instruction 'sqadd' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdSqdmlal2_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdSqdmlal2_v,                       \/\/!< Instruction 'sqdmlal2' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdSqdmlal_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdSqdmlal_v,                        \/\/!< Instruction 'sqdmlal' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdSqdmlsl2_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdSqdmlsl2_v,                       \/\/!< Instruction 'sqdmlsl2' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdSqdmlsl_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdSqdmlsl_v,                        \/\/!< Instruction 'sqdmlsl' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdSqdmulh_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdSqdmulh_v,                        \/\/!< Instruction 'sqdmulh' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdSqdmull2_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdSqdmull2_v,                       \/\/!< Instruction 'sqdmull2' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdSqdmull_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdSqdmull_v,                        \/\/!< Instruction 'sqdmull' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdSqneg_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdSqneg_v,                          \/\/!< Instruction 'sqneg' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdSqrdmlah_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdSqrdmlah_v,                       \/\/!< Instruction 'sqrdmlah' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdSqrdmlsh_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdSqrdmlsh_v,                       \/\/!< Instruction 'sqrdmlsh' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdSqrdmulh_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdSqrdmulh_v,                       \/\/!< Instruction 'sqrdmulh' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdSqrshl_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdSqrshl_v,                         \/\/!< Instruction 'sqrshl' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdSqrshrn2_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdSqrshrn2_v,                       \/\/!< Instruction 'sqrshrn2' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdSqrshrn_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdSqrshrn_v,                        \/\/!< Instruction 'sqrshrn' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdSqrshrun2_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdSqrshrun2_v,                      \/\/!< Instruction 'sqrshrun2' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdSqrshrun_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdSqrshrun_v,                       \/\/!< Instruction 'sqrshrun' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdSqshl_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdSqshl_v,                          \/\/!< Instruction 'sqshl' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdSqshlu_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdSqshlu_v,                         \/\/!< Instruction 'sqshlu' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdSqshrn2_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdSqshrn2_v,                        \/\/!< Instruction 'sqshrn2' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdSqshrn_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdSqshrn_v,                         \/\/!< Instruction 'sqshrn' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdSqshrun2_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdSqshrun2_v,                       \/\/!< Instruction 'sqshrun2' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdSqshrun_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdSqshrun_v,                        \/\/!< Instruction 'sqshrun' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdSqsub_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdSqsub_v,                          \/\/!< Instruction 'sqsub' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdSqxtn2_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdSqxtn2_v,                         \/\/!< Instruction 'sqxtn2' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdSqxtn_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdSqxtn_v,                          \/\/!< Instruction 'sqxtn' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdSqxtun2_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdSqxtun2_v,                        \/\/!< Instruction 'sqxtun2' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdSqxtun_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdSqxtun_v,                         \/\/!< Instruction 'sqxtun' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdSrhadd_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdSrhadd_v,                         \/\/!< Instruction 'srhadd' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdSri_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdSri_v,                            \/\/!< Instruction 'sri' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdSrshl_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdSrshl_v,                          \/\/!< Instruction 'srshl' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdSrshr_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdSrshr_v,                          \/\/!< Instruction 'srshr' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdSrsra_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdSrsra_v,                          \/\/!< Instruction 'srsra' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdSsbb	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdSsbb,                             \/\/!< Instruction 'ssbb'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdSshl_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdSshl_v,                           \/\/!< Instruction 'sshl' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdSshll2_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdSshll2_v,                         \/\/!< Instruction 'sshll2' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdSshll_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdSshll_v,                          \/\/!< Instruction 'sshll' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdSshr_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdSshr_v,                           \/\/!< Instruction 'sshr' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdSsra_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdSsra_v,                           \/\/!< Instruction 'ssra' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdSsubl2_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdSsubl2_v,                         \/\/!< Instruction 'ssubl2' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdSsubl_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdSsubl_v,                          \/\/!< Instruction 'ssubl' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdSsubw2_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdSsubw2_v,                         \/\/!< Instruction 'ssubw2' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdSsubw_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdSsubw_v,                          \/\/!< Instruction 'ssubw' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdSt1_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdSt1_v,                            \/\/!< Instruction 'st1' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdSt2_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdSt2_v,                            \/\/!< Instruction 'st2' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdSt2g	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdSt2g,                             \/\/!< Instruction 'st2g'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdSt3_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdSt3_v,                            \/\/!< Instruction 'st3' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdSt4_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdSt4_v,                            \/\/!< Instruction 'st4' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdStadd	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdStadd,                            \/\/!< Instruction 'stadd'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdStaddb	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdStaddb,                           \/\/!< Instruction 'staddb'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdStaddh	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdStaddh,                           \/\/!< Instruction 'staddh'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdStaddl	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdStaddl,                           \/\/!< Instruction 'staddl'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdStaddlb	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdStaddlb,                          \/\/!< Instruction 'staddlb'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdStaddlh	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdStaddlh,                          \/\/!< Instruction 'staddlh'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdStclr	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdStclr,                            \/\/!< Instruction 'stclr'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdStclrb	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdStclrb,                           \/\/!< Instruction 'stclrb'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdStclrh	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdStclrh,                           \/\/!< Instruction 'stclrh'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdStclrl	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdStclrl,                           \/\/!< Instruction 'stclrl'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdStclrlb	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdStclrlb,                          \/\/!< Instruction 'stclrlb'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdStclrlh	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdStclrlh,                          \/\/!< Instruction 'stclrlh'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdSteor	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdSteor,                            \/\/!< Instruction 'steor'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdSteorb	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdSteorb,                           \/\/!< Instruction 'steorb'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdSteorh	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdSteorh,                           \/\/!< Instruction 'steorh'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdSteorl	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdSteorl,                           \/\/!< Instruction 'steorl'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdSteorlb	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdSteorlb,                          \/\/!< Instruction 'steorlb'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdSteorlh	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdSteorlh,                          \/\/!< Instruction 'steorlh'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdStg	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdStg,                              \/\/!< Instruction 'stg'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdStgm	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdStgm,                             \/\/!< Instruction 'stgm'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdStgp	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdStgp,                             \/\/!< Instruction 'stgp'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdStllr	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdStllr,                            \/\/!< Instruction 'stllr'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdStllrb	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdStllrb,                           \/\/!< Instruction 'stllrb'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdStllrh	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdStllrh,                           \/\/!< Instruction 'stllrh'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdStlr	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdStlr,                             \/\/!< Instruction 'stlr'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdStlrb	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdStlrb,                            \/\/!< Instruction 'stlrb'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdStlrh	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdStlrh,                            \/\/!< Instruction 'stlrh'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdStlxp	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdStlxp,                            \/\/!< Instruction 'stlxp'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdStlxr	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdStlxr,                            \/\/!< Instruction 'stlxr'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdStlxrb	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdStlxrb,                           \/\/!< Instruction 'stlxrb'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdStlxrh	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdStlxrh,                           \/\/!< Instruction 'stlxrh'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdStnp	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdStnp,                             \/\/!< Instruction 'stnp'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdStnp_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdStnp_v,                           \/\/!< Instruction 'stnp' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdStp	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdStp,                              \/\/!< Instruction 'stp'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdStp_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdStp_v,                            \/\/!< Instruction 'stp' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdStr	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdStr,                              \/\/!< Instruction 'str'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdStr_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdStr_v,                            \/\/!< Instruction 'str' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdStrb	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdStrb,                             \/\/!< Instruction 'strb'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdStrh	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdStrh,                             \/\/!< Instruction 'strh'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdStset	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdStset,                            \/\/!< Instruction 'stset'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdStsetb	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdStsetb,                           \/\/!< Instruction 'stsetb'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdStseth	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdStseth,                           \/\/!< Instruction 'stseth'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdStsetl	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdStsetl,                           \/\/!< Instruction 'stsetl'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdStsetlb	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdStsetlb,                          \/\/!< Instruction 'stsetlb'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdStsetlh	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdStsetlh,                          \/\/!< Instruction 'stsetlh'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdStsmax	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdStsmax,                           \/\/!< Instruction 'stsmax'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdStsmaxb	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdStsmaxb,                          \/\/!< Instruction 'stsmaxb'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdStsmaxh	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdStsmaxh,                          \/\/!< Instruction 'stsmaxh'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdStsmaxl	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdStsmaxl,                          \/\/!< Instruction 'stsmaxl'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdStsmaxlb	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdStsmaxlb,                         \/\/!< Instruction 'stsmaxlb'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdStsmaxlh	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdStsmaxlh,                         \/\/!< Instruction 'stsmaxlh'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdStsmin	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdStsmin,                           \/\/!< Instruction 'stsmin'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdStsminb	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdStsminb,                          \/\/!< Instruction 'stsminb'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdStsminh	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdStsminh,                          \/\/!< Instruction 'stsminh'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdStsminl	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdStsminl,                          \/\/!< Instruction 'stsminl'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdStsminlb	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdStsminlb,                         \/\/!< Instruction 'stsminlb'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdStsminlh	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdStsminlh,                         \/\/!< Instruction 'stsminlh'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdSttr	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdSttr,                             \/\/!< Instruction 'sttr'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdSttrb	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdSttrb,                            \/\/!< Instruction 'sttrb'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdSttrh	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdSttrh,                            \/\/!< Instruction 'sttrh'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdStumax	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdStumax,                           \/\/!< Instruction 'stumax'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdStumaxb	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdStumaxb,                          \/\/!< Instruction 'stumaxb'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdStumaxh	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdStumaxh,                          \/\/!< Instruction 'stumaxh'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdStumaxl	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdStumaxl,                          \/\/!< Instruction 'stumaxl'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdStumaxlb	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdStumaxlb,                         \/\/!< Instruction 'stumaxlb'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdStumaxlh	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdStumaxlh,                         \/\/!< Instruction 'stumaxlh'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdStumin	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdStumin,                           \/\/!< Instruction 'stumin'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdStuminb	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdStuminb,                          \/\/!< Instruction 'stuminb'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdStuminh	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdStuminh,                          \/\/!< Instruction 'stuminh'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdStuminl	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdStuminl,                          \/\/!< Instruction 'stuminl'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdStuminlb	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdStuminlb,                         \/\/!< Instruction 'stuminlb'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdStuminlh	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdStuminlh,                         \/\/!< Instruction 'stuminlh'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdStur	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdStur,                             \/\/!< Instruction 'stur'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdStur_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdStur_v,                           \/\/!< Instruction 'stur' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdSturb	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdSturb,                            \/\/!< Instruction 'sturb'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdSturh	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdSturh,                            \/\/!< Instruction 'sturh'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdStxp	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdStxp,                             \/\/!< Instruction 'stxp'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdStxr	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdStxr,                             \/\/!< Instruction 'stxr'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdStxrb	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdStxrb,                            \/\/!< Instruction 'stxrb'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdStxrh	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdStxrh,                            \/\/!< Instruction 'stxrh'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdStz2g	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdStz2g,                            \/\/!< Instruction 'stz2g'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdStzg	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdStzg,                             \/\/!< Instruction 'stzg'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdStzgm	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdStzgm,                            \/\/!< Instruction 'stzgm'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdSub	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdSub,                              \/\/!< Instruction 'sub'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdSub_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdSub_v,                            \/\/!< Instruction 'sub' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdSubg	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdSubg,                             \/\/!< Instruction 'subg'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdSubhn2_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdSubhn2_v,                         \/\/!< Instruction 'subhn2' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdSubhn_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdSubhn_v,                          \/\/!< Instruction 'subhn' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdSubp	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdSubp,                             \/\/!< Instruction 'subp'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdSubps	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdSubps,                            \/\/!< Instruction 'subps'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdSubs	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdSubs,                             \/\/!< Instruction 'subs'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdSudot_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdSudot_v,                          \/\/!< Instruction 'sudot' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdSuqadd_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdSuqadd_v,                         \/\/!< Instruction 'suqadd' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdSvc	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdSvc,                              \/\/!< Instruction 'svc'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdSwp	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdSwp,                              \/\/!< Instruction 'swp'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdSwpa	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdSwpa,                             \/\/!< Instruction 'swpa'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdSwpab	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdSwpab,                            \/\/!< Instruction 'swpab'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdSwpah	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdSwpah,                            \/\/!< Instruction 'swpah'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdSwpal	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdSwpal,                            \/\/!< Instruction 'swpal'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdSwpalb	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdSwpalb,                           \/\/!< Instruction 'swpalb'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdSwpalh	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdSwpalh,                           \/\/!< Instruction 'swpalh'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdSwpb	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdSwpb,                             \/\/!< Instruction 'swpb'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdSwph	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdSwph,                             \/\/!< Instruction 'swph'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdSwpl	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdSwpl,                             \/\/!< Instruction 'swpl'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdSwplb	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdSwplb,                            \/\/!< Instruction 'swplb'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdSwplh	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdSwplh,                            \/\/!< Instruction 'swplh'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdSxtb	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdSxtb,                             \/\/!< Instruction 'sxtb'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdSxth	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdSxth,                             \/\/!< Instruction 'sxth'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdSxtl2_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdSxtl2_v,                          \/\/!< Instruction 'sxtl2' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdSxtl_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdSxtl_v,                           \/\/!< Instruction 'sxtl' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdSxtw	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdSxtw,                             \/\/!< Instruction 'sxtw'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdSys	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdSys,                              \/\/!< Instruction 'sys'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdTbl_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdTbl_v,                            \/\/!< Instruction 'tbl' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdTbnz	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdTbnz,                             \/\/!< Instruction 'tbnz'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdTbx_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdTbx_v,                            \/\/!< Instruction 'tbx' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdTbz	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdTbz,                              \/\/!< Instruction 'tbz'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdTlbi	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdTlbi,                             \/\/!< Instruction 'tlbi'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdTrn1_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdTrn1_v,                           \/\/!< Instruction 'trn1' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdTrn2_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdTrn2_v,                           \/\/!< Instruction 'trn2' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdTst	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdTst,                              \/\/!< Instruction 'tst'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdUaba_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdUaba_v,                           \/\/!< Instruction 'uaba' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdUabal2_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdUabal2_v,                         \/\/!< Instruction 'uabal2' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdUabal_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdUabal_v,                          \/\/!< Instruction 'uabal' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdUabd_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdUabd_v,                           \/\/!< Instruction 'uabd' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdUabdl2_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdUabdl2_v,                         \/\/!< Instruction 'uabdl2' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdUabdl_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdUabdl_v,                          \/\/!< Instruction 'uabdl' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdUadalp_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdUadalp_v,                         \/\/!< Instruction 'uadalp' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdUaddl2_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdUaddl2_v,                         \/\/!< Instruction 'uaddl2' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdUaddl_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdUaddl_v,                          \/\/!< Instruction 'uaddl' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdUaddlp_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdUaddlp_v,                         \/\/!< Instruction 'uaddlp' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdUaddlv_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdUaddlv_v,                         \/\/!< Instruction 'uaddlv' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdUaddw2_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdUaddw2_v,                         \/\/!< Instruction 'uaddw2' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdUaddw_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdUaddw_v,                          \/\/!< Instruction 'uaddw' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdUbfiz	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdUbfiz,                            \/\/!< Instruction 'ubfiz'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdUbfm	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdUbfm,                             \/\/!< Instruction 'ubfm'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdUbfx	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdUbfx,                             \/\/!< Instruction 'ubfx'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdUcvtf_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdUcvtf_v,                          \/\/!< Instruction 'ucvtf' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdUdf	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdUdf,                              \/\/!< Instruction 'udf'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdUdiv	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdUdiv,                             \/\/!< Instruction 'udiv'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdUdot_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdUdot_v,                           \/\/!< Instruction 'udot' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdUhadd_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdUhadd_v,                          \/\/!< Instruction 'uhadd' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdUhsub_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdUhsub_v,                          \/\/!< Instruction 'uhsub' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdUmaddl	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdUmaddl,                           \/\/!< Instruction 'umaddl'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdUmax_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdUmax_v,                           \/\/!< Instruction 'umax' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdUmaxp_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdUmaxp_v,                          \/\/!< Instruction 'umaxp' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdUmaxv_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdUmaxv_v,                          \/\/!< Instruction 'umaxv' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdUmin_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdUmin_v,                           \/\/!< Instruction 'umin' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdUminp_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdUminp_v,                          \/\/!< Instruction 'uminp' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdUminv_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdUminv_v,                          \/\/!< Instruction 'uminv' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdUmlal2_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdUmlal2_v,                         \/\/!< Instruction 'umlal2' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdUmlal_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdUmlal_v,                          \/\/!< Instruction 'umlal' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdUmlsl2_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdUmlsl2_v,                         \/\/!< Instruction 'umlsl2' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdUmlsl_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdUmlsl_v,                          \/\/!< Instruction 'umlsl' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdUmmla_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdUmmla_v,                          \/\/!< Instruction 'ummla' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdUmnegl	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdUmnegl,                           \/\/!< Instruction 'umnegl'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdUmov_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdUmov_v,                           \/\/!< Instruction 'umov' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdUmsubl	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdUmsubl,                           \/\/!< Instruction 'umsubl'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdUmulh	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdUmulh,                            \/\/!< Instruction 'umulh'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdUmull	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdUmull,                            \/\/!< Instruction 'umull'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdUmull2_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdUmull2_v,                         \/\/!< Instruction 'umull2' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdUmull_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdUmull_v,                          \/\/!< Instruction 'umull' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdUqadd_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdUqadd_v,                          \/\/!< Instruction 'uqadd' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdUqrshl_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdUqrshl_v,                         \/\/!< Instruction 'uqrshl' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdUqrshrn2_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdUqrshrn2_v,                       \/\/!< Instruction 'uqrshrn2' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdUqrshrn_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdUqrshrn_v,                        \/\/!< Instruction 'uqrshrn' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdUqshl_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdUqshl_v,                          \/\/!< Instruction 'uqshl' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdUqshrn2_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdUqshrn2_v,                        \/\/!< Instruction 'uqshrn2' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdUqshrn_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdUqshrn_v,                         \/\/!< Instruction 'uqshrn' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdUqsub_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdUqsub_v,                          \/\/!< Instruction 'uqsub' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdUqxtn2_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdUqxtn2_v,                         \/\/!< Instruction 'uqxtn2' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdUqxtn_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdUqxtn_v,                          \/\/!< Instruction 'uqxtn' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdUrecpe_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdUrecpe_v,                         \/\/!< Instruction 'urecpe' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdUrhadd_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdUrhadd_v,                         \/\/!< Instruction 'urhadd' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdUrshl_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdUrshl_v,                          \/\/!< Instruction 'urshl' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdUrshr_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdUrshr_v,                          \/\/!< Instruction 'urshr' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdUrsqrte_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdUrsqrte_v,                        \/\/!< Instruction 'ursqrte' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdUrsra_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdUrsra_v,                          \/\/!< Instruction 'ursra' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdUsdot_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdUsdot_v,                          \/\/!< Instruction 'usdot' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdUshl_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdUshl_v,                           \/\/!< Instruction 'ushl' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdUshll2_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdUshll2_v,                         \/\/!< Instruction 'ushll2' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdUshll_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdUshll_v,                          \/\/!< Instruction 'ushll' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdUshr_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdUshr_v,                           \/\/!< Instruction 'ushr' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdUsmmla_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdUsmmla_v,                         \/\/!< Instruction 'usmmla' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdUsqadd_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdUsqadd_v,                         \/\/!< Instruction 'usqadd' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdUsra_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdUsra_v,                           \/\/!< Instruction 'usra' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdUsubl2_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdUsubl2_v,                         \/\/!< Instruction 'usubl2' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdUsubl_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdUsubl_v,                          \/\/!< Instruction 'usubl' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdUsubw2_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdUsubw2_v,                         \/\/!< Instruction 'usubw2' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdUsubw_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdUsubw_v,                          \/\/!< Instruction 'usubw' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdUxtb	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdUxtb,                             \/\/!< Instruction 'uxtb'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdUxth	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdUxth,                             \/\/!< Instruction 'uxth'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdUxtl2_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdUxtl2_v,                          \/\/!< Instruction 'uxtl2' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdUxtl_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdUxtl_v,                           \/\/!< Instruction 'uxtl' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdUzp1_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdUzp1_v,                           \/\/!< Instruction 'uzp1' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdUzp2_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdUzp2_v,                           \/\/!< Instruction 'uzp2' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdWfe	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdWfe,                              \/\/!< Instruction 'wfe'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdWfi	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdWfi,                              \/\/!< Instruction 'wfi'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdXaflag	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdXaflag,                           \/\/!< Instruction 'xaflag'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdXar_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdXar_v,                            \/\/!< Instruction 'xar' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdXpacd	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdXpacd,                            \/\/!< Instruction 'xpacd'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdXpaci	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdXpaci,                            \/\/!< Instruction 'xpaci'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdXpaclri	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdXpaclri,                          \/\/!< Instruction 'xpaclri'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdXtn2_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdXtn2_v,                           \/\/!< Instruction 'xtn2' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdXtn_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdXtn_v,                            \/\/!< Instruction 'xtn' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdYield	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdYield,                            \/\/!< Instruction 'yield'.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdZip1_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdZip1_v,                           \/\/!< Instruction 'zip1' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kIdZip2_v	external/asmjit/src/asmjit/arm/a64globals.h	/^    kIdZip2_v,                           \/\/!< Instruction 'zip2' {ASIMD}.$/;"	m	struct:Inst	typeref:enum:Inst::
kImm	external/asmjit/src/asmjit/core/operand.h	/^  kImm = 3,$/;"	m	class:OperandType
kImmCharEnd	external/asmjit/src/asmjit/x86/x86formatter.cpp	/^static constexpr char kImmCharEnd   = '}';$/;"	v	file:
kImmCharOr	external/asmjit/src/asmjit/x86/x86formatter.cpp	/^static constexpr char kImmCharOr    = '|';$/;"	v	file:
kImmCharStart	external/asmjit/src/asmjit/x86/x86formatter.cpp	/^static constexpr char kImmCharStart = '{';$/;"	v	file:
kImmI16	external/asmjit/src/asmjit/x86/x86instdb.h	/^  kImmI16          = 0x0000010000000000u, \/\/!< Operand can be signed 16-bit immediate.$/;"	m	class:InstDB::Mode::OpFlags
kImmI32	external/asmjit/src/asmjit/x86/x86instdb.h	/^  kImmI32          = 0x0000040000000000u, \/\/!< Operand can be signed 32-bit immediate.$/;"	m	class:InstDB::Mode::OpFlags
kImmI4	external/asmjit/src/asmjit/x86/x86instdb.h	/^  kImmI4           = 0x0000001000000000u, \/\/!< Operand can be signed 4-bit immediate.$/;"	m	class:InstDB::Mode::OpFlags
kImmI64	external/asmjit/src/asmjit/x86/x86instdb.h	/^  kImmI64          = 0x0000100000000000u, \/\/!< Operand can be signed 64-bit immediate.$/;"	m	class:InstDB::Mode::OpFlags
kImmI8	external/asmjit/src/asmjit/x86/x86instdb.h	/^  kImmI8           = 0x0000004000000000u, \/\/!< Operand can be signed 8-bit immediate.$/;"	m	class:InstDB::Mode::OpFlags
kImmMask	external/asmjit/src/asmjit/x86/x86instdb.h	/^  kImmMask         = 0x00003FF000000000u, \/\/!< Mask of all immediate types.$/;"	m	class:InstDB::Mode::OpFlags
kImmTypeMask	external/asmjit/src/asmjit/core/operand.h	/^    kImmTypeMask = 0x01u << kImmTypeShift,$/;"	m	struct:OperandType::RegType::RegGroup::OperandSignature	typeref:enum:OperandType::RegType::RegGroup::OperandSignature::
kImmTypeShift	external/asmjit/src/asmjit/core/operand.h	/^    kImmTypeShift = 3,$/;"	m	struct:OperandType::RegType::RegGroup::OperandSignature	typeref:enum:OperandType::RegType::RegGroup::OperandSignature::
kImmU16	external/asmjit/src/asmjit/x86/x86instdb.h	/^  kImmU16          = 0x0000020000000000u, \/\/!< Operand can be unsigned 16-bit immediate.$/;"	m	class:InstDB::Mode::OpFlags
kImmU32	external/asmjit/src/asmjit/x86/x86instdb.h	/^  kImmU32          = 0x0000080000000000u, \/\/!< Operand can be unsigned 32-bit immediate.$/;"	m	class:InstDB::Mode::OpFlags
kImmU4	external/asmjit/src/asmjit/x86/x86instdb.h	/^  kImmU4           = 0x0000002000000000u, \/\/!< Operand can be unsigned 4-bit immediate.$/;"	m	class:InstDB::Mode::OpFlags
kImmU64	external/asmjit/src/asmjit/x86/x86instdb.h	/^  kImmU64          = 0x0000200000000000u, \/\/!< Operand can be unsigned 64-bit immediate.$/;"	m	class:InstDB::Mode::OpFlags
kImmU8	external/asmjit/src/asmjit/x86/x86instdb.h	/^  kImmU8           = 0x0000008000000000u, \/\/!< Operand can be unsigned 8-bit immediate.$/;"	m	class:InstDB::Mode::OpFlags
kImmediateRelease	external/asmjit/src/asmjit/core/jitallocator.h	/^  kImmediateRelease = 0x00000008u,$/;"	m	class:JitAllocatorOptions
kImplicit	external/asmjit/src/asmjit/core/codeholder.h	/^  kImplicit = 0x80000000u$/;"	m	class:ExpressionOpType::ExpressionValueType::SectionFlags
kImplicitZ	external/asmjit/src/asmjit/x86/x86instdb.h	/^  kImplicitZ = 0x00000100,$/;"	m	class:InstDB::Mode::OpFlags::InstFlags::Avx512Flags
kIndex	external/asmjit/src/asmjit/x86/x86assembler.cpp	/^    kIndex = (I >= uint32_t(RegType::kX86_Gpw)  && I <= uint32_t(RegType::kX86_Gpq)) ? kX86MemInfo_Index     :$/;"	m	struct:X86MemInfo_T	typeref:enum:X86MemInfo_T::	file:
kIndexMask	external/asmjit/src/asmjit/x86/x86globals.h	/^  kIndexMask     = 0x01u << 6   \/\/!< IntRes2 is expanded into a byte\/word mask and placed in XMM0.$/;"	m	class:CondCode::FpuStatusWord::FpuControlWord::CmpImm::PCmpStrImm
kIndirectVecArgs	external/asmjit/src/asmjit/core/func.h	/^  kIndirectVecArgs = 0x0002u,$/;"	m	class:CallConvId::CallConvStrategy::CallConvFlags
kInf	external/asmjit/src/asmjit/core/radefs_p.h	/^    kInf = 0xFFFFFFFFu$/;"	m	struct:RAStrategyType::RAStrategyFlags::RALiveInterval	typeref:enum:RAStrategyType::RAStrategyFlags::RALiveInterval::
kInst	external/asmjit/src/asmjit/core/builder.h	/^  kInst = 1,$/;"	m	class:NodeType
kInst_IsTransformable	external/asmjit/src/asmjit/core/radefs_p.h	/^  kInst_IsTransformable = 0x80000000u$/;"	m	class:RAStrategyType::RAStrategyFlags::RATiedFlags
kInstructionCacheClean	external/asmjit/src/asmjit/core/jitallocator.h	/^      kInstructionCacheClean = 0x00000001u$/;"	m	class:JitAllocatorOptions::JitAllocator::Span::Flags
kInt	external/asmjit/src/asmjit/core/operand.h	/^  kInt = 0,$/;"	m	class:OperandType::RegType::RegGroup::ImmType
kInt16	external/asmjit/src/asmjit/core/type.h	/^  kInt16 = 36,$/;"	m	class:TypeId
kInt16x16	external/asmjit/src/asmjit/core/type.h	/^  kInt16x16 = 83,$/;"	m	class:TypeId
kInt16x2	external/asmjit/src/asmjit/core/type.h	/^  kInt16x2 = 53,$/;"	m	class:TypeId
kInt16x32	external/asmjit/src/asmjit/core/type.h	/^  kInt16x32 = 93,$/;"	m	class:TypeId
kInt16x4	external/asmjit/src/asmjit/core/type.h	/^  kInt16x4 = 63,$/;"	m	class:TypeId
kInt16x8	external/asmjit/src/asmjit/core/type.h	/^  kInt16x8 = 73,$/;"	m	class:TypeId
kInt32	external/asmjit/src/asmjit/core/type.h	/^  kInt32 = 38,$/;"	m	class:TypeId
kInt32x1	external/asmjit/src/asmjit/core/type.h	/^  kInt32x1 = 55,$/;"	m	class:TypeId
kInt32x16	external/asmjit/src/asmjit/core/type.h	/^  kInt32x16 = 95,$/;"	m	class:TypeId
kInt32x2	external/asmjit/src/asmjit/core/type.h	/^  kInt32x2 = 65,$/;"	m	class:TypeId
kInt32x4	external/asmjit/src/asmjit/core/type.h	/^  kInt32x4 = 75,$/;"	m	class:TypeId
kInt32x8	external/asmjit/src/asmjit/core/type.h	/^  kInt32x8 = 85,$/;"	m	class:TypeId
kInt64	external/asmjit/src/asmjit/core/type.h	/^  kInt64 = 40,$/;"	m	class:TypeId
kInt64x1	external/asmjit/src/asmjit/core/type.h	/^  kInt64x1 = 67,$/;"	m	class:TypeId
kInt64x2	external/asmjit/src/asmjit/core/type.h	/^  kInt64x2 = 77,$/;"	m	class:TypeId
kInt64x4	external/asmjit/src/asmjit/core/type.h	/^  kInt64x4 = 87,$/;"	m	class:TypeId
kInt64x8	external/asmjit/src/asmjit/core/type.h	/^  kInt64x8 = 97,$/;"	m	class:TypeId
kInt8	external/asmjit/src/asmjit/core/type.h	/^  kInt8 = 34,$/;"	m	class:TypeId
kInt8x16	external/asmjit/src/asmjit/core/type.h	/^  kInt8x16 = 71,$/;"	m	class:TypeId
kInt8x32	external/asmjit/src/asmjit/core/type.h	/^  kInt8x32 = 81,$/;"	m	class:TypeId
kInt8x4	external/asmjit/src/asmjit/core/type.h	/^  kInt8x4 = 51,$/;"	m	class:TypeId
kInt8x64	external/asmjit/src/asmjit/core/type.h	/^  kInt8x64 = 91,$/;"	m	class:TypeId
kInt8x8	external/asmjit/src/asmjit/core/type.h	/^  kInt8x8 = 61,$/;"	m	class:TypeId
kIntPtr	external/asmjit/src/asmjit/core/type.h	/^  kIntPtr = 32,$/;"	m	class:TypeId
kInterrupt	external/asmjit/src/asmjit/x86/x86globals.h	/^  kInterrupt     = 0x0080u,     \/\/!< Interrupt.$/;"	m	class:CondCode::FpuStatusWord
kInvalid	external/asmjit/src/asmjit/arm/a64assembler.cpp	/^    kInvalid = 0xFFu,$/;"	m	struct:SizeOp	typeref:enum:SizeOp::	file:
kInvalid	external/asmjit/src/asmjit/x86/x86globals.h	/^  kInvalid       = 0x0001u,     \/\/!< Invalid operation.$/;"	m	class:CondCode::FpuStatusWord
kInvalidId	external/asmjit/src/asmjit/core/globals.h	/^static constexpr uint32_t kInvalidId = 0xFFFFFFFFu;$/;"	m	namespace:ByteOrder::ResetPolicy::Globals
kInvoke	external/asmjit/src/asmjit/core/builder.h	/^  kInvoke = 18,$/;"	m	class:NodeType
kIsActive	external/asmjit/src/asmjit/core/builder.h	/^  kIsActive = 0x80u$/;"	m	class:NodeType::NodeFlags
kIsAllocated	external/asmjit/src/asmjit/core/rapass_p.h	/^  kIsAllocated = 0x00000008u,$/;"	m	class:RABlockFlags
kIsCode	external/asmjit/src/asmjit/core/builder.h	/^  kIsCode = 0x01u,$/;"	m	class:NodeType::NodeFlags
kIsConstructed	external/asmjit/src/asmjit/core/rapass_p.h	/^  kIsConstructed = 0x00000001u,$/;"	m	class:RABlockFlags
kIsData	external/asmjit/src/asmjit/core/builder.h	/^  kIsData = 0x02u,$/;"	m	class:NodeType::NodeFlags
kIsExternal	external/asmjit/src/asmjit/core/codebuffer.h	/^  kIsExternal = 0x00000001u,$/;"	m	class:CodeBufferFlags
kIsFinalized	external/asmjit/src/asmjit/core/func.h	/^  kIsFinalized = 0x00000800u,$/;"	m	class:CallConvId::CallConvStrategy::CallConvFlags::FuncAttributes
kIsFixed	external/asmjit/src/asmjit/core/codebuffer.h	/^  kIsFixed = 0x00000002u$/;"	m	class:CodeBufferFlags
kIsFuncExit	external/asmjit/src/asmjit/core/rapass_p.h	/^  kIsFuncExit = 0x00000010u,$/;"	m	class:RABlockFlags
kIsInformative	external/asmjit/src/asmjit/core/builder.h	/^  kIsInformative = 0x04u,$/;"	m	class:NodeType::NodeFlags
kIsReachable	external/asmjit/src/asmjit/core/rapass_p.h	/^  kIsReachable = 0x00000002u,$/;"	m	class:RABlockFlags
kIsRemovable	external/asmjit/src/asmjit/core/builder.h	/^  kIsRemovable = 0x08u,$/;"	m	class:NodeType::NodeFlags
kIsTargetable	external/asmjit/src/asmjit/core/rapass_p.h	/^  kIsTargetable = 0x00000004u,$/;"	m	class:RABlockFlags
kJIT	external/asmjit/src/asmjit/core/environment.h	/^  kJIT,$/;"	m	class:Vendor::Platform::PlatformABI::ObjectFormat
kJSCVT	external/asmjit/src/asmjit/core/cpuinfo.h	/^      kJSCVT,                    \/\/!< CPU has JSCVT        (JavaScript FJCVTS conversion instruction) {A64}.$/;"	m	struct:CpuFeatures::ARM	typeref:enum:CpuFeatures::ARM::
kJitAllocatorBaseGranularity	external/asmjit/src/asmjit/core/jitallocator.cpp	/^static constexpr uint32_t kJitAllocatorBaseGranularity = 64;$/;"	v	file:
kJitAllocatorMaxBlockSize	external/asmjit/src/asmjit/core/jitallocator.cpp	/^static constexpr uint32_t kJitAllocatorMaxBlockSize = 1024 * 1024 * 64;$/;"	v	file:
kJitAllocatorMultiPoolCount	external/asmjit/src/asmjit/core/jitallocator.cpp	/^static constexpr uint32_t kJitAllocatorMultiPoolCount = 3;$/;"	v	file:
kJump	external/asmjit/src/asmjit/core/builder.h	/^  kJump = 15,$/;"	m	class:NodeType
kJump	external/asmjit/src/asmjit/core/inst.h	/^  kJump = 1u,$/;"	m	class:InstIdParts::InstOptions::InstControlFlow
kK	external/asmjit/src/asmjit/x86/x86instdb.h	/^  kK = 0x00000001u,$/;"	m	class:InstDB::Mode::OpFlags::InstFlags::Avx512Flags
kKill	external/asmjit/src/asmjit/core/radefs_p.h	/^  kKill = 0x00040000u,$/;"	m	class:RAStrategyType::RAStrategyFlags::RATiedFlags
kL	external/asmjit/src/asmjit/x86/x86globals.h	/^  kL             = 0x0Cu,       \/\/!<         SF!=OF (signed < )$/;"	m	class:CondCode
kLAHFSAHF	external/asmjit/src/asmjit/core/cpuinfo.h	/^      kLAHFSAHF,                 \/\/!< CPU has LAHF\/SAHF        (LAHF\/SAHF in 64-bit mode) {X86_64}.$/;"	m	struct:CpuFeatures::X86	typeref:enum:CpuFeatures::X86::
kLAM	external/asmjit/src/asmjit/core/cpuinfo.h	/^      kLAM,                      \/\/!< CPU has LAM              (linear address masking) {X86_64}.$/;"	m	struct:CpuFeatures::X86	typeref:enum:CpuFeatures::X86::
kLE	external/asmjit/src/asmjit/core/archcommons.h	/^  kLE             = 0x0Fu,      \/\/!<        Z==1 | N!=V  (signed   <=)$/;"	m	class:CondCode
kLE	external/asmjit/src/asmjit/core/globals.h	/^  kLE = 0,$/;"	m	class:ByteOrder
kLE	external/asmjit/src/asmjit/x86/x86globals.h	/^  kLE            = 0x01u,       \/\/!< Less\/Equal$/;"	m	class:CondCode::FpuStatusWord::FpuControlWord::CmpImm::PCmpStrImm::RoundImm::VCmpImm::VFixupImm::VFPClassImm::VGetMantImm::VPCmpImm::VPComImm
kLE	external/asmjit/src/asmjit/x86/x86globals.h	/^  kLE            = 0x02u,       \/\/!< Less\/Equal (Signaling), same as \\ref VCmpImm::kLE_OS.$/;"	m	class:CondCode::FpuStatusWord::FpuControlWord::CmpImm
kLE	external/asmjit/src/asmjit/x86/x86globals.h	/^  kLE            = 0x02u,       \/\/!< Less\/Equal.$/;"	m	class:CondCode::FpuStatusWord::FpuControlWord::CmpImm::PCmpStrImm::RoundImm::VCmpImm::VFixupImm::VFPClassImm::VGetMantImm::VPCmpImm
kLE	external/asmjit/src/asmjit/x86/x86globals.h	/^  kLE            = 0x0Eu,       \/\/!< ZF==1 | SF!=OF (signed <=)$/;"	m	class:CondCode
kLE_OQ	external/asmjit/src/asmjit/x86/x86globals.h	/^  kLE_OQ         = 0x12u,       \/\/!< Less\/Equal        (Quiet    , Ordered).$/;"	m	class:CondCode::FpuStatusWord::FpuControlWord::CmpImm::PCmpStrImm::RoundImm::VCmpImm
kLE_OS	external/asmjit/src/asmjit/x86/x86globals.h	/^  kLE_OS         = 0x02u,       \/\/!< Less\/Equal        (Signaling, Ordered)  , same as \\ref CmpImm::kLE.$/;"	m	class:CondCode::FpuStatusWord::FpuControlWord::CmpImm::PCmpStrImm::RoundImm::VCmpImm
kLIGHTNING_THUNDER	external/asmjit/src/asmjit/core/cpuinfo.cpp	/^  kLIGHTNING_THUNDER  = 0x462504D2u, \/\/ Apple A13 (ARMv8.4-A).$/;"	m	class:arm::AppleFamilyId	file:
kLL_0	external/asmjit/src/asmjit/x86/x86opcode_p.h	/^    kLL_0          = 0x0u << kLL_Shift,    \/\/ LL is 0 (L.128).$/;"	m	struct:Opcode	typeref:enum:Opcode::
kLL_1	external/asmjit/src/asmjit/x86/x86opcode_p.h	/^    kLL_1          = 0x1u << kLL_Shift,    \/\/ LL is 1 (L.256).$/;"	m	struct:Opcode	typeref:enum:Opcode::
kLL_2	external/asmjit/src/asmjit/x86/x86opcode_p.h	/^    kLL_2          = 0x2u << kLL_Shift,    \/\/ LL is 2 (L.512).$/;"	m	struct:Opcode	typeref:enum:Opcode::
kLL_I	external/asmjit/src/asmjit/x86/x86opcode_p.h	/^    kLL_I          = 0x0u << kLL_Shift,    \/\/ LL is ignored (LIG).$/;"	m	struct:Opcode	typeref:enum:Opcode::
kLL_Mask	external/asmjit/src/asmjit/x86/x86opcode_p.h	/^    kLL_Mask       = 0x3u << kLL_Shift,$/;"	m	struct:Opcode	typeref:enum:Opcode::
kLL_Shift	external/asmjit/src/asmjit/x86/x86opcode_p.h	/^    kLL_Shift      = 29,$/;"	m	struct:Opcode	typeref:enum:Opcode::
kLL__	external/asmjit/src/asmjit/x86/x86opcode_p.h	/^    kLL__          = 0x0u << kLL_Shift,    \/\/ LL is unspecified.$/;"	m	struct:Opcode	typeref:enum:Opcode::
kLL_x	external/asmjit/src/asmjit/x86/x86opcode_p.h	/^    kLL_x          = 0x0u << kLL_Shift,    \/\/ LL is based on instruction operands.$/;"	m	struct:Opcode	typeref:enum:Opcode::
kLO	external/asmjit/src/asmjit/core/archcommons.h	/^  kLO             = 0x05u,      \/\/!< C==0                (unsigned < )$/;"	m	class:CondCode
kLOR	external/asmjit/src/asmjit/core/cpuinfo.h	/^      kLOR,                      \/\/!< CPU has LOR          (limited ordering regions extension).$/;"	m	struct:CpuFeatures::ARM	typeref:enum:CpuFeatures::ARM::
kLRCPC	external/asmjit/src/asmjit/core/cpuinfo.h	/^      kLRCPC,                    \/\/!< CPU has LRCPC        (load-acquire RCpc instructions) {A64}.$/;"	m	struct:CpuFeatures::ARM	typeref:enum:CpuFeatures::ARM::
kLRCPC2	external/asmjit/src/asmjit/core/cpuinfo.h	/^      kLRCPC2,                   \/\/!< CPU has LRCPC2       (load-acquire RCpc instructions v2) {A64}.$/;"	m	struct:CpuFeatures::ARM	typeref:enum:CpuFeatures::ARM::
kLRCPC3	external/asmjit/src/asmjit/core/cpuinfo.h	/^      kLRCPC3,                   \/\/!< CPU has LRCPC3       (load-Acquire RCpc instructions v3) {A64}.$/;"	m	struct:CpuFeatures::ARM	typeref:enum:CpuFeatures::ARM::
kLS	external/asmjit/src/asmjit/core/archcommons.h	/^  kLS             = 0x0Bu,      \/\/!< C==0 | Z==1         (unsigned <=)$/;"	m	class:CondCode
kLS64	external/asmjit/src/asmjit/core/cpuinfo.h	/^      kLS64,                     \/\/!< CPU has LS64         (64 byte loads\/stores without return) {A64}.$/;"	m	struct:CpuFeatures::ARM	typeref:enum:CpuFeatures::ARM::
kLS64_ACCDATA	external/asmjit/src/asmjit/core/cpuinfo.h	/^      kLS64_ACCDATA,             \/\/!< CPU has LS64_ACCDATA (64-byte EL0 stores with return) {A64}.$/;"	m	struct:CpuFeatures::ARM	typeref:enum:CpuFeatures::ARM::
kLS64_V	external/asmjit/src/asmjit/core/cpuinfo.h	/^      kLS64_V,                   \/\/!< CPU has LS64_V       (64-byte stores with return) {A64}.$/;"	m	struct:CpuFeatures::ARM	typeref:enum:CpuFeatures::ARM::
kLSE	external/asmjit/src/asmjit/core/cpuinfo.h	/^      kLSE,                      \/\/!< CPU has LSE          (large system extensions) {A64}.$/;"	m	struct:CpuFeatures::ARM	typeref:enum:CpuFeatures::ARM::
kLSE128	external/asmjit/src/asmjit/core/cpuinfo.h	/^      kLSE128,                   \/\/!< CPU has LSE128       (128-bit atomics) {A64}.$/;"	m	struct:CpuFeatures::ARM	typeref:enum:CpuFeatures::ARM::
kLSE2	external/asmjit/src/asmjit/core/cpuinfo.h	/^      kLSE2,                     \/\/!< CPU has LSE2         (large system extensions v2) {A64}.$/;"	m	struct:CpuFeatures::ARM	typeref:enum:CpuFeatures::ARM::
kLSL	external/asmjit/src/asmjit/core/archcommons.h	/^  kLSL = 0x00u,$/;"	m	class:CondCode::DataType::ShiftOp
kLSR	external/asmjit/src/asmjit/core/archcommons.h	/^  kLSR = 0x01u,$/;"	m	class:CondCode::DataType::ShiftOp
kLT	external/asmjit/src/asmjit/core/archcommons.h	/^  kLT             = 0x0Du,      \/\/!<               N!=V  (signed   < )$/;"	m	class:CondCode
kLT	external/asmjit/src/asmjit/x86/x86globals.h	/^  kLT            = 0x00u,       \/\/!< Less.$/;"	m	class:CondCode::FpuStatusWord::FpuControlWord::CmpImm::PCmpStrImm::RoundImm::VCmpImm::VFixupImm::VFPClassImm::VGetMantImm::VPCmpImm::VPComImm
kLT	external/asmjit/src/asmjit/x86/x86globals.h	/^  kLT            = 0x01u,       \/\/!< Less (Signaling), same as \\ref VCmpImm::kLT_OS.$/;"	m	class:CondCode::FpuStatusWord::FpuControlWord::CmpImm
kLT	external/asmjit/src/asmjit/x86/x86globals.h	/^  kLT            = 0x01u,       \/\/!< Less.$/;"	m	class:CondCode::FpuStatusWord::FpuControlWord::CmpImm::PCmpStrImm::RoundImm::VCmpImm::VFixupImm::VFPClassImm::VGetMantImm::VPCmpImm
kLT_OQ	external/asmjit/src/asmjit/x86/x86globals.h	/^  kLT_OQ         = 0x11u,       \/\/!< Less              (Quiet    , Ordered).$/;"	m	class:CondCode::FpuStatusWord::FpuControlWord::CmpImm::PCmpStrImm::RoundImm::VCmpImm
kLT_OS	external/asmjit/src/asmjit/x86/x86globals.h	/^  kLT_OS         = 0x01u,       \/\/!< Less              (Signaling, Ordered)  , same as \\ref CmpImm::kLT.$/;"	m	class:CondCode::FpuStatusWord::FpuControlWord::CmpImm::PCmpStrImm::RoundImm::VCmpImm
kLWP	external/asmjit/src/asmjit/core/cpuinfo.h	/^      kLWP,                      \/\/!< CPU has LWP              (lightweight profiling) {AMD}.$/;"	m	struct:CpuFeatures::X86	typeref:enum:CpuFeatures::X86::
kLZCNT	external/asmjit/src/asmjit/core/cpuinfo.h	/^      kLZCNT,                    \/\/!< CPU has LZCNT            (LZCNT instruction).$/;"	m	struct:CpuFeatures::X86	typeref:enum:CpuFeatures::X86::
kLabel	external/asmjit/src/asmjit/core/builder.h	/^  kLabel = 3,$/;"	m	class:NodeType
kLabel	external/asmjit/src/asmjit/core/codeholder.h	/^  kLabel = 2,$/;"	m	class:ExpressionOpType::ExpressionValueType
kLabel	external/asmjit/src/asmjit/core/formatter.h	/^  kLabel = 1u,$/;"	m	class:FormatFlags::FormatIndentationGroup
kLabel	external/asmjit/src/asmjit/core/operand.h	/^  kLabel = 4,$/;"	m	class:OperandType
kLabelTag	external/asmjit/src/asmjit/core/operand.h	/^  kLabelTag = 1,$/;"	m	class:OperandType::RegType
kLast	external/asmjit/src/asmjit/core/radefs_p.h	/^  kLast = 0x00020000u,$/;"	m	class:RAStrategyType::RAStrategyFlags::RATiedFlags
kLastAssigned	external/asmjit/src/asmjit/core/type.h	/^  kLastAssigned = kFloat64x8,$/;"	m	class:TypeId
kLeadConsecutive	external/asmjit/src/asmjit/core/radefs_p.h	/^  kLeadConsecutive = 0x00000004u,$/;"	m	class:RAStrategyType::RAStrategyFlags::RATiedFlags::RAWorkRegFlags
kLeadConsecutive	external/asmjit/src/asmjit/core/radefs_p.h	/^  kLeadConsecutive = 0x00001000u,$/;"	m	class:RAStrategyType::RAStrategyFlags::RATiedFlags
kLightCall2	external/asmjit/src/asmjit/core/func.h	/^  kLightCall2 = 16,$/;"	m	class:CallConvId
kLightCall3	external/asmjit/src/asmjit/core/func.h	/^  kLightCall3 = 17,$/;"	m	class:CallConvId
kLightCall4	external/asmjit/src/asmjit/core/func.h	/^  kLightCall4 = 18,$/;"	m	class:CallConvId
kLinux	external/asmjit/src/asmjit/core/environment.h	/^  kLinux,$/;"	m	class:Vendor::Platform
kLocal	external/asmjit/src/asmjit/core/codeholder.h	/^  kLocal = 1,$/;"	m	class:ExpressionOpType::ExpressionValueType::SectionFlags::CopySectionFlags::OffsetType::RelocType::LabelType
kLocal	external/asmjit/src/asmjit/core/constpool.h	/^  kLocal = 0,$/;"	m	class:ConstPoolScope
kLock	external/asmjit/src/asmjit/x86/x86instdb.h	/^  kLock = 0x00010000u,$/;"	m	class:InstDB::Mode::OpFlags::InstFlags
kLogComments	external/asmjit/src/asmjit/core/emitter.h	/^  kLogComments = 0x08u,$/;"	m	class:AlignMode::EmitterType::EmitterFlags
kLong	external/asmjit/src/asmjit/core/archtraits.h	/^  kLong,$/;"	m	class:Arch::SubArch::ArchTypeNameId
kLongForm	external/asmjit/src/asmjit/core/inst.h	/^  kLongForm = 0x00000020u,$/;"	m	class:InstIdParts::InstOptions
kMCOMMIT	external/asmjit/src/asmjit/core/cpuinfo.h	/^      kMCOMMIT,                  \/\/!< CPU has MCOMMIT          (MCOMMIT instruction).$/;"	m	struct:CpuFeatures::X86	typeref:enum:CpuFeatures::X86::
kMI	external/asmjit/src/asmjit/core/archcommons.h	/^  kMI             = 0x06u,      \/\/!<               N==1  (is negative)$/;"	m	class:CondCode
kMIPS32_BE	external/asmjit/src/asmjit/core/archtraits.h	/^  kMIPS32_BE = 15,$/;"	m	class:Arch
kMIPS32_LE	external/asmjit/src/asmjit/core/archtraits.h	/^  kMIPS32_LE = 9,$/;"	m	class:Arch
kMIPS64_BE	external/asmjit/src/asmjit/core/archtraits.h	/^  kMIPS64_BE = 16,$/;"	m	class:Arch
kMIPS64_LE	external/asmjit/src/asmjit/core/archtraits.h	/^  kMIPS64_LE = 10,$/;"	m	class:Arch
kMMX	external/asmjit/src/asmjit/core/cpuinfo.h	/^      kMMX,                      \/\/!< CPU has MMX              (MMX base instructions) (deprecated).$/;"	m	struct:CpuFeatures::X86	typeref:enum:CpuFeatures::X86::
kMMX2	external/asmjit/src/asmjit/core/cpuinfo.h	/^      kMMX2,                     \/\/!< CPU has MMX2             (MMX2 extensions or initial SSE extensions) (deprecated).$/;"	m	struct:CpuFeatures::X86	typeref:enum:CpuFeatures::X86::
kMM_00	external/asmjit/src/asmjit/x86/x86opcode_p.h	/^    kMM_00         = 0x00u << kMM_Shift,$/;"	m	struct:Opcode	typeref:enum:Opcode::
kMM_0F	external/asmjit/src/asmjit/x86/x86opcode_p.h	/^    kMM_0F         = 0x01u << kMM_Shift,$/;"	m	struct:Opcode	typeref:enum:Opcode::
kMM_0F01	external/asmjit/src/asmjit/x86/x86opcode_p.h	/^    kMM_0F01       = 0x04u << kMM_Shift,   \/\/ AsmJit way to describe 0F01 (never VEX\/EVEX).$/;"	m	struct:Opcode	typeref:enum:Opcode::
kMM_0F38	external/asmjit/src/asmjit/x86/x86opcode_p.h	/^    kMM_0F38       = 0x02u << kMM_Shift,$/;"	m	struct:Opcode	typeref:enum:Opcode::
kMM_0F3A	external/asmjit/src/asmjit/x86/x86opcode_p.h	/^    kMM_0F3A       = 0x03u << kMM_Shift,   \/\/ Described also as XOP.M3 in AMD manuals.$/;"	m	struct:Opcode	typeref:enum:Opcode::
kMM_ForceEvex	external/asmjit/src/asmjit/x86/x86opcode_p.h	/^    kMM_ForceEvex  = 0x10u << kMM_Shift,   \/\/ Force 4-BYTE EVEX prefix.$/;"	m	struct:Opcode	typeref:enum:Opcode::
kMM_IsXOP	external/asmjit/src/asmjit/x86/x86opcode_p.h	/^    kMM_IsXOP      = kMM_XOP08,$/;"	m	struct:Opcode	typeref:enum:Opcode::
kMM_IsXOP_Shift	external/asmjit/src/asmjit/x86/x86opcode_p.h	/^    kMM_IsXOP_Shift= kMM_Shift + 3,$/;"	m	struct:Opcode	typeref:enum:Opcode::
kMM_MAP5	external/asmjit/src/asmjit/x86/x86opcode_p.h	/^    kMM_MAP5       = 0x05u << kMM_Shift,   \/\/ EVEX.MAP5.$/;"	m	struct:Opcode	typeref:enum:Opcode::
kMM_MAP6	external/asmjit/src/asmjit/x86/x86opcode_p.h	/^    kMM_MAP6       = 0x06u << kMM_Shift,   \/\/ EVEX.MAP6.$/;"	m	struct:Opcode	typeref:enum:Opcode::
kMM_Mask	external/asmjit/src/asmjit/x86/x86opcode_p.h	/^    kMM_Mask       = 0x1Fu << kMM_Shift,$/;"	m	struct:Opcode	typeref:enum:Opcode::
kMM_XOP08	external/asmjit/src/asmjit/x86/x86opcode_p.h	/^    kMM_XOP08      = 0x08u << kMM_Shift,   \/\/ XOP.M8.$/;"	m	struct:Opcode	typeref:enum:Opcode::
kMM_XOP09	external/asmjit/src/asmjit/x86/x86opcode_p.h	/^    kMM_XOP09      = 0x09u << kMM_Shift,   \/\/ XOP.M9.$/;"	m	struct:Opcode	typeref:enum:Opcode::
kMM_XOP0A	external/asmjit/src/asmjit/x86/x86opcode_p.h	/^    kMM_XOP0A      = 0x0Au << kMM_Shift,   \/\/ XOP.MA.$/;"	m	struct:Opcode	typeref:enum:Opcode::
kMMapEnableMapJit	external/asmjit/src/asmjit/core/virtmem.h	/^  kMMapEnableMapJit = 0x00000010u,$/;"	m	class:VirtMem::CachePolicy::MemoryFlags
kMMapLargePages	external/asmjit/src/asmjit/core/virtmem.h	/^  kMMapLargePages = 0x00000200u,$/;"	m	class:VirtMem::CachePolicy::MemoryFlags
kMMapMaxAccessExecute	external/asmjit/src/asmjit/core/virtmem.h	/^  kMMapMaxAccessExecute = 0x00000080u,$/;"	m	class:VirtMem::CachePolicy::MemoryFlags
kMMapMaxAccessRW	external/asmjit/src/asmjit/core/virtmem.h	/^  kMMapMaxAccessRW = kMMapMaxAccessRead | kMMapMaxAccessWrite,$/;"	m	class:VirtMem::CachePolicy::MemoryFlags
kMMapMaxAccessRWX	external/asmjit/src/asmjit/core/virtmem.h	/^  kMMapMaxAccessRWX = kMMapMaxAccessRead | kMMapMaxAccessWrite | kMMapMaxAccessExecute,$/;"	m	class:VirtMem::CachePolicy::MemoryFlags
kMMapMaxAccessRX	external/asmjit/src/asmjit/core/virtmem.h	/^  kMMapMaxAccessRX = kMMapMaxAccessRead | kMMapMaxAccessExecute,$/;"	m	class:VirtMem::CachePolicy::MemoryFlags
kMMapMaxAccessRead	external/asmjit/src/asmjit/core/virtmem.h	/^  kMMapMaxAccessRead = 0x00000020u,$/;"	m	class:VirtMem::CachePolicy::MemoryFlags
kMMapMaxAccessReadWrite	external/asmjit/src/asmjit/core/virtmem.h	/^  kMMapMaxAccessReadWrite = kMMapMaxAccessRead | kMMapMaxAccessWrite,$/;"	m	class:VirtMem::CachePolicy::MemoryFlags
kMMapMaxAccessWrite	external/asmjit/src/asmjit/core/virtmem.h	/^  kMMapMaxAccessWrite = 0x00000040u,$/;"	m	class:VirtMem::CachePolicy::MemoryFlags
kMONITOR	external/asmjit/src/asmjit/core/cpuinfo.h	/^      kMONITOR,                  \/\/!< CPU has MONITOR          (MONITOR\/MWAIT instructions).$/;"	m	struct:CpuFeatures::X86	typeref:enum:CpuFeatures::X86::
kMONITORX	external/asmjit/src/asmjit/core/cpuinfo.h	/^      kMONITORX,                 \/\/!< CPU has MONITORX         (MONITORX\/MWAITX instructions).$/;"	m	struct:CpuFeatures::X86	typeref:enum:CpuFeatures::X86::
kMONSOON_MISTRAL	external/asmjit/src/asmjit/core/cpuinfo.cpp	/^  kMONSOON_MISTRAL    = 0xE81E7EF6u, \/\/ Apple A11 (ARMv8.2-A).$/;"	m	class:arm::AppleFamilyId	file:
kMOPS	external/asmjit/src/asmjit/core/cpuinfo.h	/^      kMOPS,                     \/\/!< CPU has MOPS         (memcpy and memset acceleration instructions) {A64}.$/;"	m	struct:CpuFeatures::ARM	typeref:enum:CpuFeatures::ARM::
kMOVBE	external/asmjit/src/asmjit/core/cpuinfo.h	/^      kMOVBE,                    \/\/!< CPU has MOVBE            (move with byte-order swap).$/;"	m	struct:CpuFeatures::X86	typeref:enum:CpuFeatures::X86::
kMOVDIR64B	external/asmjit/src/asmjit/core/cpuinfo.h	/^      kMOVDIR64B,                \/\/!< CPU has MOVDIR64B        (move 64 bytes as direct store).$/;"	m	struct:CpuFeatures::X86	typeref:enum:CpuFeatures::X86::
kMOVDIRI	external/asmjit/src/asmjit/core/cpuinfo.h	/^      kMOVDIRI,                  \/\/!< CPU has MOVDIRI          (move dword\/qword as direct store).$/;"	m	struct:CpuFeatures::X86	typeref:enum:CpuFeatures::X86::
kMPAM	external/asmjit/src/asmjit/core/cpuinfo.h	/^      kMPAM,                     \/\/!< CPU has MPAM         (memory system partitioning and monitoring extension) {A64}.$/;"	m	struct:CpuFeatures::ARM	typeref:enum:CpuFeatures::ARM::
kMPX	external/asmjit/src/asmjit/core/cpuinfo.h	/^      kMPX,                      \/\/!< CPU has MPX              (memory protection extensions).$/;"	m	struct:CpuFeatures::X86	typeref:enum:CpuFeatures::X86::
kMSL	external/asmjit/src/asmjit/core/archcommons.h	/^  kMSL = 0x05u,$/;"	m	class:CondCode::DataType::ShiftOp
kMSR	external/asmjit/src/asmjit/core/cpuinfo.h	/^      kMSR,                      \/\/!< CPU has MSR              (RDMSR\/WRMSR instructions).$/;"	m	struct:CpuFeatures::X86	typeref:enum:CpuFeatures::X86::
kMSRLIST	external/asmjit/src/asmjit/core/cpuinfo.h	/^      kMSRLIST,                  \/\/!< CPU has MSRLIST.$/;"	m	struct:CpuFeatures::X86	typeref:enum:CpuFeatures::X86::
kMSSE	external/asmjit/src/asmjit/core/cpuinfo.h	/^      kMSSE,                     \/\/!< CPU has MSSE             (misaligned SSE support).$/;"	m	struct:CpuFeatures::X86	typeref:enum:CpuFeatures::X86::
kMSVC	external/asmjit/src/asmjit/core/environment.h	/^  kMSVC,$/;"	m	class:Vendor::Platform::PlatformABI
kMT	external/asmjit/src/asmjit/core/cpuinfo.h	/^      kMT,                       \/\/!< CPU has multi-threading capabilities.$/;"	m	struct:CpuFeatures::X86	typeref:enum:CpuFeatures::X86::
kMTE	external/asmjit/src/asmjit/core/cpuinfo.h	/^      kMTE,                      \/\/!< CPU has MTE          (instruction-only memory tagging extension) {A64}.$/;"	m	struct:CpuFeatures::ARM	typeref:enum:CpuFeatures::ARM::
kMTE2	external/asmjit/src/asmjit/core/cpuinfo.h	/^      kMTE2,                     \/\/!< CPU has MTE2         (full memory tagging extension) {A64}.$/;"	m	struct:CpuFeatures::ARM	typeref:enum:CpuFeatures::ARM::
kMTE3	external/asmjit/src/asmjit/core/cpuinfo.h	/^      kMTE3,                     \/\/!< CPU has MTE3         (MTE asymmetric fault handling) {A64}.$/;"	m	struct:CpuFeatures::ARM	typeref:enum:CpuFeatures::ARM::
kMTE4	external/asmjit/src/asmjit/core/cpuinfo.h	/^      kMTE4,                     \/\/!< CPU has MTE4         (MTE v4) {A64}.$/;"	m	struct:CpuFeatures::ARM	typeref:enum:CpuFeatures::ARM::
kMachO	external/asmjit/src/asmjit/core/environment.h	/^  kMachO,$/;"	m	class:Vendor::Platform::PlatformABI::ObjectFormat
kMachineCode	external/asmjit/src/asmjit/core/formatter.h	/^  kMachineCode = 0x00000001u,$/;"	m	class:FormatFlags
kMachineCode	external/asmjit/src/asmjit/core/formatter.h	/^  kMachineCode = 1,$/;"	m	class:FormatFlags::FormatIndentationGroup::FormatPaddingGroup
kMapJit	external/asmjit/src/asmjit/core/virtmem.h	/^  kMapJit = 0x00000002u$/;"	m	class:VirtMem::CachePolicy::MemoryFlags::HardenedRuntimeFlags
kMapShared	external/asmjit/src/asmjit/core/virtmem.h	/^  kMapShared = 0x00000100u,$/;"	m	class:VirtMem::CachePolicy::MemoryFlags
kMappingPreferTmp	external/asmjit/src/asmjit/core/virtmem.h	/^  kMappingPreferTmp = 0x80000000u$/;"	m	class:VirtMem::CachePolicy::MemoryFlags
kMask	external/asmjit/src/asmjit/core/operand.h	/^  kMask = 17,$/;"	m	class:OperandType::RegType
kMask16	external/asmjit/src/asmjit/core/type.h	/^  kMask16 = 46,$/;"	m	class:TypeId
kMask32	external/asmjit/src/asmjit/core/type.h	/^  kMask32 = 47,$/;"	m	class:TypeId
kMask64	external/asmjit/src/asmjit/core/type.h	/^  kMask64 = 48,$/;"	m	class:TypeId
kMask8	external/asmjit/src/asmjit/core/type.h	/^  kMask8 = 45,$/;"	m	class:TypeId
kMaxAlignment	external/asmjit/src/asmjit/core/globals.h	/^static constexpr uint32_t kMaxAlignment = 64;$/;"	m	namespace:ByteOrder::ResetPolicy::Globals
kMaxAllocSize	external/asmjit/src/asmjit/core/string.cpp	/^constexpr size_t kMaxAllocSize = SIZE_MAX - Globals::kGrowThreshold;$/;"	v
kMaxCommentSize	external/asmjit/src/asmjit/core/globals.h	/^static constexpr uint32_t kMaxCommentSize = 1024;$/;"	m	namespace:ByteOrder::ResetPolicy::Globals
kMaxConsecutiveRegs	external/asmjit/src/asmjit/core/radefs_p.h	/^static constexpr uint32_t kMaxConsecutiveRegs = 4;$/;"	v
kMaxFeatures	external/asmjit/src/asmjit/core/cpuinfo.h	/^  static_assert(uint32_t(ARM::kMaxValue) < kMaxFeatures, "The number of ARM CPU features cannot exceed CpuFeatures::kMaxFeatures");$/;"	m	class:CpuFeatures
kMaxFeatures	external/asmjit/src/asmjit/core/cpuinfo.h	/^  static_assert(uint32_t(X86::kMaxValue) < kMaxFeatures, "The number of X86 CPU features cannot exceed CpuFeatures::kMaxFeatures");$/;"	m	class:CpuFeatures
kMaxFuncArgs	external/asmjit/src/asmjit/core/globals.h	/^static constexpr uint32_t kMaxFuncArgs = 16;$/;"	m	namespace:ByteOrder::ResetPolicy::Globals
kMaxLabelNameSize	external/asmjit/src/asmjit/core/globals.h	/^static constexpr uint32_t kMaxLabelNameSize = 2048;$/;"	m	namespace:ByteOrder::ResetPolicy::Globals
kMaxOpCount	external/asmjit/src/asmjit/core/globals.h	/^static constexpr uint32_t kMaxOpCount = 6;$/;"	m	namespace:ByteOrder::ResetPolicy::Globals
kMaxPhysRegs	external/asmjit/src/asmjit/core/globals.h	/^static constexpr uint32_t kMaxPhysRegs = 32;$/;"	m	namespace:ByteOrder::ResetPolicy::Globals
kMaxRegArgsPerGroup	external/asmjit/src/asmjit/core/func.h	/^  static constexpr uint32_t kMaxRegArgsPerGroup = 16;$/;"	m	struct:CallConvId::CallConvStrategy::CallConvFlags::CallConv
kMaxSectionNameSize	external/asmjit/src/asmjit/core/globals.h	/^static constexpr uint32_t kMaxSectionNameSize = 35;$/;"	m	namespace:ByteOrder::ResetPolicy::Globals
kMaxTreeHeight	external/asmjit/src/asmjit/core/globals.h	/^static constexpr uint32_t kMaxTreeHeight = (ASMJIT_ARCH_BITS == 32 ? 30 : 61) + 1;$/;"	m	namespace:ByteOrder::ResetPolicy::Globals
kMaxValue	external/asmjit/src/asmjit/core/archcommons.h	/^  kMaxValue       = 0x0Fu       \/\/!< Maximum value of `CondCode`.$/;"	m	class:CondCode
kMaxValue	external/asmjit/src/asmjit/core/archcommons.h	/^  kMaxValue = 15$/;"	m	class:CondCode::DataType
kMaxValue	external/asmjit/src/asmjit/core/archtraits.h	/^  kMaxValue = kMIPS64_BE,$/;"	m	class:Arch
kMaxValue	external/asmjit/src/asmjit/core/archtraits.h	/^  kMaxValue = kQuad$/;"	m	class:Arch::SubArch::ArchTypeNameId
kMaxValue	external/asmjit/src/asmjit/core/archtraits.h	/^  kMaxValue = kUnknown,$/;"	m	class:Arch::SubArch
kMaxValue	external/asmjit/src/asmjit/core/codeholder.h	/^  kMaxValue = kAArch64_ADRP$/;"	m	class:ExpressionOpType::ExpressionValueType::SectionFlags::CopySectionFlags::OffsetType
kMaxValue	external/asmjit/src/asmjit/core/codeholder.h	/^  kMaxValue = kExternal$/;"	m	class:ExpressionOpType::ExpressionValueType::SectionFlags::CopySectionFlags::OffsetType::RelocType::LabelType
kMaxValue	external/asmjit/src/asmjit/core/constpool.h	/^  kMaxValue = kGlobal$/;"	m	class:ConstPoolScope
kMaxValue	external/asmjit/src/asmjit/core/cpuinfo.h	/^      kMaxValue = kXS$/;"	m	struct:CpuFeatures::ARM	typeref:enum:CpuFeatures::ARM::
kMaxValue	external/asmjit/src/asmjit/core/cpuinfo.h	/^      kMaxValue = kXSAVES$/;"	m	struct:CpuFeatures::X86	typeref:enum:CpuFeatures::X86::
kMaxValue	external/asmjit/src/asmjit/core/emitter.h	/^  kMaxValue = kCompiler$/;"	m	class:AlignMode::EmitterType
kMaxValue	external/asmjit/src/asmjit/core/emitter.h	/^  kMaxValue = kZero$/;"	m	class:AlignMode
kMaxValue	external/asmjit/src/asmjit/core/environment.h	/^  kMaxValue = kEmscripten,$/;"	m	class:Vendor::Platform
kMaxValue	external/asmjit/src/asmjit/core/environment.h	/^  kMaxValue = kUnknown,$/;"	m	class:Vendor
kMaxValue	external/asmjit/src/asmjit/core/environment.h	/^  kMaxValue,$/;"	m	class:Vendor::Platform::PlatformABI
kMaxValue	external/asmjit/src/asmjit/core/formatter.h	/^  kMaxValue = kMachineCode$/;"	m	class:FormatFlags::FormatIndentationGroup::FormatPaddingGroup
kMaxValue	external/asmjit/src/asmjit/core/formatter.h	/^  kMaxValue = kReserved$/;"	m	class:FormatFlags::FormatIndentationGroup
kMaxValue	external/asmjit/src/asmjit/core/func.h	/^  kMaxValue = kX64VectorCall$/;"	m	class:CallConvId::CallConvStrategy
kMaxValue	external/asmjit/src/asmjit/core/func.h	/^  kMaxValue = kX64Windows,$/;"	m	class:CallConvId
kMaxValue	external/asmjit/src/asmjit/core/inst.h	/^  kMaxValue = kReturn$/;"	m	class:InstIdParts::InstOptions::InstControlFlow
kMaxValue	external/asmjit/src/asmjit/core/operand.h	/^  kMaxValue = 15$/;"	m	class:OperandType::RegType::RegGroup
kMaxValue	external/asmjit/src/asmjit/core/operand.h	/^  kMaxValue = 31$/;"	m	class:OperandType::RegType
kMaxValue	external/asmjit/src/asmjit/core/operand.h	/^  kMaxValue = kLabel$/;"	m	class:OperandType
kMaxValue	external/asmjit/src/asmjit/core/type.h	/^  kMaxValue = 255$/;"	m	class:TypeId
kMaxValue	external/asmjit/src/asmjit/x86/x86globals.h	/^  kMaxValue      = 0x0Fu$/;"	m	class:CondCode
kMaxValue	external/asmjit/src/asmjit/x86/x86operand.h	/^    kMaxValue = k1To64$/;"	m	class:Mem::AddrType::Broadcast
kMaxValue	external/asmjit/src/asmjit/x86/x86operand.h	/^    kMaxValue = kRel$/;"	m	class:Mem::AddrType
kMaxValuePack	external/asmjit/src/asmjit/core/globals.h	/^static constexpr uint32_t kMaxValuePack = 4;$/;"	m	namespace:ByteOrder::ResetPolicy::Globals
kMaxVirt	external/asmjit/src/asmjit/core/operand.h	/^  kMaxVirt = Globals::kNumVirtGroups - 1,$/;"	m	class:OperandType::RegType::RegGroup
kMem	external/asmjit/src/asmjit/core/operand.h	/^  kMem = 2,$/;"	m	class:OperandType
kMem1024	external/asmjit/src/asmjit/x86/x86instdb.h	/^  kMem1024         = 0x0000000010000000u, \/\/!< Operand can be a 1024-bit memory pointer.$/;"	m	class:InstDB::Mode::OpFlags
kMem128	external/asmjit/src/asmjit/x86/x86instdb.h	/^  kMem128          = 0x0000000002000000u, \/\/!< Operand can be a 128-bit memory pointer.$/;"	m	class:InstDB::Mode::OpFlags
kMem16	external/asmjit/src/asmjit/x86/x86instdb.h	/^  kMem16           = 0x0000000000100000u, \/\/!< Operand can be a 16-bit memory pointer.$/;"	m	class:InstDB::Mode::OpFlags
kMem256	external/asmjit/src/asmjit/x86/x86instdb.h	/^  kMem256          = 0x0000000004000000u, \/\/!< Operand can be a 256-bit memory pointer.$/;"	m	class:InstDB::Mode::OpFlags
kMem32	external/asmjit/src/asmjit/x86/x86instdb.h	/^  kMem32           = 0x0000000000200000u, \/\/!< Operand can be a 32-bit memory pointer.$/;"	m	class:InstDB::Mode::OpFlags
kMem48	external/asmjit/src/asmjit/x86/x86instdb.h	/^  kMem48           = 0x0000000000400000u, \/\/!< Operand can be a 48-bit memory pointer (FAR pointers only).$/;"	m	class:InstDB::Mode::OpFlags
kMem512	external/asmjit/src/asmjit/x86/x86instdb.h	/^  kMem512          = 0x0000000008000000u, \/\/!< Operand can be a 512-bit memory pointer.$/;"	m	class:InstDB::Mode::OpFlags
kMem64	external/asmjit/src/asmjit/x86/x86instdb.h	/^  kMem64           = 0x0000000000800000u, \/\/!< Operand can be a 64-bit memory pointer.$/;"	m	class:InstDB::Mode::OpFlags
kMem8	external/asmjit/src/asmjit/x86/x86instdb.h	/^  kMem8            = 0x0000000000080000u, \/\/!< Operand can be an 8-bit memory pointer.$/;"	m	class:InstDB::Mode::OpFlags
kMem80	external/asmjit/src/asmjit/x86/x86instdb.h	/^  kMem80           = 0x0000000001000000u, \/\/!< Operand can be an 80-bit memory pointer.$/;"	m	class:InstDB::Mode::OpFlags
kMemBaseIndexMask	external/asmjit/src/asmjit/core/operand.h	/^    kMemBaseIndexMask = 0x3FFu << kMemBaseIndexShift,$/;"	m	struct:OperandType::RegType::RegGroup::OperandSignature	typeref:enum:OperandType::RegType::RegGroup::OperandSignature::
kMemBaseIndexShift	external/asmjit/src/asmjit/core/operand.h	/^    kMemBaseIndexShift = 3,$/;"	m	struct:OperandType::RegType::RegGroup::OperandSignature	typeref:enum:OperandType::RegType::RegGroup::OperandSignature::
kMemBasePostModify	external/asmjit/src/asmjit/core/inst.h	/^  kMemBasePostModify = 0x00020000u$/;"	m	class:InstIdParts::InstOptions::InstControlFlow::InstSameRegHint::CpuRWFlags::OpRWFlags
kMemBasePreModify	external/asmjit/src/asmjit/core/inst.h	/^  kMemBasePreModify = 0x00010000u,$/;"	m	class:InstIdParts::InstOptions::InstControlFlow::InstSameRegHint::CpuRWFlags::OpRWFlags
kMemBaseRW	external/asmjit/src/asmjit/core/inst.h	/^  kMemBaseRW = 0x00003000u,$/;"	m	class:InstIdParts::InstOptions::InstControlFlow::InstSameRegHint::CpuRWFlags::OpRWFlags
kMemBaseRead	external/asmjit/src/asmjit/core/inst.h	/^  kMemBaseRead = 0x00001000u,$/;"	m	class:InstIdParts::InstOptions::InstControlFlow::InstSameRegHint::CpuRWFlags::OpRWFlags
kMemBaseTypeMask	external/asmjit/src/asmjit/core/operand.h	/^    kMemBaseTypeMask = 0x1Fu << kMemBaseTypeShift,$/;"	m	struct:OperandType::RegType::RegGroup::OperandSignature	typeref:enum:OperandType::RegType::RegGroup::OperandSignature::
kMemBaseTypeShift	external/asmjit/src/asmjit/core/operand.h	/^    kMemBaseTypeShift = 3,$/;"	m	struct:OperandType::RegType::RegGroup::OperandSignature	typeref:enum:OperandType::RegType::RegGroup::OperandSignature::
kMemBaseWrite	external/asmjit/src/asmjit/core/inst.h	/^  kMemBaseWrite = 0x00002000u,$/;"	m	class:InstIdParts::InstOptions::InstControlFlow::InstSameRegHint::CpuRWFlags::OpRWFlags
kMemFake	external/asmjit/src/asmjit/core/inst.h	/^  kMemFake = 0x000000400u,$/;"	m	class:InstIdParts::InstOptions::InstControlFlow::InstSameRegHint::CpuRWFlags::OpRWFlags
kMemIndexRW	external/asmjit/src/asmjit/core/inst.h	/^  kMemIndexRW = 0x0000C000u,$/;"	m	class:InstIdParts::InstOptions::InstControlFlow::InstSameRegHint::CpuRWFlags::OpRWFlags
kMemIndexRead	external/asmjit/src/asmjit/core/inst.h	/^  kMemIndexRead = 0x00004000u,$/;"	m	class:InstIdParts::InstOptions::InstControlFlow::InstSameRegHint::CpuRWFlags::OpRWFlags
kMemIndexTypeMask	external/asmjit/src/asmjit/core/operand.h	/^    kMemIndexTypeMask = 0x1Fu << kMemIndexTypeShift,$/;"	m	struct:OperandType::RegType::RegGroup::OperandSignature	typeref:enum:OperandType::RegType::RegGroup::OperandSignature::
kMemIndexTypeShift	external/asmjit/src/asmjit/core/operand.h	/^    kMemIndexTypeShift = 8,$/;"	m	struct:OperandType::RegType::RegGroup::OperandSignature	typeref:enum:OperandType::RegType::RegGroup::OperandSignature::
kMemIndexWrite	external/asmjit/src/asmjit/core/inst.h	/^  kMemIndexWrite = 0x00008000u,$/;"	m	class:InstIdParts::InstOptions::InstControlFlow::InstSameRegHint::CpuRWFlags::OpRWFlags
kMemMask	external/asmjit/src/asmjit/x86/x86instdb.h	/^  kMemMask         = 0x000000001FFC0000u, \/\/!< Mask of all possible scalar memory types.$/;"	m	class:InstDB::Mode::OpFlags
kMemPhysId	external/asmjit/src/asmjit/core/inst.h	/^  kMemPhysId = 0x00000200u,$/;"	m	class:InstIdParts::InstOptions::InstControlFlow::InstSameRegHint::CpuRWFlags::OpRWFlags
kMemRegHomeFlag	external/asmjit/src/asmjit/core/operand.h	/^    kMemRegHomeFlag = 0x01u << kMemRegHomeShift,$/;"	m	struct:OperandType::RegType::RegGroup::OperandSignature	typeref:enum:OperandType::RegType::RegGroup::OperandSignature::
kMemRegHomeShift	external/asmjit/src/asmjit/core/operand.h	/^    kMemRegHomeShift = 13,$/;"	m	struct:OperandType::RegType::RegGroup::OperandSignature	typeref:enum:OperandType::RegType::RegGroup::OperandSignature::
kMemUnspecified	external/asmjit/src/asmjit/x86/x86instdb.h	/^  kMemUnspecified  = 0x0000000000040000u, \/\/!< Operand can be a scalar memory pointer without size.$/;"	m	class:InstDB::Mode::OpFlags
kMib	external/asmjit/src/asmjit/x86/x86instdb.h	/^  kMib = 0x00080000u,$/;"	m	class:InstDB::Mode::OpFlags::InstFlags
kMinAllocSize	external/asmjit/src/asmjit/core/string.cpp	/^constexpr size_t kMinAllocSize = 64;$/;"	v
kMmx	external/asmjit/src/asmjit/x86/x86instdb.h	/^  kMmx = 0x00000200u,$/;"	m	class:InstDB::Mode::OpFlags::InstFlags
kMmx32	external/asmjit/src/asmjit/core/type.h	/^  kMmx32 = 49,$/;"	m	class:TypeId
kMmx64	external/asmjit/src/asmjit/core/type.h	/^  kMmx64 = 50,$/;"	m	class:TypeId
kModO_0	external/asmjit/src/asmjit/x86/x86opcode_p.h	/^    kModO_0        = 0x0u << kModO_Shift,$/;"	m	struct:Opcode	typeref:enum:Opcode::
kModO_1	external/asmjit/src/asmjit/x86/x86opcode_p.h	/^    kModO_1        = 0x1u << kModO_Shift,$/;"	m	struct:Opcode	typeref:enum:Opcode::
kModO_2	external/asmjit/src/asmjit/x86/x86opcode_p.h	/^    kModO_2        = 0x2u << kModO_Shift,$/;"	m	struct:Opcode	typeref:enum:Opcode::
kModO_3	external/asmjit/src/asmjit/x86/x86opcode_p.h	/^    kModO_3        = 0x3u << kModO_Shift,$/;"	m	struct:Opcode	typeref:enum:Opcode::
kModO_4	external/asmjit/src/asmjit/x86/x86opcode_p.h	/^    kModO_4        = 0x4u << kModO_Shift,$/;"	m	struct:Opcode	typeref:enum:Opcode::
kModO_5	external/asmjit/src/asmjit/x86/x86opcode_p.h	/^    kModO_5        = 0x5u << kModO_Shift,$/;"	m	struct:Opcode	typeref:enum:Opcode::
kModO_6	external/asmjit/src/asmjit/x86/x86opcode_p.h	/^    kModO_6        = 0x6u << kModO_Shift,$/;"	m	struct:Opcode	typeref:enum:Opcode::
kModO_7	external/asmjit/src/asmjit/x86/x86opcode_p.h	/^    kModO_7        = 0x7u << kModO_Shift,$/;"	m	struct:Opcode	typeref:enum:Opcode::
kModO_Mask	external/asmjit/src/asmjit/x86/x86opcode_p.h	/^    kModO_Mask     = 0x7u << kModO_Shift,$/;"	m	struct:Opcode	typeref:enum:Opcode::
kModO_Shift	external/asmjit/src/asmjit/x86/x86opcode_p.h	/^    kModO_Shift    = 18,$/;"	m	struct:Opcode	typeref:enum:Opcode::
kModO__	external/asmjit/src/asmjit/x86/x86opcode_p.h	/^    kModO__        = 0x0u,$/;"	m	struct:Opcode	typeref:enum:Opcode::
kModRM_0	external/asmjit/src/asmjit/x86/x86opcode_p.h	/^    kModRM_0        = 0x0u << kModRM_Shift,$/;"	m	struct:Opcode	typeref:enum:Opcode::
kModRM_1	external/asmjit/src/asmjit/x86/x86opcode_p.h	/^    kModRM_1        = 0x1u << kModRM_Shift,$/;"	m	struct:Opcode	typeref:enum:Opcode::
kModRM_2	external/asmjit/src/asmjit/x86/x86opcode_p.h	/^    kModRM_2        = 0x2u << kModRM_Shift,$/;"	m	struct:Opcode	typeref:enum:Opcode::
kModRM_3	external/asmjit/src/asmjit/x86/x86opcode_p.h	/^    kModRM_3        = 0x3u << kModRM_Shift,$/;"	m	struct:Opcode	typeref:enum:Opcode::
kModRM_4	external/asmjit/src/asmjit/x86/x86opcode_p.h	/^    kModRM_4        = 0x4u << kModRM_Shift,$/;"	m	struct:Opcode	typeref:enum:Opcode::
kModRM_5	external/asmjit/src/asmjit/x86/x86opcode_p.h	/^    kModRM_5        = 0x5u << kModRM_Shift,$/;"	m	struct:Opcode	typeref:enum:Opcode::
kModRM_6	external/asmjit/src/asmjit/x86/x86opcode_p.h	/^    kModRM_6        = 0x6u << kModRM_Shift,$/;"	m	struct:Opcode	typeref:enum:Opcode::
kModRM_7	external/asmjit/src/asmjit/x86/x86opcode_p.h	/^    kModRM_7        = 0x7u << kModRM_Shift,$/;"	m	struct:Opcode	typeref:enum:Opcode::
kModRM_Mask	external/asmjit/src/asmjit/x86/x86opcode_p.h	/^    kModRM_Mask     = 0x7u << kModRM_Shift,$/;"	m	struct:Opcode	typeref:enum:Opcode::
kModRM_Shift	external/asmjit/src/asmjit/x86/x86opcode_p.h	/^    kModRM_Shift    = 13,$/;"	m	struct:Opcode	typeref:enum:Opcode::
kModRM__	external/asmjit/src/asmjit/x86/x86opcode_p.h	/^    kModRM__        = 0x0u,$/;"	m	struct:Opcode	typeref:enum:Opcode::
kModeFormat	external/asmjit/src/asmjit/x86/x86formatter.cpp	/^    kModeFormat = 1$/;"	m	struct:ImmBits	typeref:enum:ImmBits::	file:
kMovOp	external/asmjit/src/asmjit/core/inst.h	/^  kMovOp = 0x00000001u$/;"	m	class:InstIdParts::InstOptions::InstControlFlow::InstSameRegHint::CpuRWFlags::OpRWFlags::InstRWFlags
kMul	external/asmjit/src/asmjit/core/codeholder.h	/^  kMul = 2,$/;"	m	class:ExpressionOpType
kNA	external/asmjit/src/asmjit/core/archcommons.h	/^  kNA             = 0x01u,      \/\/!< (not available)     (special)$/;"	m	class:CondCode
kNA	external/asmjit/src/asmjit/x86/x86globals.h	/^  kNA            = 0x06u,       \/\/!< CF==1 | ZF==1  (unsigned <=)$/;"	m	class:CondCode
kNAE	external/asmjit/src/asmjit/x86/x86globals.h	/^  kNAE           = 0x02u,       \/\/!< CF==1          (unsigned < )$/;"	m	class:CondCode
kNB	external/asmjit/src/asmjit/x86/x86globals.h	/^  kNB            = 0x03u,       \/\/!< CF==0          (unsigned >=)$/;"	m	class:CondCode
kNBE	external/asmjit/src/asmjit/x86/x86globals.h	/^  kNBE           = 0x07u,       \/\/!< CF==0 & ZF==0  (unsigned > )$/;"	m	class:CondCode
kNC	external/asmjit/src/asmjit/x86/x86globals.h	/^  kNC            = 0x03u,       \/\/!< CF==0$/;"	m	class:CondCode
kNE	external/asmjit/src/asmjit/core/archcommons.h	/^  kNE             = 0x03u,      \/\/!<        Z==0         (any_sign !=)$/;"	m	class:CondCode
kNE	external/asmjit/src/asmjit/x86/x86globals.h	/^  kNE            = 0x04u,       \/\/!< Not Equal.$/;"	m	class:CondCode::FpuStatusWord::FpuControlWord::CmpImm::PCmpStrImm::RoundImm::VCmpImm::VFixupImm::VFPClassImm::VGetMantImm::VPCmpImm
kNE	external/asmjit/src/asmjit/x86/x86globals.h	/^  kNE            = 0x05u,       \/\/!<         ZF==0  (any_sign !=)$/;"	m	class:CondCode
kNE	external/asmjit/src/asmjit/x86/x86globals.h	/^  kNE            = 0x05u,       \/\/!< Not Equal.$/;"	m	class:CondCode::FpuStatusWord::FpuControlWord::CmpImm::PCmpStrImm::RoundImm::VCmpImm::VFixupImm::VFPClassImm::VGetMantImm::VPCmpImm::VPComImm
kNEQ	external/asmjit/src/asmjit/x86/x86globals.h	/^  kNEQ           = 0x04u,       \/\/!< Not Equal (Quiet), same as \\ref VCmpImm::kNEQ_UQ.$/;"	m	class:CondCode::FpuStatusWord::FpuControlWord::CmpImm
kNEQ_OQ	external/asmjit/src/asmjit/x86/x86globals.h	/^  kNEQ_OQ        = 0x0Cu,       \/\/!< Not Equal         (Quiet    , Ordered).$/;"	m	class:CondCode::FpuStatusWord::FpuControlWord::CmpImm::PCmpStrImm::RoundImm::VCmpImm
kNEQ_OS	external/asmjit/src/asmjit/x86/x86globals.h	/^  kNEQ_OS        = 0x1Cu,       \/\/!< Not Equal         (Signaling, Ordered).$/;"	m	class:CondCode::FpuStatusWord::FpuControlWord::CmpImm::PCmpStrImm::RoundImm::VCmpImm
kNEQ_UQ	external/asmjit/src/asmjit/x86/x86globals.h	/^  kNEQ_UQ        = 0x04u,       \/\/!< Not Equal         (Quiet    , Unordered), same as \\ref CmpImm::kNEQ.$/;"	m	class:CondCode::FpuStatusWord::FpuControlWord::CmpImm::PCmpStrImm::RoundImm::VCmpImm
kNEQ_US	external/asmjit/src/asmjit/x86/x86globals.h	/^  kNEQ_US        = 0x14u,       \/\/!< Not Equal         (Signaling, Unordered).$/;"	m	class:CondCode::FpuStatusWord::FpuControlWord::CmpImm::PCmpStrImm::RoundImm::VCmpImm
kNG	external/asmjit/src/asmjit/x86/x86globals.h	/^  kNG            = 0x0Eu,       \/\/!< ZF==1 | SF!=OF (signed <=)$/;"	m	class:CondCode
kNGE	external/asmjit/src/asmjit/x86/x86globals.h	/^  kNGE           = 0x0Cu,       \/\/!<         SF!=OF (signed < )$/;"	m	class:CondCode
kNGE_UQ	external/asmjit/src/asmjit/x86/x86globals.h	/^  kNGE_UQ        = 0x19u,       \/\/!< Not Greater\/Equal (Quiet    , Unordered).$/;"	m	class:CondCode::FpuStatusWord::FpuControlWord::CmpImm::PCmpStrImm::RoundImm::VCmpImm
kNGE_US	external/asmjit/src/asmjit/x86/x86globals.h	/^  kNGE_US        = 0x09u,       \/\/!< Not Greater\/Equal (Signaling, Unordered).$/;"	m	class:CondCode::FpuStatusWord::FpuControlWord::CmpImm::PCmpStrImm::RoundImm::VCmpImm
kNGT_UQ	external/asmjit/src/asmjit/x86/x86globals.h	/^  kNGT_UQ        = 0x1Au,       \/\/!< Not Greater       (Quiet    , Unordered).$/;"	m	class:CondCode::FpuStatusWord::FpuControlWord::CmpImm::PCmpStrImm::RoundImm::VCmpImm
kNGT_US	external/asmjit/src/asmjit/x86/x86globals.h	/^  kNGT_US        = 0x0Au,       \/\/!< Not Greater       (Signaling, Unordered).$/;"	m	class:CondCode::FpuStatusWord::FpuControlWord::CmpImm::PCmpStrImm::RoundImm::VCmpImm
kNInf	external/asmjit/src/asmjit/x86/x86globals.h	/^  kNInf          = 0x10u,       \/\/!< Checks for -Inf.$/;"	m	class:CondCode::FpuStatusWord::FpuControlWord::CmpImm::PCmpStrImm::RoundImm::VCmpImm::VFixupImm::VFPClassImm
kNL	external/asmjit/src/asmjit/x86/x86globals.h	/^  kNL            = 0x0Du,       \/\/!<         SF==OF (signed >=)$/;"	m	class:CondCode
kNLE	external/asmjit/src/asmjit/x86/x86globals.h	/^  kNLE           = 0x06u,       \/\/!< Not Less\/Equal (Signaling), same as \\ref VCmpImm::kNLE_US.$/;"	m	class:CondCode::FpuStatusWord::FpuControlWord::CmpImm
kNLE	external/asmjit/src/asmjit/x86/x86globals.h	/^  kNLE           = 0x0Fu,       \/\/!< ZF==0 & SF==OF (signed > )$/;"	m	class:CondCode
kNLE_UQ	external/asmjit/src/asmjit/x86/x86globals.h	/^  kNLE_UQ        = 0x16u,       \/\/!< Not Less\/Equal    (Quiet    , Unordered).$/;"	m	class:CondCode::FpuStatusWord::FpuControlWord::CmpImm::PCmpStrImm::RoundImm::VCmpImm
kNLE_US	external/asmjit/src/asmjit/x86/x86globals.h	/^  kNLE_US        = 0x06u,       \/\/!< Not Less\/Equal    (Signaling, Unordered), same as \\ref CmpImm::kNLE.$/;"	m	class:CondCode::FpuStatusWord::FpuControlWord::CmpImm::PCmpStrImm::RoundImm::VCmpImm
kNLT	external/asmjit/src/asmjit/x86/x86globals.h	/^  kNLT           = 0x05u,       \/\/!< Not Less (Signaling), same as \\ref VCmpImm::kNLT_US.$/;"	m	class:CondCode::FpuStatusWord::FpuControlWord::CmpImm
kNLT_UQ	external/asmjit/src/asmjit/x86/x86globals.h	/^  kNLT_UQ        = 0x15u,       \/\/!< Not Less          (Quiet    , Unordered).$/;"	m	class:CondCode::FpuStatusWord::FpuControlWord::CmpImm::PCmpStrImm::RoundImm::VCmpImm
kNLT_US	external/asmjit/src/asmjit/x86/x86globals.h	/^  kNLT_US        = 0x05u,       \/\/!< Not Less          (Signaling, Unordered), same as \\ref CmpImm::kNLT.$/;"	m	class:CondCode::FpuStatusWord::FpuControlWord::CmpImm::PCmpStrImm::RoundImm::VCmpImm
kNMI	external/asmjit/src/asmjit/core/cpuinfo.h	/^      kNMI,                      \/\/!< CPU has NMI          (non-maskable Interrupt) {A64}.$/;"	m	struct:CpuFeatures::ARM	typeref:enum:CpuFeatures::ARM::
kNO	external/asmjit/src/asmjit/x86/x86globals.h	/^  kNO            = 0x01u,       \/\/!<         OF==0$/;"	m	class:CondCode
kNP	external/asmjit/src/asmjit/x86/x86globals.h	/^  kNP            = 0x0Bu,       \/\/!< PF==0$/;"	m	class:CondCode
kNS	external/asmjit/src/asmjit/x86/x86globals.h	/^  kNS            = 0x09u,       \/\/!<         SF==0  (is positive or zero)$/;"	m	class:CondCode
kNV	external/asmjit/src/asmjit/core/cpuinfo.h	/^      kNV,                       \/\/!< CPU has NV           (nested virtualization enchancement) {A64}.$/;"	m	struct:CpuFeatures::ARM	typeref:enum:CpuFeatures::ARM::
kNV2	external/asmjit/src/asmjit/core/cpuinfo.h	/^      kNV2,                      \/\/!< CPU has NV2          (enhanced support for nested virtualization) {A64}.$/;"	m	struct:CpuFeatures::ARM	typeref:enum:CpuFeatures::ARM::
kNX	external/asmjit/src/asmjit/core/cpuinfo.h	/^      kNX,                       \/\/!< CPU has Not-Execute-Bit aka DEP (data-execution prevention).$/;"	m	struct:CpuFeatures::X86	typeref:enum:CpuFeatures::X86::
kNZ	external/asmjit/src/asmjit/x86/x86globals.h	/^  kNZ            = 0x05u,       \/\/!<         ZF==0  (any_sign !=)$/;"	m	class:CondCode
kNZero	external/asmjit/src/asmjit/x86/x86globals.h	/^  kNZero         = 0x04u,       \/\/!< Checks for -0.$/;"	m	class:CondCode::FpuStatusWord::FpuControlWord::CmpImm::PCmpStrImm::RoundImm::VCmpImm::VFixupImm::VFPClassImm
kNative	external/asmjit/src/asmjit/core/globals.h	/^  kNative = ASMJIT_ARCH_LE ? kLE : kBE,$/;"	m	class:ByteOrder
kNearest	external/asmjit/src/asmjit/x86/x86globals.h	/^  kNearest       = 0x00u,       \/\/!< Round to nearest (even).$/;"	m	class:CondCode::FpuStatusWord::FpuControlWord::CmpImm::PCmpStrImm::RoundImm
kNegMasked	external/asmjit/src/asmjit/x86/x86globals.h	/^  kNegMasked     = 0x03u << 4,  \/\/!< IntRes2[i] = second[i] == invalid ? IntRes1[i] : ~IntRes1[i].$/;"	m	class:CondCode::FpuStatusWord::FpuControlWord::CmpImm::PCmpStrImm
kNegPolarity	external/asmjit/src/asmjit/x86/x86globals.h	/^  kNegPolarity   = 0x01u << 4,  \/\/!< IntRes2 = -1 XOR IntRes1.$/;"	m	class:CondCode::FpuStatusWord::FpuControlWord::CmpImm::PCmpStrImm
kNegative	external/asmjit/src/asmjit/core/archcommons.h	/^  kNegative       = kMI,        \/\/!< Negative.$/;"	m	class:CondCode
kNegative	external/asmjit/src/asmjit/x86/x86globals.h	/^  kNegative      = 0x40u,       \/\/!< Checks for negative finite value.$/;"	m	class:CondCode::FpuStatusWord::FpuControlWord::CmpImm::PCmpStrImm::RoundImm::VCmpImm::VFixupImm::VFPClassImm
kNegative	external/asmjit/src/asmjit/x86/x86globals.h	/^  kNegative      = kS,          \/\/!< Sign flag.$/;"	m	class:CondCode
kNetBSD	external/asmjit/src/asmjit/core/environment.h	/^  kNetBSD,$/;"	m	class:Vendor::Platform
kNeverFlush	external/asmjit/src/asmjit/core/virtmem.h	/^  kNeverFlush = 2$/;"	m	class:VirtMem::CachePolicy
kNoAttributes	external/asmjit/src/asmjit/core/func.h	/^  kNoAttributes = 0,$/;"	m	class:CallConvId::CallConvStrategy::CallConvFlags::FuncAttributes
kNoBaseAddress	external/asmjit/src/asmjit/core/codeholder.cpp	/^    _baseAddress(Globals::kNoBaseAddress),$/;"	v
kNoBaseAddress	external/asmjit/src/asmjit/core/globals.h	/^static constexpr uint64_t kNoBaseAddress = ~uint64_t(0);$/;"	m	namespace:ByteOrder::ResetPolicy::Globals
kNoHints	external/asmjit/src/asmjit/core/archtraits.h	/^  kNoHints = 0,$/;"	m	class:Arch::SubArch::ArchTypeNameId::InstHints
kNoSign	external/asmjit/src/asmjit/x86/x86globals.h	/^  kNoSign        = 0x04u,       \/\/!< Zero sign$/;"	m	class:CondCode::FpuStatusWord::FpuControlWord::CmpImm::PCmpStrImm::RoundImm::VCmpImm::VFixupImm::VFPClassImm::VGetMantImm
kNoVarArgs	external/asmjit/src/asmjit/core/func.h	/^  static constexpr uint8_t kNoVarArgs = 0xFFu;$/;"	m	struct:CallConvId::CallConvStrategy::CallConvFlags::FuncSignature
kNone	external/asmjit/src/asmjit/core/archcommons.h	/^  kNone = 0,$/;"	m	class:CondCode::DataType
kNone	external/asmjit/src/asmjit/core/builder.h	/^  kNone = 0,$/;"	m	class:NodeType
kNone	external/asmjit/src/asmjit/core/builder.h	/^  kNone = 0,$/;"	m	class:NodeType::NodeFlags
kNone	external/asmjit/src/asmjit/core/codebuffer.h	/^  kNone = 0,$/;"	m	class:CodeBufferFlags
kNone	external/asmjit/src/asmjit/core/codeholder.h	/^  kNone = 0,$/;"	m	class:ExpressionOpType::ExpressionValueType
kNone	external/asmjit/src/asmjit/core/codeholder.h	/^  kNone = 0,$/;"	m	class:ExpressionOpType::ExpressionValueType::SectionFlags
kNone	external/asmjit/src/asmjit/core/codeholder.h	/^  kNone = 0,$/;"	m	class:ExpressionOpType::ExpressionValueType::SectionFlags::CopySectionFlags
kNone	external/asmjit/src/asmjit/core/codeholder.h	/^  kNone = 0,$/;"	m	class:ExpressionOpType::ExpressionValueType::SectionFlags::CopySectionFlags::OffsetType::RelocType
kNone	external/asmjit/src/asmjit/core/emitter.h	/^  kNone = 0,$/;"	m	class:AlignMode::EmitterType
kNone	external/asmjit/src/asmjit/core/emitter.h	/^  kNone = 0,$/;"	m	class:AlignMode::EmitterType::EmitterFlags::EncodingOptions
kNone	external/asmjit/src/asmjit/core/emitter.h	/^  kNone = 0,$/;"	m	class:AlignMode::EmitterType::EmitterFlags::EncodingOptions::DiagnosticOptions
kNone	external/asmjit/src/asmjit/core/emitter.h	/^  kNone = 0u,$/;"	m	class:AlignMode::EmitterType::EmitterFlags
kNone	external/asmjit/src/asmjit/core/formatter.h	/^  kNone = 0u,$/;"	m	class:FormatFlags
kNone	external/asmjit/src/asmjit/core/func.h	/^  kNone = 0,$/;"	m	class:CallConvId
kNone	external/asmjit/src/asmjit/core/func.h	/^  kNone = 0,$/;"	m	class:CallConvId::CallConvStrategy::CallConvFlags
kNone	external/asmjit/src/asmjit/core/inst.h	/^  kNone = 0,$/;"	m	class:InstIdParts::InstOptions
kNone	external/asmjit/src/asmjit/core/inst.h	/^  kNone = 0,$/;"	m	class:InstIdParts::InstOptions::InstControlFlow::InstSameRegHint
kNone	external/asmjit/src/asmjit/core/inst.h	/^  kNone = 0,$/;"	m	class:InstIdParts::InstOptions::InstControlFlow::InstSameRegHint::CpuRWFlags::OpRWFlags
kNone	external/asmjit/src/asmjit/core/inst.h	/^  kNone = 0,$/;"	m	class:InstIdParts::InstOptions::InstControlFlow::InstSameRegHint::CpuRWFlags::OpRWFlags::InstRWFlags::ValidationFlags
kNone	external/asmjit/src/asmjit/core/inst.h	/^  kNone = 0x00000000u,$/;"	m	class:InstIdParts::InstOptions::InstControlFlow::InstSameRegHint::CpuRWFlags
kNone	external/asmjit/src/asmjit/core/inst.h	/^  kNone = 0x00000000u,$/;"	m	class:InstIdParts::InstOptions::InstControlFlow::InstSameRegHint::CpuRWFlags::OpRWFlags::InstRWFlags
kNone	external/asmjit/src/asmjit/core/jitallocator.h	/^      kNone = 0u,$/;"	m	class:JitAllocatorOptions::JitAllocator::Span::Flags
kNone	external/asmjit/src/asmjit/core/jitallocator.h	/^  kNone = 0,$/;"	m	class:JitAllocatorOptions
kNone	external/asmjit/src/asmjit/core/operand.h	/^  kNone = 0,$/;"	m	class:OperandType
kNone	external/asmjit/src/asmjit/core/operand.h	/^  kNone = 0,$/;"	m	class:OperandType::RegType
kNone	external/asmjit/src/asmjit/core/radefs_p.h	/^  kNone = 0$/;"	m	class:RAStrategyType::RAStrategyFlags
kNone	external/asmjit/src/asmjit/core/radefs_p.h	/^  kNone = 0,$/;"	m	class:RAStrategyType::RAStrategyFlags::RATiedFlags
kNone	external/asmjit/src/asmjit/core/radefs_p.h	/^  kNone = 0,$/;"	m	class:RAStrategyType::RAStrategyFlags::RATiedFlags::RAWorkRegFlags
kNone	external/asmjit/src/asmjit/core/rapass_p.h	/^  kNone = 0,$/;"	m	class:RABlockFlags
kNone	external/asmjit/src/asmjit/core/string.h	/^  kNone = 0x00000000u,$/;"	m	class:StringFormatFlags
kNone	external/asmjit/src/asmjit/core/virtmem.h	/^  kNone = 0,$/;"	m	class:VirtMem::CachePolicy::MemoryFlags
kNone	external/asmjit/src/asmjit/core/virtmem.h	/^  kNone = 0,$/;"	m	class:VirtMem::CachePolicy::MemoryFlags::HardenedRuntimeFlags
kNone	external/asmjit/src/asmjit/x86/x86globals.h	/^  kNone          = 0x0000u,     \/\/!< No bits set.$/;"	m	class:CondCode::FpuStatusWord
kNone	external/asmjit/src/asmjit/x86/x86globals.h	/^  kNone          = 0x0000u,     \/\/!< No bits set.$/;"	m	class:CondCode::FpuStatusWord::FpuControlWord
kNone	external/asmjit/src/asmjit/x86/x86globals.h	/^  kNone          = 0x00u,$/;"	m	class:CondCode::FpuStatusWord::FpuControlWord::CmpImm::PCmpStrImm::RoundImm::VCmpImm::VFixupImm
kNone	external/asmjit/src/asmjit/x86/x86globals.h	/^  kNone          = 0x00u,$/;"	m	class:CondCode::FpuStatusWord::FpuControlWord::CmpImm::PCmpStrImm::RoundImm::VCmpImm::VFixupImm::VFPClassImm
kNone	external/asmjit/src/asmjit/x86/x86instdb.h	/^  kNone = 0,$/;"	m	class:InstDB::Mode::OpFlags::InstFlags::Avx512Flags
kNone	external/asmjit/src/asmjit/x86/x86instdb.h	/^  kNone = 0u,$/;"	m	class:InstDB::Mode::OpFlags
kNone	external/asmjit/src/asmjit/x86/x86instdb.h	/^  kNone = 0x00000000u,$/;"	m	class:InstDB::Mode::OpFlags::InstFlags
kNone	external/asmjit/src/asmjit/x86/x86instdb.h	/^  kNone = 0x00u,$/;"	m	class:InstDB::Mode
kNone	external/asmjit/src/asmjit/x86/x86operand.h	/^    kNone = 0,$/;"	m	class:Mem::AddrType::Broadcast
kNotA	external/asmjit/src/asmjit/x86/x86globals.h	/^  kNotA          = kA ^ k1,     \/\/!< `!A` expression.$/;"	m	class:CondCode::FpuStatusWord::FpuControlWord::CmpImm::PCmpStrImm::RoundImm::VCmpImm::VFixupImm::VFPClassImm::VGetMantImm::VPCmpImm::VPComImm::VRangeImm::VReduceImm::TLogImm
kNotAB	external/asmjit/src/asmjit/x86/x86globals.h	/^  kNotAB         = kAB ^ k1,    \/\/!< `!(A & B)` expression.$/;"	m	class:CondCode::FpuStatusWord::FpuControlWord::CmpImm::PCmpStrImm::RoundImm::VCmpImm::VFixupImm::VFPClassImm::VGetMantImm::VPCmpImm::VPComImm::VRangeImm::VReduceImm::TLogImm
kNotABC	external/asmjit/src/asmjit/x86/x86globals.h	/^  kNotABC        = kABC ^ k1    \/\/!< `!(A & B & C)` expression.$/;"	m	class:CondCode::FpuStatusWord::FpuControlWord::CmpImm::PCmpStrImm::RoundImm::VCmpImm::VFixupImm::VFPClassImm::VGetMantImm::VPCmpImm::VPComImm::VRangeImm::VReduceImm::TLogImm
kNotAC	external/asmjit/src/asmjit/x86/x86globals.h	/^  kNotAC         = kAC ^ k1,    \/\/!< `!(A & C)` expression.$/;"	m	class:CondCode::FpuStatusWord::FpuControlWord::CmpImm::PCmpStrImm::RoundImm::VCmpImm::VFixupImm::VFPClassImm::VGetMantImm::VPCmpImm::VPComImm::VRangeImm::VReduceImm::TLogImm
kNotB	external/asmjit/src/asmjit/x86/x86globals.h	/^  kNotB          = kB ^ k1,     \/\/!< `!B` expression.$/;"	m	class:CondCode::FpuStatusWord::FpuControlWord::CmpImm::PCmpStrImm::RoundImm::VCmpImm::VFixupImm::VFPClassImm::VGetMantImm::VPCmpImm::VPComImm::VRangeImm::VReduceImm::TLogImm
kNotBC	external/asmjit/src/asmjit/x86/x86globals.h	/^  kNotBC         = kBC ^ k1,    \/\/!< `!(B & C)` expression.$/;"	m	class:CondCode::FpuStatusWord::FpuControlWord::CmpImm::PCmpStrImm::RoundImm::VCmpImm::VFixupImm::VFPClassImm::VGetMantImm::VPCmpImm::VPComImm::VRangeImm::VReduceImm::TLogImm
kNotC	external/asmjit/src/asmjit/x86/x86globals.h	/^  kNotC          = kC ^ k1,     \/\/!< `!C` expression.$/;"	m	class:CondCode::FpuStatusWord::FpuControlWord::CmpImm::PCmpStrImm::RoundImm::VCmpImm::VFixupImm::VFPClassImm::VGetMantImm::VPCmpImm::VPComImm::VRangeImm::VReduceImm::TLogImm
kNotEqual	external/asmjit/src/asmjit/core/archcommons.h	/^  kNotEqual       = kNE,        \/\/!< Not Equal `a != b`.$/;"	m	class:CondCode
kNotEqual	external/asmjit/src/asmjit/x86/x86globals.h	/^  kNotEqual      = kNE,         \/\/!< `a != b` (not equal).$/;"	m	class:CondCode
kNotFound	external/asmjit/src/asmjit/core/globals.h	/^static constexpr uint32_t kNotFound = 0xFFFFFFFFu;$/;"	m	namespace:ByteOrder::ResetPolicy::Globals
kNotOverflow	external/asmjit/src/asmjit/core/archcommons.h	/^  kNotOverflow    = kVC,        \/\/!< Not signed overflow.$/;"	m	class:CondCode
kNotOverflow	external/asmjit/src/asmjit/x86/x86globals.h	/^  kNotOverflow   = kNO,         \/\/!< Not overflow (signed).$/;"	m	class:CondCode
kNotSign	external/asmjit/src/asmjit/core/archcommons.h	/^  kNotSign        = kPL,        \/\/!< Not sign.$/;"	m	class:CondCode
kNotSign	external/asmjit/src/asmjit/x86/x86globals.h	/^  kNotSign       = kNS,         \/\/!< No sign flag.$/;"	m	class:CondCode
kNotTaken	external/asmjit/src/asmjit/core/inst.h	/^  kNotTaken = 0x00000080u,$/;"	m	class:InstIdParts::InstOptions
kNotZero	external/asmjit/src/asmjit/core/archcommons.h	/^  kNotZero        = kNE,        \/\/!< Not Zero (alias to Not Equal).$/;"	m	class:CondCode
kNotZero	external/asmjit/src/asmjit/x86/x86globals.h	/^  kNotZero       = kNZ,         \/\/!< Non-zero flag.$/;"	m	class:CondCode
kNumVirtGroups	external/asmjit/src/asmjit/core/globals.h	/^static constexpr uint32_t kNumVirtGroups = 4;$/;"	m	namespace:ByteOrder::ResetPolicy::Globals
kO	external/asmjit/src/asmjit/x86/x86globals.h	/^  kO             = 0x00u,       \/\/!<         OF==1$/;"	m	class:CondCode
kOF	external/asmjit/src/asmjit/core/inst.h	/^  kOF = 0x00000002u,$/;"	m	class:InstIdParts::InstOptions::InstControlFlow::InstSameRegHint::CpuRWFlags
kORD	external/asmjit/src/asmjit/x86/x86globals.h	/^  kORD           = 0x07u        \/\/!< Ordered (Quiet), same as \\ref VCmpImm::kORD_Q.$/;"	m	class:CondCode::FpuStatusWord::FpuControlWord::CmpImm
kORD_Q	external/asmjit/src/asmjit/x86/x86globals.h	/^  kORD_Q         = 0x07u,       \/\/!< Ordered           (Quiet)               , same as \\ref CmpImm::kORD.$/;"	m	class:CondCode::FpuStatusWord::FpuControlWord::CmpImm::PCmpStrImm::RoundImm::VCmpImm
kORD_S	external/asmjit/src/asmjit/x86/x86globals.h	/^  kORD_S         = 0x17u,       \/\/!< Ordered           (Signaling).$/;"	m	class:CondCode::FpuStatusWord::FpuControlWord::CmpImm::PCmpStrImm::RoundImm::VCmpImm
kOSPKE	external/asmjit/src/asmjit/core/cpuinfo.h	/^      kOSPKE,                    \/\/!< CPU has OSPKE            (PKE enabled by OS).$/;"	m	struct:CpuFeatures::X86	typeref:enum:CpuFeatures::X86::
kOSX	external/asmjit/src/asmjit/core/environment.h	/^  kOSX,$/;"	m	class:Vendor::Platform
kOSXSAVE	external/asmjit/src/asmjit/core/cpuinfo.h	/^      kOSXSAVE,                  \/\/!< CPU has OSXSAVE          (XSAVE enabled by OS).$/;"	m	struct:CpuFeatures::X86	typeref:enum:CpuFeatures::X86::
kOpMask	external/asmjit/src/asmjit/x86/x86instdb.h	/^  kOpMask          = kRegMask | kMemMask | kVmMask | kImmMask | kRelMask$/;"	m	class:InstDB::Mode::OpFlags
kOpTypeMask	external/asmjit/src/asmjit/core/operand.h	/^    kOpTypeMask = 0x07u << kOpTypeShift,$/;"	m	struct:OperandType::RegType::RegGroup::OperandSignature	typeref:enum:OperandType::RegType::RegGroup::OperandSignature::
kOpenBSD	external/asmjit/src/asmjit/core/environment.h	/^  kOpenBSD,$/;"	m	class:Vendor::Platform
kOperatorAdd	external/asmjit/test/asmjit_test_compiler_a64.cpp	/^    kOperatorAdd = 0,$/;"	e	enum:A64Test_JumpTable::Operator	file:
kOperatorAdd	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^    kOperatorAdd = 0,$/;"	e	enum:X86Test_JumpTable1::Operator	file:
kOperatorDiv	external/asmjit/test/asmjit_test_compiler_a64.cpp	/^    kOperatorDiv = 3$/;"	e	enum:A64Test_JumpTable::Operator	file:
kOperatorDiv	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^    kOperatorDiv = 3$/;"	e	enum:X86Test_JumpTable1::Operator	file:
kOperatorMul	external/asmjit/test/asmjit_test_compiler_a64.cpp	/^    kOperatorMul = 2,$/;"	e	enum:A64Test_JumpTable::Operator	file:
kOperatorMul	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^    kOperatorMul = 2,$/;"	e	enum:X86Test_JumpTable1::Operator	file:
kOperatorSub	external/asmjit/test/asmjit_test_compiler_a64.cpp	/^    kOperatorSub = 1,$/;"	e	enum:A64Test_JumpTable::Operator	file:
kOperatorSub	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^    kOperatorSub = 1,$/;"	e	enum:X86Test_JumpTable1::Operator	file:
kOptimizeForSize	external/asmjit/src/asmjit/core/emitter.h	/^  kOptimizeForSize = 0x00000001u,$/;"	m	class:AlignMode::EmitterType::EmitterFlags::EncodingOptions
kOptimizedAlign	external/asmjit/src/asmjit/core/emitter.h	/^  kOptimizedAlign = 0x00000002u,$/;"	m	class:AlignMode::EmitterType::EmitterFlags::EncodingOptions
kOther	external/asmjit/src/asmjit/core/environment.h	/^  kOther,$/;"	m	class:Vendor::Platform
kOut	external/asmjit/src/asmjit/core/radefs_p.h	/^  kOut = 0x00000008u,$/;"	m	class:RAStrategyType::RAStrategyFlags::RATiedFlags
kOutConsecutive	external/asmjit/src/asmjit/core/radefs_p.h	/^  kOutConsecutive = 0x00000800u,$/;"	m	class:RAStrategyType::RAStrategyFlags::RATiedFlags
kOutDone	external/asmjit/src/asmjit/core/radefs_p.h	/^  kOutDone = 0x00000200u,$/;"	m	class:RAStrategyType::RAStrategyFlags::RATiedFlags
kOutFixed	external/asmjit/src/asmjit/core/radefs_p.h	/^  kOutFixed = 0x00000080u,$/;"	m	class:RAStrategyType::RAStrategyFlags::RATiedFlags
kOutRM	external/asmjit/src/asmjit/core/radefs_p.h	/^  kOutRM = 0x00000020u,$/;"	m	class:RAStrategyType::RAStrategyFlags::RATiedFlags
kOutputLSI	external/asmjit/src/asmjit/x86/x86globals.h	/^  kOutputLSI     = 0x00u << 6,  \/\/!< The index returned to ECX is of the least significant set bit in IntRes2.$/;"	m	class:CondCode::FpuStatusWord::FpuControlWord::CmpImm::PCmpStrImm
kOutputMSI	external/asmjit/src/asmjit/x86/x86globals.h	/^  kOutputMSI     = 0x01u << 6,  \/\/!< The index returned to ECX is of the most significant set bit in IntRes2.$/;"	m	class:CondCode::FpuStatusWord::FpuControlWord::CmpImm::PCmpStrImm
kOverflow	external/asmjit/src/asmjit/core/archcommons.h	/^  kOverflow       = kVS,        \/\/!< Signed overflow.$/;"	m	class:CondCode
kOverflow	external/asmjit/src/asmjit/x86/x86globals.h	/^  kOverflow      = 0x0008u,     \/\/!< Overflown.$/;"	m	class:CondCode::FpuStatusWord
kOverflow	external/asmjit/src/asmjit/x86/x86globals.h	/^  kOverflow      = kO,          \/\/!< Overflow (signed).$/;"	m	class:CondCode
kOverwrite	external/asmjit/src/asmjit/core/inst.h	/^  kOverwrite = 0x00000004u,$/;"	m	class:InstIdParts::InstOptions
kOwnErrorHandler	external/asmjit/src/asmjit/core/emitter.h	/^  kOwnErrorHandler = 0x20u,$/;"	m	class:AlignMode::EmitterType::EmitterFlags
kOwnLogger	external/asmjit/src/asmjit/core/emitter.h	/^  kOwnLogger = 0x10u,$/;"	m	class:AlignMode::EmitterType::EmitterFlags
kP	external/asmjit/src/asmjit/x86/x86globals.h	/^  kP             = 0x0Au,       \/\/!< PF==1$/;"	m	class:CondCode
kP64	external/asmjit/src/asmjit/core/archcommons.h	/^  kP64 = 15,$/;"	m	class:CondCode::DataType
kP8	external/asmjit/src/asmjit/core/archcommons.h	/^  kP8 = 13,$/;"	m	class:CondCode::DataType
kPAN	external/asmjit/src/asmjit/core/cpuinfo.h	/^      kPAN,                      \/\/!< CPU has PAN          (privileged access-never extension) {A64}.$/;"	m	struct:CpuFeatures::ARM	typeref:enum:CpuFeatures::ARM::
kPAN2	external/asmjit/src/asmjit/core/cpuinfo.h	/^      kPAN2,                     \/\/!< CPU has PAN2         (PAN s1e1R and s1e1W variants) {A64}.$/;"	m	struct:CpuFeatures::ARM	typeref:enum:CpuFeatures::ARM::
kPAN3	external/asmjit/src/asmjit/core/cpuinfo.h	/^      kPAN3,                     \/\/!< CPU has PAN3         (support for SCTLR_ELx.EPAN) {A64}.$/;"	m	struct:CpuFeatures::ARM	typeref:enum:CpuFeatures::ARM::
kPAUTH	external/asmjit/src/asmjit/core/cpuinfo.h	/^      kPAUTH,                    \/\/!< CPU has PAUTH        (pointer authentication extension) {A64}.$/;"	m	struct:CpuFeatures::ARM	typeref:enum:CpuFeatures::ARM::
kPC	external/asmjit/src/asmjit/core/operand.h	/^  kPC = 2,$/;"	m	class:OperandType::RegType
kPC	external/asmjit/src/asmjit/core/operand.h	/^  kPC = 4,$/;"	m	class:OperandType::RegType::RegGroup
kPCLMULQDQ	external/asmjit/src/asmjit/core/cpuinfo.h	/^      kPCLMULQDQ,                \/\/!< CPU has PCLMULQDQ        (packed carry-less multiplication).$/;"	m	struct:CpuFeatures::X86	typeref:enum:CpuFeatures::X86::
kPCONFIG	external/asmjit/src/asmjit/core/cpuinfo.h	/^      kPCONFIG,                  \/\/!< CPU has PCONFIG          (PCONFIG instruction).$/;"	m	struct:CpuFeatures::X86	typeref:enum:CpuFeatures::X86::
kPC_Double	external/asmjit/src/asmjit/x86/x86globals.h	/^  kPC_Double     = 0x0200u,     \/\/!< Double precision (53 bits).$/;"	m	class:CondCode::FpuStatusWord::FpuControlWord
kPC_Extended	external/asmjit/src/asmjit/x86/x86globals.h	/^  kPC_Extended   = 0x0300u,     \/\/!< Extended precision (64 bits).$/;"	m	class:CondCode::FpuStatusWord::FpuControlWord
kPC_Float	external/asmjit/src/asmjit/x86/x86globals.h	/^  kPC_Float      = 0x0000u,     \/\/!< Single precision (24 bits).$/;"	m	class:CondCode::FpuStatusWord::FpuControlWord
kPC_Mask	external/asmjit/src/asmjit/x86/x86globals.h	/^  kPC_Mask       = 0x0300u,     \/\/!< Precision control mask.$/;"	m	class:CondCode::FpuStatusWord::FpuControlWord
kPC_Reserved	external/asmjit/src/asmjit/x86/x86globals.h	/^  kPC_Reserved   = 0x0100u,     \/\/!< Reserved.$/;"	m	class:CondCode::FpuStatusWord::FpuControlWord
kPE	external/asmjit/src/asmjit/x86/x86globals.h	/^  kPE            = 0x0Au,       \/\/!< PF==1$/;"	m	class:CondCode
kPInf	external/asmjit/src/asmjit/x86/x86globals.h	/^  kPInf          = 0x08u,       \/\/!< Checks for +Inf.$/;"	m	class:CondCode::FpuStatusWord::FpuControlWord::CmpImm::PCmpStrImm::RoundImm::VCmpImm::VFixupImm::VFPClassImm
kPL	external/asmjit/src/asmjit/core/archcommons.h	/^  kPL             = 0x07u,      \/\/!<               N==0  (is positive or zero)$/;"	m	class:CondCode
kPMU	external/asmjit/src/asmjit/core/cpuinfo.h	/^      kPMU,                      \/\/!< CPU has PMU          {A64}.$/;"	m	struct:CpuFeatures::ARM	typeref:enum:CpuFeatures::ARM::
kPMULL	external/asmjit/src/asmjit/core/cpuinfo.h	/^      kPMULL,                    \/\/!< CPU has PMULL        {A64}.$/;"	m	struct:CpuFeatures::ARM	typeref:enum:CpuFeatures::ARM::
kPO	external/asmjit/src/asmjit/x86/x86globals.h	/^  kPO            = 0x0Bu,       \/\/!< PF==0$/;"	m	class:CondCode
kPOPCNT	external/asmjit/src/asmjit/core/cpuinfo.h	/^      kPOPCNT,                   \/\/!< CPU has POPCNT           (POPCNT instruction).$/;"	m	struct:CpuFeatures::X86	typeref:enum:CpuFeatures::X86::
kPP_00	external/asmjit/src/asmjit/x86/x86opcode_p.h	/^    kPP_00         = 0x00u << kPP_Shift,$/;"	m	struct:Opcode	typeref:enum:Opcode::
kPP_66	external/asmjit/src/asmjit/x86/x86opcode_p.h	/^    kPP_66         = 0x01u << kPP_Shift,$/;"	m	struct:Opcode	typeref:enum:Opcode::
kPP_9B	external/asmjit/src/asmjit/x86/x86opcode_p.h	/^    kPP_9B         = 0x07u << kPP_Shift,   \/\/ AsmJit specific to emit FPU's '9B' byte.$/;"	m	struct:Opcode	typeref:enum:Opcode::
kPP_F2	external/asmjit/src/asmjit/x86/x86opcode_p.h	/^    kPP_F2         = 0x03u << kPP_Shift,$/;"	m	struct:Opcode	typeref:enum:Opcode::
kPP_F3	external/asmjit/src/asmjit/x86/x86opcode_p.h	/^    kPP_F3         = 0x02u << kPP_Shift,$/;"	m	struct:Opcode	typeref:enum:Opcode::
kPP_FPUMask	external/asmjit/src/asmjit/x86/x86opcode_p.h	/^    kPP_FPUMask    = 0x07u << kPP_Shift,   \/\/ Mask used by EMIT_PP, also includes '0x9B'.$/;"	m	struct:Opcode	typeref:enum:Opcode::
kPP_Shift	external/asmjit/src/asmjit/x86/x86opcode_p.h	/^    kPP_Shift      = 21,$/;"	m	struct:Opcode	typeref:enum:Opcode::
kPP_VEXMask	external/asmjit/src/asmjit/x86/x86opcode_p.h	/^    kPP_VEXMask    = 0x03u << kPP_Shift,   \/\/ PP field mask used by VEX\/EVEX.$/;"	m	struct:Opcode	typeref:enum:Opcode::
kPREFETCHI	external/asmjit/src/asmjit/core/cpuinfo.h	/^      kPREFETCHI,                \/\/!< CPU has PREFETCHI.$/;"	m	struct:CpuFeatures::X86	typeref:enum:CpuFeatures::X86::
kPREFETCHW	external/asmjit/src/asmjit/core/cpuinfo.h	/^      kPREFETCHW,                \/\/!< CPU has PREFETCHW.$/;"	m	struct:CpuFeatures::X86	typeref:enum:CpuFeatures::X86::
kPREFETCHWT1	external/asmjit/src/asmjit/core/cpuinfo.h	/^      kPREFETCHWT1,              \/\/!< CPU has PREFETCHWT1.$/;"	m	struct:CpuFeatures::X86	typeref:enum:CpuFeatures::X86::
kPRFMSLC	external/asmjit/src/asmjit/core/cpuinfo.h	/^      kPRFMSLC,                  \/\/!< CPU has PRFMSLC      (PRFM instructions support the SLC target) {A64}$/;"	m	struct:CpuFeatures::ARM	typeref:enum:CpuFeatures::ARM::
kPTWRITE	external/asmjit/src/asmjit/core/cpuinfo.h	/^      kPTWRITE,                  \/\/!< CPU has PTWRITE.$/;"	m	struct:CpuFeatures::X86	typeref:enum:CpuFeatures::X86::
kPZero	external/asmjit/src/asmjit/x86/x86globals.h	/^  kPZero         = 0x02u,       \/\/!< Checks for +0.$/;"	m	class:CondCode::FpuStatusWord::FpuControlWord::CmpImm::PCmpStrImm::RoundImm::VCmpImm::VFixupImm::VFPClassImm
kPadSectionBuffer	external/asmjit/src/asmjit/core/codeholder.h	/^  kPadSectionBuffer = 0x00000001u,$/;"	m	class:ExpressionOpType::ExpressionValueType::SectionFlags::CopySectionFlags
kPadTargetBuffer	external/asmjit/src/asmjit/core/codeholder.h	/^  kPadTargetBuffer = 0x00000002u$/;"	m	class:ExpressionOpType::ExpressionValueType::SectionFlags::CopySectionFlags
kParityEven	external/asmjit/src/asmjit/x86/x86globals.h	/^  kParityEven    = kP,          \/\/!< Even parity flag.$/;"	m	class:CondCode
kParityOdd	external/asmjit/src/asmjit/x86/x86globals.h	/^  kParityOdd     = kPO,         \/\/!< Odd parity flag.$/;"	m	class:CondCode
kPassFloatsByVec	external/asmjit/src/asmjit/core/func.h	/^  kPassFloatsByVec = 0x0004u,$/;"	m	class:CallConvId::CallConvStrategy::CallConvFlags
kPassMmxByGp	external/asmjit/src/asmjit/core/func.h	/^  kPassMmxByGp = 0x0010u,$/;"	m	class:CallConvId::CallConvStrategy::CallConvFlags
kPassMmxByXmm	external/asmjit/src/asmjit/core/func.h	/^  kPassMmxByXmm = 0x0020u,$/;"	m	class:CallConvId::CallConvStrategy::CallConvFlags
kPassVecByStackIfVA	external/asmjit/src/asmjit/core/func.h	/^  kPassVecByStackIfVA = 0x0008u,$/;"	m	class:CallConvId::CallConvStrategy::CallConvFlags
kPosMasked	external/asmjit/src/asmjit/x86/x86globals.h	/^  kPosMasked     = 0x02u << 4,  \/\/!< IntRes2 = IntRes1.$/;"	m	class:CondCode::FpuStatusWord::FpuControlWord::CmpImm::PCmpStrImm
kPosPolarity	external/asmjit/src/asmjit/x86/x86globals.h	/^  kPosPolarity   = 0x00u << 4,  \/\/!< IntRes2 = IntRes1.$/;"	m	class:CondCode::FpuStatusWord::FpuControlWord::CmpImm::PCmpStrImm
kPositions	external/asmjit/src/asmjit/core/formatter.h	/^  kPositions = 0x00000020u,$/;"	m	class:FormatFlags
kPositive	external/asmjit/src/asmjit/core/archcommons.h	/^  kPositive       = kPL,        \/\/!< Positive or zero.$/;"	m	class:CondCode
kPositive	external/asmjit/src/asmjit/x86/x86globals.h	/^  kPositive      = kNS,         \/\/!< No sign flag.$/;"	m	class:CondCode
kPrecision	external/asmjit/src/asmjit/x86/x86globals.h	/^  kPrecision     = 0x0020u,     \/\/!< Precision lost.$/;"	m	class:CondCode::FpuStatusWord
kPredicateMask	external/asmjit/src/asmjit/core/operand.h	/^    kPredicateMask = 0x0Fu << kPredicateShift,$/;"	m	struct:OperandType::RegType::RegGroup::OperandSignature	typeref:enum:OperandType::RegType::RegGroup::OperandSignature::
kPredicateShift	external/asmjit/src/asmjit/core/operand.h	/^    kPredicateShift = 20,$/;"	m	struct:OperandType::RegType::RegGroup::OperandSignature	typeref:enum:OperandType::RegType::RegGroup::OperandSignature::
kPredictedJumps	external/asmjit/src/asmjit/core/emitter.h	/^  kPredictedJumps = 0x00000010u$/;"	m	class:AlignMode::EmitterType::EmitterFlags::EncodingOptions
kPreferEvex	external/asmjit/src/asmjit/x86/x86instdb.h	/^  kPreferEvex = 0x01000000u,$/;"	m	class:InstDB::Mode::OpFlags::InstFlags
kProcessedConsecutive	external/asmjit/src/asmjit/core/radefs_p.h	/^  kProcessedConsecutive = 0x00000008u,$/;"	m	class:RAStrategyType::RAStrategyFlags::RATiedFlags::RAWorkRegFlags
kPushPop	external/asmjit/src/asmjit/core/archtraits.h	/^  kPushPop = 0x02u$/;"	m	class:Arch::SubArch::ArchTypeNameId::InstHints
kQ	external/asmjit/src/asmjit/arm/a64assembler.cpp	/^    kQ = uint8_t(1u << k128BitShift),$/;"	m	struct:SizeOp	typeref:enum:SizeOp::	file:
kQNaN	external/asmjit/src/asmjit/x86/x86globals.h	/^  kQNaN          = 0x01u,       \/\/!< Checks for QNaN.$/;"	m	class:CondCode::FpuStatusWord::FpuControlWord::CmpImm::PCmpStrImm::RoundImm::VCmpImm::VFixupImm::VFPClassImm
kQNaNIfSign	external/asmjit/src/asmjit/x86/x86globals.h	/^  kQNaNIfSign    = 0x08u        \/\/!< QNAN_Indefinite if sign(src) != 0, regardless of `kSignSrc` or `kNoSign`.$/;"	m	class:CondCode::FpuStatusWord::FpuControlWord::CmpImm::PCmpStrImm::RoundImm::VCmpImm::VFixupImm::VFPClassImm::VGetMantImm
kQWord	external/asmjit/src/asmjit/core/archtraits.h	/^  kQWord,$/;"	m	class:Arch::SubArch::ArchTypeNameId
kQuad	external/asmjit/src/asmjit/core/archtraits.h	/^  kQuad,$/;"	m	class:Arch::SubArch::ArchTypeNameId
kR	external/asmjit/src/asmjit/x86/x86opcode_p.h	/^    kR             = 0x04u << kREX_Shift,  \/\/ Never stored in DB, used by encoder.$/;"	m	struct:Opcode	typeref:enum:Opcode::
kRAAnnotate	external/asmjit/src/asmjit/core/emitter.h	/^  kRAAnnotate = 0x00000080u,$/;"	m	class:AlignMode::EmitterType::EmitterFlags::EncodingOptions::DiagnosticOptions
kRADebugAll	external/asmjit/src/asmjit/core/emitter.h	/^  kRADebugAll = 0x0000FF00u,$/;"	m	class:AlignMode::EmitterType::EmitterFlags::EncodingOptions::DiagnosticOptions
kRADebugAssignment	external/asmjit/src/asmjit/core/emitter.h	/^  kRADebugAssignment = 0x00000400u,$/;"	m	class:AlignMode::EmitterType::EmitterFlags::EncodingOptions::DiagnosticOptions
kRADebugCFG	external/asmjit/src/asmjit/core/emitter.h	/^  kRADebugCFG = 0x00000100u,$/;"	m	class:AlignMode::EmitterType::EmitterFlags::EncodingOptions::DiagnosticOptions
kRADebugLiveness	external/asmjit/src/asmjit/core/emitter.h	/^  kRADebugLiveness = 0x00000200u,$/;"	m	class:AlignMode::EmitterType::EmitterFlags::EncodingOptions::DiagnosticOptions
kRADebugUnreachable	external/asmjit/src/asmjit/core/emitter.h	/^  kRADebugUnreachable = 0x00000800u,$/;"	m	class:AlignMode::EmitterType::EmitterFlags::EncodingOptions::DiagnosticOptions
kRAO_INT	external/asmjit/src/asmjit/core/cpuinfo.h	/^      kRAO_INT,                  \/\/!< CPU has RAO_INT          (AADD, AAND, AOR, AXOR instructions).$/;"	m	struct:CpuFeatures::X86	typeref:enum:CpuFeatures::X86::
kRAS	external/asmjit/src/asmjit/core/cpuinfo.h	/^      kRAS,                      \/\/!< CPU has RAS          (reliability, availability and serviceability extensions).$/;"	m	struct:CpuFeatures::ARM	typeref:enum:CpuFeatures::ARM::
kRAS1_1	external/asmjit/src/asmjit/core/cpuinfo.h	/^      kRAS1_1,                   \/\/!< CPU has RASv1p1      (RAS v1.1).$/;"	m	struct:CpuFeatures::ARM	typeref:enum:CpuFeatures::ARM::
kRAS2	external/asmjit/src/asmjit/core/cpuinfo.h	/^      kRAS2,                     \/\/!< CPU has RASv2        (RAS v2).$/;"	m	struct:CpuFeatures::ARM	typeref:enum:CpuFeatures::ARM::
kRC_Down	external/asmjit/src/asmjit/x86/x86globals.h	/^  kRC_Down       = 0x0400u,     \/\/!< Round down (floor).$/;"	m	class:CondCode::FpuStatusWord::FpuControlWord
kRC_Mask	external/asmjit/src/asmjit/x86/x86globals.h	/^  kRC_Mask       = 0x0C00u,     \/\/!< Rounding control mask.$/;"	m	class:CondCode::FpuStatusWord::FpuControlWord
kRC_Nearest	external/asmjit/src/asmjit/x86/x86globals.h	/^  kRC_Nearest    = 0x0000u,     \/\/!< Round to nearest even.$/;"	m	class:CondCode::FpuStatusWord::FpuControlWord
kRC_Truncate	external/asmjit/src/asmjit/x86/x86globals.h	/^  kRC_Truncate   = 0x0C00u,     \/\/!< Round towards zero (truncate).$/;"	m	class:CondCode::FpuStatusWord::FpuControlWord
kRC_Up	external/asmjit/src/asmjit/x86/x86globals.h	/^  kRC_Up         = 0x0800u,     \/\/!< Round up (ceil).$/;"	m	class:CondCode::FpuStatusWord::FpuControlWord
kRDM	external/asmjit/src/asmjit/core/cpuinfo.h	/^      kRDM,                      \/\/!< CPU has RDM          (rounding double multiply accumulate) {A64}.$/;"	m	struct:CpuFeatures::ARM	typeref:enum:CpuFeatures::ARM::
kRDPID	external/asmjit/src/asmjit/core/cpuinfo.h	/^      kRDPID,                    \/\/!< CPU has RDPID            (RDPID instruction).$/;"	m	struct:CpuFeatures::X86	typeref:enum:CpuFeatures::X86::
kRDPRU	external/asmjit/src/asmjit/core/cpuinfo.h	/^      kRDPRU,                    \/\/!< CPU has RDPRU            (RDPRU instruction).$/;"	m	struct:CpuFeatures::X86	typeref:enum:CpuFeatures::X86::
kRDRAND	external/asmjit/src/asmjit/core/cpuinfo.h	/^      kRDRAND,                   \/\/!< CPU has RDRAND           (RDRAND instruction).$/;"	m	struct:CpuFeatures::X86	typeref:enum:CpuFeatures::X86::
kRDSEED	external/asmjit/src/asmjit/core/cpuinfo.h	/^      kRDSEED,                   \/\/!< CPU has RDSEED           (RDSEED instruction).$/;"	m	struct:CpuFeatures::X86	typeref:enum:CpuFeatures::X86::
kRDTSC	external/asmjit/src/asmjit/core/cpuinfo.h	/^      kRDTSC,                    \/\/!< CPU has RDTSC.$/;"	m	struct:CpuFeatures::X86	typeref:enum:CpuFeatures::X86::
kRDTSCP	external/asmjit/src/asmjit/core/cpuinfo.h	/^      kRDTSCP,                   \/\/!< CPU has RDTSCP.$/;"	m	struct:CpuFeatures::X86	typeref:enum:CpuFeatures::X86::
kREX_Mask	external/asmjit/src/asmjit/x86/x86opcode_p.h	/^    kREX_Mask      = 0x0Fu << kREX_Shift,$/;"	m	struct:Opcode	typeref:enum:Opcode::
kREX_Shift	external/asmjit/src/asmjit/x86/x86opcode_p.h	/^    kREX_Shift     = 24,$/;"	m	struct:Opcode	typeref:enum:Opcode::
kRISCV32	external/asmjit/src/asmjit/core/archtraits.h	/^  kRISCV32 = 3,$/;"	m	class:Arch
kRISCV64	external/asmjit/src/asmjit/core/archtraits.h	/^  kRISCV64 = 4,$/;"	m	class:Arch
kRME	external/asmjit/src/asmjit/core/cpuinfo.h	/^      kRME,                      \/\/!< CPU has RME          (memory encryption contexts extension) {A64}.$/;"	m	struct:CpuFeatures::ARM	typeref:enum:CpuFeatures::ARM::
kRMPQUERY	external/asmjit/src/asmjit/core/cpuinfo.h	/^      kRMPQUERY,                 \/\/!< CPU has RMPQUERY         (RMPQUERY instruction).$/;"	m	struct:CpuFeatures::X86	typeref:enum:CpuFeatures::X86::
kRNG	external/asmjit/src/asmjit/core/cpuinfo.h	/^      kRNG,                      \/\/!< CPU has RNG          (random number generation).$/;"	m	struct:CpuFeatures::ARM	typeref:enum:CpuFeatures::ARM::
kRNG_TRAP	external/asmjit/src/asmjit/core/cpuinfo.h	/^      kRNG_TRAP,                 \/\/!< CPU has RNG_TRAP     (random number trap to EL3 field) {A64}.$/;"	m	struct:CpuFeatures::ARM	typeref:enum:CpuFeatures::ARM::
kRO	external/asmjit/src/asmjit/core/inst.h	/^  kRO = 1,$/;"	m	class:InstIdParts::InstOptions::InstControlFlow::InstSameRegHint
kROR	external/asmjit/src/asmjit/core/archcommons.h	/^  kROR = 0x03u,$/;"	m	class:CondCode::DataType::ShiftOp
kRPRES	external/asmjit/src/asmjit/core/cpuinfo.h	/^      kRPRES,                    \/\/!< CPU has RPRES        (increased precision of reciprocal estimate and RSQRT estimate) {A64}.$/;"	m	struct:CpuFeatures::ARM	typeref:enum:CpuFeatures::ARM::
kRPRFM	external/asmjit/src/asmjit/core/cpuinfo.h	/^      kRPRFM,                    \/\/!! CPU has RPRFM        (range prefetch hint instruction).$/;"	m	struct:CpuFeatures::ARM	typeref:enum:CpuFeatures::ARM::
kRRX	external/asmjit/src/asmjit/core/archcommons.h	/^  kRRX = 0x04u,$/;"	m	class:CondCode::DataType::ShiftOp
kRTM	external/asmjit/src/asmjit/core/cpuinfo.h	/^      kRTM,                      \/\/!< CPU has RTM.$/;"	m	struct:CpuFeatures::X86	typeref:enum:CpuFeatures::X86::
kRW	external/asmjit/src/asmjit/core/inst.h	/^  kRW = 0x00000003u,$/;"	m	class:InstIdParts::InstOptions::InstControlFlow::InstSameRegHint::CpuRWFlags::OpRWFlags
kRW	external/asmjit/src/asmjit/core/radefs_p.h	/^  kRW = uint32_t(OpRWFlags::kRW),$/;"	m	class:RAStrategyType::RAStrategyFlags::RATiedFlags
kRanges	external/asmjit/src/asmjit/x86/x86globals.h	/^  kRanges        = 0x01u << 2,  \/\/!< The arithmetic comparison is "greater than or equal" between even indexed$/;"	m	class:CondCode::FpuStatusWord::FpuControlWord::CmpImm::PCmpStrImm
kRead	external/asmjit/src/asmjit/core/inst.h	/^  kRead = 0x00000001u,$/;"	m	class:InstIdParts::InstOptions::InstControlFlow::InstSameRegHint::CpuRWFlags::OpRWFlags
kRead	external/asmjit/src/asmjit/core/radefs_p.h	/^  kRead = uint32_t(OpRWFlags::kRead),$/;"	m	class:RAStrategyType::RAStrategyFlags::RATiedFlags
kReadExecute	external/asmjit/src/asmjit/core/virtmem.h	/^  kReadExecute = 1$/;"	m	class:VirtMem::CachePolicy::MemoryFlags::HardenedRuntimeFlags::ProtectJitAccess
kReadOnly	external/asmjit/src/asmjit/core/codeholder.h	/^  kReadOnly = 0x00000002u,$/;"	m	class:ExpressionOpType::ExpressionValueType::SectionFlags
kReadWrite	external/asmjit/src/asmjit/core/virtmem.h	/^  kReadWrite = 0,$/;"	m	class:VirtMem::CachePolicy::MemoryFlags::HardenedRuntimeFlags::ProtectJitAccess
kRealId	external/asmjit/src/asmjit/core/inst.h	/^  kRealId   = 0x0000FFFFu,$/;"	m	class:InstIdParts
kReg	external/asmjit/src/asmjit/core/operand.h	/^  kReg = 1,$/;"	m	class:OperandType
kReg	external/asmjit/test/asmjit_test_perf_x86.cpp	/^  kReg,$/;"	m	class:InstForm	file:
kRegBnd	external/asmjit/src/asmjit/x86/x86instdb.h	/^  kRegBnd          = 0x0000000000004000u, \/\/!< Operand can be 128-bit BND register.$/;"	m	class:InstDB::Mode::OpFlags
kRegCReg	external/asmjit/src/asmjit/x86/x86instdb.h	/^  kRegCReg         = 0x0000000000000800u, \/\/!< Operand can be CReg (control register).$/;"	m	class:InstDB::Mode::OpFlags
kRegCasts	external/asmjit/src/asmjit/core/formatter.h	/^  kRegCasts = 0x00000010u,$/;"	m	class:FormatFlags
kRegDReg	external/asmjit/src/asmjit/x86/x86instdb.h	/^  kRegDReg         = 0x0000000000001000u, \/\/!< Operand can be DReg (debug register).$/;"	m	class:InstDB::Mode::OpFlags
kRegGpbHi	external/asmjit/src/asmjit/x86/x86instdb.h	/^  kRegGpbHi        = 0x0000000000000002u, \/\/!< Operand can be high 8-bit GPB register.$/;"	m	class:InstDB::Mode::OpFlags
kRegGpbLo	external/asmjit/src/asmjit/x86/x86instdb.h	/^  kRegGpbLo        = 0x0000000000000001u, \/\/!< Operand can be low 8-bit GPB register.$/;"	m	class:InstDB::Mode::OpFlags
kRegGpd	external/asmjit/src/asmjit/x86/x86instdb.h	/^  kRegGpd          = 0x0000000000000008u, \/\/!< Operand can be 32-bit GPD register.$/;"	m	class:InstDB::Mode::OpFlags
kRegGpq	external/asmjit/src/asmjit/x86/x86instdb.h	/^  kRegGpq          = 0x0000000000000010u, \/\/!< Operand can be 64-bit GPQ register.$/;"	m	class:InstDB::Mode::OpFlags
kRegGpw	external/asmjit/src/asmjit/x86/x86instdb.h	/^  kRegGpw          = 0x0000000000000004u, \/\/!< Operand can be 16-bit GPW register.$/;"	m	class:InstDB::Mode::OpFlags
kRegGroupMask	external/asmjit/src/asmjit/core/operand.h	/^    kRegGroupMask = 0x0Fu << kRegGroupShift,$/;"	m	struct:OperandType::RegType::RegGroup::OperandSignature	typeref:enum:OperandType::RegType::RegGroup::OperandSignature::
kRegGroupShift	external/asmjit/src/asmjit/core/operand.h	/^    kRegGroupShift = 8,$/;"	m	struct:OperandType::RegType::RegGroup::OperandSignature	typeref:enum:OperandType::RegType::RegGroup::OperandSignature::
kRegIdMask	external/asmjit/src/asmjit/core/func.h	/^    kRegIdMask        = 0x00FF0000u,   \/\/!< RegId mask.$/;"	m	struct:CallConvId::CallConvStrategy::CallConvFlags::FuncValue	typeref:enum:CallConvId::CallConvStrategy::CallConvFlags::FuncValue::
kRegIdShift	external/asmjit/src/asmjit/core/func.h	/^    kRegIdShift       = 16,            \/\/!< RegId shift.$/;"	m	struct:CallConvId::CallConvStrategy::CallConvFlags::FuncValue	typeref:enum:CallConvId::CallConvStrategy::CallConvFlags::FuncValue::
kRegKReg	external/asmjit/src/asmjit/x86/x86instdb.h	/^  kRegKReg         = 0x0000000000000200u, \/\/!< Operand can be 64-bit K register.$/;"	m	class:InstDB::Mode::OpFlags
kRegMask	external/asmjit/src/asmjit/x86/x86instdb.h	/^  kRegMask         = 0x000000000000FFFFu, \/\/!< Mask of all possible register types.$/;"	m	class:InstDB::Mode::OpFlags
kRegMem	external/asmjit/src/asmjit/core/inst.h	/^  kRegMem = 0x00000004u,$/;"	m	class:InstIdParts::InstOptions::InstControlFlow::InstSameRegHint::CpuRWFlags::OpRWFlags
kRegMm	external/asmjit/src/asmjit/x86/x86instdb.h	/^  kRegMm           = 0x0000000000000100u, \/\/!< Operand can be 64-bit MM register.$/;"	m	class:InstDB::Mode::OpFlags
kRegParm1	external/asmjit/src/asmjit/core/func.h	/^  kRegParm1 = 6,$/;"	m	class:CallConvId
kRegParm2	external/asmjit/src/asmjit/core/func.h	/^  kRegParm2 = 7,$/;"	m	class:CallConvId
kRegParm3	external/asmjit/src/asmjit/core/func.h	/^  kRegParm3 = 8,$/;"	m	class:CallConvId
kRegPhysId	external/asmjit/src/asmjit/core/inst.h	/^  kRegPhysId = 0x00000100u,$/;"	m	class:InstIdParts::InstOptions::InstControlFlow::InstSameRegHint::CpuRWFlags::OpRWFlags
kRegSReg	external/asmjit/src/asmjit/x86/x86instdb.h	/^  kRegSReg         = 0x0000000000000400u, \/\/!< Operand can be SReg (segment register).$/;"	m	class:InstDB::Mode::OpFlags
kRegSt	external/asmjit/src/asmjit/x86/x86instdb.h	/^  kRegSt           = 0x0000000000002000u, \/\/!< Operand can be 80-bit ST register (X87).$/;"	m	class:InstDB::Mode::OpFlags
kRegSwap	external/asmjit/src/asmjit/core/archtraits.h	/^  kRegSwap = 0x01u,$/;"	m	class:Arch::SubArch::ArchTypeNameId::InstHints
kRegTmm	external/asmjit/src/asmjit/x86/x86instdb.h	/^  kRegTmm          = 0x0000000000008000u, \/\/!< Operand can be 0..8192-bit TMM register.$/;"	m	class:InstDB::Mode::OpFlags
kRegType	external/asmjit/src/asmjit/core/formatter.h	/^  kRegType = 0x00000040u$/;"	m	class:FormatFlags
kRegTypeMask	external/asmjit/src/asmjit/core/func.h	/^    kRegTypeMask      = 0xFF000000u    \/\/!< RegType mask.$/;"	m	struct:CallConvId::CallConvStrategy::CallConvFlags::FuncValue	typeref:enum:CallConvId::CallConvStrategy::CallConvFlags::FuncValue::
kRegTypeMask	external/asmjit/src/asmjit/core/operand.h	/^    kRegTypeMask = 0x1Fu << kRegTypeShift,$/;"	m	struct:OperandType::RegType::RegGroup::OperandSignature	typeref:enum:OperandType::RegType::RegGroup::OperandSignature::
kRegTypeShift	external/asmjit/src/asmjit/core/func.h	/^    kRegTypeShift     = 24,            \/\/!< RegType shift.$/;"	m	struct:CallConvId::CallConvStrategy::CallConvFlags::FuncValue	typeref:enum:CallConvId::CallConvStrategy::CallConvFlags::FuncValue::
kRegTypeShift	external/asmjit/src/asmjit/core/operand.h	/^    kRegTypeShift = 3,$/;"	m	struct:OperandType::RegType::RegGroup::OperandSignature	typeref:enum:OperandType::RegType::RegGroup::OperandSignature::
kRegXmm	external/asmjit/src/asmjit/x86/x86instdb.h	/^  kRegXmm          = 0x0000000000000020u, \/\/!< Operand can be 128-bit XMM register.$/;"	m	class:InstDB::Mode::OpFlags
kRegYmm	external/asmjit/src/asmjit/x86/x86instdb.h	/^  kRegYmm          = 0x0000000000000040u, \/\/!< Operand can be 256-bit YMM register.$/;"	m	class:InstDB::Mode::OpFlags
kRegZmm	external/asmjit/src/asmjit/x86/x86instdb.h	/^  kRegZmm          = 0x0000000000000080u, \/\/!< Operand can be 512-bit ZMM register.$/;"	m	class:InstDB::Mode::OpFlags
kRegular	external/asmjit/src/asmjit/core/inst.h	/^  kRegular = 0u,$/;"	m	class:InstIdParts::InstOptions::InstControlFlow
kRegularLine	external/asmjit/src/asmjit/core/formatter.h	/^  kRegularLine = 0,$/;"	m	class:FormatFlags::FormatIndentationGroup::FormatPaddingGroup
kRel	external/asmjit/src/asmjit/x86/x86operand.h	/^    kRel = 2,$/;"	m	class:Mem::AddrType
kRel32	external/asmjit/src/asmjit/x86/x86instdb.h	/^  kRel32           = 0x0000800000000000u, \/\/!< Operand can be relative 32-bit displacement.$/;"	m	class:InstDB::Mode::OpFlags
kRel8	external/asmjit/src/asmjit/x86/x86instdb.h	/^  kRel8            = 0x0000400000000000u, \/\/!< Operand can be relative 8-bit  displacement.$/;"	m	class:InstDB::Mode::OpFlags
kRelMask	external/asmjit/src/asmjit/x86/x86instdb.h	/^  kRelMask         = 0x0000C00000000000u, \/\/!< Mask of all relative displacement types.$/;"	m	class:InstDB::Mode::OpFlags
kRelToAbs	external/asmjit/src/asmjit/core/codeholder.h	/^  kRelToAbs = 3,$/;"	m	class:ExpressionOpType::ExpressionValueType::SectionFlags::CopySectionFlags::OffsetType::RelocType
kRep	external/asmjit/src/asmjit/x86/x86instdb.h	/^  kRep = 0x00004000u,$/;"	m	class:InstDB::Mode::OpFlags::InstFlags
kRepIgnored	external/asmjit/src/asmjit/x86/x86instdb.h	/^  kRepIgnored = 0x00008000u,$/;"	m	class:InstDB::Mode::OpFlags::InstFlags
kReserved	external/asmjit/src/asmjit/core/formatter.h	/^  kReserved = 3u,$/;"	m	class:FormatFlags::FormatIndentationGroup
kReserved	external/asmjit/src/asmjit/core/inst.h	/^  kReserved = 0x00000001u,$/;"	m	class:InstIdParts::InstOptions
kReturn	external/asmjit/src/asmjit/core/inst.h	/^  kReturn = 4u,$/;"	m	class:InstIdParts::InstOptions::InstControlFlow
kRoundCurrent	external/asmjit/src/asmjit/x86/x86globals.h	/^  kRoundCurrent  = 0x04u,       \/\/!< Round to the current mode set.$/;"	m	class:CondCode::FpuStatusWord::FpuControlWord::CmpImm::PCmpStrImm::RoundImm::VCmpImm::VFixupImm::VFPClassImm::VGetMantImm::VPCmpImm::VPComImm::VRangeImm::VReduceImm
kRoundDown	external/asmjit/src/asmjit/x86/x86globals.h	/^  kRoundDown     = 0x01u,       \/\/!< Round down.$/;"	m	class:CondCode::FpuStatusWord::FpuControlWord::CmpImm::PCmpStrImm::RoundImm::VCmpImm::VFixupImm::VFPClassImm::VGetMantImm::VPCmpImm::VPComImm::VRangeImm::VReduceImm
kRoundEven	external/asmjit/src/asmjit/x86/x86globals.h	/^  kRoundEven     = 0x00u,       \/\/!< Round to nearest even.$/;"	m	class:CondCode::FpuStatusWord::FpuControlWord::CmpImm::PCmpStrImm::RoundImm::VCmpImm::VFixupImm::VFPClassImm::VGetMantImm::VPCmpImm::VPComImm::VRangeImm::VReduceImm
kRoundTrunc	external/asmjit/src/asmjit/x86/x86globals.h	/^  kRoundTrunc    = 0x03u,       \/\/!< Truncate.$/;"	m	class:CondCode::FpuStatusWord::FpuControlWord::CmpImm::PCmpStrImm::RoundImm::VCmpImm::VFixupImm::VFPClassImm::VGetMantImm::VPCmpImm::VPComImm::VRangeImm::VReduceImm
kRoundUp	external/asmjit/src/asmjit/x86/x86globals.h	/^  kRoundUp       = 0x02u,       \/\/!< Round up.$/;"	m	class:CondCode::FpuStatusWord::FpuControlWord::CmpImm::PCmpStrImm::RoundImm::VCmpImm::VFixupImm::VFPClassImm::VGetMantImm::VPCmpImm::VPComImm::VRangeImm::VReduceImm
kS	external/asmjit/src/asmjit/arm/a64assembler.cpp	/^    kS = uint8_t(1u << kScalarShift),$/;"	m	struct:SizeOp	typeref:enum:SizeOp::	file:
kS	external/asmjit/src/asmjit/x86/x86globals.h	/^  kS             = 0x08u,       \/\/!<         SF==1  (is negative)$/;"	m	class:CondCode
kS16	external/asmjit/src/asmjit/core/archcommons.h	/^  kS16 = 2,$/;"	m	class:CondCode::DataType
kS32	external/asmjit/src/asmjit/core/archcommons.h	/^  kS32 = 3,$/;"	m	class:CondCode::DataType
kS64	external/asmjit/src/asmjit/core/archcommons.h	/^  kS64 = 4,$/;"	m	class:CondCode::DataType
kS8	external/asmjit/src/asmjit/core/archcommons.h	/^  kS8 = 1,$/;"	m	class:CondCode::DataType
kSAE	external/asmjit/src/asmjit/x86/x86instdb.h	/^  kSAE = 0x00000008u,$/;"	m	class:InstDB::Mode::OpFlags::InstFlags::Avx512Flags
kSB	external/asmjit/src/asmjit/core/cpuinfo.h	/^      kSB,                       \/\/!< CPU has SB           (speculative barrier).$/;"	m	struct:CpuFeatures::ARM	typeref:enum:CpuFeatures::ARM::
kSB	external/asmjit/src/asmjit/x86/x86globals.h	/^  kSB            = 0x02u << 0,  \/\/!< The source data format is signed bytes.$/;"	m	class:CondCode::FpuStatusWord::FpuControlWord::CmpImm::PCmpStrImm
kSEAM	external/asmjit/src/asmjit/core/cpuinfo.h	/^      kSEAM,                     \/\/!< CPU has SEAM.$/;"	m	struct:CpuFeatures::X86	typeref:enum:CpuFeatures::X86::
kSERIALIZE	external/asmjit/src/asmjit/core/cpuinfo.h	/^      kSERIALIZE,                \/\/!< CPU has SERIALIZE.$/;"	m	struct:CpuFeatures::X86	typeref:enum:CpuFeatures::X86::
kSEV	external/asmjit/src/asmjit/core/cpuinfo.h	/^      kSEV,                      \/\/!< CPU has SEV              (secure encrypted virtualization).$/;"	m	struct:CpuFeatures::X86	typeref:enum:CpuFeatures::X86::
kSEV_ES	external/asmjit/src/asmjit/core/cpuinfo.h	/^      kSEV_ES,                   \/\/!< CPU has SEV_ES           (SEV encrypted state).$/;"	m	struct:CpuFeatures::X86	typeref:enum:CpuFeatures::X86::
kSEV_SNP	external/asmjit/src/asmjit/core/cpuinfo.h	/^      kSEV_SNP,                  \/\/!< CPU has SEV_SNP          (SEV secure nested paging).$/;"	m	struct:CpuFeatures::X86	typeref:enum:CpuFeatures::X86::
kSF	external/asmjit/src/asmjit/core/inst.h	/^  kSF = 0x00000004u,$/;"	m	class:InstIdParts::InstOptions::InstControlFlow::InstSameRegHint::CpuRWFlags
kSHA	external/asmjit/src/asmjit/core/cpuinfo.h	/^      kSHA,                      \/\/!< CPU has SHA              (SHA-1 and SHA-256 instructions).$/;"	m	struct:CpuFeatures::X86	typeref:enum:CpuFeatures::X86::
kSHA1	external/asmjit/src/asmjit/core/cpuinfo.h	/^      kSHA1,                     \/\/!< CPU has SHA1         (ASIMD SHA1 instructions).$/;"	m	struct:CpuFeatures::ARM	typeref:enum:CpuFeatures::ARM::
kSHA256	external/asmjit/src/asmjit/core/cpuinfo.h	/^      kSHA256,                   \/\/!< CPU has SHA256       (ASIMD SHA256 instructions).$/;"	m	struct:CpuFeatures::ARM	typeref:enum:CpuFeatures::ARM::
kSHA3	external/asmjit/src/asmjit/core/cpuinfo.h	/^      kSHA3,                     \/\/!< CPU has SHA3         (ASIMD EOR3, RAX1, XAR, and BCAX instructions).$/;"	m	struct:CpuFeatures::ARM	typeref:enum:CpuFeatures::ARM::
kSHA512	external/asmjit/src/asmjit/core/cpuinfo.h	/^      kSHA512,                   \/\/!< CPU has SHA512           (SHA-512 instructions).$/;"	m	struct:CpuFeatures::X86	typeref:enum:CpuFeatures::X86::
kSHA512	external/asmjit/src/asmjit/core/cpuinfo.h	/^      kSHA512,                   \/\/!< CPU has SHA512       (ASIMD SHA512 instructions).$/;"	m	struct:CpuFeatures::ARM	typeref:enum:CpuFeatures::ARM::
kSKINIT	external/asmjit/src/asmjit/core/cpuinfo.h	/^      kSKINIT,                   \/\/!< CPU has SKINIT           (SKINIT\/STGI instructions) {AMD}.$/;"	m	struct:CpuFeatures::X86	typeref:enum:CpuFeatures::X86::
kSM3	external/asmjit/src/asmjit/core/cpuinfo.h	/^      kSM3,                      \/\/!< CPU has SM3              (SM3 hash extensions).$/;"	m	struct:CpuFeatures::X86	typeref:enum:CpuFeatures::X86::
kSM3	external/asmjit/src/asmjit/core/cpuinfo.h	/^      kSM3,                      \/\/!< CPU has SM3          (ASIMD SM3 instructions).$/;"	m	struct:CpuFeatures::ARM	typeref:enum:CpuFeatures::ARM::
kSM4	external/asmjit/src/asmjit/core/cpuinfo.h	/^      kSM4,                      \/\/!< CPU has SM4              (SM4 cipher extensions).$/;"	m	struct:CpuFeatures::X86	typeref:enum:CpuFeatures::X86::
kSM4	external/asmjit/src/asmjit/core/cpuinfo.h	/^      kSM4,                      \/\/!< CPU has SM4          (ASIMD SM4 instructions).$/;"	m	struct:CpuFeatures::ARM	typeref:enum:CpuFeatures::ARM::
kSMAP	external/asmjit/src/asmjit/core/cpuinfo.h	/^      kSMAP,                     \/\/!< CPU has SMAP             (supervisor-mode access prevention).$/;"	m	struct:CpuFeatures::X86	typeref:enum:CpuFeatures::X86::
kSME	external/asmjit/src/asmjit/core/cpuinfo.h	/^      kSME ,                     \/\/!< CPU has SME              (secure memory encryption).$/;"	m	struct:CpuFeatures::X86	typeref:enum:CpuFeatures::X86::
kSME	external/asmjit/src/asmjit/core/cpuinfo.h	/^      kSME,                      \/\/!< CPU has SME          (SME v1 - scalable matrix extension) {A64}.$/;"	m	struct:CpuFeatures::ARM	typeref:enum:CpuFeatures::ARM::
kSME2	external/asmjit/src/asmjit/core/cpuinfo.h	/^      kSME2,                     \/\/!< CPU has SME2         (SME v2) {A64}.$/;"	m	struct:CpuFeatures::ARM	typeref:enum:CpuFeatures::ARM::
kSME2_1	external/asmjit/src/asmjit/core/cpuinfo.h	/^      kSME2_1,                   \/\/!< CPU has SME2p1       (SME v2.1) {A64}.$/;"	m	struct:CpuFeatures::ARM	typeref:enum:CpuFeatures::ARM::
kSMEP	external/asmjit/src/asmjit/core/cpuinfo.h	/^      kSMEP,                     \/\/!< CPU has SMEP             (supervisor-mode execution prevention).$/;"	m	struct:CpuFeatures::X86	typeref:enum:CpuFeatures::X86::
kSME_B16B16	external/asmjit/src/asmjit/core/cpuinfo.h	/^      kSME_B16B16,               \/\/!< CPU has SME_B16B16   (SME non-widening BFloat16 to BFloat16 arithmetic) {A64}.$/;"	m	struct:CpuFeatures::ARM	typeref:enum:CpuFeatures::ARM::
kSME_B16F32	external/asmjit/src/asmjit/core/cpuinfo.h	/^      kSME_B16F32,               \/\/!< CPU has SME_B16F32   {A64}.$/;"	m	struct:CpuFeatures::ARM	typeref:enum:CpuFeatures::ARM::
kSME_BI32I32	external/asmjit/src/asmjit/core/cpuinfo.h	/^      kSME_BI32I32,              \/\/!< CPU has SME_BI32I32  {A64}.$/;"	m	struct:CpuFeatures::ARM	typeref:enum:CpuFeatures::ARM::
kSME_F16F16	external/asmjit/src/asmjit/core/cpuinfo.h	/^      kSME_F16F16,               \/\/!< CPU has SME_F16F16   (SME2.1 non-widening half-precision FP16 to FP16 arithmetic) {A64}.$/;"	m	struct:CpuFeatures::ARM	typeref:enum:CpuFeatures::ARM::
kSME_F16F32	external/asmjit/src/asmjit/core/cpuinfo.h	/^      kSME_F16F32,               \/\/!< CPU has SME_F16F32   {A64}.$/;"	m	struct:CpuFeatures::ARM	typeref:enum:CpuFeatures::ARM::
kSME_F32F32	external/asmjit/src/asmjit/core/cpuinfo.h	/^      kSME_F32F32,               \/\/!< CPU has SME_F32F32   {A64}.$/;"	m	struct:CpuFeatures::ARM	typeref:enum:CpuFeatures::ARM::
kSME_F64F64	external/asmjit/src/asmjit/core/cpuinfo.h	/^      kSME_F64F64,               \/\/!< CPU has SME_F64F64   {A64}.$/;"	m	struct:CpuFeatures::ARM	typeref:enum:CpuFeatures::ARM::
kSME_FA64	external/asmjit/src/asmjit/core/cpuinfo.h	/^      kSME_FA64,                 \/\/!< CPU has SME_FA64     {A64}.$/;"	m	struct:CpuFeatures::ARM	typeref:enum:CpuFeatures::ARM::
kSME_I16I32	external/asmjit/src/asmjit/core/cpuinfo.h	/^      kSME_I16I32,               \/\/!< CPU has SME_I16I32   {A64}.$/;"	m	struct:CpuFeatures::ARM	typeref:enum:CpuFeatures::ARM::
kSME_I16I64	external/asmjit/src/asmjit/core/cpuinfo.h	/^      kSME_I16I64,               \/\/!< CPU has SME_I16I64   {A64}.$/;"	m	struct:CpuFeatures::ARM	typeref:enum:CpuFeatures::ARM::
kSME_I8I32	external/asmjit/src/asmjit/core/cpuinfo.h	/^      kSME_I8I32,                \/\/!< CPU has SME_I8I32    {A64}.$/;"	m	struct:CpuFeatures::ARM	typeref:enum:CpuFeatures::ARM::
kSMX	external/asmjit/src/asmjit/core/cpuinfo.h	/^      kSMX,                      \/\/!< CPU has SMX              (safer mode extensions).$/;"	m	struct:CpuFeatures::X86	typeref:enum:CpuFeatures::X86::
kSNaN	external/asmjit/src/asmjit/x86/x86globals.h	/^  kSNaN          = 0x80u        \/\/!< Checks for SNaN.$/;"	m	class:CondCode::FpuStatusWord::FpuControlWord::CmpImm::PCmpStrImm::RoundImm::VCmpImm::VFixupImm::VFPClassImm
kSP	external/asmjit/src/asmjit/arm/a64assembler.cpp	/^static constexpr uint32_t kSP = Gp::kIdSp;$/;"	v	file:
kSP	external/asmjit/src/asmjit/arm/a64instdb_p.h	/^static constexpr uint32_t kSP = Gp::kIdSp;$/;"	m	namespace:InstDB
kSPECRES	external/asmjit/src/asmjit/core/cpuinfo.h	/^      kSPECRES,                  \/\/!< CPU has SPECRES      (speculation restriction instructions).$/;"	m	struct:CpuFeatures::ARM	typeref:enum:CpuFeatures::ARM::
kSPECRES2	external/asmjit/src/asmjit/core/cpuinfo.h	/^      kSPECRES2,                 \/\/!< CPU has SPECRES2     (clear other speculative predictions).$/;"	m	struct:CpuFeatures::ARM	typeref:enum:CpuFeatures::ARM::
kSSBS	external/asmjit/src/asmjit/core/cpuinfo.h	/^      kSSBS,                     \/\/!< CPU has SSBS         (speculative store bypass safe instruction).$/;"	m	struct:CpuFeatures::ARM	typeref:enum:CpuFeatures::ARM::
kSSBS2	external/asmjit/src/asmjit/core/cpuinfo.h	/^      kSSBS2,                    \/\/!< CPU has SSBS2        (MRS and MSR instructions for SSBS).$/;"	m	struct:CpuFeatures::ARM	typeref:enum:CpuFeatures::ARM::
kSSE	external/asmjit/src/asmjit/core/cpuinfo.h	/^      kSSE,                      \/\/!< CPU has SSE              (SSE instructions).$/;"	m	struct:CpuFeatures::X86	typeref:enum:CpuFeatures::X86::
kSSE2	external/asmjit/src/asmjit/core/cpuinfo.h	/^      kSSE2,                     \/\/!< CPU has SSE2             (SSE2 instructions).$/;"	m	struct:CpuFeatures::X86	typeref:enum:CpuFeatures::X86::
kSSE3	external/asmjit/src/asmjit/core/cpuinfo.h	/^      kSSE3,                     \/\/!< CPU has SSE3             (SSE3 instructions).$/;"	m	struct:CpuFeatures::X86	typeref:enum:CpuFeatures::X86::
kSSE4A	external/asmjit/src/asmjit/core/cpuinfo.h	/^      kSSE4A,                    \/\/!< CPU has SSE4A            (SSE4.A instructions) {AMD} (deprecated).$/;"	m	struct:CpuFeatures::X86	typeref:enum:CpuFeatures::X86::
kSSE4_1	external/asmjit/src/asmjit/core/cpuinfo.h	/^      kSSE4_1,                   \/\/!< CPU has SSE4.1           (SSE4.1 instructions).$/;"	m	struct:CpuFeatures::X86	typeref:enum:CpuFeatures::X86::
kSSE4_2	external/asmjit/src/asmjit/core/cpuinfo.h	/^      kSSE4_2,                   \/\/!< CPU has SSE4.2           (SSE4.2 instructions).$/;"	m	struct:CpuFeatures::X86	typeref:enum:CpuFeatures::X86::
kSSSE3	external/asmjit/src/asmjit/core/cpuinfo.h	/^      kSSSE3,                    \/\/!< CPU has SSSE3            (SSSE3 instructions).$/;"	m	struct:CpuFeatures::X86	typeref:enum:CpuFeatures::X86::
kSVE	external/asmjit/src/asmjit/core/cpuinfo.h	/^      kSVE,                      \/\/!< CPU has SVE          (SVE v1 - scalable vector extension) {A64}.$/;"	m	struct:CpuFeatures::ARM	typeref:enum:CpuFeatures::ARM::
kSVE2	external/asmjit/src/asmjit/core/cpuinfo.h	/^      kSVE2,                     \/\/!< CPU has SVE2         (SVE v2) {A64}.$/;"	m	struct:CpuFeatures::ARM	typeref:enum:CpuFeatures::ARM::
kSVE2_1	external/asmjit/src/asmjit/core/cpuinfo.h	/^      kSVE2_1,                   \/\/!< CPU has SVE2p1       (SVE v2.1) {A64}.$/;"	m	struct:CpuFeatures::ARM	typeref:enum:CpuFeatures::ARM::
kSVE_AES	external/asmjit/src/asmjit/core/cpuinfo.h	/^      kSVE_AES,                  \/\/!< CPU has SVE_AES      (SVE AES instructions) {A64}.$/;"	m	struct:CpuFeatures::ARM	typeref:enum:CpuFeatures::ARM::
kSVE_B16B16	external/asmjit/src/asmjit/core/cpuinfo.h	/^      kSVE_B16B16,               \/\/!< CPU has SVE_B16B16   (SVE non-widening BFloat16 to BFloat16 arithmetic) {A64}.$/;"	m	struct:CpuFeatures::ARM	typeref:enum:CpuFeatures::ARM::
kSVE_BF16	external/asmjit/src/asmjit/core/cpuinfo.h	/^      kSVE_BF16,                 \/\/!< CPU has SVE_BF16     (SVE BF16 instructions) {A64}.$/;"	m	struct:CpuFeatures::ARM	typeref:enum:CpuFeatures::ARM::
kSVE_BITPERM	external/asmjit/src/asmjit/core/cpuinfo.h	/^      kSVE_BITPERM,              \/\/!< CPU has SVE_BITPERM  (SVE bit permute) {A64}.$/;"	m	struct:CpuFeatures::ARM	typeref:enum:CpuFeatures::ARM::
kSVE_EBF16	external/asmjit/src/asmjit/core/cpuinfo.h	/^      kSVE_EBF16,                \/\/!< CPU has SVE_EBF16    (SVE extended BFloat16 mode) {A64}.$/;"	m	struct:CpuFeatures::ARM	typeref:enum:CpuFeatures::ARM::
kSVE_F32MM	external/asmjit/src/asmjit/core/cpuinfo.h	/^      kSVE_F32MM,                \/\/!< CPU has SVE_F32MM    (SVE single-precision floating-point matrix multiply instruction) {A64}.$/;"	m	struct:CpuFeatures::ARM	typeref:enum:CpuFeatures::ARM::
kSVE_F64MM	external/asmjit/src/asmjit/core/cpuinfo.h	/^      kSVE_F64MM,                \/\/!< CPU has SVE_F64MM    (SVE double-precision floating-point matrix multiply instruction) {A64}.$/;"	m	struct:CpuFeatures::ARM	typeref:enum:CpuFeatures::ARM::
kSVE_I8MM	external/asmjit/src/asmjit/core/cpuinfo.h	/^      kSVE_I8MM,                 \/\/!< CPU has SVE_I8MM     (SVE int8 matrix multiplication) {A64}.$/;"	m	struct:CpuFeatures::ARM	typeref:enum:CpuFeatures::ARM::
kSVE_PMULL128	external/asmjit/src/asmjit/core/cpuinfo.h	/^      kSVE_PMULL128,             \/\/!< CPU has SVE_PMULL128 (SVE PMULL instructions) {A64}.$/;"	m	struct:CpuFeatures::ARM	typeref:enum:CpuFeatures::ARM::
kSVE_SHA3	external/asmjit/src/asmjit/core/cpuinfo.h	/^      kSVE_SHA3,                 \/\/!< CPU has SVE_SHA3     (SVE SHA-3 instructions) {A64}.$/;"	m	struct:CpuFeatures::ARM	typeref:enum:CpuFeatures::ARM::
kSVE_SM4	external/asmjit/src/asmjit/core/cpuinfo.h	/^      kSVE_SM4,                  \/\/!< CPU has SVE_SM4      (SVE SM4 instructions {A64}.$/;"	m	struct:CpuFeatures::ARM	typeref:enum:CpuFeatures::ARM::
kSVM	external/asmjit/src/asmjit/core/cpuinfo.h	/^      kSVM,                      \/\/!< CPU has SVM              (virtualization) {AMD}.$/;"	m	struct:CpuFeatures::X86	typeref:enum:CpuFeatures::X86::
kSW	external/asmjit/src/asmjit/x86/x86globals.h	/^  kSW            = 0x03u << 0,  \/\/!< The source data format is signed words.$/;"	m	class:CondCode::FpuStatusWord::FpuControlWord::CmpImm::PCmpStrImm
kSWIFT	external/asmjit/src/asmjit/core/cpuinfo.cpp	/^  kSWIFT              = 0x1E2D6381u, \/\/ Apple A6\/A6X (ARMv7s).$/;"	m	class:arm::AppleFamilyId	file:
kSXTB	external/asmjit/src/asmjit/core/archcommons.h	/^  kSXTB = 0x0Au,$/;"	m	class:CondCode::DataType::ShiftOp
kSXTH	external/asmjit/src/asmjit/core/archcommons.h	/^  kSXTH = 0x0Bu,$/;"	m	class:CondCode::DataType::ShiftOp
kSXTW	external/asmjit/src/asmjit/core/archcommons.h	/^  kSXTW = 0x0Cu,$/;"	m	class:CondCode::DataType::ShiftOp
kSXTX	external/asmjit/src/asmjit/core/archcommons.h	/^  kSXTX = 0x0Du$/;"	m	class:CondCode::DataType::ShiftOp
kSYSINSTR128	external/asmjit/src/asmjit/core/cpuinfo.h	/^      kSYSINSTR128,              \/\/!< CPU has SYSINSTR128  (128-bit system instructions) {A64}.$/;"	m	struct:CpuFeatures::ARM	typeref:enum:CpuFeatures::ARM::
kSYSREG128	external/asmjit/src/asmjit/core/cpuinfo.h	/^      kSYSREG128,                \/\/!< CPU has SYSREG128    (128-bit system registers) {A64}.$/;"	m	struct:CpuFeatures::ARM	typeref:enum:CpuFeatures::ARM::
kScalarShift	external/asmjit/src/asmjit/arm/a64assembler.cpp	/^    kScalarShift = 1,$/;"	m	struct:SizeOp	typeref:enum:SizeOp::	file:
kSection	external/asmjit/src/asmjit/core/builder.h	/^  kSection = 2,$/;"	m	class:NodeType
kSelectAbsMax	external/asmjit/src/asmjit/x86/x86globals.h	/^  kSelectAbsMax  = 0x03u,       \/\/!< Select maximum absolute value.$/;"	m	class:CondCode::FpuStatusWord::FpuControlWord::CmpImm::PCmpStrImm::RoundImm::VCmpImm::VFixupImm::VFPClassImm::VGetMantImm::VPCmpImm::VPComImm::VRangeImm
kSelectAbsMin	external/asmjit/src/asmjit/x86/x86globals.h	/^  kSelectAbsMin  = 0x02u,       \/\/!< Select minimum absolute value.$/;"	m	class:CondCode::FpuStatusWord::FpuControlWord::CmpImm::PCmpStrImm::RoundImm::VCmpImm::VFixupImm::VFPClassImm::VGetMantImm::VPCmpImm::VPComImm::VRangeImm
kSelectMax	external/asmjit/src/asmjit/x86/x86globals.h	/^  kSelectMax     = 0x01u,       \/\/!< Select maximum value.$/;"	m	class:CondCode::FpuStatusWord::FpuControlWord::CmpImm::PCmpStrImm::RoundImm::VCmpImm::VFixupImm::VFPClassImm::VGetMantImm::VPCmpImm::VPComImm::VRangeImm
kSelectMin	external/asmjit/src/asmjit/x86/x86globals.h	/^  kSelectMin     = 0x00u,       \/\/!< Select minimum value.$/;"	m	class:CondCode::FpuStatusWord::FpuControlWord::CmpImm::PCmpStrImm::RoundImm::VCmpImm::VFixupImm::VFPClassImm::VGetMantImm::VPCmpImm::VPComImm::VRangeImm
kSentinel	external/asmjit/src/asmjit/core/builder.h	/^  kSentinel = 10,$/;"	m	class:NodeType
kShort	external/asmjit/src/asmjit/core/archtraits.h	/^  kShort,$/;"	m	class:Arch::SubArch::ArchTypeNameId
kShortForm	external/asmjit/src/asmjit/core/inst.h	/^  kShortForm = 0x00000010u,$/;"	m	class:InstIdParts::InstOptions
kShowSign	external/asmjit/src/asmjit/core/string.h	/^  kShowSign = 0x00000001u,$/;"	m	class:StringFormatFlags
kShowSpace	external/asmjit/src/asmjit/core/string.h	/^  kShowSpace = 0x00000002u,$/;"	m	class:StringFormatFlags
kSign	external/asmjit/src/asmjit/core/archcommons.h	/^  kSign           = kMI,        \/\/!< Sign.$/;"	m	class:CondCode
kSign	external/asmjit/src/asmjit/x86/x86globals.h	/^  kSign          = kS,          \/\/!< Sign flag.$/;"	m	class:CondCode
kSign0	external/asmjit/src/asmjit/x86/x86globals.h	/^  kSign0         = 0x08u,       \/\/!< Set sign to 0.$/;"	m	class:CondCode::FpuStatusWord::FpuControlWord::CmpImm::PCmpStrImm::RoundImm::VCmpImm::VFixupImm::VFPClassImm::VGetMantImm::VPCmpImm::VPComImm::VRangeImm
kSign1	external/asmjit/src/asmjit/x86/x86globals.h	/^  kSign1         = 0x0Cu        \/\/!< Set sign to 1.$/;"	m	class:CondCode::FpuStatusWord::FpuControlWord::CmpImm::PCmpStrImm::RoundImm::VCmpImm::VFixupImm::VFPClassImm::VGetMantImm::VPCmpImm::VPComImm::VRangeImm
kSignSrc1	external/asmjit/src/asmjit/x86/x86globals.h	/^  kSignSrc1      = 0x00u,       \/\/!< Select sign of SRC1.$/;"	m	class:CondCode::FpuStatusWord::FpuControlWord::CmpImm::PCmpStrImm::RoundImm::VCmpImm::VFixupImm::VFPClassImm::VGetMantImm::VPCmpImm::VPComImm::VRangeImm
kSignSrc2	external/asmjit/src/asmjit/x86/x86globals.h	/^  kSignSrc2      = 0x04u,       \/\/!< Select sign of SRC2.$/;"	m	class:CondCode::FpuStatusWord::FpuControlWord::CmpImm::PCmpStrImm::RoundImm::VCmpImm::VFixupImm::VFPClassImm::VGetMantImm::VPCmpImm::VPComImm::VRangeImm
kSignature	external/asmjit/src/asmjit/core/operand.h	/^    kSignature = 0$/;"	m	struct:OperandType::RegType::RegGroup::BaseRegTraits	typeref:enum:OperandType::RegType::RegGroup::BaseRegTraits::
kSigned	external/asmjit/src/asmjit/core/string.h	/^  kSigned = 0x80000000u$/;"	m	class:StringFormatFlags
kSignedGE	external/asmjit/src/asmjit/core/archcommons.h	/^  kSignedGE       = kGE,        \/\/!< Signed    `a >= b`.$/;"	m	class:CondCode
kSignedGE	external/asmjit/src/asmjit/x86/x86globals.h	/^  kSignedGE      = kGE,         \/\/!< `a >= b` (signed).$/;"	m	class:CondCode
kSignedGT	external/asmjit/src/asmjit/core/archcommons.h	/^  kSignedGT       = kGT,        \/\/!< Signed    `a >  b`.$/;"	m	class:CondCode
kSignedGT	external/asmjit/src/asmjit/x86/x86globals.h	/^  kSignedGT      = kG,          \/\/!< `a >  b` (signed).$/;"	m	class:CondCode
kSignedLE	external/asmjit/src/asmjit/core/archcommons.h	/^  kSignedLE       = kLE,        \/\/!< Signed    `a <= b`.$/;"	m	class:CondCode
kSignedLE	external/asmjit/src/asmjit/x86/x86globals.h	/^  kSignedLE      = kLE,         \/\/!< `a <= b` (signed).$/;"	m	class:CondCode
kSignedLT	external/asmjit/src/asmjit/core/archcommons.h	/^  kSignedLT       = kLT,        \/\/!< Signed    `a <  b`.$/;"	m	class:CondCode
kSignedLT	external/asmjit/src/asmjit/x86/x86globals.h	/^  kSignedLT      = kL,          \/\/!< `a <  b` (signed).$/;"	m	class:CondCode
kSignedOffset	external/asmjit/src/asmjit/core/codeholder.h	/^  kSignedOffset,$/;"	m	class:ExpressionOpType::ExpressionValueType::SectionFlags::CopySectionFlags::OffsetType
kSimple	external/asmjit/src/asmjit/core/radefs_p.h	/^  kSimple  = 0,$/;"	m	class:RAStrategyType
kSize	external/asmjit/src/asmjit/core/operand.h	/^    kSize = 0,$/;"	m	struct:OperandType::RegType::RegGroup::BaseRegTraits	typeref:enum:OperandType::RegType::RegGroup::BaseRegTraits::
kSize	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^  enum { kSize = 256 };$/;"	e	enum:X86Test_AllocStack::__anon23	file:
kSize	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^  enum { kSize = 256 };$/;"	e	enum:X86Test_FuncCallBase2::__anon26	file:
kSizeMask	external/asmjit/src/asmjit/core/operand.h	/^    kSizeMask = 0xFFu << kSizeShift$/;"	m	struct:OperandType::RegType::RegGroup::OperandSignature	typeref:enum:OperandType::RegType::RegGroup::OperandSignature::
kSizeShift	external/asmjit/src/asmjit/arm/a64assembler.cpp	/^    kSizeShift = 2,$/;"	m	struct:SizeOp	typeref:enum:SizeOp::	file:
kSizeShift	external/asmjit/src/asmjit/core/operand.h	/^    kSizeShift = 24,$/;"	m	struct:OperandType::RegType::RegGroup::OperandSignature	typeref:enum:OperandType::RegType::RegGroup::OperandSignature::
kSll	external/asmjit/src/asmjit/core/codeholder.h	/^  kSll = 3,$/;"	m	class:ExpressionOpType
kSoft	external/asmjit/src/asmjit/core/globals.h	/^  kSoft = 0,$/;"	m	class:ByteOrder::ResetPolicy
kSoftFloat	external/asmjit/src/asmjit/core/func.h	/^  kSoftFloat = 9,$/;"	m	class:CallConvId
kSpecialCount	external/asmjit/src/asmjit/x86/x86formatter.cpp	/^    kSpecialCount = X == uint32_t(RegType::kX86_GpbLo) ? 8   :$/;"	e	enum:RegFormatInfo_T::__anon2	file:
kSpecialIndex	external/asmjit/src/asmjit/x86/x86formatter.cpp	/^    kSpecialIndex = X == uint32_t(RegType::kX86_GpbLo) ? 96  :$/;"	e	enum:RegFormatInfo_T::__anon2	file:
kSra	external/asmjit/src/asmjit/core/codeholder.h	/^  kSra = 5$/;"	m	class:ExpressionOpType
kSrcSign	external/asmjit/src/asmjit/x86/x86globals.h	/^  kSrcSign       = 0x00u,       \/\/!< Source sign.$/;"	m	class:CondCode::FpuStatusWord::FpuControlWord::CmpImm::PCmpStrImm::RoundImm::VCmpImm::VFixupImm::VFPClassImm::VGetMantImm
kSrl	external/asmjit/src/asmjit/core/codeholder.h	/^  kSrl = 4,$/;"	m	class:ExpressionOpType
kStackArgToStack	external/asmjit/src/asmjit/core/radefs_p.h	/^  kStackArgToStack = 0x00000040u$/;"	m	class:RAStrategyType::RAStrategyFlags::RATiedFlags::RAWorkRegFlags
kStackFault	external/asmjit/src/asmjit/x86/x86globals.h	/^  kStackFault    = 0x0040u,     \/\/!< Stack fault.$/;"	m	class:CondCode::FpuStatusWord
kStackOffsetMask	external/asmjit/src/asmjit/core/func.h	/^    kStackOffsetMask  = 0xFFFFF000u,   \/\/!< Stack offset mask (must occupy MSB bits).$/;"	m	struct:CallConvId::CallConvStrategy::CallConvFlags::FuncValue	typeref:enum:CallConvId::CallConvStrategy::CallConvFlags::FuncValue::
kStackOffsetShift	external/asmjit/src/asmjit/core/func.h	/^    kStackOffsetShift = 12,            \/\/!< Stack offset shift.$/;"	m	struct:CallConvId::CallConvStrategy::CallConvFlags::FuncValue	typeref:enum:CallConvId::CallConvStrategy::CallConvFlags::FuncValue::
kStackPreferred	external/asmjit/src/asmjit/core/radefs_p.h	/^  kStackPreferred = 0x00000020u,$/;"	m	class:RAStrategyType::RAStrategyFlags::RATiedFlags::RAWorkRegFlags
kStackUsed	external/asmjit/src/asmjit/core/radefs_p.h	/^  kStackUsed = 0x00000010u,$/;"	m	class:RAStrategyType::RAStrategyFlags::RATiedFlags::RAWorkRegFlags
kStdCall	external/asmjit/src/asmjit/core/func.h	/^  kStdCall = 2,$/;"	m	class:CallConvId
kSub	external/asmjit/src/asmjit/core/codeholder.h	/^  kSub = 1,$/;"	m	class:ExpressionOpType
kSuppress	external/asmjit/src/asmjit/x86/x86globals.h	/^  kSuppress      = 0x08u        \/\/!< Suppress exceptions (avoids inexact exception, if set).$/;"	m	class:CondCode::FpuStatusWord::FpuControlWord::CmpImm::PCmpStrImm::RoundImm
kSuppress	external/asmjit/src/asmjit/x86/x86globals.h	/^  kSuppress      = 0x08u,       \/\/!< Suppress exceptions.$/;"	m	class:CondCode::FpuStatusWord::FpuControlWord::CmpImm::PCmpStrImm::RoundImm::VCmpImm::VFixupImm::VFPClassImm::VGetMantImm::VPCmpImm::VPComImm::VRangeImm::VReduceImm
kSwapped	external/asmjit/src/asmjit/core/globals.h	/^  kSwapped = ASMJIT_ARCH_LE ? kBE : kLE$/;"	m	class:ByteOrder
kSzQ	external/asmjit/src/asmjit/arm/a64assembler.cpp	/^    kSzQ = (0x3u << kSizeShift) | kQ,$/;"	m	struct:SizeOp	typeref:enum:SizeOp::	file:
kSzQS	external/asmjit/src/asmjit/arm/a64assembler.cpp	/^    kSzQS = (0x3u << kSizeShift) | kQ | kS$/;"	m	struct:SizeOp	typeref:enum:SizeOp::	file:
kSzS	external/asmjit/src/asmjit/arm/a64assembler.cpp	/^    kSzS = (0x3u << kSizeShift) | kS,$/;"	m	struct:SizeOp	typeref:enum:SizeOp::	file:
kT4X	external/asmjit/src/asmjit/x86/x86instdb.h	/^  kT4X = 0x00000080u,$/;"	m	class:InstDB::Mode::OpFlags::InstFlags::Avx512Flags
kTBM	external/asmjit/src/asmjit/core/cpuinfo.h	/^      kTBM,                      \/\/!< CPU has TBM              (trailing bit manipulation) {AMD}.$/;"	m	struct:CpuFeatures::X86	typeref:enum:CpuFeatures::X86::
kTHE	external/asmjit/src/asmjit/core/cpuinfo.h	/^      kTHE,                      \/\/!< CPU has THE          (translation hardening extension).$/;"	m	struct:CpuFeatures::ARM	typeref:enum:CpuFeatures::ARM::
kTHUMB	external/asmjit/src/asmjit/core/cpuinfo.h	/^      kTHUMB,                    \/\/!< CPU has THUMB        (16-bit THUMB encoding) {A32}.$/;"	m	struct:CpuFeatures::ARM	typeref:enum:CpuFeatures::ARM::
kTHUMBv2	external/asmjit/src/asmjit/core/cpuinfo.h	/^      kTHUMBv2,                  \/\/!< CPU has THUMBv2      (32-bit THUMB encoding) {A32}.$/;"	m	struct:CpuFeatures::ARM	typeref:enum:CpuFeatures::ARM::
kTME	external/asmjit/src/asmjit/core/cpuinfo.h	/^      kTME,                      \/\/!< CPU has TME          (transactional memory extensions).$/;"	m	struct:CpuFeatures::ARM	typeref:enum:CpuFeatures::ARM::
kTRF	external/asmjit/src/asmjit/core/cpuinfo.h	/^      kTRF,                      \/\/!< CPU has TRF          (trace extension).$/;"	m	struct:CpuFeatures::ARM	typeref:enum:CpuFeatures::ARM::
kTRUE	external/asmjit/src/asmjit/x86/x86globals.h	/^  kTRUE          = 0x07u        \/\/!< True.$/;"	m	class:CondCode::FpuStatusWord::FpuControlWord::CmpImm::PCmpStrImm::RoundImm::VCmpImm::VFixupImm::VFPClassImm::VGetMantImm::VPCmpImm
kTRUE	external/asmjit/src/asmjit/x86/x86globals.h	/^  kTRUE          = 0x07u        \/\/!< True.$/;"	m	class:CondCode::FpuStatusWord::FpuControlWord::CmpImm::PCmpStrImm::RoundImm::VCmpImm::VFixupImm::VFPClassImm::VGetMantImm::VPCmpImm::VPComImm
kTRUE_UQ	external/asmjit/src/asmjit/x86/x86globals.h	/^  kTRUE_UQ       = 0x0Fu,       \/\/!< True              (Quiet    , Unordered).$/;"	m	class:CondCode::FpuStatusWord::FpuControlWord::CmpImm::PCmpStrImm::RoundImm::VCmpImm
kTRUE_US	external/asmjit/src/asmjit/x86/x86globals.h	/^  kTRUE_US       = 0x1Fu        \/\/!< True              (Signaling, Unordered).$/;"	m	class:CondCode::FpuStatusWord::FpuControlWord::CmpImm::PCmpStrImm::RoundImm::VCmpImm
kTSE	external/asmjit/src/asmjit/core/cpuinfo.h	/^      kTSE,                      \/\/!< CPU has TSE.$/;"	m	struct:CpuFeatures::X86	typeref:enum:CpuFeatures::X86::
kTSX	external/asmjit/src/asmjit/core/cpuinfo.h	/^      kTSX,                      \/\/!< CPU has TSX.$/;"	m	struct:CpuFeatures::X86	typeref:enum:CpuFeatures::X86::
kTSXLDTRK	external/asmjit/src/asmjit/core/cpuinfo.h	/^      kTSXLDTRK,                 \/\/!< CPU has TSXLDTRK.$/;"	m	struct:CpuFeatures::X86	typeref:enum:CpuFeatures::X86::
kTVOS	external/asmjit/src/asmjit/core/environment.h	/^  kTVOS,$/;"	m	class:Vendor::Platform
kTWISTER	external/asmjit/src/asmjit/core/cpuinfo.cpp	/^  kTWISTER            = 0x92FB37C8u, \/\/ Apple A9 (ARMv8.0-A).$/;"	m	class:arm::AppleFamilyId	file:
kTYPHOON	external/asmjit/src/asmjit/core/cpuinfo.cpp	/^  kTYPHOON            = 0x2C91A47Eu, \/\/ Apple A8 (ARMv8.0-A).$/;"	m	class:arm::AppleFamilyId	file:
kTableAny	external/asmjit/src/asmjit/arm/a64assembler.cpp	/^    kTableAny,$/;"	m	struct:SizeOpTable	typeref:enum:SizeOpTable::	file:
kTaken	external/asmjit/src/asmjit/core/inst.h	/^  kTaken = 0x00000040u,$/;"	m	class:InstIdParts::InstOptions
kThisCall	external/asmjit/src/asmjit/core/func.h	/^  kThisCall = 5,$/;"	m	class:CallConvId
kThumb	external/asmjit/src/asmjit/core/archtraits.h	/^  kThumb = 7,$/;"	m	class:Arch
kThumb_BE	external/asmjit/src/asmjit/core/archtraits.h	/^  kThumb_BE = 13,$/;"	m	class:Arch
kTopMask	external/asmjit/src/asmjit/x86/x86globals.h	/^  kTopMask       = 0x3800u,     \/\/!< Top of the stack (mask).$/;"	m	class:CondCode::FpuStatusWord
kTrunc	external/asmjit/src/asmjit/x86/x86globals.h	/^  kTrunc         = 0x03u,       \/\/!< Round toward zero (truncate).$/;"	m	class:CondCode::FpuStatusWord::FpuControlWord::CmpImm::PCmpStrImm::RoundImm
kTsib	external/asmjit/src/asmjit/x86/x86instdb.h	/^  kTsib = 0x00200000u,$/;"	m	class:InstDB::Mode::OpFlags::InstFlags
kType	external/asmjit/src/asmjit/core/operand.h	/^    kType = uint32_t(RegType::kNone),$/;"	m	struct:OperandType::RegType::RegGroup::BaseRegTraits	typeref:enum:OperandType::RegType::RegGroup::BaseRegTraits::
kTypeId	external/asmjit/src/asmjit/core/type.h	/^  static constexpr TypeId kTypeId = _TypeIdDeducedAtCompileTime_;$/;"	m	struct:TypeId::TypeUtils::TypeIdOfT
kTypeIdMask	external/asmjit/src/asmjit/core/func.h	/^    kTypeIdMask       = 0x000000FFu,   \/\/!< TypeId mask.$/;"	m	struct:CallConvId::CallConvStrategy::CallConvFlags::FuncValue	typeref:enum:CallConvId::CallConvStrategy::CallConvFlags::FuncValue::
kTypeIndex	external/asmjit/src/asmjit/x86/x86formatter.cpp	/^    kTypeIndex    = X == uint32_t(RegType::kX86_GpbLo) ? 1   :$/;"	e	enum:RegFormatInfo_T::__anon2	file:
kU16	external/asmjit/src/asmjit/core/archcommons.h	/^  kU16 = 6,$/;"	m	class:CondCode::DataType
kU32	external/asmjit/src/asmjit/core/archcommons.h	/^  kU32 = 7,$/;"	m	class:CondCode::DataType
kU64	external/asmjit/src/asmjit/core/archcommons.h	/^  kU64 = 8,$/;"	m	class:CondCode::DataType
kU8	external/asmjit/src/asmjit/core/archcommons.h	/^  kU8 = 5,$/;"	m	class:CondCode::DataType
kUAO	external/asmjit/src/asmjit/core/cpuinfo.h	/^      kUAO,                      \/\/!< CPU has UAO          (AArch64 v8.2 UAO PState) {A64}.$/;"	m	struct:CpuFeatures::ARM	typeref:enum:CpuFeatures::ARM::
kUB	external/asmjit/src/asmjit/x86/x86globals.h	/^  kUB            = 0x00u << 0,  \/\/!< The source data format is unsigned bytes.$/;"	m	class:CondCode::FpuStatusWord::FpuControlWord::CmpImm::PCmpStrImm
kUINTR	external/asmjit/src/asmjit/core/cpuinfo.h	/^      kUINTR,                    \/\/!< CPU has UINTR            (user interrupts).$/;"	m	struct:CpuFeatures::X86	typeref:enum:CpuFeatures::X86::
kUInt16	external/asmjit/src/asmjit/core/type.h	/^  kUInt16 = 37,$/;"	m	class:TypeId
kUInt16x16	external/asmjit/src/asmjit/core/type.h	/^  kUInt16x16 = 84,$/;"	m	class:TypeId
kUInt16x2	external/asmjit/src/asmjit/core/type.h	/^  kUInt16x2 = 54,$/;"	m	class:TypeId
kUInt16x32	external/asmjit/src/asmjit/core/type.h	/^  kUInt16x32 = 94,$/;"	m	class:TypeId
kUInt16x4	external/asmjit/src/asmjit/core/type.h	/^  kUInt16x4 = 64,$/;"	m	class:TypeId
kUInt16x8	external/asmjit/src/asmjit/core/type.h	/^  kUInt16x8 = 74,$/;"	m	class:TypeId
kUInt32	external/asmjit/src/asmjit/core/type.h	/^  kUInt32 = 39,$/;"	m	class:TypeId
kUInt32x1	external/asmjit/src/asmjit/core/type.h	/^  kUInt32x1 = 56,$/;"	m	class:TypeId
kUInt32x16	external/asmjit/src/asmjit/core/type.h	/^  kUInt32x16 = 96,$/;"	m	class:TypeId
kUInt32x2	external/asmjit/src/asmjit/core/type.h	/^  kUInt32x2 = 66,$/;"	m	class:TypeId
kUInt32x4	external/asmjit/src/asmjit/core/type.h	/^  kUInt32x4 = 76,$/;"	m	class:TypeId
kUInt32x8	external/asmjit/src/asmjit/core/type.h	/^  kUInt32x8 = 86,$/;"	m	class:TypeId
kUInt64	external/asmjit/src/asmjit/core/type.h	/^  kUInt64 = 41,$/;"	m	class:TypeId
kUInt64x1	external/asmjit/src/asmjit/core/type.h	/^  kUInt64x1 = 68,$/;"	m	class:TypeId
kUInt64x2	external/asmjit/src/asmjit/core/type.h	/^  kUInt64x2 = 78,$/;"	m	class:TypeId
kUInt64x4	external/asmjit/src/asmjit/core/type.h	/^  kUInt64x4 = 88,$/;"	m	class:TypeId
kUInt64x8	external/asmjit/src/asmjit/core/type.h	/^  kUInt64x8 = 98,$/;"	m	class:TypeId
kUInt8	external/asmjit/src/asmjit/core/type.h	/^  kUInt8 = 35,$/;"	m	class:TypeId
kUInt8x16	external/asmjit/src/asmjit/core/type.h	/^  kUInt8x16 = 72,$/;"	m	class:TypeId
kUInt8x32	external/asmjit/src/asmjit/core/type.h	/^  kUInt8x32 = 82,$/;"	m	class:TypeId
kUInt8x4	external/asmjit/src/asmjit/core/type.h	/^  kUInt8x4 = 52,$/;"	m	class:TypeId
kUInt8x64	external/asmjit/src/asmjit/core/type.h	/^  kUInt8x64 = 92,$/;"	m	class:TypeId
kUInt8x8	external/asmjit/src/asmjit/core/type.h	/^  kUInt8x8 = 62,$/;"	m	class:TypeId
kUIntPtr	external/asmjit/src/asmjit/core/type.h	/^  kUIntPtr = 33,$/;"	m	class:TypeId
kUNORD	external/asmjit/src/asmjit/x86/x86globals.h	/^  kUNORD         = 0x03u,       \/\/!< Unordered (Quiet), same as \\ref VCmpImm::kUNORD_Q.$/;"	m	class:CondCode::FpuStatusWord::FpuControlWord::CmpImm
kUNORD_Q	external/asmjit/src/asmjit/x86/x86globals.h	/^  kUNORD_Q       = 0x03u,       \/\/!< Unordered         (Quiet)               , same as \\ref CmpImm::kUNORD.$/;"	m	class:CondCode::FpuStatusWord::FpuControlWord::CmpImm::PCmpStrImm::RoundImm::VCmpImm
kUNORD_S	external/asmjit/src/asmjit/x86/x86globals.h	/^  kUNORD_S       = 0x13u,       \/\/!< Unordered         (Signaling).$/;"	m	class:CondCode::FpuStatusWord::FpuControlWord::CmpImm::PCmpStrImm::RoundImm::VCmpImm
kUW	external/asmjit/src/asmjit/x86/x86globals.h	/^  kUW            = 0x01u << 0,  \/\/!< The source data format is unsigned words.$/;"	m	class:CondCode::FpuStatusWord::FpuControlWord::CmpImm::PCmpStrImm
kUXTB	external/asmjit/src/asmjit/core/archcommons.h	/^  kUXTB = 0x06u,$/;"	m	class:CondCode::DataType::ShiftOp
kUXTH	external/asmjit/src/asmjit/core/archcommons.h	/^  kUXTH = 0x07u,$/;"	m	class:CondCode::DataType::ShiftOp
kUXTW	external/asmjit/src/asmjit/core/archcommons.h	/^  kUXTW = 0x08u,$/;"	m	class:CondCode::DataType::ShiftOp
kUXTX	external/asmjit/src/asmjit/core/archcommons.h	/^  kUXTX = 0x09u,$/;"	m	class:CondCode::DataType::ShiftOp
kUnderflow	external/asmjit/src/asmjit/x86/x86globals.h	/^  kUnderflow     = 0x0010u,     \/\/!< Underflown.$/;"	m	class:CondCode::FpuStatusWord
kUnfollow	external/asmjit/src/asmjit/core/inst.h	/^  kUnfollow = 0x00000002u,$/;"	m	class:InstIdParts::InstOptions
kUnique	external/asmjit/src/asmjit/core/inst.h	/^  kUnique = 0x00000080u,$/;"	m	class:InstIdParts::InstOptions::InstControlFlow::InstSameRegHint::CpuRWFlags::OpRWFlags
kUnique	external/asmjit/src/asmjit/core/radefs_p.h	/^  kUnique = 0x00008000u,$/;"	m	class:RAStrategyType::RAStrategyFlags::RATiedFlags
kUnknown	external/asmjit/src/asmjit/core/archtraits.h	/^  kUnknown = 0,$/;"	m	class:Arch
kUnknown	external/asmjit/src/asmjit/core/archtraits.h	/^  kUnknown = 0,$/;"	m	class:Arch::SubArch
kUnknown	external/asmjit/src/asmjit/core/builder.h	/^  kUnknown = 0u,$/;"	m	class:NodeType::NodeFlags::SentinelType
kUnknown	external/asmjit/src/asmjit/core/environment.h	/^  kUnknown = 0,$/;"	m	class:Vendor
kUnknown	external/asmjit/src/asmjit/core/environment.h	/^  kUnknown = 0,$/;"	m	class:Vendor::Platform
kUnknown	external/asmjit/src/asmjit/core/environment.h	/^  kUnknown = 0,$/;"	m	class:Vendor::Platform::PlatformABI
kUnknown	external/asmjit/src/asmjit/core/environment.h	/^  kUnknown = 0,$/;"	m	class:Vendor::Platform::PlatformABI::ObjectFormat
kUnsignedGE	external/asmjit/src/asmjit/core/archcommons.h	/^  kUnsignedGE     = kHS,        \/\/!< Unsigned  `a >= b`.$/;"	m	class:CondCode
kUnsignedGE	external/asmjit/src/asmjit/x86/x86globals.h	/^  kUnsignedGE    = kAE,         \/\/!< `a >= b` (unsigned).$/;"	m	class:CondCode
kUnsignedGT	external/asmjit/src/asmjit/core/archcommons.h	/^  kUnsignedGT     = kHI,        \/\/!< Unsigned  `a >  b`.$/;"	m	class:CondCode
kUnsignedGT	external/asmjit/src/asmjit/x86/x86globals.h	/^  kUnsignedGT    = kA,          \/\/!< `a >  b` (unsigned).$/;"	m	class:CondCode
kUnsignedLE	external/asmjit/src/asmjit/core/archcommons.h	/^  kUnsignedLE     = kLS,        \/\/!< Unsigned  `a <= b`.$/;"	m	class:CondCode
kUnsignedLE	external/asmjit/src/asmjit/x86/x86globals.h	/^  kUnsignedLE    = kBE,         \/\/!< `a <= b` (unsigned).$/;"	m	class:CondCode
kUnsignedLT	external/asmjit/src/asmjit/core/archcommons.h	/^  kUnsignedLT     = kLO,        \/\/!< Unsigned  `a <  b`.$/;"	m	class:CondCode
kUnsignedLT	external/asmjit/src/asmjit/x86/x86globals.h	/^  kUnsignedLT    = kB,          \/\/!< `a <  b` (unsigned).$/;"	m	class:CondCode
kUnsignedOffset	external/asmjit/src/asmjit/core/codeholder.h	/^  kUnsignedOffset,$/;"	m	class:ExpressionOpType::ExpressionValueType::SectionFlags::CopySectionFlags::OffsetType
kUp	external/asmjit/src/asmjit/x86/x86globals.h	/^  kUp            = 0x02u,       \/\/!< Round to up toward +INF (ceil).$/;"	m	class:CondCode::FpuStatusWord::FpuControlWord::CmpImm::PCmpStrImm::RoundImm
kUse	external/asmjit/src/asmjit/core/radefs_p.h	/^  kUse = 0x00000004u,$/;"	m	class:RAStrategyType::RAStrategyFlags::RATiedFlags
kUseConsecutive	external/asmjit/src/asmjit/core/radefs_p.h	/^  kUseConsecutive = 0x00000400u,$/;"	m	class:RAStrategyType::RAStrategyFlags::RATiedFlags
kUseDone	external/asmjit/src/asmjit/core/radefs_p.h	/^  kUseDone = 0x00000100u,$/;"	m	class:RAStrategyType::RAStrategyFlags::RATiedFlags
kUseDualMapping	external/asmjit/src/asmjit/core/jitallocator.h	/^  kUseDualMapping = 0x00000001u,$/;"	m	class:JitAllocatorOptions
kUseFixed	external/asmjit/src/asmjit/core/radefs_p.h	/^  kUseFixed = 0x00000040u,$/;"	m	class:RAStrategyType::RAStrategyFlags::RATiedFlags
kUseLargePages	external/asmjit/src/asmjit/core/jitallocator.h	/^  kUseLargePages = 0x00000020u,$/;"	m	class:JitAllocatorOptions
kUseMultiplePools	external/asmjit/src/asmjit/core/jitallocator.h	/^  kUseMultiplePools = 0x00000002u,$/;"	m	class:JitAllocatorOptions
kUseRM	external/asmjit/src/asmjit/core/radefs_p.h	/^  kUseRM = 0x00000010u,$/;"	m	class:RAStrategyType::RAStrategyFlags::RATiedFlags
kUser	external/asmjit/src/asmjit/core/builder.h	/^  kUser = 32$/;"	m	class:NodeType
kVAES	external/asmjit/src/asmjit/core/cpuinfo.h	/^      kVAES,                     \/\/!< CPU has VAES             (vector AES 256|512 bit support).$/;"	m	struct:CpuFeatures::X86	typeref:enum:CpuFeatures::X86::
kVC	external/asmjit/src/asmjit/core/archcommons.h	/^  kVC             = 0x09u,      \/\/!<               V==0  (no overflow)$/;"	m	class:CondCode
kVFP_D32	external/asmjit/src/asmjit/core/cpuinfo.h	/^      kVFP_D32,                  \/\/!< CPU has VFP_D32      (32 VFP-D registers) (ARM\/THUMB only).$/;"	m	struct:CpuFeatures::ARM	typeref:enum:CpuFeatures::ARM::
kVHE	external/asmjit/src/asmjit/core/cpuinfo.h	/^      kVHE,                      \/\/!< CPU has VHE          (virtual host extension).$/;"	m	struct:CpuFeatures::ARM	typeref:enum:CpuFeatures::ARM::
kVMX	external/asmjit/src/asmjit/core/cpuinfo.h	/^      kVMX,                      \/\/!< CPU has VMX              (virtualization) {INTEL}.$/;"	m	struct:CpuFeatures::X86	typeref:enum:CpuFeatures::X86::
kVORTEX_TEMPEST	external/asmjit/src/asmjit/core/cpuinfo.cpp	/^  kVORTEX_TEMPEST     = 0x07D34B9Fu, \/\/ Apple A12 (ARMv8.3-A).$/;"	m	class:arm::AppleFamilyId	file:
kVPCLMULQDQ	external/asmjit/src/asmjit/core/cpuinfo.h	/^      kVPCLMULQDQ,               \/\/!< CPU has VPCLMULQDQ       (vector PCLMULQDQ 256|512-bit support).$/;"	m	struct:CpuFeatures::X86	typeref:enum:CpuFeatures::X86::
kVS	external/asmjit/src/asmjit/core/archcommons.h	/^  kVS             = 0x08u,      \/\/!<               V==1  (is overflow)$/;"	m	class:CondCode
kValid	external/asmjit/src/asmjit/core/operand.h	/^    kValid = 0,$/;"	m	struct:OperandType::RegType::RegGroup::BaseRegTraits	typeref:enum:OperandType::RegType::RegGroup::BaseRegTraits::
kValidateAssembler	external/asmjit/src/asmjit/core/emitter.h	/^  kValidateAssembler = 0x00000001u,$/;"	m	class:AlignMode::EmitterType::EmitterFlags::EncodingOptions::DiagnosticOptions
kValidateIntermediate	external/asmjit/src/asmjit/core/emitter.h	/^  kValidateIntermediate = 0x00000002u,$/;"	m	class:AlignMode::EmitterType::EmitterFlags::EncodingOptions::DiagnosticOptions
kValue	external/asmjit/src/asmjit/x86/x86assembler.cpp	/^    kValue = ((B == Gp::kIdBx && I == Gp::kIdSi) || (B == Gp::kIdSi && I == Gp::kIdBx)) ? 0x00 :$/;"	e	enum:X86Mod16BaseIndexTable_T::__anon4	file:
kValue	external/asmjit/src/asmjit/x86/x86assembler.cpp	/^    kValue = (TT == Opcode::kCDTT_None ? ((LL==0) ? 0 : (LL==1) ? 0   : 0  ) :$/;"	e	enum:X86CDisp8SHL_T::__anon3	file:
kValue	external/asmjit/src/asmjit/x86/x86assembler.cpp	/^    kValue = kBase | kIndex | k67H | 0x04 | 0x08$/;"	m	struct:X86MemInfo_T	typeref:enum:X86MemInfo_T::	file:
kValue0	external/asmjit/src/asmjit/core/operand.cpp	/^  kValue0,$/;"	m	class:StrongEnumForImmTests	file:
kValue0xFFFFFFFF	external/asmjit/src/asmjit/core/operand.cpp	/^  kValue0xFFFFFFFF = 0xFFFFFFFFu$/;"	m	class:StrongEnumForImmTests	file:
kVarArgCompatible	external/asmjit/src/asmjit/core/func.h	/^  kVarArgCompatible = 0x0080u$/;"	m	class:CallConvId::CallConvStrategy::CallConvFlags
kVec	external/asmjit/src/asmjit/core/operand.h	/^  kVec = 1,$/;"	m	class:OperandType::RegType::RegGroup
kVec	external/asmjit/src/asmjit/x86/x86instdb.h	/^  kVec = 0x00000400u,$/;"	m	class:InstDB::Mode::OpFlags::InstFlags
kVec1024	external/asmjit/src/asmjit/core/operand.h	/^  kVec1024 = 15,$/;"	m	class:OperandType::RegType
kVec128	external/asmjit/src/asmjit/core/operand.h	/^  kVec128 = 12,$/;"	m	class:OperandType::RegType
kVec16	external/asmjit/src/asmjit/core/operand.h	/^  kVec16 = 9,$/;"	m	class:OperandType::RegType
kVec256	external/asmjit/src/asmjit/core/operand.h	/^  kVec256 = 13,$/;"	m	class:OperandType::RegType
kVec32	external/asmjit/src/asmjit/core/operand.h	/^  kVec32 = 10,$/;"	m	class:OperandType::RegType
kVec512	external/asmjit/src/asmjit/core/operand.h	/^  kVec512 = 14,$/;"	m	class:OperandType::RegType
kVec64	external/asmjit/src/asmjit/core/operand.h	/^  kVec64 = 11,$/;"	m	class:OperandType::RegType
kVec8	external/asmjit/src/asmjit/core/operand.h	/^  kVec8 = 8,$/;"	m	class:OperandType::RegType
kVecNLen	external/asmjit/src/asmjit/core/operand.h	/^  kVecNLen = 16,$/;"	m	class:OperandType::RegType
kVectorCall	external/asmjit/src/asmjit/core/func.h	/^  kVectorCall = 4,$/;"	m	class:CallConvId
kVex	external/asmjit/src/asmjit/x86/x86instdb.h	/^  kVex = 0x00400000u,$/;"	m	class:InstDB::Mode::OpFlags::InstFlags
kVexVVVVVMask	external/asmjit/src/asmjit/x86/x86assembler.cpp	/^  kVexVVVVVMask = 0x1F << kVexVVVVVShift$/;"	e	enum:uint32_t	file:
kVexVVVVVShift	external/asmjit/src/asmjit/x86/x86assembler.cpp	/^  kVexVVVVVShift = 7,$/;"	e	enum:uint32_t	file:
kVirtIdCount	external/asmjit/src/asmjit/core/operand.h	/^    kVirtIdCount = uint32_t(kVirtIdMax - kVirtIdMin + 1)$/;"	m	struct:OperandType::RegType::RegGroup::Operand_	typeref:enum:OperandType::RegType::RegGroup::Operand_::
kVirtIdMax	external/asmjit/src/asmjit/core/operand.h	/^    kVirtIdMax = Globals::kInvalidId - 1,$/;"	m	struct:OperandType::RegType::RegGroup::Operand_	typeref:enum:OperandType::RegType::RegGroup::Operand_::
kVm32x	external/asmjit/src/asmjit/x86/x86instdb.h	/^  kVm32x           = 0x0000000040000000u, \/\/!< Operand can be a vm32x (vector) pointer.$/;"	m	class:InstDB::Mode::OpFlags
kVm32y	external/asmjit/src/asmjit/x86/x86instdb.h	/^  kVm32y           = 0x0000000080000000u, \/\/!< Operand can be a vm32y (vector) pointer.$/;"	m	class:InstDB::Mode::OpFlags
kVm32z	external/asmjit/src/asmjit/x86/x86instdb.h	/^  kVm32z           = 0x0000000100000000u, \/\/!< Operand can be a vm32z (vector) pointer.$/;"	m	class:InstDB::Mode::OpFlags
kVm64x	external/asmjit/src/asmjit/x86/x86instdb.h	/^  kVm64x           = 0x0000000200000000u, \/\/!< Operand can be a vm64x (vector) pointer.$/;"	m	class:InstDB::Mode::OpFlags
kVm64y	external/asmjit/src/asmjit/x86/x86instdb.h	/^  kVm64y           = 0x0000000400000000u, \/\/!< Operand can be a vm64y (vector) pointer.$/;"	m	class:InstDB::Mode::OpFlags
kVm64z	external/asmjit/src/asmjit/x86/x86instdb.h	/^  kVm64z           = 0x0000000800000000u, \/\/!< Operand can be a vm64z (vector) pointer.$/;"	m	class:InstDB::Mode::OpFlags
kVmMask	external/asmjit/src/asmjit/x86/x86instdb.h	/^  kVmMask          = 0x0000000FC0000000u, \/\/!< Mask of all possible vector memory types.$/;"	m	class:InstDB::Mode::OpFlags
kVoid	external/asmjit/src/asmjit/core/type.h	/^  kVoid = 0,$/;"	m	class:TypeId
kVsib	external/asmjit/src/asmjit/x86/x86instdb.h	/^  kVsib = 0x00100000u,$/;"	m	class:InstDB::Mode::OpFlags::InstFlags
kW	external/asmjit/src/asmjit/arm/a64instdb_p.h	/^static constexpr uint32_t kW = 0x1;$/;"	m	namespace:InstDB
kW	external/asmjit/src/asmjit/x86/x86opcode_p.h	/^    kW             = 0x08u << kREX_Shift,$/;"	m	struct:Opcode	typeref:enum:Opcode::
kWAITPKG	external/asmjit/src/asmjit/core/cpuinfo.h	/^      kWAITPKG,                  \/\/!< CPU has WAITPKG          (UMONITOR, UMWAIT, TPAUSE).$/;"	m	struct:CpuFeatures::X86	typeref:enum:CpuFeatures::X86::
kWBNOINVD	external/asmjit/src/asmjit/core/cpuinfo.h	/^      kWBNOINVD,                 \/\/!< CPU has WBNOINVD.$/;"	m	struct:CpuFeatures::X86	typeref:enum:CpuFeatures::X86::
kWFXT	external/asmjit/src/asmjit/core/cpuinfo.h	/^      kWFXT,                     \/\/!< CPU has WFxT         (WFE and WFI instructions with timeout) {A64}.$/;"	m	struct:CpuFeatures::ARM	typeref:enum:CpuFeatures::ARM::
kWO	external/asmjit/src/asmjit/core/inst.h	/^  kWO = 2$/;"	m	class:InstIdParts::InstOptions::InstControlFlow::InstSameRegHint
kWRMSRNS	external/asmjit/src/asmjit/core/cpuinfo.h	/^      kWRMSRNS,                  \/\/!< CPU has WRMSRNS.$/;"	m	struct:CpuFeatures::X86	typeref:enum:CpuFeatures::X86::
kWX	external/asmjit/src/asmjit/arm/a64assembler.cpp	/^static constexpr uint32_t kWX = InstDB::kWX;$/;"	v	file:
kWX	external/asmjit/src/asmjit/arm/a64instdb_p.h	/^static constexpr uint32_t kWX = 0x3;$/;"	m	namespace:InstDB
kW_0	external/asmjit/src/asmjit/x86/x86opcode_p.h	/^    kW_0           = 0u << kW_Shift,       \/\/ REX.W\/VEX.W is 0 (W0).$/;"	m	struct:Opcode	typeref:enum:Opcode::
kW_1	external/asmjit/src/asmjit/x86/x86opcode_p.h	/^    kW_1           = 1u << kW_Shift,       \/\/ REX.W\/VEX.W is 1 (W1).$/;"	m	struct:Opcode	typeref:enum:Opcode::
kW_I	external/asmjit/src/asmjit/x86/x86opcode_p.h	/^    kW_I           = 0u << kW_Shift,       \/\/ REX.W\/VEX.W is ignored (WIG).$/;"	m	struct:Opcode	typeref:enum:Opcode::
kW_Shift	external/asmjit/src/asmjit/x86/x86opcode_p.h	/^    kW_Shift       = kREX_Shift + 3,$/;"	m	struct:Opcode	typeref:enum:Opcode::
kW__	external/asmjit/src/asmjit/x86/x86opcode_p.h	/^    kW__           = 0u << kW_Shift,       \/\/ REX.W\/VEX.W is unspecified.$/;"	m	struct:Opcode	typeref:enum:Opcode::
kW_x	external/asmjit/src/asmjit/x86/x86opcode_p.h	/^    kW_x           = 0u << kW_Shift,       \/\/ REX.W\/VEX.W is based on instruction operands.$/;"	m	struct:Opcode	typeref:enum:Opcode::
kWatchOS	external/asmjit/src/asmjit/core/environment.h	/^  kWatchOS,$/;"	m	class:Vendor::Platform
kWindows	external/asmjit/src/asmjit/core/environment.h	/^  kWindows,$/;"	m	class:Vendor::Platform
kWord	external/asmjit/src/asmjit/core/archtraits.h	/^  kWord,$/;"	m	class:Arch::SubArch::ArchTypeNameId
kWrite	external/asmjit/src/asmjit/core/inst.h	/^  kWrite = 0x00000002u,$/;"	m	class:InstIdParts::InstOptions::InstControlFlow::InstSameRegHint::CpuRWFlags::OpRWFlags
kWrite	external/asmjit/src/asmjit/core/radefs_p.h	/^  kWrite = uint32_t(OpRWFlags::kWrite),$/;"	m	class:RAStrategyType::RAStrategyFlags::RATiedFlags
kX	external/asmjit/src/asmjit/arm/a64instdb_p.h	/^static constexpr uint32_t kX = 0x2;$/;"	m	namespace:InstDB
kX	external/asmjit/src/asmjit/x86/x86opcode_p.h	/^    kX             = 0x02u << kREX_Shift,  \/\/ Never stored in DB, used by encoder.$/;"	m	struct:Opcode	typeref:enum:Opcode::
kX64	external/asmjit/src/asmjit/core/archtraits.h	/^  kX64 = 2,$/;"	m	class:Arch
kX64	external/asmjit/src/asmjit/x86/x86instdb.h	/^  kX64 = 0x02u,$/;"	m	class:InstDB::Mode
kX64AddressEntry	external/asmjit/src/asmjit/core/codeholder.h	/^  kX64AddressEntry = 5$/;"	m	class:ExpressionOpType::ExpressionValueType::SectionFlags::CopySectionFlags::OffsetType::RelocType
kX64SystemV	external/asmjit/src/asmjit/core/func.h	/^  kX64SystemV = 32,$/;"	m	class:CallConvId
kX64VectorCall	external/asmjit/src/asmjit/core/func.h	/^  kX64VectorCall = 2,$/;"	m	class:CallConvId::CallConvStrategy
kX64Windows	external/asmjit/src/asmjit/core/func.h	/^  kX64Windows = 1,$/;"	m	class:CallConvId::CallConvStrategy
kX64Windows	external/asmjit/src/asmjit/core/func.h	/^  kX64Windows = 33,$/;"	m	class:CallConvId
kX86	external/asmjit/src/asmjit/core/archtraits.h	/^  kX86 = 1,$/;"	m	class:Arch
kX86	external/asmjit/src/asmjit/x86/x86instdb.h	/^  kX86 = 0x01u,$/;"	m	class:InstDB::Mode
kX86ByteEvex	external/asmjit/src/asmjit/x86/x86assembler.cpp	/^  kX86ByteEvex = 0x62$/;"	e	enum:uint32_t	file:
kX86ByteInvalidRex	external/asmjit/src/asmjit/x86/x86assembler.cpp	/^  kX86ByteInvalidRex = 0x80,$/;"	e	enum:uint32_t	file:
kX86ByteRex	external/asmjit/src/asmjit/x86/x86assembler.cpp	/^  kX86ByteRex = 0x40,$/;"	e	enum:uint32_t	file:
kX86ByteRexW	external/asmjit/src/asmjit/x86/x86assembler.cpp	/^  kX86ByteRexW = 0x08,$/;"	e	enum:uint32_t	file:
kX86ByteVex2	external/asmjit/src/asmjit/x86/x86assembler.cpp	/^  kX86ByteVex2 = 0xC5,$/;"	e	enum:uint32_t	file:
kX86ByteVex3	external/asmjit/src/asmjit/x86/x86assembler.cpp	/^  kX86ByteVex3 = 0xC4,$/;"	e	enum:uint32_t	file:
kX86ByteXop3	external/asmjit/src/asmjit/x86/x86assembler.cpp	/^  kX86ByteXop3 = 0x8F,$/;"	e	enum:uint32_t	file:
kX86MemInfo_0	external/asmjit/src/asmjit/x86/x86assembler.cpp	/^  kX86MemInfo_0         = 0x00,$/;"	e	enum:X86MemInfo_Enum	file:
kX86MemInfo_67H_Mask	external/asmjit/src/asmjit/x86/x86assembler.cpp	/^  kX86MemInfo_67H_Mask  = 0xC0  \/\/!< Contains all address-size override bits.$/;"	e	enum:X86MemInfo_Enum	file:
kX86MemInfo_67H_X64	external/asmjit/src/asmjit/x86/x86assembler.cpp	/^  kX86MemInfo_67H_X64   = 0x80, \/\/!< Address-size override in 64-bit mode.$/;"	e	enum:X86MemInfo_Enum	file:
kX86MemInfo_67H_X86	external/asmjit/src/asmjit/x86/x86assembler.cpp	/^  kX86MemInfo_67H_X86   = 0x40, \/\/!< Address-size override in 32-bit mode.$/;"	e	enum:X86MemInfo_Enum	file:
kX86MemInfo_BaseGp	external/asmjit/src/asmjit/x86/x86assembler.cpp	/^  kX86MemInfo_BaseGp    = 0x01, \/\/!< Has BASE reg, REX.B can be 1, compatible with REX.B byte.$/;"	e	enum:X86MemInfo_Enum	file:
kX86MemInfo_BaseLabel	external/asmjit/src/asmjit/x86/x86assembler.cpp	/^  kX86MemInfo_BaseLabel = 0x10, \/\/!< Base is Label.$/;"	e	enum:X86MemInfo_Enum	file:
kX86MemInfo_BaseRip	external/asmjit/src/asmjit/x86/x86assembler.cpp	/^  kX86MemInfo_BaseRip   = 0x20, \/\/!< Base is RIP.$/;"	e	enum:X86MemInfo_Enum	file:
kX86MemInfo_Index	external/asmjit/src/asmjit/x86/x86assembler.cpp	/^  kX86MemInfo_Index     = 0x02, \/\/!< Has INDEX reg, REX.X can be 1, compatible with REX.X byte.$/;"	e	enum:X86MemInfo_Enum	file:
kX86_AC	external/asmjit/src/asmjit/core/inst.h	/^  kX86_AC = 0x00001000u,$/;"	m	class:InstIdParts::InstOptions::InstControlFlow::InstSameRegHint::CpuRWFlags
kX86_AF	external/asmjit/src/asmjit/core/inst.h	/^  kX86_AF = 0x00000100u,$/;"	m	class:InstIdParts::InstOptions::InstControlFlow::InstSameRegHint::CpuRWFlags
kX86_AVX512Enabled	external/asmjit/src/asmjit/core/func.h	/^  kX86_AVX512Enabled = 0x00020000u,$/;"	m	class:CallConvId::CallConvStrategy::CallConvFlags::FuncAttributes
kX86_AVX512Mask	external/asmjit/src/asmjit/core/inst.h	/^  kX86_AVX512Mask = 0x00FC0000u,$/;"	m	class:InstIdParts::InstOptions
kX86_AVXCleanup	external/asmjit/src/asmjit/core/func.h	/^  kX86_AVXCleanup = 0x00080000u$/;"	m	class:CallConvId::CallConvStrategy::CallConvFlags::FuncAttributes
kX86_AVXEnabled	external/asmjit/src/asmjit/core/func.h	/^  kX86_AVXEnabled = 0x00010000u,$/;"	m	class:CallConvId::CallConvStrategy::CallConvFlags::FuncAttributes
kX86_Bnd	external/asmjit/src/asmjit/core/operand.h	/^  kX86_Bnd = kExtra + 5,$/;"	m	class:OperandType::RegType
kX86_Bnd	external/asmjit/src/asmjit/core/operand.h	/^  kX86_Bnd = kExtraNonVirt + 4,$/;"	m	class:OperandType::RegType::RegGroup
kX86_C0	external/asmjit/src/asmjit/core/inst.h	/^  kX86_C0 = 0x00010000u,$/;"	m	class:InstIdParts::InstOptions::InstControlFlow::InstSameRegHint::CpuRWFlags
kX86_C1	external/asmjit/src/asmjit/core/inst.h	/^  kX86_C1 = 0x00020000u,$/;"	m	class:InstIdParts::InstOptions::InstControlFlow::InstSameRegHint::CpuRWFlags
kX86_C2	external/asmjit/src/asmjit/core/inst.h	/^  kX86_C2 = 0x00040000u,$/;"	m	class:InstIdParts::InstOptions::InstControlFlow::InstSameRegHint::CpuRWFlags
kX86_C3	external/asmjit/src/asmjit/core/inst.h	/^  kX86_C3 = 0x00080000u$/;"	m	class:InstIdParts::InstOptions::InstControlFlow::InstSameRegHint::CpuRWFlags
kX86_CF	external/asmjit/src/asmjit/core/inst.h	/^  kX86_CF = kCF,$/;"	m	class:InstIdParts::InstOptions::InstControlFlow::InstSameRegHint::CpuRWFlags
kX86_CReg	external/asmjit/src/asmjit/core/operand.h	/^  kX86_CReg = kExtra + 2,$/;"	m	class:OperandType::RegType
kX86_CReg	external/asmjit/src/asmjit/core/operand.h	/^  kX86_CReg = kExtraNonVirt + 1,$/;"	m	class:OperandType::RegType::RegGroup
kX86_DF	external/asmjit/src/asmjit/core/inst.h	/^  kX86_DF = 0x00000400u,$/;"	m	class:InstIdParts::InstOptions::InstControlFlow::InstSameRegHint::CpuRWFlags
kX86_DReg	external/asmjit/src/asmjit/core/operand.h	/^  kX86_DReg = kExtra + 3,$/;"	m	class:OperandType::RegType
kX86_DReg	external/asmjit/src/asmjit/core/operand.h	/^  kX86_DReg = kExtraNonVirt + 2,$/;"	m	class:OperandType::RegType::RegGroup
kX86_ER	external/asmjit/src/asmjit/core/inst.h	/^  kX86_ER = 0x00040000u,$/;"	m	class:InstIdParts::InstOptions
kX86_ERMask	external/asmjit/src/asmjit/core/inst.h	/^  kX86_ERMask = kX86_RZ_SAE,$/;"	m	class:InstIdParts::InstOptions
kX86_Evex	external/asmjit/src/asmjit/core/inst.h	/^  kX86_Evex = 0x00001000u,$/;"	m	class:InstIdParts::InstOptions
kX86_Gpb	external/asmjit/src/asmjit/core/radefs_p.h	/^  kX86_Gpb = 0x01000000u,$/;"	m	class:RAStrategyType::RAStrategyFlags::RATiedFlags
kX86_GpbHi	external/asmjit/src/asmjit/core/operand.h	/^  kX86_GpbHi = kGp8Hi,$/;"	m	class:OperandType::RegType
kX86_GpbLo	external/asmjit/src/asmjit/core/operand.h	/^  kX86_GpbLo = kGp8Lo,$/;"	m	class:OperandType::RegType
kX86_Gpd	external/asmjit/src/asmjit/core/operand.h	/^  kX86_Gpd = kGp32,$/;"	m	class:OperandType::RegType
kX86_Gpq	external/asmjit/src/asmjit/core/operand.h	/^  kX86_Gpq = kGp64,$/;"	m	class:OperandType::RegType
kX86_Gpw	external/asmjit/src/asmjit/core/operand.h	/^  kX86_Gpw = kGp16,$/;"	m	class:OperandType::RegType
kX86_IF	external/asmjit/src/asmjit/core/inst.h	/^  kX86_IF = 0x00000800u,$/;"	m	class:InstIdParts::InstOptions::InstControlFlow::InstSameRegHint::CpuRWFlags
kX86_InvalidRex	external/asmjit/src/asmjit/core/inst.h	/^  kX86_InvalidRex = 0x80000000u$/;"	m	class:InstIdParts::InstOptions
kX86_K	external/asmjit/src/asmjit/core/operand.h	/^  kX86_K = kExtraVirt2,$/;"	m	class:OperandType::RegType::RegGroup
kX86_KReg	external/asmjit/src/asmjit/core/operand.h	/^  kX86_KReg = kMask,$/;"	m	class:OperandType::RegType
kX86_Lock	external/asmjit/src/asmjit/core/inst.h	/^  kX86_Lock = 0x00002000u,$/;"	m	class:InstIdParts::InstOptions
kX86_MM	external/asmjit/src/asmjit/core/operand.h	/^  kX86_MM = kExtraVirt3,$/;"	m	class:OperandType::RegType::RegGroup
kX86_MMXCleanup	external/asmjit/src/asmjit/core/func.h	/^  kX86_MMXCleanup = 0x00040000u,$/;"	m	class:CallConvId::CallConvStrategy::CallConvFlags::FuncAttributes
kX86_Mm	external/asmjit/src/asmjit/core/operand.h	/^  kX86_Mm = kExtra + 0,$/;"	m	class:OperandType::RegType
kX86_ModMR	external/asmjit/src/asmjit/core/inst.h	/^  kX86_ModMR = 0x00000100u,$/;"	m	class:InstIdParts::InstOptions
kX86_ModRM	external/asmjit/src/asmjit/core/inst.h	/^  kX86_ModRM = 0x00000200u,$/;"	m	class:InstIdParts::InstOptions
kX86_OF	external/asmjit/src/asmjit/core/inst.h	/^  kX86_OF = kOF,$/;"	m	class:InstIdParts::InstOptions::InstControlFlow::InstSameRegHint::CpuRWFlags
kX86_OpCodeB	external/asmjit/src/asmjit/core/inst.h	/^  kX86_OpCodeB = 0x01000000u,$/;"	m	class:InstIdParts::InstOptions
kX86_OpCodeR	external/asmjit/src/asmjit/core/inst.h	/^  kX86_OpCodeR = 0x04000000u,$/;"	m	class:InstIdParts::InstOptions
kX86_OpCodeW	external/asmjit/src/asmjit/core/inst.h	/^  kX86_OpCodeW = 0x08000000u,$/;"	m	class:InstIdParts::InstOptions
kX86_OpCodeX	external/asmjit/src/asmjit/core/inst.h	/^  kX86_OpCodeX = 0x02000000u,$/;"	m	class:InstIdParts::InstOptions
kX86_PF	external/asmjit/src/asmjit/core/inst.h	/^  kX86_PF = 0x00000200u,$/;"	m	class:InstIdParts::InstOptions::InstControlFlow::InstSameRegHint::CpuRWFlags
kX86_RD_SAE	external/asmjit/src/asmjit/core/inst.h	/^  kX86_RD_SAE = 0x00200000u,$/;"	m	class:InstIdParts::InstOptions
kX86_RN_SAE	external/asmjit/src/asmjit/core/inst.h	/^  kX86_RN_SAE = 0x00000000u,$/;"	m	class:InstIdParts::InstOptions
kX86_RU_SAE	external/asmjit/src/asmjit/core/inst.h	/^  kX86_RU_SAE = 0x00400000u,$/;"	m	class:InstIdParts::InstOptions
kX86_RZ_SAE	external/asmjit/src/asmjit/core/inst.h	/^  kX86_RZ_SAE = 0x00600000u,$/;"	m	class:InstIdParts::InstOptions
kX86_Rep	external/asmjit/src/asmjit/core/inst.h	/^  kX86_Rep = 0x00004000u,$/;"	m	class:InstIdParts::InstOptions
kX86_Repne	external/asmjit/src/asmjit/core/inst.h	/^  kX86_Repne = 0x00008000u,$/;"	m	class:InstIdParts::InstOptions
kX86_Rex	external/asmjit/src/asmjit/core/inst.h	/^  kX86_Rex = 0x40000000u,$/;"	m	class:InstIdParts::InstOptions
kX86_Rip	external/asmjit/src/asmjit/core/operand.h	/^  kX86_Rip = kPC,$/;"	m	class:OperandType::RegType
kX86_Rip	external/asmjit/src/asmjit/core/operand.h	/^  kX86_Rip = kPC,$/;"	m	class:OperandType::RegType::RegGroup
kX86_SAE	external/asmjit/src/asmjit/core/inst.h	/^  kX86_SAE = 0x00080000u,$/;"	m	class:InstIdParts::InstOptions
kX86_SF	external/asmjit/src/asmjit/core/inst.h	/^  kX86_SF = kSF,$/;"	m	class:InstIdParts::InstOptions::InstControlFlow::InstSameRegHint::CpuRWFlags
kX86_SReg	external/asmjit/src/asmjit/core/operand.h	/^  kX86_SReg = kExtra + 1,$/;"	m	class:OperandType::RegType
kX86_SReg	external/asmjit/src/asmjit/core/operand.h	/^  kX86_SReg = kExtraNonVirt + 0,$/;"	m	class:OperandType::RegType::RegGroup
kX86_St	external/asmjit/src/asmjit/core/operand.h	/^  kX86_St = kExtra + 4,$/;"	m	class:OperandType::RegType
kX86_St	external/asmjit/src/asmjit/core/operand.h	/^  kX86_St = kExtraNonVirt + 3,$/;"	m	class:OperandType::RegType::RegGroup
kX86_Tmm	external/asmjit/src/asmjit/core/operand.h	/^  kX86_Tmm = kExtra + 6,$/;"	m	class:OperandType::RegType
kX86_Tmm	external/asmjit/src/asmjit/core/operand.h	/^  kX86_Tmm = kExtraNonVirt + 5,$/;"	m	class:OperandType::RegType::RegGroup
kX86_Vex	external/asmjit/src/asmjit/core/inst.h	/^  kX86_Vex = 0x00000800u,$/;"	m	class:InstIdParts::InstOptions
kX86_Vex3	external/asmjit/src/asmjit/core/inst.h	/^  kX86_Vex3 = 0x00000400u,$/;"	m	class:InstIdParts::InstOptions
kX86_XAcquire	external/asmjit/src/asmjit/core/inst.h	/^  kX86_XAcquire = 0x00010000u,$/;"	m	class:InstIdParts::InstOptions
kX86_XRelease	external/asmjit/src/asmjit/core/inst.h	/^  kX86_XRelease = 0x00020000u,$/;"	m	class:InstIdParts::InstOptions
kX86_Xmm	external/asmjit/src/asmjit/core/operand.h	/^  kX86_Xmm = kVec128,$/;"	m	class:OperandType::RegType
kX86_Ymm	external/asmjit/src/asmjit/core/operand.h	/^  kX86_Ymm = kVec256,$/;"	m	class:OperandType::RegType
kX86_ZF	external/asmjit/src/asmjit/core/inst.h	/^  kX86_ZF = kZF,$/;"	m	class:InstIdParts::InstOptions::InstControlFlow::InstSameRegHint::CpuRWFlags
kX86_ZMask	external/asmjit/src/asmjit/core/inst.h	/^  kX86_ZMask = 0x00800000u,$/;"	m	class:InstIdParts::InstOptions
kX86_Zmm	external/asmjit/src/asmjit/core/operand.h	/^  kX86_Zmm = kVec512,$/;"	m	class:OperandType::RegType
kXAcquire	external/asmjit/src/asmjit/x86/x86instdb.h	/^  kXAcquire = 0x00020000u,$/;"	m	class:InstDB::Mode::OpFlags::InstFlags
kXCOFF	external/asmjit/src/asmjit/core/environment.h	/^  kXCOFF,$/;"	m	class:Vendor::Platform::PlatformABI::ObjectFormat
kXOP	external/asmjit/src/asmjit/core/cpuinfo.h	/^      kXOP,                      \/\/!< CPU has XOP              (XOP instructions) {AMD} (deprecated).$/;"	m	struct:CpuFeatures::X86	typeref:enum:CpuFeatures::X86::
kXOP_M8	external/asmjit/src/asmjit/x86/x86opcode_p.h	/^    kXOP_M8 = kPP_00 | kMM_XOP08,          \/\/ 'M8' (XOP)$/;"	m	struct:Opcode	typeref:enum:Opcode::
kXOP_M9	external/asmjit/src/asmjit/x86/x86opcode_p.h	/^    kXOP_M9 = kPP_00 | kMM_XOP09,          \/\/ 'M9' (XOP)$/;"	m	struct:Opcode	typeref:enum:Opcode::
kXOP_MA	external/asmjit/src/asmjit/x86/x86opcode_p.h	/^    kXOP_MA = kPP_00 | kMM_XOP0A           \/\/ 'MA' (XOP)$/;"	m	struct:Opcode	typeref:enum:Opcode::
kXRelease	external/asmjit/src/asmjit/x86/x86instdb.h	/^  kXRelease = 0x00040000u,$/;"	m	class:InstDB::Mode::OpFlags::InstFlags
kXS	external/asmjit/src/asmjit/core/cpuinfo.h	/^      kXS,                       \/\/!< CPU has XS           (XS attribute in TLBI and DSB instructions) {A64}.$/;"	m	struct:CpuFeatures::ARM	typeref:enum:CpuFeatures::ARM::
kXSAVE	external/asmjit/src/asmjit/core/cpuinfo.h	/^      kXSAVE,                    \/\/!< CPU has XSAVE.$/;"	m	struct:CpuFeatures::X86	typeref:enum:CpuFeatures::X86::
kXSAVEC	external/asmjit/src/asmjit/core/cpuinfo.h	/^      kXSAVEC,                   \/\/!< CPU has XSAVEC.$/;"	m	struct:CpuFeatures::X86	typeref:enum:CpuFeatures::X86::
kXSAVEOPT	external/asmjit/src/asmjit/core/cpuinfo.h	/^      kXSAVEOPT,                 \/\/!< CPU has XSAVEOPT.$/;"	m	struct:CpuFeatures::X86	typeref:enum:CpuFeatures::X86::
kXSAVES	external/asmjit/src/asmjit/core/cpuinfo.h	/^      kXSAVES,                   \/\/!< CPU has XSAVES.$/;"	m	struct:CpuFeatures::X86	typeref:enum:CpuFeatures::X86::
kXWord	external/asmjit/src/asmjit/core/archtraits.h	/^  kXWord,$/;"	m	class:Arch::SubArch::ArchTypeNameId
kZ	external/asmjit/src/asmjit/x86/x86globals.h	/^  kZ             = 0x04u,       \/\/!<         ZF==1  (any_sign ==)$/;"	m	class:CondCode
kZ	external/asmjit/src/asmjit/x86/x86instdb.h	/^  kZ = 0x00000002u,$/;"	m	class:InstDB::Mode::OpFlags::InstFlags::Avx512Flags
kZEOnOne	external/asmjit/src/asmjit/x86/x86globals.h	/^  kZEOnOne       = 0x04u,$/;"	m	class:CondCode::FpuStatusWord::FpuControlWord::CmpImm::PCmpStrImm::RoundImm::VCmpImm::VFixupImm
kZEOnZero	external/asmjit/src/asmjit/x86/x86globals.h	/^  kZEOnZero      = 0x01u,$/;"	m	class:CondCode::FpuStatusWord::FpuControlWord::CmpImm::PCmpStrImm::RoundImm::VCmpImm::VFixupImm
kZExt	external/asmjit/src/asmjit/core/inst.h	/^  kZExt = 0x00000010u,$/;"	m	class:InstIdParts::InstOptions::InstControlFlow::InstSameRegHint::CpuRWFlags::OpRWFlags
kZF	external/asmjit/src/asmjit/core/inst.h	/^  kZF = 0x00000008u,$/;"	m	class:InstIdParts::InstOptions::InstControlFlow::InstSameRegHint::CpuRWFlags
kZR	external/asmjit/src/asmjit/arm/a64assembler.cpp	/^static constexpr uint32_t kZR = Gp::kIdZr;$/;"	v	file:
kZR	external/asmjit/src/asmjit/arm/a64instdb_p.h	/^static constexpr uint32_t kZR = Gp::kIdZr;$/;"	m	namespace:InstDB
kZero	external/asmjit/src/asmjit/core/archcommons.h	/^  kZero           = kEQ,        \/\/!< Zero (alias to equal).$/;"	m	class:CondCode
kZero	external/asmjit/src/asmjit/core/emitter.h	/^  kZero = 2,$/;"	m	class:AlignMode
kZero	external/asmjit/src/asmjit/x86/x86globals.h	/^  kZero          = kZ,          \/\/!< Zero flag.$/;"	m	class:CondCode
kZeroInitialized	external/asmjit/src/asmjit/core/codeholder.h	/^  kZeroInitialized = 0x00000004u,$/;"	m	class:ExpressionOpType::ExpressionValueType::SectionFlags
k_	external/asmjit/src/asmjit/x86/x86instdb.h	/^  k_ = 0x00000000u,$/;"	m	class:InstDB::Mode::OpFlags::InstFlags::Avx512Flags
kind	external/asmjit/db/x86.js	/^          map[index] = { type: type, kind: kind, index: index };$/;"	p	class:map
kind	external/asmjit/db/x86.js	/^        map[name] = { type: type, kind: kind, index: i };$/;"	p	class:map
l	src/util/bitfield.h	/^    static constexpr auto l = l_;$/;"	m	struct:bf_pt
l1_brind_cache	src/tcache.h	/^    static L1BrindCache l1_brind_cache;$/;"	m	struct:dbt::tcache
l1_cache	src/tcache.h	/^    static L1Cache l1_cache;$/;"	m	struct:dbt::tcache
l1hash	src/tcache.h	/^    static ALWAYS_INLINE u32 l1hash(u32 ip)$/;"	f	struct:dbt::tcache
label	external/asmjit/src/asmjit/core/codeholder.h	/^    LabelEntry* label;$/;"	m	union:ExpressionOpType::ExpressionValueType::Expression::Value
labelId	external/asmjit/src/asmjit/core/builder.h	/^  ASMJIT_API Error labelNodeOf(LabelNode** ASMJIT_NONNULL(out), uint32_t labelId);$/;"	m	class:NodeType::NodeFlags::SentinelType::BaseBuilder
labelNodeOf	external/asmjit/src/asmjit/core/builder.cpp	/^Error BaseBuilder::labelNodeOf(LabelNode** out, uint32_t labelId) {$/;"	f	class:BaseBuilder
labels	src/codegen/emit.h	/^    std::vector<asmjit::Label> labels;$/;"	m	struct:dbt::qcg::QEmit
len	src/ir/qir.h	/^    u8 len;$/;"	m	struct:dbt::qir::VOperandSpan
likely	src/util/common.h	29;"	d
line	external/asmjit/tools/tablegen.js	/^    var line = "";$/;"	v
lines	external/asmjit/tools/gencxx.js	/^    var lines = s.split(\/\\r?\\n\/g);$/;"	v
lines	external/asmjit/tools/tablegen.js	/^    var lines = s.split(\/\\r?\\n\/g);$/;"	v
link_map	src/tcache.cpp	/^std::multimap<u32, jitabi::ppoint::BranchSlot *> tcache::link_map;$/;"	m	class:dbt::tcache	file:
link_map	src/tcache.h	/^    static std::multimap<u32, jitabi::ppoint::BranchSlot *> link_map;$/;"	m	struct:dbt::tcache
linux_brk	src/env.cpp	/^static uabi_long linux_brk(uabi_ulong newbrk)$/;"	f	namespace:dbt::env_syscall
linux_clock_gettime64	src/env.cpp	/^static uabi_long linux_clock_gettime64(UNUSED clockid_t which_clock,$/;"	f	namespace:dbt::env_syscall
linux_close	src/env.cpp	/^static uabi_long linux_close(uabi_uint fd)$/;"	f	namespace:dbt::env_syscall
linux_exit	src/env.cpp	/^static uabi_long linux_exit(uabi_int error_code)$/;"	f	namespace:dbt::env_syscall
linux_exit_group	src/env.cpp	/^static uabi_long linux_exit_group(uabi_int error_code)$/;"	f	namespace:dbt::env_syscall
linux_fstat64	src/env.cpp	/^static uabi_long linux_fstat64(uabi_uint fd, uabi_stat64 *statbuf)$/;"	f	namespace:dbt::env_syscall
linux_getegid	src/env.cpp	/^static uabi_long linux_getegid()$/;"	f	namespace:dbt::env_syscall
linux_geteuid	src/env.cpp	/^static uabi_long linux_geteuid()$/;"	f	namespace:dbt::env_syscall
linux_getgid	src/env.cpp	/^static uabi_long linux_getgid()$/;"	f	namespace:dbt::env_syscall
linux_getrandom	src/env.cpp	/^static uabi_long linux_getrandom(char *buf, uabi_size_t count, uabi_uint flags)$/;"	f	namespace:dbt::env_syscall
linux_getuid	src/env.cpp	/^static uabi_long linux_getuid()$/;"	f	namespace:dbt::env_syscall
linux_llseek	src/env.cpp	/^static uabi_long linux_llseek(uabi_uint fd,$/;"	f	namespace:dbt::env_syscall
linux_mmap2	src/env.cpp	/^static uabi_long linux_mmap2(uabi_ulong gaddr,$/;"	f	namespace:dbt::env_syscall
linux_mprotect	src/env.cpp	/^static uabi_long linux_mprotect(uabi_ulong start,$/;"	f	namespace:dbt::env_syscall
linux_munmap	src/env.cpp	/^static uabi_long linux_munmap(uabi_ulong gaddr, uabi_size_t len)$/;"	f	namespace:dbt::env_syscall
linux_openat	src/env.cpp	/^static uabi_long linux_openat(uabi_int dfd,$/;"	f	namespace:dbt::env_syscall
linux_prlimit64	src/env.cpp	/^static uabi_long linux_prlimit64(uabi_pid_t pid,$/;"	f	namespace:dbt::env_syscall
linux_read	src/env.cpp	/^static uabi_long linux_read(uabi_uint fd, char *buf, uabi_size_t count)$/;"	f	namespace:dbt::env_syscall
linux_readlinkat	src/env.cpp	/^static uabi_long linux_readlinkat(uabi_int dfd,$/;"	f	namespace:dbt::env_syscall
linux_rt_sigaction	src/env.cpp	/^static uabi_long linux_rt_sigaction(int,$/;"	f	namespace:dbt::env_syscall
linux_set_tid_address	src/env.cpp	/^static uabi_long linux_set_tid_address(uabi_int *tidptr)$/;"	f	namespace:dbt::env_syscall
linux_statx	src/env.cpp	/^static uabi_long linux_statx(uabi_int dfd,$/;"	f	namespace:dbt::env_syscall
linux_sysinfo	src/env.cpp	/^static uabi_long linux_sysinfo(struct uabi_sysinfo *info)$/;"	f	namespace:dbt::env_syscall
linux_uname	src/env.cpp	/^static uabi_long linux_uname(uabi_new_utsname *name)$/;"	f	namespace:dbt::env_syscall
linux_write	src/env.cpp	/^static uabi_long linux_write(uabi_uint fd, const char *buf, uabi_size_t count)$/;"	f	namespace:dbt::env_syscall
literalOp	external/asmjit/src/asmjit/arm/a64instdb_p.h	/^  uint32_t literalOp  : 8;$/;"	m	struct:InstDB::EncodingData::BaseLdSt
literalOp	external/asmjit/src/asmjit/arm/a64instdb_p.h	/^  uint32_t literalOp  : 8;$/;"	m	struct:InstDB::EncodingData::SimdLdSt
loadAddressOf	external/asmjit/src/asmjit/arm/a64compiler.h	/^  ASMJIT_INLINE_NODEBUG Error loadAddressOf(const Gp& o0, const Mem& o1) { return _emitter()->_emitI(Inst::kIdAdr, o0, o1); }$/;"	f	class:Compiler
load_addr	src/env.cpp	/^    uabi_ulong load_addr;$/;"	m	struct:dbt::env::ElfImage	file:
loads	src/env.cpp	/^    u32 loads[3];$/;"	m	struct:dbt::env_syscall::uabi_sysinfo	file:
lock	external/asmjit/src/asmjit/core/jitallocator.cpp	/^  mutable Lock lock;$/;"	m	class:JitAllocatorPrivateImpl	file:
lodsb	external/asmjit/src/asmjit/x86/x86emitter.h	/^  inline Error lodsb() { return _emitter()->emit(Inst::kIdLods, al , EmitterExplicitT<This>::ptr_zsi(0, 1)); }$/;"	f	struct:EmitterImplicitT
lodsd	external/asmjit/src/asmjit/x86/x86emitter.h	/^  inline Error lodsd() { return _emitter()->emit(Inst::kIdLods, eax, EmitterExplicitT<This>::ptr_zsi(0, 4)); }$/;"	f	struct:EmitterImplicitT
lodsq	external/asmjit/src/asmjit/x86/x86emitter.h	/^  inline Error lodsq() { return _emitter()->emit(Inst::kIdLods, rax, EmitterExplicitT<This>::ptr_zsi(0, 8)); }$/;"	f	struct:EmitterImplicitT
lodsw	external/asmjit/src/asmjit/x86/x86emitter.h	/^  inline Error lodsw() { return _emitter()->emit(Inst::kIdLods, ax , EmitterExplicitT<This>::ptr_zsi(0, 2)); }$/;"	f	struct:EmitterImplicitT
logInstructionEmitted	external/asmjit/src/asmjit/core/emitterutils.cpp	/^void logInstructionEmitted($/;"	f	namespace:EmitterUtils
logInstructionFailed	external/asmjit/src/asmjit/core/emitterutils.cpp	/^Error logInstructionFailed($/;"	f	namespace:EmitterUtils
m	external/asmjit/tools/tablegen-a64.js	/^    var m;$/;"	v
m	external/asmjit/tools/tablegen-x86.js	/^    var m;$/;"	v
main	external/asmjit/test/asmjit_test_assembler.cpp	/^int main(int argc, char* argv[]) {$/;"	f
main	external/asmjit/test/asmjit_test_compiler.cpp	/^int main(int argc, char* argv[]) {$/;"	f
main	external/asmjit/test/asmjit_test_emitters.cpp	/^int main() {$/;"	f
main	external/asmjit/test/asmjit_test_instinfo.cpp	/^int main() {$/;"	f
main	external/asmjit/test/asmjit_test_perf.cpp	/^int main(int argc, char* argv[]) {$/;"	f
main	external/asmjit/test/asmjit_test_unit.cpp	/^int main(int argc, const char* argv[]) {$/;"	f
main	external/asmjit/test/asmjit_test_x86_sections.cpp	/^int main() {$/;"	f
main	src/main.cpp	/^int main(int argc, char **argv)$/;"	f
main	tests/test-args/test-args.c	/^int main(int argc, char *argv[]) {$/;"	f
makeRwFromOp	external/asmjit/tools/tablegen-x86.js	/^    function makeRwFromOp(op) {$/;"	f
make_cc	src/codegen/emit.cpp	/^static inline asmjit::x86::CondCode make_cc(qir::CondCode cc)$/;"	f	namespace:dbt::qcg
make_gpr	src/codegen/emit.cpp	/^static inline asmjit::x86::Gp make_gpr(qir::RegN pr, qir::VType type)$/;"	f	namespace:dbt::qcg
make_gpr	src/codegen/emit.cpp	/^static inline asmjit::x86::Gp make_gpr(qir::VOperand opr)$/;"	f	namespace:dbt::qcg
make_imm	src/codegen/emit.cpp	/^static inline asmjit::Imm make_imm(qir::VOperand opr)$/;"	f	namespace:dbt::qcg
make_operand	src/codegen/emit.cpp	/^inline asmjit::Operand QEmit::make_operand(qir::VOperand opr)$/;"	f	class:dbt::qcg::QEmit
make_slot	src/codegen/emit.cpp	/^inline asmjit::x86::Mem QEmit::make_slot(qir::VOperand opr)$/;"	f	class:dbt::qcg::QEmit
make_stubcall_target	src/codegen/emit.cpp	/^inline asmjit::Operand QEmit::make_stubcall_target(RuntimeStubId stub)$/;"	f	class:dbt::qcg::QEmit
make_vmem	src/codegen/emit.cpp	/^static inline asmjit::x86::Mem make_vmem(qir::VOperand vbase)$/;"	f	namespace:dbt::qcg
mandatoryReg	external/asmjit/src/asmjit/arm/a64instdb_p.h	/^  uint32_t mandatoryReg : 1;$/;"	m	struct:InstDB::EncodingData::BaseAtDcIcTlbi
mandelbrot_DATA	mk/external.mk	/^mandelbrot_DATA = $(OUT)\/mandelbrot.elf$/;"	m
mandelbrot_DATA_SHA1	mk/external.mk	/^mandelbrot_DATA_SHA1 = 5d21aad26d8a9f10fba88c6ed943024d58029011$/;"	m
mask	external/asmjit/src/asmjit/x86/x86formatter.cpp	/^  uint8_t mask;$/;"	m	struct:ImmBits	file:
mask	external/asmjit/tools/tablegen-x86.js	/^    var mask = 0;$/;"	v
mask	src/util/bitfield.h	/^    static constexpr size_t mask = ((1ull << size) - 1) << l;$/;"	m	struct:bf_range
matchClosingChar	external/asmjit/db/base.js	/^  matchClosingChar: function(s, from) {$/;"	m	class:const
match_gp_const	src/codegen/arch_traits.cpp	/^bool ArchTraits::match_gp_const(UNUSED qir::VType type, i64 val, RACtImm ct)$/;"	f	class:dbt::qcg::ArchTraits
max	external/asmjit/src/asmjit/asmjit-scope-begin.h	15;"	d
mem_unit	src/env.cpp	/^    u32 mem_unit;$/;"	m	struct:dbt::env_syscall::uabi_sysinfo	file:
mergeGroupData	external/asmjit/db/x86.js	/^function mergeGroupData(data, group) {$/;"	f
mib	external/asmjit/tools/tablegen-x86.js	/^    var mib = dbInsts.length > 0 && \/^(?:bndldx|bndstx)$\/.test(dbInsts[0].name);$/;"	v
min	external/asmjit/src/asmjit/asmjit-scope-begin.h	11;"	d
mm	external/asmjit/tools/tablegen-x86.js	/^    var mm = dbi.mm;$/;"	v
mm0	external/asmjit/src/asmjit/x86/x86operand.h	/^static constexpr Mm mm0 = Mm(0);$/;"	m	namespace:regs
mm1	external/asmjit/src/asmjit/x86/x86operand.h	/^static constexpr Mm mm1 = Mm(1);$/;"	m	namespace:regs
mm2	external/asmjit/src/asmjit/x86/x86operand.h	/^static constexpr Mm mm2 = Mm(2);$/;"	m	namespace:regs
mm3	external/asmjit/src/asmjit/x86/x86operand.h	/^static constexpr Mm mm3 = Mm(3);$/;"	m	namespace:regs
mm4	external/asmjit/src/asmjit/x86/x86operand.h	/^static constexpr Mm mm4 = Mm(4);$/;"	m	namespace:regs
mm5	external/asmjit/src/asmjit/x86/x86operand.h	/^static constexpr Mm mm5 = Mm(5);$/;"	m	namespace:regs
mm6	external/asmjit/src/asmjit/x86/x86operand.h	/^static constexpr Mm mm6 = Mm(6);$/;"	m	namespace:regs
mm7	external/asmjit/src/asmjit/x86/x86operand.h	/^static constexpr Mm mm7 = Mm(7);$/;"	m	namespace:regs
mmap	src/mmu.cpp	/^void *mmu::mmap(u32 vaddr, u32 len, int prot, int flags, int fd, size_t offs)$/;"	f	class:dbt::mmu
mmap_hint_page	src/mmu.cpp	/^u32 mmu::mmap_hint_page = mmu::MIN_MMAP_ADDR >> mmu::PAGE_BITS;$/;"	m	class:dbt::mmu	file:
mmap_hint_page	src/mmu.h	/^    static u32 mmap_hint_page;$/;"	m	struct:dbt::mmu
mmu	src/mmu.h	/^struct mmu {$/;"	s	namespace:dbt
modR	external/asmjit/tools/tablegen-x86.js	/^    var modR = dbi.modR;$/;"	v
mode	external/asmjit/src/asmjit/x86/x86formatter.cpp	/^  uint8_t mode;$/;"	m	struct:ImmBits	file:
mov	external/asmjit/tools/tablegen-x86.js	/^      "mov"       : "Mov",$/;"	p	class:rwCategoryByName
movabs	external/asmjit/tools/tablegen-x86.js	/^      "movabs"    : "Movabs",$/;"	p	class:rwCategoryByName
movhpd	external/asmjit/tools/tablegen-x86.js	/^      "movhpd"    : "Movh64",$/;"	p	class:rwCategoryByName
movhps	external/asmjit/tools/tablegen-x86.js	/^      "movhps"    : "Movh64",$/;"	p	class:rwCategoryByName
movsb	external/asmjit/src/asmjit/x86/x86emitter.h	/^  inline Error movsb() { return _emitter()->emit(Inst::kIdMovs, EmitterExplicitT<This>::ptr_zdi(0, 1), EmitterExplicitT<This>::ptr_zsi(0, 1)); }$/;"	f	struct:EmitterImplicitT
movsd	external/asmjit/src/asmjit/x86/x86emitter.h	/^  inline Error movsd() { return _emitter()->emit(Inst::kIdMovs, EmitterExplicitT<This>::ptr_zdi(0, 4), EmitterExplicitT<This>::ptr_zsi(0, 4)); }$/;"	f	struct:EmitterImplicitT
movsq	external/asmjit/src/asmjit/x86/x86emitter.h	/^  inline Error movsq() { return _emitter()->emit(Inst::kIdMovs, EmitterExplicitT<This>::ptr_zdi(0, 8), EmitterExplicitT<This>::ptr_zsi(0, 8)); }$/;"	f	struct:EmitterImplicitT
movsw	external/asmjit/src/asmjit/x86/x86emitter.h	/^  inline Error movsw() { return _emitter()->emit(Inst::kIdMovs, EmitterExplicitT<This>::ptr_zdi(0, 2), EmitterExplicitT<This>::ptr_zsi(0, 2)); }$/;"	f	struct:EmitterImplicitT
multipleOp	external/asmjit/src/asmjit/arm/a64instdb_p.h	/^  uint32_t multipleOp : 22;$/;"	m	struct:InstDB::EncodingData::SimdLdNStN
mustEnclose	external/asmjit/db/exp.js	/^function mustEnclose(node) {$/;"	f
mvn	external/asmjit/src/asmjit/arm/a64emitter.h	19;"	d
n	external/asmjit/db/x86.js	/^    var n = 0;$/;"	v
n	external/asmjit/src/asmjit/arm/a64instdb_p.h	/^  uint32_t n : 3;$/;"	m	struct:InstDB::EncodingData::SimdLdNStN
n	external/asmjit/src/asmjit/arm/armutils.h	/^  uint32_t n;$/;"	m	struct:Utils::LogicalImm
n	external/asmjit/src/asmjit/core/support.h	/^struct BitScanData { T x; uint32_t n; };$/;"	m	struct:Support::Internal::Internal::__anon6::BitScanData
n	external/asmjit/tools/tablegen.js	/^    var n = 0;$/;"	v
n_in	src/ir/qir.h	/^    const u8 n_in;$/;"	m	struct:dbt::qir::OpInfo
n_in	src/ir/qir.h	/^    static constexpr u8 n_in = 0;$/;"	m	struct:dbt::qir::InstNoOperands
n_in	src/ir/qir.h	/^    static constexpr u8 n_in = N_IN;$/;"	m	struct:dbt::qir::InstWithOperands
n_out	src/ir/qir.h	/^    const u8 n_out;$/;"	m	struct:dbt::qir::OpInfo
n_out	src/ir/qir.h	/^    static constexpr u8 n_out = 0;$/;"	m	struct:dbt::qir::InstNoOperands
n_out	src/ir/qir.h	/^    static constexpr u8 n_out = N_OUT;$/;"	m	struct:dbt::qir::InstWithOperands
name	external/asmjit/src/asmjit/core/compiler.h	/^  ASMJIT_API Error _newReg(BaseReg* ASMJIT_NONNULL(out), TypeId typeId, const char* name = nullptr);$/;"	m	class:BaseCompiler
name	external/asmjit/src/asmjit/core/compiler.h	/^  ASMJIT_API Error _newReg(BaseReg* ASMJIT_NONNULL(out), const BaseReg& ref, const char* name = nullptr);$/;"	m	class:BaseCompiler
name	external/asmjit/src/asmjit/core/compiler.h	/^  ASMJIT_API Error _newStack(BaseMem* ASMJIT_NONNULL(out), uint32_t size, uint32_t alignment, const char* name = nullptr);$/;"	m	class:BaseCompiler
name	external/asmjit/src/asmjit/core/compiler.h	/^  ASMJIT_API Error newVirtReg(VirtReg** ASMJIT_NONNULL(out), TypeId typeId, OperandSignature signature, const char* name);$/;"	m	class:BaseCompiler
name	external/asmjit/src/asmjit/core/cpuinfo.cpp	/^  char name[18];$/;"	m	struct:arm::AppleFamilyId::OpenBSDAArch64CPUID::AppleFeatureMapping	file:
name	external/asmjit/test/asmjit_test_compiler.h	/^  inline const char* name() const { return _name.data(); }$/;"	f	class:TestCase
name	external/asmjit/test/broken.h	/^  const char* name;$/;"	m	struct:BrokenAPI::Unit
name	external/asmjit/tools/tablegen-x86.js	/^    var name = dbi.name;$/;"	v
name	src/ir/qir.h	/^    char const *name;$/;"	m	struct:dbt::qir::OpInfo
nameEntries	external/asmjit/src/asmjit/x86/x86formatter.cpp	/^  NameEntry nameEntries[uint32_t(RegType::kMaxValue) + 1];$/;"	m	struct:RegFormatInfo	file:
nameStrings	external/asmjit/src/asmjit/x86/x86formatter.cpp	/^  char nameStrings[280];$/;"	m	struct:RegFormatInfo	file:
negateImm	external/asmjit/src/asmjit/arm/a64instdb_p.h	/^  uint32_t negateImm  : 1 ; \/\/ True if this is an operation that must negate IMM.$/;"	m	struct:InstDB::EncodingData::BaseLogical
newAlignNode	external/asmjit/src/asmjit/core/builder.cpp	/^Error BaseBuilder::newAlignNode(AlignNode** out, AlignMode alignMode, uint32_t alignment) {$/;"	f	class:BaseBuilder
newAnonymousLabel	external/asmjit/src/asmjit/core/emitter.h	/^  ASMJIT_INLINE_NODEBUG Label newAnonymousLabel(const char* name, size_t nameSize = SIZE_MAX) { return newNamedLabel(name, nameSize, LabelType::kAnonymous); }$/;"	f	class:AlignMode::EmitterType::EmitterFlags::EncodingOptions::BaseEmitter
newCommentNode	external/asmjit/src/asmjit/core/builder.cpp	/^Error BaseBuilder::newCommentNode(CommentNode** out, const char* data, size_t size) {$/;"	f	class:BaseBuilder
newConst	external/asmjit/src/asmjit/arm/a64compiler.h	/^  ASMJIT_INLINE_NODEBUG Mem newConst(ConstPoolScope scope, const void* data, size_t size) {$/;"	f	class:Compiler
newConst	external/asmjit/src/asmjit/x86/x86compiler.h	/^  ASMJIT_INLINE_NODEBUG Mem newConst(ConstPoolScope scope, const void* data, size_t size) {$/;"	f	class:Compiler
newConstPoolNode	external/asmjit/src/asmjit/core/builder.cpp	/^Error BaseBuilder::newConstPoolNode(ConstPoolNode** out) {$/;"	f	class:BaseBuilder
newEmbedDataNode	external/asmjit/src/asmjit/core/builder.cpp	/^Error BaseBuilder::newEmbedDataNode(EmbedDataNode** out, TypeId typeId, const void* data, size_t itemCount, size_t repeatCount) {$/;"	f	class:BaseBuilder
newExternalLabel	external/asmjit/src/asmjit/core/emitter.h	/^  ASMJIT_INLINE_NODEBUG Label newExternalLabel(const char* name, size_t nameSize = SIZE_MAX) { return newNamedLabel(name, nameSize, LabelType::kExternal); }$/;"	f	class:AlignMode::EmitterType::EmitterFlags::EncodingOptions::BaseEmitter
newFunc	external/asmjit/src/asmjit/core/compiler.h	/^  inline FuncNode* newFunc(const FuncSignature& signature) {$/;"	f	class:BaseCompiler
newFuncNode	external/asmjit/src/asmjit/core/compiler.cpp	/^Error BaseCompiler::newFuncNode(FuncNode** out, const FuncSignature& signature) {$/;"	f	class:BaseCompiler
newFuncRetNode	external/asmjit/src/asmjit/core/compiler.cpp	/^Error BaseCompiler::newFuncRetNode(FuncRetNode** out, const Operand_& o0, const Operand_& o1) {$/;"	f	class:BaseCompiler
newGp	external/asmjit/src/asmjit/arm/a64compiler.h	/^  ASMJIT_INLINE_NODEBUG Gp newGp(TypeId typeId, Args&&... args) { return _newRegInternal<Gp>(typeId, std::forward<Args>(args)...); }$/;"	f	class:Compiler
newGpw	external/asmjit/src/asmjit/arm/a64compiler.h	/^  ASMJIT_INLINE_NODEBUG Gp newGpw(Args&&... args) { return _newRegInternal<Gp>(TypeId::kUInt32, std::forward<Args>(args)...); }$/;"	f	class:Compiler
newGpx	external/asmjit/src/asmjit/arm/a64compiler.h	/^  ASMJIT_INLINE_NODEBUG Gp newGpx(Args&&... args) { return _newRegInternal<Gp>(TypeId::kUInt64, std::forward<Args>(args)...); }$/;"	f	class:Compiler
newGpz	external/asmjit/src/asmjit/arm/a64compiler.h	/^  ASMJIT_INLINE_NODEBUG Gp newGpz(Args&&... args) { return _newRegInternal<Gp>(TypeId::kUIntPtr, std::forward<Args>(args)...); }$/;"	f	class:Compiler
newInstNode	external/asmjit/src/asmjit/core/builder.cpp	/^Error BaseBuilder::newInstNode(InstNode** out, InstId instId, InstOptions instOptions, uint32_t opCount) {$/;"	f	class:BaseBuilder
newInt32	external/asmjit/src/asmjit/arm/a64compiler.h	/^  ASMJIT_INLINE_NODEBUG Gp newInt32(Args&&... args) { return _newRegInternal<Gp>(TypeId::kInt32, std::forward<Args>(args)...); }$/;"	f	class:Compiler
newInt64	external/asmjit/src/asmjit/arm/a64compiler.h	/^  ASMJIT_INLINE_NODEBUG Gp newInt64(Args&&... args) { return _newRegInternal<Gp>(TypeId::kInt64, std::forward<Args>(args)...); }$/;"	f	class:Compiler
newIntPtr	external/asmjit/src/asmjit/arm/a64compiler.h	/^  ASMJIT_INLINE_NODEBUG Gp newIntPtr(Args&&... args) { return _newRegInternal<Gp>(TypeId::kIntPtr, std::forward<Args>(args)...); }$/;"	f	class:Compiler
newInvokeNode	external/asmjit/src/asmjit/core/compiler.cpp	/^Error BaseCompiler::newInvokeNode(InvokeNode** out, InstId instId, const Operand_& o0, const FuncSignature& signature) {$/;"	f	class:BaseCompiler
newJumpAnnotation	external/asmjit/src/asmjit/core/compiler.cpp	/^JumpAnnotation* BaseCompiler::newJumpAnnotation() {$/;"	f	class:BaseCompiler
newJumpNode	external/asmjit/src/asmjit/core/compiler.cpp	/^Error BaseCompiler::newJumpNode(JumpNode** out, InstId instId, InstOptions instOptions, const Operand_& o0, JumpAnnotation* annotation) {$/;"	f	class:BaseCompiler
newLabel	external/asmjit/src/asmjit/core/assembler.cpp	/^Label BaseAssembler::newLabel() {$/;"	f	class:BaseAssembler
newLabel	external/asmjit/src/asmjit/core/builder.cpp	/^Label BaseBuilder::newLabel() {$/;"	f	class:BaseBuilder
newLabel	external/asmjit/src/asmjit/core/emitter.cpp	/^Label BaseEmitter::newLabel() {$/;"	f	class:BaseEmitter
newLabelNode	external/asmjit/src/asmjit/core/builder.cpp	/^Error BaseBuilder::newLabelNode(LabelNode** out) {$/;"	f	class:BaseBuilder
newNamedLabel	external/asmjit/src/asmjit/core/assembler.cpp	/^Label BaseAssembler::newNamedLabel(const char* name, size_t nameSize, LabelType type, uint32_t parentId) {$/;"	f	class:BaseAssembler
newNamedLabel	external/asmjit/src/asmjit/core/builder.cpp	/^Label BaseBuilder::newNamedLabel(const char* name, size_t nameSize, LabelType type, uint32_t parentId) {$/;"	f	class:BaseBuilder
newNamedLabel	external/asmjit/src/asmjit/core/emitter.cpp	/^Label BaseEmitter::newNamedLabel(const char* name, size_t nameSize, LabelType type, uint32_t parentId) {$/;"	f	class:BaseEmitter
newReg	external/asmjit/src/asmjit/arm/a64compiler.h	/^  ASMJIT_INLINE_NODEBUG Reg newReg(TypeId typeId, Args&&... args) { return _newRegInternal<Reg>(typeId, std::forward<Args>(args)...); }$/;"	f	class:Compiler
newSimilarReg	external/asmjit/src/asmjit/arm/a64compiler.h	/^  ASMJIT_INLINE_NODEBUG RegT newSimilarReg(const RegT& ref, Args&&... args) {$/;"	f	class:Compiler
newSimilarReg	external/asmjit/src/asmjit/x86/x86compiler.h	/^  ASMJIT_INLINE_NODEBUG RegT newSimilarReg(const RegT& ref) {$/;"	f	class:Compiler
newSimilarReg	external/asmjit/src/asmjit/x86/x86compiler.h	/^  ASMJIT_INLINE_NODEBUG RegT newSimilarReg(const RegT& ref, const char* fmt, Args&&... args) {$/;"	f	class:Compiler
newStack	external/asmjit/src/asmjit/arm/a64compiler.h	/^  ASMJIT_INLINE_NODEBUG Mem newStack(uint32_t size, uint32_t alignment, const char* name = nullptr) {$/;"	f	class:Compiler
newStack	external/asmjit/src/asmjit/x86/x86compiler.h	/^  ASMJIT_INLINE_NODEBUG Mem newStack(uint32_t size, uint32_t alignment, const char* name = nullptr) {$/;"	f	class:Compiler
newToken	external/asmjit/db/exp.js	/^function newToken(type, position, data, value) {$/;"	f
newUInt32	external/asmjit/src/asmjit/arm/a64compiler.h	/^  ASMJIT_INLINE_NODEBUG Gp newUInt32(Args&&... args) { return _newRegInternal<Gp>(TypeId::kUInt32, std::forward<Args>(args)...); }$/;"	f	class:Compiler
newUInt64	external/asmjit/src/asmjit/arm/a64compiler.h	/^  ASMJIT_INLINE_NODEBUG Gp newUInt64(Args&&... args) { return _newRegInternal<Gp>(TypeId::kUInt64, std::forward<Args>(args)...); }$/;"	f	class:Compiler
newUIntPtr	external/asmjit/src/asmjit/arm/a64compiler.h	/^  ASMJIT_INLINE_NODEBUG Gp newUIntPtr(Args&&... args) { return _newRegInternal<Gp>(TypeId::kUIntPtr, std::forward<Args>(args)...); }$/;"	f	class:Compiler
newVec	external/asmjit/src/asmjit/arm/a64compiler.h	/^  ASMJIT_INLINE_NODEBUG Vec newVec(TypeId typeId, Args&&... args) { return _newRegInternal<Vec>(typeId, std::forward<Args>(args)...); }$/;"	f	class:Compiler
newVecD	external/asmjit/src/asmjit/arm/a64compiler.h	/^  ASMJIT_INLINE_NODEBUG Vec newVecD(Args&&... args) { return _newRegInternal<Vec>(TypeId::kFloat64, std::forward<Args>(args)...); }$/;"	f	class:Compiler
newVecQ	external/asmjit/src/asmjit/arm/a64compiler.h	/^  ASMJIT_INLINE_NODEBUG Vec newVecQ(Args&&... args) { return _newRegInternal<Vec>(TypeId::kUInt8x16, std::forward<Args>(args)...); }$/;"	f	class:Compiler
newVecS	external/asmjit/src/asmjit/arm/a64compiler.h	/^  ASMJIT_INLINE_NODEBUG Vec newVecS(Args&&... args) { return _newRegInternal<Vec>(TypeId::kFloat32, std::forward<Args>(args)...); }$/;"	f	class:Compiler
newVirtReg	external/asmjit/src/asmjit/core/compiler.cpp	/^Error BaseCompiler::newVirtReg(VirtReg** out, TypeId typeId, OperandSignature signature, const char* name) {$/;"	f	class:BaseCompiler
next	external/asmjit/src/asmjit/core/codeholder.h	/^  LabelLink* next;$/;"	m	struct:ExpressionOpType::ExpressionValueType::SectionFlags::CopySectionFlags::OffsetType::RelocType::LabelType::LabelLink
next	external/asmjit/src/asmjit/core/zone.h	/^    Block* next;$/;"	m	struct:Zone::Block
next	external/asmjit/src/asmjit/core/zone.h	/^    DynamicBlock* next;$/;"	m	struct:ZoneAllocator::DynamicBlock
next	external/asmjit/src/asmjit/core/zone.h	/^    Slot* next;$/;"	m	struct:ZoneAllocator::Slot
next	external/asmjit/test/broken.h	/^  Unit* next;$/;"	m	struct:BrokenAPI::Unit
nextToken	external/asmjit/tools/enumgen.js	/^function nextToken(input, from, patterns) {$/;"	f
noArchTraits	external/asmjit/src/asmjit/core/archtraits.cpp	/^static const constexpr ArchTraits noArchTraits = {$/;"	v	file:
noExt	external/asmjit/src/asmjit/core/emitterutils_p.h	/^static constexpr Operand noExt[3] = { {}, {}, {} };$/;"	m	namespace:EmitterUtils
no_seg	external/asmjit/src/asmjit/x86/x86operand.h	/^static constexpr SReg no_seg = SReg(SReg::kIdNone);$/;"	m	namespace:regs
noexcept	external/asmjit/src/asmjit/arm/a64assembler.h	/^  ASMJIT_API Assembler(CodeHolder* code = nullptr) noexcept;$/;"	m	class:Assembler
noexcept	external/asmjit/src/asmjit/arm/a64assembler.h	/^  ASMJIT_API virtual ~Assembler() noexcept;$/;"	m	class:Assembler
noexcept	external/asmjit/src/asmjit/arm/a64builder.h	/^  ASMJIT_API explicit Builder(CodeHolder* code = nullptr) noexcept;$/;"	m	class:Builder
noexcept	external/asmjit/src/asmjit/arm/a64builder.h	/^  ASMJIT_API virtual ~Builder() noexcept;$/;"	m	class:Builder
noexcept	external/asmjit/src/asmjit/arm/a64compiler.h	/^  ASMJIT_API explicit Compiler(CodeHolder* code = nullptr) noexcept;$/;"	m	class:Compiler
noexcept	external/asmjit/src/asmjit/arm/a64compiler.h	/^  ASMJIT_API virtual ~Compiler() noexcept;$/;"	m	class:Compiler
noexcept	external/asmjit/src/asmjit/arm/a64formatter_p.h	/^  const BaseInst& inst, const Operand_* operands, size_t opCount) noexcept;$/;"	m	namespace:FormatterInternal
noexcept	external/asmjit/src/asmjit/arm/a64func_p.h	/^Error initCallConv(CallConv& cc, CallConvId ccId, const Environment& environment) noexcept;$/;"	m	namespace:FuncInternal
noexcept	external/asmjit/src/asmjit/arm/a64func_p.h	/^Error initFuncDetail(FuncDetail& func, const FuncSignature& signature, uint32_t registerSize) noexcept;$/;"	m	namespace:FuncInternal
noexcept	external/asmjit/src/asmjit/arm/a64instapi_p.h	/^Error ASMJIT_CDECL instIdToString(Arch arch, InstId instId, String& output) noexcept;$/;"	m	namespace:InstInternal
noexcept	external/asmjit/src/asmjit/arm/a64instapi_p.h	/^Error ASMJIT_CDECL queryFeatures(Arch arch, const BaseInst& inst, const Operand_* operands, size_t opCount, CpuFeatures* out) noexcept;$/;"	m	namespace:InstInternal
noexcept	external/asmjit/src/asmjit/arm/a64instapi_p.h	/^Error ASMJIT_CDECL queryRWInfo(Arch arch, const BaseInst& inst, const Operand_* operands, size_t opCount, InstRWInfo* out) noexcept;$/;"	m	namespace:InstInternal
noexcept	external/asmjit/src/asmjit/arm/a64instapi_p.h	/^Error ASMJIT_CDECL validate(Arch arch, const BaseInst& inst, const Operand_* operands, size_t opCount, ValidationFlags validationFlags) noexcept;$/;"	m	namespace:InstInternal
noexcept	external/asmjit/src/asmjit/arm/a64instapi_p.h	/^InstId ASMJIT_CDECL stringToInstId(Arch arch, const char* s, size_t len) noexcept;$/;"	m	namespace:InstInternal
noexcept	external/asmjit/src/asmjit/arm/a64rapass.cpp	/^  Error moveImmToRegArg(InvokeNode* invokeNode, const FuncValue& arg, const Imm& imm_, BaseReg* out) noexcept;$/;"	m	class:RACFGBuilder	file:
noexcept	external/asmjit/src/asmjit/arm/a64rapass.cpp	/^  Error moveImmToStackArg(InvokeNode* invokeNode, const FuncValue& arg, const Imm& imm_) noexcept;$/;"	m	class:RACFGBuilder	file:
noexcept	external/asmjit/src/asmjit/arm/a64rapass.cpp	/^  Error moveRegToStackArg(InvokeNode* invokeNode, const FuncValue& arg, const BaseReg& reg) noexcept;$/;"	m	class:RACFGBuilder	file:
noexcept	external/asmjit/src/asmjit/arm/a64rapass.cpp	/^  Error onBeforeInvoke(InvokeNode* invokeNode) noexcept;$/;"	m	class:RACFGBuilder	file:
noexcept	external/asmjit/src/asmjit/arm/a64rapass.cpp	/^  Error onBeforeRet(FuncRetNode* funcRet) noexcept;$/;"	m	class:RACFGBuilder	file:
noexcept	external/asmjit/src/asmjit/arm/a64rapass.cpp	/^  Error onInst(InstNode* inst, InstControlFlow& controlType, RAInstBuilder& ib) noexcept;$/;"	m	class:RACFGBuilder	file:
noexcept	external/asmjit/src/asmjit/arm/a64rapass.cpp	/^  Error onInvoke(InvokeNode* invokeNode, RAInstBuilder& ib) noexcept;$/;"	m	class:RACFGBuilder	file:
noexcept	external/asmjit/src/asmjit/arm/a64rapass.cpp	/^  Error onRet(FuncRetNode* funcRet, RAInstBuilder& ib) noexcept;$/;"	m	class:RACFGBuilder	file:
noexcept	external/asmjit/src/asmjit/arm/a64rapass_p.h	/^  ARMRAPass() noexcept;$/;"	m	class:ARMRAPass
noexcept	external/asmjit/src/asmjit/arm/a64rapass_p.h	/^  virtual ~ARMRAPass() noexcept;$/;"	m	class:ARMRAPass
noexcept	external/asmjit/src/asmjit/arm/armformatter_p.h	/^  CondCode cc) noexcept;$/;"	m	namespace:FormatterInternal
noexcept	external/asmjit/src/asmjit/arm/armformatter_p.h	/^  ShiftOp shiftOp) noexcept;$/;"	m	namespace:FormatterInternal
noexcept	external/asmjit/src/asmjit/arm/armformatter_p.h	/^  const Operand_& op) noexcept;$/;"	m	namespace:FormatterInternal
noexcept	external/asmjit/src/asmjit/arm/armformatter_p.h	/^  uint32_t elementIndex = 0xFFFFFFFF) noexcept;$/;"	m	namespace:FormatterInternal
noexcept	external/asmjit/src/asmjit/arm/armformatter_p.h	/^  uint32_t featureId) noexcept;$/;"	m	namespace:FormatterInternal
noexcept	external/asmjit/src/asmjit/arm/armoperand.h	/^  ASMJIT_INLINE_NODEBUG GpW w() const noexcept;$/;"	m	class:Gp
noexcept	external/asmjit/src/asmjit/arm/armoperand.h	/^  ASMJIT_INLINE_NODEBUG GpX x() const noexcept;$/;"	m	class:Gp
noexcept	external/asmjit/src/asmjit/arm/armoperand.h	/^  ASMJIT_INLINE_NODEBUG Mem& operator=(const Mem& other) noexcept = default;$/;"	m	class:Mem
noexcept	external/asmjit/src/asmjit/arm/armoperand.h	/^  ASMJIT_INLINE_NODEBUG VecB b() const noexcept;$/;"	m	class:Vec
noexcept	external/asmjit/src/asmjit/arm/armoperand.h	/^  ASMJIT_INLINE_NODEBUG VecD b8() const noexcept;$/;"	m	class:Vec
noexcept	external/asmjit/src/asmjit/arm/armoperand.h	/^  ASMJIT_INLINE_NODEBUG VecD d() const noexcept;$/;"	m	class:Vec
noexcept	external/asmjit/src/asmjit/arm/armoperand.h	/^  ASMJIT_INLINE_NODEBUG VecD h4() const noexcept;$/;"	m	class:Vec
noexcept	external/asmjit/src/asmjit/arm/armoperand.h	/^  ASMJIT_INLINE_NODEBUG VecD s2() const noexcept;$/;"	m	class:Vec
noexcept	external/asmjit/src/asmjit/arm/armoperand.h	/^  ASMJIT_INLINE_NODEBUG VecH h() const noexcept;$/;"	m	class:Vec
noexcept	external/asmjit/src/asmjit/arm/armoperand.h	/^  ASMJIT_INLINE_NODEBUG VecS h2() const noexcept;$/;"	m	class:Vec
noexcept	external/asmjit/src/asmjit/arm/armoperand.h	/^  ASMJIT_INLINE_NODEBUG VecS s() const noexcept;$/;"	m	class:Vec
noexcept	external/asmjit/src/asmjit/arm/armoperand.h	/^  ASMJIT_INLINE_NODEBUG VecV b(uint32_t elementIndex) const noexcept;$/;"	m	class:Vec
noexcept	external/asmjit/src/asmjit/arm/armoperand.h	/^  ASMJIT_INLINE_NODEBUG VecV b16() const noexcept;$/;"	m	class:Vec
noexcept	external/asmjit/src/asmjit/arm/armoperand.h	/^  ASMJIT_INLINE_NODEBUG VecV b4(uint32_t elementIndex) const noexcept;$/;"	m	class:Vec
noexcept	external/asmjit/src/asmjit/arm/armoperand.h	/^  ASMJIT_INLINE_NODEBUG VecV d(uint32_t elementIndex) const noexcept;$/;"	m	class:Vec
noexcept	external/asmjit/src/asmjit/arm/armoperand.h	/^  ASMJIT_INLINE_NODEBUG VecV d2() const noexcept;$/;"	m	class:Vec
noexcept	external/asmjit/src/asmjit/arm/armoperand.h	/^  ASMJIT_INLINE_NODEBUG VecV h(uint32_t elementIndex) const noexcept;$/;"	m	class:Vec
noexcept	external/asmjit/src/asmjit/arm/armoperand.h	/^  ASMJIT_INLINE_NODEBUG VecV h2(uint32_t elementIndex) const noexcept;$/;"	m	class:Vec
noexcept	external/asmjit/src/asmjit/arm/armoperand.h	/^  ASMJIT_INLINE_NODEBUG VecV h8() const noexcept;$/;"	m	class:Vec
noexcept	external/asmjit/src/asmjit/arm/armoperand.h	/^  ASMJIT_INLINE_NODEBUG VecV q() const noexcept;$/;"	m	class:Vec
noexcept	external/asmjit/src/asmjit/arm/armoperand.h	/^  ASMJIT_INLINE_NODEBUG VecV s(uint32_t elementIndex) const noexcept;$/;"	m	class:Vec
noexcept	external/asmjit/src/asmjit/arm/armoperand.h	/^  ASMJIT_INLINE_NODEBUG VecV s4() const noexcept;$/;"	m	class:Vec
noexcept	external/asmjit/src/asmjit/arm/armoperand.h	/^  ASMJIT_INLINE_NODEBUG VecV v() const noexcept;$/;"	m	class:Vec
noexcept	external/asmjit/src/asmjit/core/archcommons.h	/^  ASMJIT_INLINE_NODEBUG Shift() noexcept = default;$/;"	m	class:CondCode::DataType::ShiftOp::Shift
noexcept	external/asmjit/src/asmjit/core/archcommons.h	/^  ASMJIT_INLINE_NODEBUG constexpr Shift(const Shift& other) noexcept = default;$/;"	m	class:CondCode::DataType::ShiftOp::Shift
noexcept	external/asmjit/src/asmjit/core/archtraits.h	/^  static ASMJIT_INLINE_NODEBUG const ArchTraits& byArch(Arch arch) noexcept;$/;"	m	struct:Arch::SubArch::ArchTypeNameId::InstHints::ArchTraits
noexcept	external/asmjit/src/asmjit/core/archtraits.h	/^ASMJIT_API Error typeIdToRegSignature(Arch arch, TypeId typeId, TypeId* typeIdOut, OperandSignature* regSignatureOut) noexcept;$/;"	m	namespace:Arch::SubArch::ArchTypeNameId::InstHints::ArchUtils
noexcept	external/asmjit/src/asmjit/core/assembler.h	/^  ASMJIT_API BaseAssembler() noexcept;$/;"	m	class:BaseAssembler
noexcept	external/asmjit/src/asmjit/core/assembler.h	/^  ASMJIT_API virtual ~BaseAssembler() noexcept;$/;"	m	class:BaseAssembler
noexcept	external/asmjit/src/asmjit/core/builder.h	/^  ASMJIT_API BaseBuilder() noexcept;$/;"	m	class:NodeType::NodeFlags::SentinelType::BaseBuilder
noexcept	external/asmjit/src/asmjit/core/builder.h	/^  ASMJIT_API BaseNode* addAfter(BaseNode* ASMJIT_NONNULL(node), BaseNode* ASMJIT_NONNULL(ref)) noexcept;$/;"	m	class:NodeType::NodeFlags::SentinelType::BaseBuilder
noexcept	external/asmjit/src/asmjit/core/builder.h	/^  ASMJIT_API BaseNode* addBefore(BaseNode* ASMJIT_NONNULL(node), BaseNode* ASMJIT_NONNULL(ref)) noexcept;$/;"	m	class:NodeType::NodeFlags::SentinelType::BaseBuilder
noexcept	external/asmjit/src/asmjit/core/builder.h	/^  ASMJIT_API BaseNode* addNode(BaseNode* ASMJIT_NONNULL(node)) noexcept;$/;"	m	class:NodeType::NodeFlags::SentinelType::BaseBuilder
noexcept	external/asmjit/src/asmjit/core/builder.h	/^  ASMJIT_API BaseNode* removeNode(BaseNode* ASMJIT_NONNULL(node)) noexcept;$/;"	m	class:NodeType::NodeFlags::SentinelType::BaseBuilder
noexcept	external/asmjit/src/asmjit/core/builder.h	/^  ASMJIT_API BaseNode* setCursor(BaseNode* node) noexcept;$/;"	m	class:NodeType::NodeFlags::SentinelType::BaseBuilder
noexcept	external/asmjit/src/asmjit/core/builder.h	/^  ASMJIT_API Error addPass(Pass* pass) noexcept;$/;"	m	class:NodeType::NodeFlags::SentinelType::BaseBuilder
noexcept	external/asmjit/src/asmjit/core/builder.h	/^  ASMJIT_API Error deletePass(Pass* pass) noexcept;$/;"	m	class:NodeType::NodeFlags::SentinelType::BaseBuilder
noexcept	external/asmjit/src/asmjit/core/builder.h	/^  ASMJIT_API Pass(const char* name) noexcept;$/;"	m	class:NodeType::NodeFlags::SentinelType::Pass
noexcept	external/asmjit/src/asmjit/core/builder.h	/^  ASMJIT_API Pass* passByName(const char* name) const noexcept;$/;"	m	class:NodeType::NodeFlags::SentinelType::BaseBuilder
noexcept	external/asmjit/src/asmjit/core/builder.h	/^  ASMJIT_API virtual ~BaseBuilder() noexcept;$/;"	m	class:NodeType::NodeFlags::SentinelType::BaseBuilder
noexcept	external/asmjit/src/asmjit/core/builder.h	/^  ASMJIT_API virtual ~Pass() noexcept;$/;"	m	class:NodeType::NodeFlags::SentinelType::Pass
noexcept	external/asmjit/src/asmjit/core/builder.h	/^  ASMJIT_API void removeNodes(BaseNode* first, BaseNode* last) noexcept;$/;"	m	class:NodeType::NodeFlags::SentinelType::BaseBuilder
noexcept	external/asmjit/src/asmjit/core/builder.h	/^  ASMJIT_API void updateSectionLinks() noexcept;$/;"	m	class:NodeType::NodeFlags::SentinelType::BaseBuilder
noexcept	external/asmjit/src/asmjit/core/codeholder.h	/^  ASMJIT_API Error addAddressToAddressTable(uint64_t address) noexcept;$/;"	m	class:ExpressionOpType::ExpressionValueType::SectionFlags::CopySectionFlags::OffsetType::RelocType::LabelType::CodeHolder
noexcept	external/asmjit/src/asmjit/core/codeholder.h	/^  ASMJIT_API Error attach(BaseEmitter* emitter) noexcept;$/;"	m	class:ExpressionOpType::ExpressionValueType::SectionFlags::CopySectionFlags::OffsetType::RelocType::LabelType::CodeHolder
noexcept	external/asmjit/src/asmjit/core/codeholder.h	/^  ASMJIT_API Error bindLabel(const Label& label, uint32_t sectionId, uint64_t offset) noexcept;$/;"	m	class:ExpressionOpType::ExpressionValueType::SectionFlags::CopySectionFlags::OffsetType::RelocType::LabelType::CodeHolder
noexcept	external/asmjit/src/asmjit/core/codeholder.h	/^  ASMJIT_API Error copyFlattenedData(void* dst, size_t dstSize, CopySectionFlags copyFlags = CopySectionFlags::kNone) noexcept;$/;"	m	class:ExpressionOpType::ExpressionValueType::SectionFlags::CopySectionFlags::OffsetType::RelocType::LabelType::CodeHolder
noexcept	external/asmjit/src/asmjit/core/codeholder.h	/^  ASMJIT_API Error copySectionData(void* dst, size_t dstSize, uint32_t sectionId, CopySectionFlags copyFlags = CopySectionFlags::kNone) noexcept;$/;"	m	class:ExpressionOpType::ExpressionValueType::SectionFlags::CopySectionFlags::OffsetType::RelocType::LabelType::CodeHolder
noexcept	external/asmjit/src/asmjit/core/codeholder.h	/^  ASMJIT_API Error detach(BaseEmitter* emitter) noexcept;$/;"	m	class:ExpressionOpType::ExpressionValueType::SectionFlags::CopySectionFlags::OffsetType::RelocType::LabelType::CodeHolder
noexcept	external/asmjit/src/asmjit/core/codeholder.h	/^  ASMJIT_API Error flatten() noexcept;$/;"	m	class:ExpressionOpType::ExpressionValueType::SectionFlags::CopySectionFlags::OffsetType::RelocType::LabelType::CodeHolder
noexcept	external/asmjit/src/asmjit/core/codeholder.h	/^  ASMJIT_API Error growBuffer(CodeBuffer* cb, size_t n) noexcept;$/;"	m	class:ExpressionOpType::ExpressionValueType::SectionFlags::CopySectionFlags::OffsetType::RelocType::LabelType::CodeHolder
noexcept	external/asmjit/src/asmjit/core/codeholder.h	/^  ASMJIT_API Error init(const Environment& environment, const CpuFeatures& cpuFeatures, uint64_t baseAddress = Globals::kNoBaseAddress) noexcept;$/;"	m	class:ExpressionOpType::ExpressionValueType::SectionFlags::CopySectionFlags::OffsetType::RelocType::LabelType::CodeHolder
noexcept	external/asmjit/src/asmjit/core/codeholder.h	/^  ASMJIT_API Error init(const Environment& environment, uint64_t baseAddress = Globals::kNoBaseAddress) noexcept;$/;"	m	class:ExpressionOpType::ExpressionValueType::SectionFlags::CopySectionFlags::OffsetType::RelocType::LabelType::CodeHolder
noexcept	external/asmjit/src/asmjit/core/codeholder.h	/^  ASMJIT_API Error newLabelEntry(LabelEntry** entryOut) noexcept;$/;"	m	class:ExpressionOpType::ExpressionValueType::SectionFlags::CopySectionFlags::OffsetType::RelocType::LabelType::CodeHolder
noexcept	external/asmjit/src/asmjit/core/codeholder.h	/^  ASMJIT_API Error newNamedLabelEntry(LabelEntry** entryOut, const char* name, size_t nameSize, LabelType type, uint32_t parentId = Globals::kInvalidId) noexcept;$/;"	m	class:ExpressionOpType::ExpressionValueType::SectionFlags::CopySectionFlags::OffsetType::RelocType::LabelType::CodeHolder
noexcept	external/asmjit/src/asmjit/core/codeholder.h	/^  ASMJIT_API Error newRelocEntry(RelocEntry** dst, RelocType relocType) noexcept;$/;"	m	class:ExpressionOpType::ExpressionValueType::SectionFlags::CopySectionFlags::OffsetType::RelocType::LabelType::CodeHolder
noexcept	external/asmjit/src/asmjit/core/codeholder.h	/^  ASMJIT_API Error newSection(Section** sectionOut, const char* name, size_t nameSize = SIZE_MAX, SectionFlags flags = SectionFlags::kNone, uint32_t alignment = 1, int32_t order = 0) noexcept;$/;"	m	class:ExpressionOpType::ExpressionValueType::SectionFlags::CopySectionFlags::OffsetType::RelocType::LabelType::CodeHolder
noexcept	external/asmjit/src/asmjit/core/codeholder.h	/^  ASMJIT_API Error relocateToBase(uint64_t baseAddress) noexcept;$/;"	m	class:ExpressionOpType::ExpressionValueType::SectionFlags::CopySectionFlags::OffsetType::RelocType::LabelType::CodeHolder
noexcept	external/asmjit/src/asmjit/core/codeholder.h	/^  ASMJIT_API Error reserveBuffer(CodeBuffer* cb, size_t n) noexcept;$/;"	m	class:ExpressionOpType::ExpressionValueType::SectionFlags::CopySectionFlags::OffsetType::RelocType::LabelType::CodeHolder
noexcept	external/asmjit/src/asmjit/core/codeholder.h	/^  ASMJIT_API Error resolveUnresolvedLinks() noexcept;$/;"	m	class:ExpressionOpType::ExpressionValueType::SectionFlags::CopySectionFlags::OffsetType::RelocType::LabelType::CodeHolder
noexcept	external/asmjit/src/asmjit/core/codeholder.h	/^  ASMJIT_API LabelLink* newLabelLink(LabelEntry* le, uint32_t sectionId, size_t offset, intptr_t rel, const OffsetFormat& format) noexcept;$/;"	m	class:ExpressionOpType::ExpressionValueType::SectionFlags::CopySectionFlags::OffsetType::RelocType::LabelType::CodeHolder
noexcept	external/asmjit/src/asmjit/core/codeholder.h	/^  ASMJIT_API Section* ensureAddressTableSection() noexcept;$/;"	m	class:ExpressionOpType::ExpressionValueType::SectionFlags::CopySectionFlags::OffsetType::RelocType::LabelType::CodeHolder
noexcept	external/asmjit/src/asmjit/core/codeholder.h	/^  ASMJIT_API Section* sectionByName(const char* name, size_t nameSize = SIZE_MAX) const noexcept;$/;"	m	class:ExpressionOpType::ExpressionValueType::SectionFlags::CopySectionFlags::OffsetType::RelocType::LabelType::CodeHolder
noexcept	external/asmjit/src/asmjit/core/codeholder.h	/^  ASMJIT_API explicit CodeHolder(const Support::Temporary* temporary = nullptr) noexcept;$/;"	m	class:ExpressionOpType::ExpressionValueType::SectionFlags::CopySectionFlags::OffsetType::RelocType::LabelType::CodeHolder
noexcept	external/asmjit/src/asmjit/core/codeholder.h	/^  ASMJIT_API size_t codeSize() const noexcept;$/;"	m	class:ExpressionOpType::ExpressionValueType::SectionFlags::CopySectionFlags::OffsetType::RelocType::LabelType::CodeHolder
noexcept	external/asmjit/src/asmjit/core/codeholder.h	/^  ASMJIT_API uint32_t labelIdByName(const char* name, size_t nameSize = SIZE_MAX, uint32_t parentId = Globals::kInvalidId) noexcept;$/;"	m	class:ExpressionOpType::ExpressionValueType::SectionFlags::CopySectionFlags::OffsetType::RelocType::LabelType::CodeHolder
noexcept	external/asmjit/src/asmjit/core/codeholder.h	/^  ASMJIT_API void reset(ResetPolicy resetPolicy = ResetPolicy::kSoft) noexcept;$/;"	m	class:ExpressionOpType::ExpressionValueType::SectionFlags::CopySectionFlags::OffsetType::RelocType::LabelType::CodeHolder
noexcept	external/asmjit/src/asmjit/core/codeholder.h	/^  ASMJIT_API void setErrorHandler(ErrorHandler* errorHandler) noexcept;$/;"	m	class:ExpressionOpType::ExpressionValueType::SectionFlags::CopySectionFlags::OffsetType::RelocType::LabelType::CodeHolder
noexcept	external/asmjit/src/asmjit/core/codeholder.h	/^  ASMJIT_API void setLogger(Logger* logger) noexcept;$/;"	m	class:ExpressionOpType::ExpressionValueType::SectionFlags::CopySectionFlags::OffsetType::RelocType::LabelType::CodeHolder
noexcept	external/asmjit/src/asmjit/core/codeholder.h	/^  ASMJIT_API ~CodeHolder() noexcept;$/;"	m	class:ExpressionOpType::ExpressionValueType::SectionFlags::CopySectionFlags::OffsetType::RelocType::LabelType::CodeHolder
noexcept	external/asmjit/src/asmjit/core/codewriter_p.h	/^bool encodeOffset32(uint32_t* dst, int64_t offset64, const OffsetFormat& format) noexcept;$/;"	m	namespace:CodeWriterUtils
noexcept	external/asmjit/src/asmjit/core/codewriter_p.h	/^bool encodeOffset64(uint64_t* dst, int64_t offset64, const OffsetFormat& format) noexcept;$/;"	m	namespace:CodeWriterUtils
noexcept	external/asmjit/src/asmjit/core/codewriter_p.h	/^bool writeOffset(void* dst, int64_t offset64, const OffsetFormat& format) noexcept;$/;"	m	namespace:CodeWriterUtils
noexcept	external/asmjit/src/asmjit/core/compiler.h	/^  ASMJIT_API BaseCompiler() noexcept;$/;"	m	class:BaseCompiler
noexcept	external/asmjit/src/asmjit/core/compiler.h	/^  ASMJIT_API FuncPass(const char* name) noexcept;$/;"	m	class:FuncPass
noexcept	external/asmjit/src/asmjit/core/compiler.h	/^  ASMJIT_API virtual ~BaseCompiler() noexcept;$/;"	m	class:BaseCompiler
noexcept	external/asmjit/src/asmjit/core/constpool.cpp	/^  inline ConstPoolFill(uint8_t* dst, size_t dataSize) noexcept :$/;"	m	struct:ConstPoolFill	file:
noexcept	external/asmjit/src/asmjit/core/constpool.h	/^    ASMJIT_INLINE_NODEBUG explicit Tree(size_t dataSize = 0) noexcept$/;"	m	struct:ConstPoolScope::ConstPool::Tree
noexcept	external/asmjit/src/asmjit/core/constpool.h	/^  ASMJIT_API ConstPool(Zone* zone) noexcept;$/;"	m	class:ConstPoolScope::ConstPool
noexcept	external/asmjit/src/asmjit/core/constpool.h	/^  ASMJIT_API Error add(const void* data, size_t size, size_t& dstOffset) noexcept;$/;"	m	class:ConstPoolScope::ConstPool
noexcept	external/asmjit/src/asmjit/core/constpool.h	/^  ASMJIT_API void fill(void* dst) const noexcept;$/;"	m	class:ConstPoolScope::ConstPool
noexcept	external/asmjit/src/asmjit/core/constpool.h	/^  ASMJIT_API void reset(Zone* zone) noexcept;$/;"	m	class:ConstPoolScope::ConstPool
noexcept	external/asmjit/src/asmjit/core/constpool.h	/^  ASMJIT_API ~ConstPool() noexcept;$/;"	m	class:ConstPoolScope::ConstPool
noexcept	external/asmjit/src/asmjit/core/cpuinfo.h	/^  ASMJIT_API static const CpuInfo& host() noexcept;$/;"	m	class:CpuInfo
noexcept	external/asmjit/src/asmjit/core/cpuinfo.h	/^  ASMJIT_INLINE_NODEBUG CpuFeatures& operator=(const CpuFeatures& other) noexcept = default;$/;"	m	class:CpuFeatures
noexcept	external/asmjit/src/asmjit/core/cpuinfo.h	/^  ASMJIT_INLINE_NODEBUG CpuFeatures(const CpuFeatures& other) noexcept = default;$/;"	m	class:CpuFeatures
noexcept	external/asmjit/src/asmjit/core/cpuinfo.h	/^  ASMJIT_INLINE_NODEBUG CpuInfo& operator=(const CpuInfo& other) noexcept = default;$/;"	m	class:CpuInfo
noexcept	external/asmjit/src/asmjit/core/cpuinfo.h	/^  ASMJIT_INLINE_NODEBUG CpuInfo(const CpuInfo& other) noexcept = default;$/;"	m	class:CpuInfo
noexcept	external/asmjit/src/asmjit/core/emitter.h	/^  ASMJIT_API Label labelByName(const char* name, size_t nameSize = SIZE_MAX, uint32_t parentId = Globals::kInvalidId) noexcept;$/;"	m	class:AlignMode::EmitterType::EmitterFlags::EncodingOptions::BaseEmitter
noexcept	external/asmjit/src/asmjit/core/emitter.h	/^  ASMJIT_API bool isLabelValid(uint32_t labelId) const noexcept;$/;"	m	class:AlignMode::EmitterType::EmitterFlags::EncodingOptions::BaseEmitter
noexcept	external/asmjit/src/asmjit/core/emitter.h	/^  ASMJIT_API explicit BaseEmitter(EmitterType emitterType) noexcept;$/;"	m	class:AlignMode::EmitterType::EmitterFlags::EncodingOptions::BaseEmitter
noexcept	external/asmjit/src/asmjit/core/emitter.h	/^  ASMJIT_API virtual Error onAttach(CodeHolder* ASMJIT_NONNULL(code)) noexcept;$/;"	m	class:AlignMode::EmitterType::EmitterFlags::EncodingOptions::BaseEmitter
noexcept	external/asmjit/src/asmjit/core/emitter.h	/^  ASMJIT_API virtual Error onDetach(CodeHolder* ASMJIT_NONNULL(code)) noexcept;$/;"	m	class:AlignMode::EmitterType::EmitterFlags::EncodingOptions::BaseEmitter
noexcept	external/asmjit/src/asmjit/core/emitter.h	/^  ASMJIT_API virtual void onSettingsUpdated() noexcept;$/;"	m	class:AlignMode::EmitterType::EmitterFlags::EncodingOptions::BaseEmitter
noexcept	external/asmjit/src/asmjit/core/emitter.h	/^  ASMJIT_API virtual ~BaseEmitter() noexcept;$/;"	m	class:AlignMode::EmitterType::EmitterFlags::EncodingOptions::BaseEmitter
noexcept	external/asmjit/src/asmjit/core/emitter.h	/^  ASMJIT_API void addDiagnosticOptions(DiagnosticOptions options) noexcept;$/;"	m	class:AlignMode::EmitterType::EmitterFlags::EncodingOptions::BaseEmitter
noexcept	external/asmjit/src/asmjit/core/emitter.h	/^  ASMJIT_API void clearDiagnosticOptions(DiagnosticOptions options) noexcept;$/;"	m	class:AlignMode::EmitterType::EmitterFlags::EncodingOptions::BaseEmitter
noexcept	external/asmjit/src/asmjit/core/emitter.h	/^  ASMJIT_API void setErrorHandler(ErrorHandler* errorHandler) noexcept;$/;"	m	class:AlignMode::EmitterType::EmitterFlags::EncodingOptions::BaseEmitter
noexcept	external/asmjit/src/asmjit/core/emitter.h	/^  ASMJIT_API void setLogger(Logger* logger) noexcept;$/;"	m	class:AlignMode::EmitterType::EmitterFlags::EncodingOptions::BaseEmitter
noexcept	external/asmjit/src/asmjit/core/emitterutils_p.h	/^Error finishFormattedLine(String& sb, const FormatOptions& formatOptions, const uint8_t* binData, size_t binSize, size_t offsetSize, size_t immSize, const char* comment) noexcept;$/;"	m	namespace:EmitterUtils
noexcept	external/asmjit/src/asmjit/core/emitterutils_p.h	/^void logLabelBound(BaseAssembler* self, const Label& label) noexcept;$/;"	m	namespace:EmitterUtils
noexcept	external/asmjit/src/asmjit/core/environment.h	/^  ASMJIT_API uint32_t stackAlignment() const noexcept;$/;"	m	class:Vendor::Platform::PlatformABI::Environment
noexcept	external/asmjit/src/asmjit/core/environment.h	/^  ASMJIT_INLINE_NODEBUG Environment& operator=(const Environment& other) noexcept = default;$/;"	m	class:Vendor::Platform::PlatformABI::Environment
noexcept	external/asmjit/src/asmjit/core/environment.h	/^  ASMJIT_INLINE_NODEBUG Environment(const Environment& other) noexcept = default;$/;"	m	class:Vendor::Platform::PlatformABI::Environment
noexcept	external/asmjit/src/asmjit/core/errorhandler.h	/^  ASMJIT_API ErrorHandler() noexcept;$/;"	m	class:ErrorHandler
noexcept	external/asmjit/src/asmjit/core/errorhandler.h	/^  ASMJIT_API virtual ~ErrorHandler() noexcept;$/;"	m	class:ErrorHandler
noexcept	external/asmjit/src/asmjit/core/formatter.h	/^  TypeId typeId) noexcept;$/;"	m	namespace:FormatFlags::FormatIndentationGroup::FormatPaddingGroup::Formatter
noexcept	external/asmjit/src/asmjit/core/formatter.h	/^  TypeId typeId, const void* data, size_t itemCount, size_t repeatCount = 1) noexcept;$/;"	m	namespace:FormatFlags::FormatIndentationGroup::FormatPaddingGroup::Formatter
noexcept	external/asmjit/src/asmjit/core/formatter.h	/^  const BaseBuilder* builder) noexcept;$/;"	m	namespace:FormatFlags::FormatIndentationGroup::FormatPaddingGroup::Formatter
noexcept	external/asmjit/src/asmjit/core/formatter.h	/^  const BaseInst& inst, const Operand_* operands, size_t opCount) noexcept;$/;"	m	namespace:FormatFlags::FormatIndentationGroup::FormatPaddingGroup::Formatter
noexcept	external/asmjit/src/asmjit/core/formatter.h	/^  const BaseNode* end) noexcept;$/;"	m	namespace:FormatFlags::FormatIndentationGroup::FormatPaddingGroup::Formatter
noexcept	external/asmjit/src/asmjit/core/formatter.h	/^  const BaseNode* node) noexcept;$/;"	m	namespace:FormatFlags::FormatIndentationGroup::FormatPaddingGroup::Formatter
noexcept	external/asmjit/src/asmjit/core/formatter.h	/^  const Operand_& op) noexcept;$/;"	m	namespace:FormatFlags::FormatIndentationGroup::FormatPaddingGroup::Formatter
noexcept	external/asmjit/src/asmjit/core/formatter.h	/^  uint32_t featureId) noexcept;$/;"	m	namespace:FormatFlags::FormatIndentationGroup::FormatPaddingGroup::Formatter
noexcept	external/asmjit/src/asmjit/core/formatter.h	/^  uint32_t labelId) noexcept;$/;"	m	namespace:FormatFlags::FormatIndentationGroup::FormatPaddingGroup::Formatter
noexcept	external/asmjit/src/asmjit/core/formatter.h	/^  uint32_t regId) noexcept;$/;"	m	namespace:FormatFlags::FormatIndentationGroup::FormatPaddingGroup::Formatter
noexcept	external/asmjit/src/asmjit/core/func.h	/^  ASMJIT_API Error finalize() noexcept;$/;"	m	class:CallConvId::CallConvStrategy::CallConvFlags::FuncAttributes::FuncFrame
noexcept	external/asmjit/src/asmjit/core/func.h	/^  ASMJIT_API Error init(CallConvId ccId, const Environment& environment) noexcept;$/;"	m	struct:CallConvId::CallConvStrategy::CallConvFlags::CallConv
noexcept	external/asmjit/src/asmjit/core/func.h	/^  ASMJIT_API Error init(const FuncDetail& func) noexcept;$/;"	m	class:CallConvId::CallConvStrategy::CallConvFlags::FuncAttributes::FuncFrame
noexcept	external/asmjit/src/asmjit/core/func.h	/^  ASMJIT_API Error init(const FuncSignature& signature, const Environment& environment) noexcept;$/;"	m	class:CallConvId::CallConvStrategy::CallConvFlags::FuncAttributes::FuncDetail
noexcept	external/asmjit/src/asmjit/core/func.h	/^  ASMJIT_API Error updateFuncFrame(FuncFrame& frame) const noexcept;$/;"	m	class:CallConvId::CallConvStrategy::CallConvFlags::FuncAttributes::FuncArgsAssignment
noexcept	external/asmjit/src/asmjit/core/func.h	/^  ASMJIT_INLINE_NODEBUG FuncDetail& operator=(const FuncDetail& other) noexcept = default;$/;"	m	class:CallConvId::CallConvStrategy::CallConvFlags::FuncAttributes::FuncDetail
noexcept	external/asmjit/src/asmjit/core/func.h	/^  ASMJIT_INLINE_NODEBUG FuncDetail(const FuncDetail& other) noexcept = default;$/;"	m	class:CallConvId::CallConvStrategy::CallConvFlags::FuncAttributes::FuncDetail
noexcept	external/asmjit/src/asmjit/core/func.h	/^  ASMJIT_INLINE_NODEBUG FuncFrame(const FuncFrame& other) noexcept = default;$/;"	m	class:CallConvId::CallConvStrategy::CallConvFlags::FuncAttributes::FuncFrame
noexcept	external/asmjit/src/asmjit/core/funcargscontext_p.h	/^  Error initWorkData(const FuncFrame& frame, const FuncArgsAssignment& args, const RAConstraints* constraints) noexcept;$/;"	m	class:FuncArgsContext
noexcept	external/asmjit/src/asmjit/core/funcargscontext_p.h	/^  Error markDstRegsDirty(FuncFrame& frame) noexcept;$/;"	m	class:FuncArgsContext
noexcept	external/asmjit/src/asmjit/core/funcargscontext_p.h	/^  Error markScratchRegs(FuncFrame& frame) noexcept;$/;"	m	class:FuncArgsContext
noexcept	external/asmjit/src/asmjit/core/funcargscontext_p.h	/^  Error markStackArgsReg(FuncFrame& frame) noexcept;$/;"	m	class:FuncArgsContext
noexcept	external/asmjit/src/asmjit/core/funcargscontext_p.h	/^  FuncArgsContext() noexcept;$/;"	m	class:FuncArgsContext
noexcept	external/asmjit/src/asmjit/core/globals.h	/^ASMJIT_API const char* errorAsString(Error err) noexcept;$/;"	m	namespace:ByteOrder::ResetPolicy::DebugUtils
noexcept	external/asmjit/src/asmjit/core/globals.h	/^ASMJIT_API void ASMJIT_NORETURN assertionFailed(const char* file, int line, const char* msg) noexcept;$/;"	m	namespace:ByteOrder::ResetPolicy::DebugUtils
noexcept	external/asmjit/src/asmjit/core/globals.h	/^ASMJIT_API void debugOutput(const char* str) noexcept;$/;"	m	namespace:ByteOrder::ResetPolicy::DebugUtils
noexcept	external/asmjit/src/asmjit/core/inst.h	/^ASMJIT_API Error instIdToString(Arch arch, InstId instId, String& output) noexcept;$/;"	m	namespace:InstIdParts::InstOptions::InstControlFlow::InstSameRegHint::CpuRWFlags::OpRWFlags::InstRWFlags::ValidationFlags::InstAPI
noexcept	external/asmjit/src/asmjit/core/inst.h	/^ASMJIT_API Error queryFeatures(Arch arch, const BaseInst& inst, const Operand_* operands, size_t opCount, CpuFeatures* out) noexcept;$/;"	m	namespace:InstIdParts::InstOptions::InstControlFlow::InstSameRegHint::CpuRWFlags::OpRWFlags::InstRWFlags::ValidationFlags::InstAPI
noexcept	external/asmjit/src/asmjit/core/inst.h	/^ASMJIT_API Error queryRWInfo(Arch arch, const BaseInst& inst, const Operand_* operands, size_t opCount, InstRWInfo* out) noexcept;$/;"	m	namespace:InstIdParts::InstOptions::InstControlFlow::InstSameRegHint::CpuRWFlags::OpRWFlags::InstRWFlags::ValidationFlags::InstAPI
noexcept	external/asmjit/src/asmjit/core/inst.h	/^ASMJIT_API Error validate(Arch arch, const BaseInst& inst, const Operand_* operands, size_t opCount, ValidationFlags validationFlags = ValidationFlags::kNone) noexcept;$/;"	m	namespace:InstIdParts::InstOptions::InstControlFlow::InstSameRegHint::CpuRWFlags::OpRWFlags::InstRWFlags::ValidationFlags::InstAPI
noexcept	external/asmjit/src/asmjit/core/inst.h	/^ASMJIT_API InstId stringToInstId(Arch arch, const char* s, size_t len) noexcept;$/;"	m	namespace:InstIdParts::InstOptions::InstControlFlow::InstSameRegHint::CpuRWFlags::OpRWFlags::InstRWFlags::ValidationFlags::InstAPI
noexcept	external/asmjit/src/asmjit/core/jitallocator.cpp	/^  inline Random(const Random& other) noexcept = default;$/;"	m	class:Random	file:
noexcept	external/asmjit/src/asmjit/core/jitallocator.h	/^    VirtMem::CachePolicy policy = VirtMem::CachePolicy::kDefault) noexcept;$/;"	m	class:JitAllocatorOptions::JitAllocator::Span
noexcept	external/asmjit/src/asmjit/core/jitallocator.h	/^  ASMJIT_API Error alloc(Span& out, size_t size) noexcept;$/;"	m	class:JitAllocatorOptions::JitAllocator::Span
noexcept	external/asmjit/src/asmjit/core/jitallocator.h	/^  ASMJIT_API Error beginWriteScope(WriteScopeData& scope, VirtMem::CachePolicy policy = VirtMem::CachePolicy::kDefault) noexcept;$/;"	m	class:JitAllocatorOptions::JitAllocator::Span
noexcept	external/asmjit/src/asmjit/core/jitallocator.h	/^  ASMJIT_API Error endWriteScope(WriteScopeData& scope) noexcept;$/;"	m	class:JitAllocatorOptions::JitAllocator::Span
noexcept	external/asmjit/src/asmjit/core/jitallocator.h	/^  ASMJIT_API Error flushWriteScope(WriteScopeData& scope) noexcept;$/;"	m	class:JitAllocatorOptions::JitAllocator::Span
noexcept	external/asmjit/src/asmjit/core/jitallocator.h	/^  ASMJIT_API Error query(Span& out, void* rx) const noexcept;$/;"	m	class:JitAllocatorOptions::JitAllocator::Span
noexcept	external/asmjit/src/asmjit/core/jitallocator.h	/^  ASMJIT_API Error release(void* rx) noexcept;$/;"	m	class:JitAllocatorOptions::JitAllocator::Span
noexcept	external/asmjit/src/asmjit/core/jitallocator.h	/^  ASMJIT_API Error scopedWrite(WriteScopeData& scope, Span& span, WriteFunc writeFunc, void* userData) noexcept;$/;"	m	class:JitAllocatorOptions::JitAllocator::Span
noexcept	external/asmjit/src/asmjit/core/jitallocator.h	/^  ASMJIT_API Error scopedWrite(WriteScopeData& scope, Span& span, size_t offset, const void* src, size_t size) noexcept;$/;"	m	class:JitAllocatorOptions::JitAllocator::Span
noexcept	external/asmjit/src/asmjit/core/jitallocator.h	/^  ASMJIT_API Error shrink(Span& span, size_t newSize) noexcept;$/;"	m	class:JitAllocatorOptions::JitAllocator::Span
noexcept	external/asmjit/src/asmjit/core/jitallocator.h	/^  ASMJIT_API Statistics statistics() const noexcept;$/;"	m	class:JitAllocatorOptions::JitAllocator::Span
noexcept	external/asmjit/src/asmjit/core/jitallocator.h	/^  ASMJIT_API explicit JitAllocator(const CreateParams* params = nullptr) noexcept;$/;"	m	class:JitAllocatorOptions::JitAllocator
noexcept	external/asmjit/src/asmjit/core/jitallocator.h	/^  ASMJIT_API void reset(ResetPolicy resetPolicy = ResetPolicy::kSoft) noexcept;$/;"	m	class:JitAllocatorOptions::JitAllocator
noexcept	external/asmjit/src/asmjit/core/jitallocator.h	/^  ASMJIT_API ~JitAllocator() noexcept;$/;"	m	class:JitAllocatorOptions::JitAllocator
noexcept	external/asmjit/src/asmjit/core/jitruntime.h	/^  ASMJIT_API explicit JitRuntime(const JitAllocator::CreateParams* params = nullptr) noexcept;$/;"	m	class:JitRuntime
noexcept	external/asmjit/src/asmjit/core/jitruntime.h	/^  ASMJIT_API virtual Error _add(void** dst, CodeHolder* code) noexcept;$/;"	m	class:JitRuntime
noexcept	external/asmjit/src/asmjit/core/jitruntime.h	/^  ASMJIT_API virtual Error _release(void* p) noexcept;$/;"	m	class:JitRuntime
noexcept	external/asmjit/src/asmjit/core/jitruntime.h	/^  ASMJIT_API virtual ~JitRuntime() noexcept;$/;"	m	class:JitRuntime
noexcept	external/asmjit/src/asmjit/core/logger.h	/^  ASMJIT_API Error logf(const char* fmt, ...) noexcept;$/;"	m	class:Logger
noexcept	external/asmjit/src/asmjit/core/logger.h	/^  ASMJIT_API Error logv(const char* fmt, va_list ap) noexcept;$/;"	m	class:Logger
noexcept	external/asmjit/src/asmjit/core/logger.h	/^  ASMJIT_API FileLogger(FILE* file = nullptr) noexcept;$/;"	m	class:FileLogger
noexcept	external/asmjit/src/asmjit/core/logger.h	/^  ASMJIT_API Logger() noexcept;$/;"	m	class:Logger
noexcept	external/asmjit/src/asmjit/core/logger.h	/^  ASMJIT_API StringLogger() noexcept;$/;"	m	class:StringLogger
noexcept	external/asmjit/src/asmjit/core/logger.h	/^  ASMJIT_API virtual Error _log(const char* data, size_t size) noexcept = 0;$/;"	m	class:Logger
noexcept	external/asmjit/src/asmjit/core/logger.h	/^  ASMJIT_API virtual ~FileLogger() noexcept;$/;"	m	class:FileLogger
noexcept	external/asmjit/src/asmjit/core/logger.h	/^  ASMJIT_API virtual ~Logger() noexcept;$/;"	m	class:Logger
noexcept	external/asmjit/src/asmjit/core/logger.h	/^  ASMJIT_API virtual ~StringLogger() noexcept;$/;"	m	class:StringLogger
noexcept	external/asmjit/src/asmjit/core/operand.h	/^  ASMJIT_INLINE_NODEBUG BaseReg& operator=(const BaseReg& other) noexcept = default;$/;"	m	class:OperandType::RegType::RegGroup::BaseReg
noexcept	external/asmjit/src/asmjit/core/operand.h	/^  ASMJIT_INLINE_NODEBUG Label& operator=(const Label& other) noexcept = default;$/;"	m	class:OperandType::RegType::RegGroup::Label
noexcept	external/asmjit/src/asmjit/core/operand.h	/^  ASMJIT_INLINE_NODEBUG Operand& operator=(const Operand& other) noexcept = default;$/;"	m	class:OperandType::RegType::RegGroup::Operand
noexcept	external/asmjit/src/asmjit/core/operand.h	/^  ASMJIT_INLINE_NODEBUG constexpr Operand(const Operand& other) noexcept = default;$/;"	m	class:OperandType::RegType::RegGroup::Operand
noexcept	external/asmjit/src/asmjit/core/osutils.h	/^  ASMJIT_INLINE_NODEBUG Lock() noexcept;$/;"	m	class:Lock
noexcept	external/asmjit/src/asmjit/core/osutils.h	/^  ASMJIT_INLINE_NODEBUG void lock() noexcept;$/;"	m	class:Lock
noexcept	external/asmjit/src/asmjit/core/osutils.h	/^  ASMJIT_INLINE_NODEBUG void unlock() noexcept;$/;"	m	class:Lock
noexcept	external/asmjit/src/asmjit/core/osutils.h	/^  ASMJIT_INLINE_NODEBUG ~Lock() noexcept;$/;"	m	class:Lock
noexcept	external/asmjit/src/asmjit/core/osutils.h	/^ASMJIT_API uint32_t getTickCount() noexcept;$/;"	m	namespace:OSUtils
noexcept	external/asmjit/src/asmjit/core/osutils_p.h	/^Error readFile(const char* name, String& dst, size_t maxSize) noexcept;$/;"	m	namespace:OSUtils
noexcept	external/asmjit/src/asmjit/core/radefs_p.h	/^  ASMJIT_INLINE_NODEBUG RALiveCount& operator=(const RALiveCount& other) noexcept = default;$/;"	m	class:RAStrategyType::RAStrategyFlags::RALiveCount
noexcept	external/asmjit/src/asmjit/core/radefs_p.h	/^  ASMJIT_INLINE_NODEBUG RALiveCount() noexcept = default;$/;"	m	class:RAStrategyType::RAStrategyFlags::RALiveCount
noexcept	external/asmjit/src/asmjit/core/radefs_p.h	/^  ASMJIT_INLINE_NODEBUG RALiveCount(const RALiveCount& other) noexcept = default;$/;"	m	class:RAStrategyType::RAStrategyFlags::RALiveCount
noexcept	external/asmjit/src/asmjit/core/radefs_p.h	/^  ASMJIT_INLINE_NODEBUG RALiveInterval() noexcept : a(0), b(0) {}$/;"	m	struct:RAStrategyType::RAStrategyFlags::RALiveInterval
noexcept	external/asmjit/src/asmjit/core/radefs_p.h	/^  ASMJIT_INLINE_NODEBUG RALiveInterval(const RALiveInterval& other) noexcept : a(other.a), b(other.b) {}$/;"	m	struct:RAStrategyType::RAStrategyFlags::RALiveInterval
noexcept	external/asmjit/src/asmjit/core/radefs_p.h	/^  ASMJIT_INLINE_NODEBUG RALiveInterval(uint32_t a, uint32_t b) noexcept : a(a), b(b) {}$/;"	m	struct:RAStrategyType::RAStrategyFlags::RALiveInterval
noexcept	external/asmjit/src/asmjit/core/radefs_p.h	/^  ASMJIT_INLINE_NODEBUG explicit LiveRegData(uint32_t id = BaseReg::kIdBad) noexcept : id(id) {}$/;"	m	struct:RAStrategyType::RAStrategyFlags::LiveRegData
noexcept	external/asmjit/src/asmjit/core/ralocal_p.h	/^  Error allocBranch(InstNode* node, RABlock* target, RABlock* cont) noexcept;$/;"	m	class:RALocalAllocator
noexcept	external/asmjit/src/asmjit/core/ralocal_p.h	/^  Error allocInst(InstNode* node) noexcept;$/;"	m	class:RALocalAllocator
noexcept	external/asmjit/src/asmjit/core/ralocal_p.h	/^  Error allocJumpTable(InstNode* node, const RABlocks& targets, RABlock* cont) noexcept;$/;"	m	class:RALocalAllocator
noexcept	external/asmjit/src/asmjit/core/ralocal_p.h	/^  Error init() noexcept;$/;"	m	class:RALocalAllocator
noexcept	external/asmjit/src/asmjit/core/ralocal_p.h	/^  Error makeInitialAssignment() noexcept;$/;"	m	class:RALocalAllocator
noexcept	external/asmjit/src/asmjit/core/ralocal_p.h	/^  Error replaceAssignment(const PhysToWorkMap* physToWorkMap) noexcept;$/;"	m	class:RALocalAllocator
noexcept	external/asmjit/src/asmjit/core/ralocal_p.h	/^  Error spillAfterAllocation(InstNode* node) noexcept;$/;"	m	class:RALocalAllocator
noexcept	external/asmjit/src/asmjit/core/ralocal_p.h	/^  Error spillScratchGpRegsBeforeEntry(uint32_t scratchRegs) noexcept;$/;"	m	class:RALocalAllocator
noexcept	external/asmjit/src/asmjit/core/ralocal_p.h	/^  Error switchToAssignment(PhysToWorkMap* dstPhysToWorkMap, const ZoneBitVector& liveIn, bool dstReadOnly, bool tryMode) noexcept;$/;"	m	class:RALocalAllocator
noexcept	external/asmjit/src/asmjit/core/ralocal_p.h	/^  uint32_t decideOnAssignment(RegGroup group, uint32_t workId, uint32_t assignedId, RegMask allocableRegs) const noexcept;$/;"	m	class:RALocalAllocator
noexcept	external/asmjit/src/asmjit/core/ralocal_p.h	/^  uint32_t decideOnReassignment(RegGroup group, uint32_t workId, uint32_t assignedId, RegMask allocableRegs) const noexcept;$/;"	m	class:RALocalAllocator
noexcept	external/asmjit/src/asmjit/core/ralocal_p.h	/^  uint32_t decideOnSpillFor(RegGroup group, uint32_t workId, RegMask spillableRegs, uint32_t* spillWorkId) const noexcept;$/;"	m	class:RALocalAllocator
noexcept	external/asmjit/src/asmjit/core/rapass.cpp	/^  inline RABlockVisitItem& operator=(const RABlockVisitItem& other) noexcept = default;$/;"	m	class:RABlockVisitItem	file:
noexcept	external/asmjit/src/asmjit/core/rapass_p.h	/^  ASMJIT_INLINE_NODEBUG RegMask entryScratchGpRegs() const noexcept;$/;"	m	class:RABlockFlags::RABlock
noexcept	external/asmjit/src/asmjit/core/rapass_p.h	/^  ASMJIT_INLINE_NODEBUG ZoneAllocator* allocator() const noexcept;$/;"	m	class:RABlockFlags::RABlock
noexcept	external/asmjit/src/asmjit/core/rapass_p.h	/^  BaseNode* findSuccessorStartingAt(BaseNode* node) noexcept;$/;"	m	class:RABlockFlags::BaseRAPass
noexcept	external/asmjit/src/asmjit/core/rapass_p.h	/^  BaseRAPass() noexcept;$/;"	m	class:RABlockFlags::BaseRAPass
noexcept	external/asmjit/src/asmjit/core/rapass_p.h	/^  Error _asWorkReg(VirtReg* vReg, RAWorkReg** out) noexcept;$/;"	m	class:RABlockFlags::BaseRAPass
noexcept	external/asmjit/src/asmjit/core/rapass_p.h	/^  Error _dumpBlockIds(String& sb, const RABlocks& blocks) noexcept;$/;"	m	class:RABlockFlags::BaseRAPass
noexcept	external/asmjit/src/asmjit/core/rapass_p.h	/^  Error _dumpBlockLiveness(String& sb, const RABlock* block) noexcept;$/;"	m	class:RABlockFlags::BaseRAPass
noexcept	external/asmjit/src/asmjit/core/rapass_p.h	/^  Error _dumpLiveSpans(String& sb) noexcept;$/;"	m	class:RABlockFlags::BaseRAPass
noexcept	external/asmjit/src/asmjit/core/rapass_p.h	/^  Error _markStackArgsToKeep() noexcept;$/;"	m	class:RABlockFlags::BaseRAPass
noexcept	external/asmjit/src/asmjit/core/rapass_p.h	/^  Error _updateStackArgs() noexcept;$/;"	m	class:RABlockFlags::BaseRAPass
noexcept	external/asmjit/src/asmjit/core/rapass_p.h	/^  Error addBlock(RABlock* block) noexcept;$/;"	m	class:RABlockFlags::BaseRAPass
noexcept	external/asmjit/src/asmjit/core/rapass_p.h	/^  Error annotateCode() noexcept;$/;"	m	class:RABlockFlags::BaseRAPass
noexcept	external/asmjit/src/asmjit/core/rapass_p.h	/^  Error appendSuccessor(RABlock* successor) noexcept;$/;"	m	class:RABlockFlags::RABlock
noexcept	external/asmjit/src/asmjit/core/rapass_p.h	/^  Error assignArgIndexToWorkRegs() noexcept;$/;"	m	class:RABlockFlags::BaseRAPass
noexcept	external/asmjit/src/asmjit/core/rapass_p.h	/^  Error binPack(RegGroup group) noexcept;$/;"	m	class:RABlockFlags::BaseRAPass
noexcept	external/asmjit/src/asmjit/core/rapass_p.h	/^  Error blockEntryAssigned(const PhysToWorkMap* physToWorkMap) noexcept;$/;"	m	class:RABlockFlags::BaseRAPass
noexcept	external/asmjit/src/asmjit/core/rapass_p.h	/^  Error buildCFGDominators() noexcept;$/;"	m	class:RABlockFlags::BaseRAPass
noexcept	external/asmjit/src/asmjit/core/rapass_p.h	/^  Error buildCFGViews() noexcept;$/;"	m	class:RABlockFlags::BaseRAPass
noexcept	external/asmjit/src/asmjit/core/rapass_p.h	/^  Error buildLiveness() noexcept;$/;"	m	class:RABlockFlags::BaseRAPass
noexcept	external/asmjit/src/asmjit/core/rapass_p.h	/^  Error initGlobalLiveSpans() noexcept;$/;"	m	class:RABlockFlags::BaseRAPass
noexcept	external/asmjit/src/asmjit/core/rapass_p.h	/^  Error initSharedAssignments(const ZoneVector<uint32_t>& sharedAssignmentsMap) noexcept;$/;"	m	class:RABlockFlags::BaseRAPass
noexcept	external/asmjit/src/asmjit/core/rapass_p.h	/^  Error insertPrologEpilog() noexcept;$/;"	m	class:RABlockFlags::BaseRAPass
noexcept	external/asmjit/src/asmjit/core/rapass_p.h	/^  Error onPerformAllSteps() noexcept;$/;"	m	class:RABlockFlags::BaseRAPass
noexcept	external/asmjit/src/asmjit/core/rapass_p.h	/^  Error prependSuccessor(RABlock* successor) noexcept;$/;"	m	class:RABlockFlags::RABlock
noexcept	external/asmjit/src/asmjit/core/rapass_p.h	/^  Error removeUnreachableCode() noexcept;$/;"	m	class:RABlockFlags::BaseRAPass
noexcept	external/asmjit/src/asmjit/core/rapass_p.h	/^  Error rewrite() noexcept;$/;"	m	class:RABlockFlags::BaseRAPass
noexcept	external/asmjit/src/asmjit/core/rapass_p.h	/^  Error runGlobalAllocator() noexcept;$/;"	m	class:RABlockFlags::BaseRAPass
noexcept	external/asmjit/src/asmjit/core/rapass_p.h	/^  Error runLocalAllocator() noexcept;$/;"	m	class:RABlockFlags::BaseRAPass
noexcept	external/asmjit/src/asmjit/core/rapass_p.h	/^  Error setBlockEntryAssignment(RABlock* block, const RABlock* fromBlock, const RAAssignment& fromAssignment) noexcept;$/;"	m	class:RABlockFlags::BaseRAPass
noexcept	external/asmjit/src/asmjit/core/rapass_p.h	/^  Error setSharedAssignment(uint32_t sharedAssignmentId, const RAAssignment& fromAssignment) noexcept;$/;"	m	class:RABlockFlags::BaseRAPass
noexcept	external/asmjit/src/asmjit/core/rapass_p.h	/^  Error useTemporaryMem(BaseMem& out, uint32_t size, uint32_t alignment) noexcept;$/;"	m	class:RABlockFlags::BaseRAPass
noexcept	external/asmjit/src/asmjit/core/rapass_p.h	/^  PhysToWorkMap* newPhysToWorkMap() noexcept;$/;"	m	class:RABlockFlags::BaseRAPass
noexcept	external/asmjit/src/asmjit/core/rapass_p.h	/^  RABlock* newBlock(BaseNode* initialNode = nullptr) noexcept;$/;"	m	class:RABlockFlags::BaseRAPass
noexcept	external/asmjit/src/asmjit/core/rapass_p.h	/^  RABlock* newBlockOrExistingAt(LabelNode* cbLabel, BaseNode** stoppedAt = nullptr) noexcept;$/;"	m	class:RABlockFlags::BaseRAPass
noexcept	external/asmjit/src/asmjit/core/rapass_p.h	/^  WorkToPhysMap* newWorkToPhysMap() noexcept;$/;"	m	class:RABlockFlags::BaseRAPass
noexcept	external/asmjit/src/asmjit/core/rapass_p.h	/^  bool _strictlyDominates(const RABlock* a, const RABlock* b) const noexcept;$/;"	m	class:RABlockFlags::BaseRAPass
noexcept	external/asmjit/src/asmjit/core/rapass_p.h	/^  bool isNextTo(BaseNode* node, BaseNode* target) noexcept;$/;"	m	class:RABlockFlags::BaseRAPass
noexcept	external/asmjit/src/asmjit/core/rapass_p.h	/^  const RABlock* _nearestCommonDominator(const RABlock* a, const RABlock* b) const noexcept;$/;"	m	class:RABlockFlags::BaseRAPass
noexcept	external/asmjit/src/asmjit/core/rapass_p.h	/^  virtual Error _rewrite(BaseNode* first, BaseNode* stop) noexcept = 0;$/;"	m	class:RABlockFlags::BaseRAPass
noexcept	external/asmjit/src/asmjit/core/rapass_p.h	/^  virtual Error buildCFG() noexcept = 0;$/;"	m	class:RABlockFlags::BaseRAPass
noexcept	external/asmjit/src/asmjit/core/rapass_p.h	/^  virtual Error emitJump(const Label& label) noexcept = 0;$/;"	m	class:RABlockFlags::BaseRAPass
noexcept	external/asmjit/src/asmjit/core/rapass_p.h	/^  virtual Error emitLoad(uint32_t workId, uint32_t dstPhysId) noexcept = 0;$/;"	m	class:RABlockFlags::BaseRAPass
noexcept	external/asmjit/src/asmjit/core/rapass_p.h	/^  virtual Error emitMove(uint32_t workId, uint32_t dstPhysId, uint32_t srcPhysId) noexcept = 0;$/;"	m	class:RABlockFlags::BaseRAPass
noexcept	external/asmjit/src/asmjit/core/rapass_p.h	/^  virtual Error emitPreCall(InvokeNode* invokeNode) noexcept;$/;"	m	class:RABlockFlags::BaseRAPass
noexcept	external/asmjit/src/asmjit/core/rapass_p.h	/^  virtual Error emitSave(uint32_t workId, uint32_t srcPhysId) noexcept = 0;$/;"	m	class:RABlockFlags::BaseRAPass
noexcept	external/asmjit/src/asmjit/core/rapass_p.h	/^  virtual Error emitSwap(uint32_t aWorkId, uint32_t aPhysId, uint32_t bWorkId, uint32_t bPhysId) noexcept = 0;$/;"	m	class:RABlockFlags::BaseRAPass
noexcept	external/asmjit/src/asmjit/core/rapass_p.h	/^  virtual Error updateStackFrame() noexcept;$/;"	m	class:RABlockFlags::BaseRAPass
noexcept	external/asmjit/src/asmjit/core/rapass_p.h	/^  virtual void onDone() noexcept;$/;"	m	class:RABlockFlags::BaseRAPass
noexcept	external/asmjit/src/asmjit/core/rapass_p.h	/^  virtual void onInit() noexcept;$/;"	m	class:RABlockFlags::BaseRAPass
noexcept	external/asmjit/src/asmjit/core/rapass_p.h	/^  virtual ~BaseRAPass() noexcept;$/;"	m	class:RABlockFlags::BaseRAPass
noexcept	external/asmjit/src/asmjit/core/rastack.cpp	/^  inline RAStackGap() noexcept$/;"	m	struct:RAStackGap	file:
noexcept	external/asmjit/src/asmjit/core/rastack.cpp	/^  inline RAStackGap(const RAStackGap& other) noexcept$/;"	m	struct:RAStackGap	file:
noexcept	external/asmjit/src/asmjit/core/rastack.cpp	/^  inline RAStackGap(uint32_t offset, uint32_t size) noexcept$/;"	m	struct:RAStackGap	file:
noexcept	external/asmjit/src/asmjit/core/rastack_p.h	/^  Error adjustSlotOffsets(int32_t offset) noexcept;$/;"	m	class:RAStackAllocator
noexcept	external/asmjit/src/asmjit/core/rastack_p.h	/^  Error calculateStackFrame() noexcept;$/;"	m	class:RAStackAllocator
noexcept	external/asmjit/src/asmjit/core/rastack_p.h	/^  RAStackSlot* newSlot(uint32_t baseRegId, uint32_t size, uint32_t alignment, uint32_t flags = 0) noexcept;$/;"	m	class:RAStackAllocator
noexcept	external/asmjit/src/asmjit/core/string.h	/^  ASMJIT_API Error _opChar(ModifyOp op, char c) noexcept;$/;"	m	class:StringFormatFlags::String::ModifyOp
noexcept	external/asmjit/src/asmjit/core/string.h	/^  ASMJIT_API Error _opChars(ModifyOp op, char c, size_t n) noexcept;$/;"	m	class:StringFormatFlags::String::ModifyOp
noexcept	external/asmjit/src/asmjit/core/string.h	/^  ASMJIT_API Error _opFormat(ModifyOp op, const char* fmt, ...) noexcept;$/;"	m	class:StringFormatFlags::String::ModifyOp
noexcept	external/asmjit/src/asmjit/core/string.h	/^  ASMJIT_API Error _opHex(ModifyOp op, const void* data, size_t size, char separator = '\\0') noexcept;$/;"	m	class:StringFormatFlags::String::ModifyOp
noexcept	external/asmjit/src/asmjit/core/string.h	/^  ASMJIT_API Error _opNumber(ModifyOp op, uint64_t i, uint32_t base = 0, size_t width = 0, StringFormatFlags flags = StringFormatFlags::kNone) noexcept;$/;"	m	class:StringFormatFlags::String::ModifyOp
noexcept	external/asmjit/src/asmjit/core/string.h	/^  ASMJIT_API Error _opString(ModifyOp op, const char* str, size_t size = SIZE_MAX) noexcept;$/;"	m	class:StringFormatFlags::String::ModifyOp
noexcept	external/asmjit/src/asmjit/core/string.h	/^  ASMJIT_API Error _opVFormat(ModifyOp op, const char* fmt, va_list ap) noexcept;$/;"	m	class:StringFormatFlags::String::ModifyOp
noexcept	external/asmjit/src/asmjit/core/string.h	/^  ASMJIT_API Error assign(const char* data, size_t size = SIZE_MAX) noexcept;$/;"	m	class:StringFormatFlags::String::ModifyOp
noexcept	external/asmjit/src/asmjit/core/string.h	/^  ASMJIT_API Error clear() noexcept;$/;"	m	class:StringFormatFlags::String::ModifyOp
noexcept	external/asmjit/src/asmjit/core/string.h	/^  ASMJIT_API Error padEnd(size_t n, char c = ' ') noexcept;$/;"	m	class:StringFormatFlags::String::ModifyOp
noexcept	external/asmjit/src/asmjit/core/string.h	/^  ASMJIT_API Error reset() noexcept;$/;"	m	class:StringFormatFlags::String::ModifyOp
noexcept	external/asmjit/src/asmjit/core/string.h	/^  ASMJIT_API Error truncate(size_t newSize) noexcept;$/;"	m	class:StringFormatFlags::String::ModifyOp
noexcept	external/asmjit/src/asmjit/core/string.h	/^  ASMJIT_API bool eq(const char* other, size_t size = SIZE_MAX) const noexcept;$/;"	m	class:StringFormatFlags::String::ModifyOp
noexcept	external/asmjit/src/asmjit/core/string.h	/^  ASMJIT_API char* prepare(ModifyOp op, size_t size) noexcept;$/;"	m	class:StringFormatFlags::String::ModifyOp
noexcept	external/asmjit/src/asmjit/core/support.h	/^  ASMJIT_INLINE_NODEBUG BitVectorIterator(const BitVectorIterator& other) noexcept = default;$/;"	m	class:Support::Internal::BitVectorIterator
noexcept	external/asmjit/src/asmjit/core/support.h	/^  ASMJIT_INLINE_NODEBUG Temporary& operator=(const Temporary& other) noexcept = default;$/;"	m	struct:Support::Internal::SortOrder::Temporary
noexcept	external/asmjit/src/asmjit/core/support.h	/^  ASMJIT_INLINE_NODEBUG constexpr Temporary(const Temporary& other) noexcept = default;$/;"	m	struct:Support::Internal::SortOrder::Temporary
noexcept	external/asmjit/src/asmjit/core/support.h	/^  ASMJIT_INLINE_NODEBUG constexpr Temporary(void* data, size_t size) noexcept$/;"	m	struct:Support::Internal::SortOrder::Temporary
noexcept	external/asmjit/src/asmjit/core/target.h	/^  ASMJIT_API Target() noexcept;$/;"	m	class:Target
noexcept	external/asmjit/src/asmjit/core/target.h	/^  ASMJIT_API virtual ~Target() noexcept;$/;"	m	class:Target
noexcept	external/asmjit/src/asmjit/core/virtmem.cpp	/^  inline ScopedHandle() noexcept$/;"	m	struct:ScopedHandle	file:
noexcept	external/asmjit/src/asmjit/core/virtmem.h	/^ASMJIT_API Error alloc(void** p, size_t size, MemoryFlags flags) noexcept;$/;"	m	class:VirtMem::CachePolicy::MemoryFlags
noexcept	external/asmjit/src/asmjit/core/virtmem.h	/^ASMJIT_API Error allocDualMapping(DualMapping* dm, size_t size, MemoryFlags flags) noexcept;$/;"	m	class:VirtMem::CachePolicy::MemoryFlags
noexcept	external/asmjit/src/asmjit/core/virtmem.h	/^ASMJIT_API Error protect(void* p, size_t size, MemoryFlags flags) noexcept;$/;"	m	class:VirtMem::CachePolicy::MemoryFlags
noexcept	external/asmjit/src/asmjit/core/virtmem.h	/^ASMJIT_API Error release(void* p, size_t size) noexcept;$/;"	m	class:VirtMem::CachePolicy::MemoryFlags
noexcept	external/asmjit/src/asmjit/core/virtmem.h	/^ASMJIT_API Error releaseDualMapping(DualMapping* dm, size_t size) noexcept;$/;"	m	class:VirtMem::CachePolicy::MemoryFlags
noexcept	external/asmjit/src/asmjit/core/virtmem.h	/^ASMJIT_API HardenedRuntimeInfo hardenedRuntimeInfo() noexcept;$/;"	m	class:VirtMem::CachePolicy::MemoryFlags::HardenedRuntimeFlags
noexcept	external/asmjit/src/asmjit/core/virtmem.h	/^ASMJIT_API Info info() noexcept;$/;"	m	class:VirtMem::CachePolicy
noexcept	external/asmjit/src/asmjit/core/virtmem.h	/^ASMJIT_API size_t largePageSize() noexcept;$/;"	m	class:VirtMem::CachePolicy
noexcept	external/asmjit/src/asmjit/core/virtmem.h	/^ASMJIT_API void flushInstructionCache(void* p, size_t size) noexcept;$/;"	m	class:VirtMem::CachePolicy
noexcept	external/asmjit/src/asmjit/core/virtmem.h	/^ASMJIT_API void protectJitMemory(ProtectJitAccess access) noexcept;$/;"	m	class:VirtMem::CachePolicy::MemoryFlags::HardenedRuntimeFlags::ProtectJitAccess
noexcept	external/asmjit/src/asmjit/core/zone.h	/^  ASMJIT_API char* sformat(const char* str, ...) noexcept;$/;"	m	class:Zone
noexcept	external/asmjit/src/asmjit/core/zone.h	/^  ASMJIT_API void _init(size_t blockSize, size_t blockAlignment, const Support::Temporary* temporary) noexcept;$/;"	m	class:Zone
noexcept	external/asmjit/src/asmjit/core/zone.h	/^  ASMJIT_API void _releaseDynamic(void* p, size_t size) noexcept;$/;"	m	class:ZoneAllocator
noexcept	external/asmjit/src/asmjit/core/zone.h	/^  ASMJIT_API void reset(ResetPolicy resetPolicy = ResetPolicy::kSoft) noexcept;$/;"	m	class:Zone
noexcept	external/asmjit/src/asmjit/core/zone.h	/^  ASMJIT_API void reset(Zone* zone = nullptr) noexcept;$/;"	m	class:ZoneAllocator
noexcept	external/asmjit/src/asmjit/core/zone.h	/^  ASMJIT_API void* _alloc(size_t size, size_t alignment) noexcept;$/;"	m	class:Zone
noexcept	external/asmjit/src/asmjit/core/zone.h	/^  ASMJIT_API void* _alloc(size_t size, size_t& allocatedSize) noexcept;$/;"	m	class:ZoneAllocator
noexcept	external/asmjit/src/asmjit/core/zone.h	/^  ASMJIT_API void* _allocZeroed(size_t size, size_t& allocatedSize) noexcept;$/;"	m	class:ZoneAllocator
noexcept	external/asmjit/src/asmjit/core/zone.h	/^  ASMJIT_API void* allocZeroed(size_t size, size_t alignment = 1) noexcept;$/;"	m	class:Zone
noexcept	external/asmjit/src/asmjit/core/zone.h	/^  ASMJIT_API void* dup(const void* data, size_t size, bool nullTerminate = false) noexcept;$/;"	m	class:Zone
noexcept	external/asmjit/src/asmjit/core/zonehash.cpp	/^  inline MyHashNode(uint32_t key) noexcept$/;"	m	struct:MyHashNode	file:
noexcept	external/asmjit/src/asmjit/core/zonehash.cpp	/^  inline MyKeyMatcher(uint32_t key) noexcept$/;"	m	struct:MyKeyMatcher	file:
noexcept	external/asmjit/src/asmjit/core/zonehash.h	/^  ASMJIT_API ZoneHashNode* _insert(ZoneAllocator* allocator, ZoneHashNode* node) noexcept;$/;"	m	class:ZoneHashBase
noexcept	external/asmjit/src/asmjit/core/zonehash.h	/^  ASMJIT_API ZoneHashNode* _remove(ZoneAllocator* allocator, ZoneHashNode* node) noexcept;$/;"	m	class:ZoneHashBase
noexcept	external/asmjit/src/asmjit/core/zonehash.h	/^  ASMJIT_API void _rehash(ZoneAllocator* allocator, uint32_t newCount) noexcept;$/;"	m	class:ZoneHashBase
noexcept	external/asmjit/src/asmjit/core/zonestack.h	/^  ASMJIT_API Error _init(ZoneAllocator* allocator, size_t middleIndex) noexcept;$/;"	m	class:ZoneStackBase
noexcept	external/asmjit/src/asmjit/core/zonestack.h	/^  ASMJIT_API Error _prepareBlock(uint32_t side, size_t initialIndex) noexcept;$/;"	m	class:ZoneStackBase
noexcept	external/asmjit/src/asmjit/core/zonestack.h	/^  ASMJIT_API void _cleanupBlock(uint32_t side, size_t middleIndex) noexcept;$/;"	m	class:ZoneStackBase
noexcept	external/asmjit/src/asmjit/core/zonevector.h	/^  ASMJIT_API Error _append(ZoneAllocator* allocator, bool value) noexcept;$/;"	m	class:ZoneBitVector
noexcept	external/asmjit/src/asmjit/core/zonevector.h	/^  ASMJIT_API Error _grow(ZoneAllocator* allocator, uint32_t sizeOfT, uint32_t n) noexcept;$/;"	m	class:ZoneVectorBase
noexcept	external/asmjit/src/asmjit/core/zonevector.h	/^  ASMJIT_API Error _reserve(ZoneAllocator* allocator, uint32_t sizeOfT, uint32_t n) noexcept;$/;"	m	class:ZoneVectorBase
noexcept	external/asmjit/src/asmjit/core/zonevector.h	/^  ASMJIT_API Error _resize(ZoneAllocator* allocator, uint32_t newSize, uint32_t idealCapacity, bool newBitsValue) noexcept;$/;"	m	class:ZoneBitVector
noexcept	external/asmjit/src/asmjit/core/zonevector.h	/^  ASMJIT_API Error _resize(ZoneAllocator* allocator, uint32_t sizeOfT, uint32_t n) noexcept;$/;"	m	class:ZoneVectorBase
noexcept	external/asmjit/src/asmjit/core/zonevector.h	/^  ASMJIT_API Error copyFrom(ZoneAllocator* allocator, const ZoneBitVector& other) noexcept;$/;"	m	class:ZoneBitVector
noexcept	external/asmjit/src/asmjit/x86/x86assembler.h	/^  ASMJIT_API explicit Assembler(CodeHolder* code = nullptr) noexcept;$/;"	m	class:Assembler
noexcept	external/asmjit/src/asmjit/x86/x86assembler.h	/^  ASMJIT_API virtual ~Assembler() noexcept;$/;"	m	class:Assembler
noexcept	external/asmjit/src/asmjit/x86/x86builder.h	/^  ASMJIT_API explicit Builder(CodeHolder* code = nullptr) noexcept;$/;"	m	class:Builder
noexcept	external/asmjit/src/asmjit/x86/x86builder.h	/^  ASMJIT_API virtual ~Builder() noexcept;$/;"	m	class:Builder
noexcept	external/asmjit/src/asmjit/x86/x86compiler.h	/^  ASMJIT_API explicit Compiler(CodeHolder* code = nullptr) noexcept;$/;"	m	class:Compiler
noexcept	external/asmjit/src/asmjit/x86/x86compiler.h	/^  ASMJIT_API virtual ~Compiler() noexcept;$/;"	m	class:Compiler
noexcept	external/asmjit/src/asmjit/x86/x86formatter_p.h	/^  const BaseInst& inst, const Operand_* operands, size_t opCount) noexcept;$/;"	m	namespace:FormatterInternal
noexcept	external/asmjit/src/asmjit/x86/x86formatter_p.h	/^  const Operand_& op) noexcept;$/;"	m	namespace:FormatterInternal
noexcept	external/asmjit/src/asmjit/x86/x86formatter_p.h	/^  uint32_t featureId) noexcept;$/;"	m	namespace:FormatterInternal
noexcept	external/asmjit/src/asmjit/x86/x86formatter_p.h	/^  uint32_t regId) noexcept;$/;"	m	namespace:FormatterInternal
noexcept	external/asmjit/src/asmjit/x86/x86func_p.h	/^Error initCallConv(CallConv& cc, CallConvId ccId, const Environment& environment) noexcept;$/;"	m	namespace:FuncInternal
noexcept	external/asmjit/src/asmjit/x86/x86func_p.h	/^Error initFuncDetail(FuncDetail& func, const FuncSignature& signature, uint32_t registerSize) noexcept;$/;"	m	namespace:FuncInternal
noexcept	external/asmjit/src/asmjit/x86/x86instapi_p.h	/^Error ASMJIT_CDECL instIdToString(Arch arch, InstId instId, String& output) noexcept;$/;"	m	namespace:InstInternal
noexcept	external/asmjit/src/asmjit/x86/x86instapi_p.h	/^Error ASMJIT_CDECL queryFeatures(Arch arch, const BaseInst& inst, const Operand_* operands, size_t opCount, CpuFeatures* out) noexcept;$/;"	m	namespace:InstInternal
noexcept	external/asmjit/src/asmjit/x86/x86instapi_p.h	/^Error ASMJIT_CDECL queryRWInfo(Arch arch, const BaseInst& inst, const Operand_* operands, size_t opCount, InstRWInfo* out) noexcept;$/;"	m	namespace:InstInternal
noexcept	external/asmjit/src/asmjit/x86/x86instapi_p.h	/^Error ASMJIT_CDECL validate(Arch arch, const BaseInst& inst, const Operand_* operands, size_t opCount, ValidationFlags validationFlags) noexcept;$/;"	m	namespace:InstInternal
noexcept	external/asmjit/src/asmjit/x86/x86instapi_p.h	/^InstId ASMJIT_CDECL stringToInstId(Arch arch, const char* s, size_t len) noexcept;$/;"	m	namespace:InstInternal
noexcept	external/asmjit/src/asmjit/x86/x86operand.h	/^  ASMJIT_INLINE_NODEBUG GpbHi r8Hi() const noexcept;$/;"	m	class:Gp
noexcept	external/asmjit/src/asmjit/x86/x86operand.h	/^  ASMJIT_INLINE_NODEBUG GpbLo r8() const noexcept;$/;"	m	class:Gp
noexcept	external/asmjit/src/asmjit/x86/x86operand.h	/^  ASMJIT_INLINE_NODEBUG GpbLo r8Lo() const noexcept;$/;"	m	class:Gp
noexcept	external/asmjit/src/asmjit/x86/x86operand.h	/^  ASMJIT_INLINE_NODEBUG Gpd r32() const noexcept;$/;"	m	class:Gp
noexcept	external/asmjit/src/asmjit/x86/x86operand.h	/^  ASMJIT_INLINE_NODEBUG Gpq r64() const noexcept;$/;"	m	class:Gp
noexcept	external/asmjit/src/asmjit/x86/x86operand.h	/^  ASMJIT_INLINE_NODEBUG Gpw r16() const noexcept;$/;"	m	class:Gp
noexcept	external/asmjit/src/asmjit/x86/x86operand.h	/^  ASMJIT_INLINE_NODEBUG Mem& operator=(const Mem& other) noexcept = default;$/;"	m	class:Mem::AddrType::Broadcast
noexcept	external/asmjit/src/asmjit/x86/x86operand.h	/^  ASMJIT_INLINE_NODEBUG Xmm xmm() const noexcept;$/;"	m	class:Vec
noexcept	external/asmjit/src/asmjit/x86/x86operand.h	/^  ASMJIT_INLINE_NODEBUG Ymm ymm() const noexcept;$/;"	m	class:Vec
noexcept	external/asmjit/src/asmjit/x86/x86operand.h	/^  ASMJIT_INLINE_NODEBUG Zmm zmm() const noexcept;$/;"	m	class:Vec
noexcept	external/asmjit/src/asmjit/x86/x86rapass.cpp	/^  Error moveImmToRegArg(InvokeNode* invokeNode, const FuncValue& arg, const Imm& imm_, BaseReg* out) noexcept;$/;"	m	class:RACFGBuilder	file:
noexcept	external/asmjit/src/asmjit/x86/x86rapass.cpp	/^  Error moveImmToStackArg(InvokeNode* invokeNode, const FuncValue& arg, const Imm& imm_) noexcept;$/;"	m	class:RACFGBuilder	file:
noexcept	external/asmjit/src/asmjit/x86/x86rapass.cpp	/^  Error moveRegToStackArg(InvokeNode* invokeNode, const FuncValue& arg, const BaseReg& reg) noexcept;$/;"	m	class:RACFGBuilder	file:
noexcept	external/asmjit/src/asmjit/x86/x86rapass.cpp	/^  Error moveVecToPtr(InvokeNode* invokeNode, const FuncValue& arg, const Vec& src, BaseReg* out) noexcept;$/;"	m	class:RACFGBuilder	file:
noexcept	external/asmjit/src/asmjit/x86/x86rapass.cpp	/^  Error onBeforeInvoke(InvokeNode* invokeNode) noexcept;$/;"	m	class:RACFGBuilder	file:
noexcept	external/asmjit/src/asmjit/x86/x86rapass.cpp	/^  Error onBeforeRet(FuncRetNode* funcRet) noexcept;$/;"	m	class:RACFGBuilder	file:
noexcept	external/asmjit/src/asmjit/x86/x86rapass.cpp	/^  Error onInst(InstNode* inst, InstControlFlow& cf, RAInstBuilder& ib) noexcept;$/;"	m	class:RACFGBuilder	file:
noexcept	external/asmjit/src/asmjit/x86/x86rapass.cpp	/^  Error onInvoke(InvokeNode* invokeNode, RAInstBuilder& ib) noexcept;$/;"	m	class:RACFGBuilder	file:
noexcept	external/asmjit/src/asmjit/x86/x86rapass.cpp	/^  Error onRet(FuncRetNode* funcRet, RAInstBuilder& ib) noexcept;$/;"	m	class:RACFGBuilder	file:
noexcept	external/asmjit/src/asmjit/x86/x86rapass_p.h	/^  X86RAPass() noexcept;$/;"	m	class:X86RAPass
noexcept	external/asmjit/src/asmjit/x86/x86rapass_p.h	/^  virtual ~X86RAPass() noexcept;$/;"	m	class:X86RAPass
noexcept	external/asmjit/test/broken.h	/^bool hasArg(const char* name) noexcept;$/;"	m	namespace:BrokenAPI
noexcept	external/asmjit/test/broken.h	/^void addUnit(Unit* unit) noexcept;$/;"	m	namespace:BrokenAPI
noexcept	external/asmjit/test/broken.h	/^void fail(const char* file, int line, const char* expression, const char* fmt, ...) noexcept;$/;"	m	namespace:BrokenAPI
noexcept	external/asmjit/test/broken.h	/^void info(const char* fmt, ...) noexcept;$/;"	m	namespace:BrokenAPI
noexcept	external/asmjit/test/broken.h	/^void setOutputFile(FILE* file) noexcept;$/;"	m	namespace:BrokenAPI
none	external/asmjit/src/asmjit/core/operand.h	/^  static constexpr const Operand none;$/;"	m	namespace:OperandType::RegType::RegGroup::ImmType::Globals
nop	external/asmjit/tools/tablegen.js	/^function nop(x) { return x; }$/;"	f
normalizeNumber	external/asmjit/db/aarch64.js	/^function normalizeNumber(n) {$/;"	f
normalizeOpcodeComponents	external/asmjit/tools/tablegen-x86.js	/^    function normalizeOpcodeComponents(components) {$/;"	f
notice	mk/common.mk	/^notice = $(PRINTF) "$(PASS_COLOR)$(strip $1)$(NO_COLOR)\\n"$/;"	m
nqueens_DATA	mk/external.mk	/^nqueens_DATA = $(OUT)\/nqueens.elf$/;"	m
nqueens_DATA_SHA1	mk/external.mk	/^nqueens_DATA_SHA1 = b5e0ae921af90871ae8ff7b2ff7a9f330f97b2e1$/;"	m
nullOps	external/asmjit/tools/tablegen-x86.js	/^    function nullOps() {$/;"	f
o	src/ir/qir.h	/^    VOperand &o(u8 idx)$/;"	f	struct:dbt::qir::InstOperandAccessMixin
o0	external/asmjit/src/asmjit/core/compiler.h	/^  ASMJIT_API Error addFuncRetNode(FuncRetNode** ASMJIT_NONNULL(out), const Operand_& o0, const Operand_& o1);$/;"	m	class:BaseCompiler
o0	external/asmjit/src/asmjit/core/compiler.h	/^  ASMJIT_API Error addInvokeNode(InvokeNode** ASMJIT_NONNULL(out), InstId instId, const Operand_& o0, const FuncSignature& signature);$/;"	m	class:BaseCompiler
o0	external/asmjit/src/asmjit/core/compiler.h	/^  ASMJIT_API Error newFuncRetNode(FuncRetNode** ASMJIT_NONNULL(out), const Operand_& o0, const Operand_& o1);$/;"	m	class:BaseCompiler
o0	external/asmjit/src/asmjit/core/compiler.h	/^  ASMJIT_API Error newInvokeNode(InvokeNode** ASMJIT_NONNULL(out), InstId instId, const Operand_& o0, const FuncSignature& signature);$/;"	m	class:BaseCompiler
o0	external/asmjit/src/asmjit/core/compiler.h	/^  ASMJIT_API Error newJumpNode(JumpNode** ASMJIT_NONNULL(out), InstId instId, InstOptions instOptions, const Operand_& o0, JumpAnnotation* annotation);$/;"	m	class:BaseCompiler
o1	external/asmjit/src/asmjit/core/compiler.h	/^  ASMJIT_API Error addFuncRetNode(FuncRetNode** ASMJIT_NONNULL(out), const Operand_& o0, const Operand_& o1);$/;"	m	class:BaseCompiler
o1	external/asmjit/src/asmjit/core/compiler.h	/^  ASMJIT_API Error newFuncRetNode(FuncRetNode** ASMJIT_NONNULL(out), const Operand_& o0, const Operand_& o1);$/;"	m	class:BaseCompiler
oArr	external/asmjit/db/x86.js	/^    var oArr = [];$/;"	v
offs	src/runtime_stubs.h	/^    static constexpr uptr offs(RuntimeStubId id)$/;"	f	struct:dbt::RuntimeStubTab
offset	external/asmjit/src/asmjit/arm/a64emithelper.cpp	/^    uint16_t offset;$/;"	m	struct:PrologEpilogInfo::RegPair	file:
offset	external/asmjit/src/asmjit/core/codeholder.h	/^  size_t offset;$/;"	m	struct:ExpressionOpType::ExpressionValueType::SectionFlags::CopySectionFlags::OffsetType::RelocType::LabelType::LabelLink
offset	external/asmjit/src/asmjit/core/rastack.cpp	/^  uint32_t offset;$/;"	m	struct:RAStackGap	file:
offset	external/asmjit/tools/tablegen.js	/^    var offset = 0;$/;"	v
offsetOp	external/asmjit/src/asmjit/arm/a64instdb_p.h	/^  uint32_t offsetOp : 10;$/;"	m	struct:InstDB::EncodingData::BaseLdpStp
offsetOp	external/asmjit/src/asmjit/arm/a64instdb_p.h	/^  uint32_t offsetOp : 10;$/;"	m	struct:InstDB::EncodingData::SimdLdpStp
offsetShift	external/asmjit/src/asmjit/arm/a64instdb_p.h	/^  uint32_t offsetShift : 3;$/;"	m	struct:InstDB::EncodingData::BaseLdpStp
offsetType	external/asmjit/src/asmjit/arm/a64instdb_p.h	/^  OffsetType offsetType : 8;$/;"	m	struct:InstDB::EncodingData::BaseAdr
op	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^  static double op(double a) { return a * a; }$/;"	f	class:X86Test_FuncCallMisc2
op	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^  static double op(double a) { return a * a; }$/;"	f	class:X86Test_FuncCallMisc3
op0Signature	external/asmjit/src/asmjit/arm/a64instdb_p.h	/^  uint32_t op0Signature;$/;"	m	struct:InstDB::EncodingData::ISimdVVVVx
op0Signature	external/asmjit/src/asmjit/arm/a64instdb_p.h	/^  uint32_t op0Signature;$/;"	m	struct:InstDB::EncodingData::ISimdVVVx
op0Signature	external/asmjit/src/asmjit/arm/a64instdb_p.h	/^  uint32_t op0Signature;$/;"	m	struct:InstDB::EncodingData::ISimdVVx
op1Signature	external/asmjit/src/asmjit/arm/a64instdb_p.h	/^  uint32_t op1Signature;$/;"	m	struct:InstDB::EncodingData::ISimdVVVVx
op1Signature	external/asmjit/src/asmjit/arm/a64instdb_p.h	/^  uint32_t op1Signature;$/;"	m	struct:InstDB::EncodingData::ISimdVVVx
op1Signature	external/asmjit/src/asmjit/arm/a64instdb_p.h	/^  uint32_t op1Signature;$/;"	m	struct:InstDB::EncodingData::ISimdVVx
op2Signature	external/asmjit/src/asmjit/arm/a64instdb_p.h	/^  uint32_t op2Signature;$/;"	m	struct:InstDB::EncodingData::ISimdVVVVx
op2Signature	external/asmjit/src/asmjit/arm/a64instdb_p.h	/^  uint32_t op2Signature;$/;"	m	struct:InstDB::EncodingData::ISimdVVVx
op3Signature	external/asmjit/src/asmjit/arm/a64instdb_p.h	/^  uint32_t op3Signature;$/;"	m	struct:InstDB::EncodingData::ISimdVVVVx
opCount	external/asmjit/src/asmjit/core/builder.h	/^  ASMJIT_API Error newInstNode(InstNode** ASMJIT_NONNULL(out), InstId instId, InstOptions instOptions, uint32_t opCount);$/;"	m	class:NodeType::NodeFlags::SentinelType::BaseBuilder
opCount	external/asmjit/src/asmjit/core/compiler.h	/^  inline JumpNode(BaseCompiler* ASMJIT_NONNULL(cc), InstId instId, InstOptions options, uint32_t opCount, JumpAnnotation* annotation) noexcept$/;"	m	class:JumpNode
opInfoIndex	external/asmjit/src/asmjit/x86/x86instdb_p.h	/^  uint8_t opInfoIndex[6];$/;"	m	namespace:InstDB
opType	external/asmjit/src/asmjit/core/codeholder.h	/^  ExpressionOpType opType;$/;"	m	struct:ExpressionOpType::ExpressionValueType::Expression
opType3	external/asmjit/src/asmjit/arm/a64instdb_p.h	/^  uint32_t opType3 : 6;$/;"	m	struct:InstDB::EncodingData::ISimdPair
op_call_mem_r13_imm	src/codegen/jitabi.h	/^        u64 op_call_mem_r13_imm : 24 = 0x95ff41;$/;"	m	struct:dbt::jitabi::ppoint::BranchSlot::CallTab
op_call_rax	src/codegen/jitabi.h	/^        u64 op_call_rax : 16 = 0xd0ff;$/;"	m	struct:dbt::jitabi::ppoint::BranchSlot::Call64Abs
op_info	src/ir/qir.cpp	/^constinit OpInfo op_info[to_underlying(qir::Op::Count)] = {$/;"	m	namespace:dbt::qir	file:
op_jmp_imm	src/codegen/jitabi.h	/^        u64 op_jmp_imm : 8 = 0xe9;$/;"	m	struct:dbt::jitabi::ppoint::BranchSlot::Jump32Rel
op_jmp_rax	src/codegen/jitabi.h	/^        u64 op_jmp_rax : 16 = 0xe0ff;$/;"	m	struct:dbt::jitabi::ppoint::BranchSlot::Jump64Abs
op_mov_imm_rax	src/codegen/jitabi.h	/^        u64 op_mov_imm_rax : 16 = 0xb848;$/;"	m	struct:dbt::jitabi::ppoint::BranchSlot::Call64Abs
op_mov_imm_rax	src/codegen/jitabi.h	/^        u64 op_mov_imm_rax : 16 = 0xb848;$/;"	m	struct:dbt::jitabi::ppoint::BranchSlot::Jump64Abs
opcode	external/asmjit/src/asmjit/arm/a64instdb_p.h	/^  uint32_t opcode : 22;$/;"	m	struct:InstDB::EncodingData::ISimdVVVV
opcode	external/asmjit/src/asmjit/arm/a64instdb_p.h	/^  uint32_t opcode : 22;$/;"	m	struct:InstDB::EncodingData::SimdShiftES
opcode	external/asmjit/src/asmjit/arm/a64instdb_p.h	/^  uint32_t opcode : 22;$/;"	m	struct:InstDB::EncodingData::SimdSmovUmov
opcode	external/asmjit/src/asmjit/arm/a64instdb_p.h	/^  uint32_t opcode : 22;$/;"	m	struct:InstDB::EncodingData::SimdSxtlUxtl
opcode	external/asmjit/src/asmjit/arm/a64instdb_p.h	/^  uint32_t opcode : 31;$/;"	m	struct:InstDB::EncodingData::SimdMoviMvni
opcode	external/asmjit/src/asmjit/arm/a64instdb_p.h	/^  uint32_t opcode;         \/\/ sf|........|N|ImmR:6|ImmS:6|Rn|Rd|$/;"	m	struct:InstDB::EncodingData::BaseBfm
opcode	external/asmjit/src/asmjit/arm/a64instdb_p.h	/^  uint32_t opcode;$/;"	m	struct:InstDB::EncodingData::BaseAdcSbc
opcode	external/asmjit/src/asmjit/arm/a64instdb_p.h	/^  uint32_t opcode;$/;"	m	struct:InstDB::EncodingData::BaseMvnNeg
opcode	external/asmjit/src/asmjit/arm/a64instdb_p.h	/^  uint32_t opcode;$/;"	m	struct:InstDB::EncodingData::BaseOp
opcode	external/asmjit/src/asmjit/arm/a64instdb_p.h	/^  uint32_t opcode;$/;"	m	struct:InstDB::EncodingData::BaseOpImm
opcode	external/asmjit/src/asmjit/arm/a64instdb_p.h	/^  uint32_t opcode;$/;"	m	struct:InstDB::EncodingData::BaseR
opcode	external/asmjit/src/asmjit/arm/a64instdb_p.h	/^  uint32_t opcode;$/;"	m	struct:InstDB::EncodingData::BaseRR
opcode	external/asmjit/src/asmjit/arm/a64instdb_p.h	/^  uint32_t opcode;$/;"	m	struct:InstDB::EncodingData::FSimdSV
opcode	external/asmjit/src/asmjit/arm/a64instdb_p.h	/^  uint32_t opcode;$/;"	m	struct:InstDB::EncodingData::ISimdVVVVx
opcode	external/asmjit/src/asmjit/arm/a64instdb_p.h	/^  uint32_t opcode;$/;"	m	struct:InstDB::EncodingData::SimdLdurStur
opcode	external/asmjit/src/asmjit/arm/a64instdb_p.h	/^  uint32_t opcode;$/;"	m	struct:InstDB::EncodingData::SimdSm3tt
opcode	external/asmjit/src/asmjit/arm/a64instdb_p.h	/^  uint32_t opcode;$/;"	m	struct:InstDB::EncodingData::SimdTblTbx
opcode	external/asmjit/tools/tablegen-x86.js	/^    var opcode = dbi.opcodeHex;$/;"	v
opcode2	external/asmjit/src/asmjit/arm/a64instdb_p.h	/^  uint32_t opcode2;      \/\/ 22 bits used.$/;"	m	struct:InstDB::EncodingData::ISimdPair
opcode3	external/asmjit/src/asmjit/arm/a64instdb_p.h	/^  uint32_t opcode3 : 26; \/\/ 22 bits used.$/;"	m	struct:InstDB::EncodingData::ISimdPair
operands	external/asmjit/tools/tablegen-x86.js	/^      var operands = inst.operands;$/;"	v
operator !=	src/arena_objects.h	/^    bool operator!=(MemArenaSTL const &rhs) { return !operator==(rhs); }$/;"	f	struct:MemArenaSTL
operator !=	src/util/ilist.h	/^    bool operator!=(IListIterator const &rhs) const { return pos != rhs.pos; }$/;"	f	struct:dbt::IListIterator
operator &	src/codegen/arch_traits.h	/^    constexpr RegMask operator&(RegMask rh) const$/;"	f	struct:dbt::qcg::RegMask
operator *	src/util/ilist.h	/^    T &operator*() const { return *static_cast<T *>(pos); }$/;"	f	struct:dbt::IListIterator
operator ++	src/util/ilist.h	/^    IListIterator &operator++()$/;"	f	struct:dbt::IListIterator
operator ++	src/util/ilist.h	/^    IListIterator operator++(int)$/;"	f	struct:dbt::IListIterator
operator --	src/util/ilist.h	/^    IListIterator &operator--()$/;"	f	struct:dbt::IListIterator
operator --	src/util/ilist.h	/^    IListIterator operator--(int)$/;"	f	struct:dbt::IListIterator
operator ->	src/util/ilist.h	/^    T *operator->() const { return &operator*(); }$/;"	f	struct:dbt::IListIterator
operator =	external/asmjit/src/asmjit/core/radefs_p.h	/^  ASMJIT_INLINE_NODEBUG RALiveSpan& operator=(const RALiveSpan& other) {$/;"	f	class:RAStrategyType::RAStrategyFlags::RALiveSpan
operator ==	src/arena_objects.h	/^    bool operator==(MemArenaSTL const &rhs) { return this->arena == rhs.arena; }$/;"	f	struct:MemArenaSTL
operator ==	src/util/ilist.h	/^    bool operator==(IListIterator const &rhs) const { return pos == rhs.pos; }$/;"	f	struct:dbt::IListIterator
operator []	external/asmjit/src/asmjit/core/func.h	/^  inline FuncValue& operator[](size_t index) {$/;"	f	struct:CallConvId::CallConvStrategy::CallConvFlags::FuncValuePack
operator []	external/asmjit/src/asmjit/core/func.h	/^  inline const FuncValue& operator[](size_t index) const {$/;"	f	struct:CallConvId::CallConvStrategy::CallConvFlags::FuncValuePack
operator []	src/ir/qir.h	/^    VOperand &operator[](u8 idx) const$/;"	f	struct:dbt::qir::VOperandSpan
operator []	src/runtime_stubs.h	/^    uptr operator[](RuntimeStubId id) const { return data[to_underlying(id)]; }$/;"	f	struct:dbt::RuntimeStubTab
operator delete	src/arena.h	/^    void operator delete(UNUSED void *aptr, UNUSED size_t asz)$/;"	f	struct:InArena
operator new	src/arena.h	/^    void *operator new(UNUSED size_t asz, void *aptr) { return aptr; }$/;"	f	struct:InArena
operator |	src/codegen/arch_traits.h	/^    constexpr RegMask operator|(RegMask rh) const$/;"	f	struct:dbt::qcg::RegMask
operator ~	src/codegen/arch_traits.h	/^    constexpr RegMask operator~() const { return RegMask{~data}; }$/;"	f	struct:dbt::qcg::RegMask
ops	external/asmjit/db/x86.js	/^    var ops = s.split("\/");$/;"	v
options	external/asmjit/src/asmjit/core/compiler.h	/^  inline JumpNode(BaseCompiler* ASMJIT_NONNULL(cc), InstId instId, InstOptions options, uint32_t opCount, JumpAnnotation* annotation) noexcept$/;"	m	class:JumpNode
options	external/asmjit/src/asmjit/core/emitter.h	/^    InstOptions options;$/;"	m	struct:AlignMode::EmitterType::EmitterFlags::EncodingOptions::BaseEmitter::State
options	external/asmjit/src/asmjit/core/jitallocator.h	/^    JitAllocatorOptions options = JitAllocatorOptions::kNone;$/;"	m	struct:JitAllocatorOptions::JitAllocator::CreateParams
options	external/asmjit/src/asmjit/core/jitallocator.h	/^    JitAllocatorOptions options;$/;"	m	struct:JitAllocatorOptions::JitAllocator::Impl
order	src/codegen/arch_traits.cpp	/^    ct_order order;$/;"	m	struct:dbt::qcg::InstCt	file:
other	external/asmjit/src/asmjit/core/radefs_p.h	/^  ASMJIT_INLINE_NODEBUG RALiveInterval& operator=(const RALiveInterval& other) = default;$/;"	m	struct:RAStrategyType::RAStrategyFlags::RALiveInterval
out	external/asmjit/src/asmjit/core/funcargscontext_p.h	/^    FuncValue out;$/;"	m	struct:FuncArgsContext::Var
out	external/asmjit/tools/tablegen-x86.js	/^    var out = "";$/;"	v
outputs	src/ir/qir.h	/^    VOperandSpan outputs()$/;"	f	struct:dbt::qir::InstOperandAccessMixin
override	external/asmjit/src/asmjit/arm/a64assembler.h	/^  ASMJIT_API Error _emit(InstId instId, const Operand_& o0, const Operand_& o1, const Operand_& o2, const Operand_* opExt) override;$/;"	m	class:Assembler
override	external/asmjit/src/asmjit/arm/a64assembler.h	/^  ASMJIT_API Error align(AlignMode alignMode, uint32_t alignment) override;$/;"	m	class:Assembler
override	external/asmjit/src/asmjit/arm/a64assembler.h	/^  ASMJIT_API Error onAttach(CodeHolder* code) noexcept override;$/;"	m	class:Assembler
override	external/asmjit/src/asmjit/arm/a64assembler.h	/^  ASMJIT_API Error onDetach(CodeHolder* code) noexcept override;$/;"	m	class:Assembler
override	external/asmjit/src/asmjit/arm/a64builder.h	/^  ASMJIT_API Error finalize() override;$/;"	m	class:Builder
override	external/asmjit/src/asmjit/arm/a64builder.h	/^  ASMJIT_API Error onAttach(CodeHolder* code) noexcept override;$/;"	m	class:Builder
override	external/asmjit/src/asmjit/arm/a64builder.h	/^  ASMJIT_API Error onDetach(CodeHolder* code) noexcept override;$/;"	m	class:Builder
override	external/asmjit/src/asmjit/arm/a64compiler.h	/^  ASMJIT_API Error finalize() override;$/;"	m	class:Compiler
override	external/asmjit/src/asmjit/arm/a64compiler.h	/^  ASMJIT_API Error onAttach(CodeHolder* code) noexcept override;$/;"	m	class:Compiler
override	external/asmjit/src/asmjit/arm/a64compiler.h	/^  ASMJIT_API Error onDetach(CodeHolder* code) noexcept override;$/;"	m	class:Compiler
override	external/asmjit/src/asmjit/arm/a64emithelper_p.h	/^    const BaseReg& b, const char* comment = nullptr) override;$/;"	m	class:EmitHelper
override	external/asmjit/src/asmjit/arm/a64emithelper_p.h	/^    const Operand_& src_, TypeId srcTypeId, const char* comment = nullptr) override;$/;"	m	class:EmitHelper
override	external/asmjit/src/asmjit/arm/a64emithelper_p.h	/^    const Operand_& src_, TypeId typeId, const char* comment = nullptr) override;$/;"	m	class:EmitHelper
override	external/asmjit/src/asmjit/arm/a64rapass_p.h	/^  Error _rewrite(BaseNode* first, BaseNode* stop) noexcept override;$/;"	m	class:ARMRAPass
override	external/asmjit/src/asmjit/arm/a64rapass_p.h	/^  Error buildCFG() noexcept override;$/;"	m	class:ARMRAPass
override	external/asmjit/src/asmjit/arm/a64rapass_p.h	/^  Error emitJump(const Label& label) noexcept override;$/;"	m	class:ARMRAPass
override	external/asmjit/src/asmjit/arm/a64rapass_p.h	/^  Error emitLoad(uint32_t workId, uint32_t dstPhysId) noexcept override;$/;"	m	class:ARMRAPass
override	external/asmjit/src/asmjit/arm/a64rapass_p.h	/^  Error emitMove(uint32_t workId, uint32_t dstPhysId, uint32_t srcPhysId) noexcept override;$/;"	m	class:ARMRAPass
override	external/asmjit/src/asmjit/arm/a64rapass_p.h	/^  Error emitPreCall(InvokeNode* invokeNode) noexcept override;$/;"	m	class:ARMRAPass
override	external/asmjit/src/asmjit/arm/a64rapass_p.h	/^  Error emitSave(uint32_t workId, uint32_t srcPhysId) noexcept override;$/;"	m	class:ARMRAPass
override	external/asmjit/src/asmjit/arm/a64rapass_p.h	/^  Error emitSwap(uint32_t aWorkId, uint32_t aPhysId, uint32_t bWorkId, uint32_t bPhysId) noexcept override;$/;"	m	class:ARMRAPass
override	external/asmjit/src/asmjit/arm/a64rapass_p.h	/^  Error updateStackFrame() noexcept override;$/;"	m	class:ARMRAPass
override	external/asmjit/src/asmjit/arm/a64rapass_p.h	/^  void onDone() noexcept override;$/;"	m	class:ARMRAPass
override	external/asmjit/src/asmjit/arm/a64rapass_p.h	/^  void onInit() noexcept override;$/;"	m	class:ARMRAPass
override	external/asmjit/src/asmjit/core/assembler.h	/^  ASMJIT_API Error bind(const Label& label) override;$/;"	m	class:BaseAssembler
override	external/asmjit/src/asmjit/core/assembler.h	/^  ASMJIT_API Error comment(const char* data, size_t size = SIZE_MAX) override;$/;"	m	class:BaseAssembler
override	external/asmjit/src/asmjit/core/assembler.h	/^  ASMJIT_API Error embed(const void* data, size_t dataSize) override;$/;"	m	class:BaseAssembler
override	external/asmjit/src/asmjit/core/assembler.h	/^  ASMJIT_API Error embedConstPool(const Label& label, const ConstPool& pool) override;$/;"	m	class:BaseAssembler
override	external/asmjit/src/asmjit/core/assembler.h	/^  ASMJIT_API Error embedDataArray(TypeId typeId, const void* data, size_t itemCount, size_t repeatCount = 1) override;$/;"	m	class:BaseAssembler
override	external/asmjit/src/asmjit/core/assembler.h	/^  ASMJIT_API Error embedLabel(const Label& label, size_t dataSize = 0) override;$/;"	m	class:BaseAssembler
override	external/asmjit/src/asmjit/core/assembler.h	/^  ASMJIT_API Error embedLabelDelta(const Label& label, const Label& base, size_t dataSize = 0) override;$/;"	m	class:BaseAssembler
override	external/asmjit/src/asmjit/core/assembler.h	/^  ASMJIT_API Error onAttach(CodeHolder* code) noexcept override;$/;"	m	class:BaseAssembler
override	external/asmjit/src/asmjit/core/assembler.h	/^  ASMJIT_API Error onDetach(CodeHolder* code) noexcept override;$/;"	m	class:BaseAssembler
override	external/asmjit/src/asmjit/core/assembler.h	/^  ASMJIT_API Error section(Section* section) override;$/;"	m	class:BaseAssembler
override	external/asmjit/src/asmjit/core/assembler.h	/^  ASMJIT_API Label newLabel() override;$/;"	m	class:BaseAssembler
override	external/asmjit/src/asmjit/core/assembler.h	/^  ASMJIT_API Label newNamedLabel(const char* name, size_t nameSize = SIZE_MAX, LabelType type = LabelType::kGlobal, uint32_t parentId = Globals::kInvalidId) override;$/;"	m	class:BaseAssembler
override	external/asmjit/src/asmjit/core/builder.h	/^  ASMJIT_API Error _emit(InstId instId, const Operand_& o0, const Operand_& o1, const Operand_& o2, const Operand_* opExt) override;$/;"	m	class:NodeType::NodeFlags::SentinelType::BaseBuilder
override	external/asmjit/src/asmjit/core/builder.h	/^  ASMJIT_API Error align(AlignMode alignMode, uint32_t alignment) override;$/;"	m	class:NodeType::NodeFlags::SentinelType::BaseBuilder
override	external/asmjit/src/asmjit/core/builder.h	/^  ASMJIT_API Error bind(const Label& label) override;$/;"	m	class:NodeType::NodeFlags::SentinelType::BaseBuilder
override	external/asmjit/src/asmjit/core/builder.h	/^  ASMJIT_API Error comment(const char* data, size_t size = SIZE_MAX) override;$/;"	m	class:NodeType::NodeFlags::SentinelType::BaseBuilder
override	external/asmjit/src/asmjit/core/builder.h	/^  ASMJIT_API Error embed(const void* data, size_t dataSize) override;$/;"	m	class:NodeType::NodeFlags::SentinelType::BaseBuilder
override	external/asmjit/src/asmjit/core/builder.h	/^  ASMJIT_API Error embedConstPool(const Label& label, const ConstPool& pool) override;$/;"	m	class:NodeType::NodeFlags::SentinelType::BaseBuilder
override	external/asmjit/src/asmjit/core/builder.h	/^  ASMJIT_API Error embedDataArray(TypeId typeId, const void* data, size_t count, size_t repeat = 1) override;$/;"	m	class:NodeType::NodeFlags::SentinelType::BaseBuilder
override	external/asmjit/src/asmjit/core/builder.h	/^  ASMJIT_API Error embedLabel(const Label& label, size_t dataSize = 0) override;$/;"	m	class:NodeType::NodeFlags::SentinelType::BaseBuilder
override	external/asmjit/src/asmjit/core/builder.h	/^  ASMJIT_API Error embedLabelDelta(const Label& label, const Label& base, size_t dataSize = 0) override;$/;"	m	class:NodeType::NodeFlags::SentinelType::BaseBuilder
override	external/asmjit/src/asmjit/core/builder.h	/^  ASMJIT_API Error onAttach(CodeHolder* code) noexcept override;$/;"	m	class:NodeType::NodeFlags::SentinelType::BaseBuilder
override	external/asmjit/src/asmjit/core/builder.h	/^  ASMJIT_API Error onDetach(CodeHolder* code) noexcept override;$/;"	m	class:NodeType::NodeFlags::SentinelType::BaseBuilder
override	external/asmjit/src/asmjit/core/builder.h	/^  ASMJIT_API Error section(Section* ASMJIT_NONNULL(section)) override;$/;"	m	class:NodeType::NodeFlags::SentinelType::BaseBuilder
override	external/asmjit/src/asmjit/core/builder.h	/^  ASMJIT_API Label newLabel() override;$/;"	m	class:NodeType::NodeFlags::SentinelType::BaseBuilder
override	external/asmjit/src/asmjit/core/builder.h	/^  ASMJIT_API Label newNamedLabel(const char* name, size_t nameSize = SIZE_MAX, LabelType type = LabelType::kGlobal, uint32_t parentId = Globals::kInvalidId) override;$/;"	m	class:NodeType::NodeFlags::SentinelType::BaseBuilder
override	external/asmjit/src/asmjit/core/compiler.h	/^  ASMJIT_API Error onAttach(CodeHolder* code) noexcept override;$/;"	m	class:BaseCompiler
override	external/asmjit/src/asmjit/core/compiler.h	/^  ASMJIT_API Error onDetach(CodeHolder* code) noexcept override;$/;"	m	class:BaseCompiler
override	external/asmjit/src/asmjit/core/compiler.h	/^  ASMJIT_API Error run(Zone* zone, Logger* logger) override;$/;"	m	class:FuncPass
override	external/asmjit/src/asmjit/core/logger.h	/^  ASMJIT_API Error _log(const char* data, size_t size = SIZE_MAX) noexcept override;$/;"	m	class:FileLogger
override	external/asmjit/src/asmjit/core/logger.h	/^  ASMJIT_API Error _log(const char* data, size_t size = SIZE_MAX) noexcept override;$/;"	m	class:StringLogger
override	external/asmjit/src/asmjit/core/rapass_p.h	/^  Error runOnFunction(Zone* zone, Logger* logger, FuncNode* func) override;$/;"	m	class:RABlockFlags::BaseRAPass
override	external/asmjit/src/asmjit/x86/x86assembler.h	/^  ASMJIT_API Error _emit(InstId instId, const Operand_& o0, const Operand_& o1, const Operand_& o2, const Operand_* opExt) override;$/;"	m	class:Assembler
override	external/asmjit/src/asmjit/x86/x86assembler.h	/^  ASMJIT_API Error align(AlignMode alignMode, uint32_t alignment) override;$/;"	m	class:Assembler
override	external/asmjit/src/asmjit/x86/x86assembler.h	/^  ASMJIT_API Error onAttach(CodeHolder* code) noexcept override;$/;"	m	class:Assembler
override	external/asmjit/src/asmjit/x86/x86assembler.h	/^  ASMJIT_API Error onDetach(CodeHolder* code) noexcept override;$/;"	m	class:Assembler
override	external/asmjit/src/asmjit/x86/x86builder.h	/^  ASMJIT_API Error finalize() override;$/;"	m	class:Builder
override	external/asmjit/src/asmjit/x86/x86builder.h	/^  ASMJIT_API Error onAttach(CodeHolder* code) noexcept override;$/;"	m	class:Builder
override	external/asmjit/src/asmjit/x86/x86builder.h	/^  ASMJIT_API Error onDetach(CodeHolder* code) noexcept override;$/;"	m	class:Builder
override	external/asmjit/src/asmjit/x86/x86compiler.h	/^  ASMJIT_API Error finalize() override;$/;"	m	class:Compiler
override	external/asmjit/src/asmjit/x86/x86compiler.h	/^  ASMJIT_API Error onAttach(CodeHolder* code) noexcept override;$/;"	m	class:Compiler
override	external/asmjit/src/asmjit/x86/x86compiler.h	/^  ASMJIT_API Error onDetach(CodeHolder* code) noexcept override;$/;"	m	class:Compiler
override	external/asmjit/src/asmjit/x86/x86emithelper_p.h	/^    const BaseReg& b, const char* comment = nullptr) override;$/;"	m	class:EmitHelper
override	external/asmjit/src/asmjit/x86/x86emithelper_p.h	/^    const Operand_& src_, TypeId srcTypeId, const char* comment = nullptr) override;$/;"	m	class:EmitHelper
override	external/asmjit/src/asmjit/x86/x86emithelper_p.h	/^    const Operand_& src_, TypeId typeId, const char* comment = nullptr) override;$/;"	m	class:EmitHelper
override	external/asmjit/src/asmjit/x86/x86rapass_p.h	/^  Error _rewrite(BaseNode* first, BaseNode* stop) noexcept override;$/;"	m	class:X86RAPass
override	external/asmjit/src/asmjit/x86/x86rapass_p.h	/^  Error buildCFG() noexcept override;$/;"	m	class:X86RAPass
override	external/asmjit/src/asmjit/x86/x86rapass_p.h	/^  Error emitJump(const Label& label) noexcept override;$/;"	m	class:X86RAPass
override	external/asmjit/src/asmjit/x86/x86rapass_p.h	/^  Error emitLoad(uint32_t workId, uint32_t dstPhysId) noexcept override;$/;"	m	class:X86RAPass
override	external/asmjit/src/asmjit/x86/x86rapass_p.h	/^  Error emitMove(uint32_t workId, uint32_t dstPhysId, uint32_t srcPhysId) noexcept override;$/;"	m	class:X86RAPass
override	external/asmjit/src/asmjit/x86/x86rapass_p.h	/^  Error emitPreCall(InvokeNode* invokeNode) noexcept override;$/;"	m	class:X86RAPass
override	external/asmjit/src/asmjit/x86/x86rapass_p.h	/^  Error emitSave(uint32_t workId, uint32_t srcPhysId) noexcept override;$/;"	m	class:X86RAPass
override	external/asmjit/src/asmjit/x86/x86rapass_p.h	/^  Error emitSwap(uint32_t aWorkId, uint32_t aPhysId, uint32_t bWorkId, uint32_t bPhysId) noexcept override;$/;"	m	class:X86RAPass
override	external/asmjit/src/asmjit/x86/x86rapass_p.h	/^  void onDone() noexcept override;$/;"	m	class:X86RAPass
override	external/asmjit/src/asmjit/x86/x86rapass_p.h	/^  void onInit() noexcept override;$/;"	m	class:X86RAPass
packed	external/asmjit/src/asmjit/core/func.h	/^    uint32_t packed[(kMaxRegArgsPerGroup + 3) \/ 4];$/;"	m	union:CallConvId::CallConvStrategy::CallConvFlags::CallConv::RegOrder
pad	src/env.cpp	/^    u16 pad;$/;"	m	struct:dbt::env_syscall::uabi_sysinfo	file:
pageGranularity	external/asmjit/src/asmjit/core/virtmem.h	/^  uint32_t pageGranularity;$/;"	m	struct:VirtMem::CachePolicy::Info
pageSize	external/asmjit/src/asmjit/core/jitallocator.cpp	/^  uint32_t pageSize;$/;"	m	class:JitAllocatorPrivateImpl	file:
pageSize	external/asmjit/src/asmjit/core/virtmem.h	/^  uint32_t pageSize;$/;"	m	struct:VirtMem::CachePolicy::Info
pairCount	external/asmjit/src/asmjit/arm/a64emithelper.cpp	/^    uint32_t pairCount;$/;"	m	struct:PrologEpilogInfo::GroupData	file:
pairInstId	external/asmjit/src/asmjit/arm/a64emithelper.cpp	/^  InstId pairInstId;$/;"	m	struct:LoadStoreInstructions	file:
pairs	external/asmjit/src/asmjit/arm/a64emithelper.cpp	/^    RegPair pairs[16];$/;"	m	struct:PrologEpilogInfo::GroupData	file:
parentReg	external/asmjit/src/asmjit/core/rapass.cpp	/^  RAWorkReg* parentReg;$/;"	m	struct:RAConsecutiveReg	file:
parse	external/asmjit/db/exp.js	/^function parse(source) {$/;"	f
parseEnum	external/asmjit/tools/enumgen.js	/^function parseEnum(input) {$/;"	f
parts	external/asmjit/db/x86.js	/^    var parts = s.split(" ");$/;"	v
parts	external/asmjit/src/asmjit/core/cpuinfo.cpp	/^  int parts[3];$/;"	m	struct:arm::UNameKernelVersion	file:
pattern	external/asmjit/src/asmjit/core/jitallocator.cpp	/^    uint64_t pattern;$/;"	m	class:JitAllocatorWrapper::Record	file:
patternFromOperand	external/asmjit/db/aarch64.js	/^function patternFromOperand(key) { return key; }$/;"	f
pfpFeatureId	external/asmjit/src/asmjit/core/cpuinfo.cpp	/^  uint8_t pfpFeatureId;$/;"	m	struct:arm::AppleFamilyId::WinPFPMapping	file:
physCount	external/asmjit/src/asmjit/core/raassignment_p.h	/^    RARegCount physCount;$/;"	m	struct:RAAssignment::Layout
physId	external/asmjit/src/asmjit/x86/x86instdb_p.h	/^  uint8_t physId;$/;"	m	struct:RWInfoOp
physIds	external/asmjit/src/asmjit/core/raassignment_p.h	/^    uint8_t physIds[1 \/* ... *\/];$/;"	m	struct:RAAssignment::WorkToPhysMap
physIndex	external/asmjit/src/asmjit/core/raassignment_p.h	/^    RARegIndex physIndex;$/;"	m	struct:RAAssignment::Layout
physTotal	external/asmjit/src/asmjit/core/raassignment_p.h	/^    uint32_t physTotal;$/;"	m	struct:RAAssignment::Layout
pointer	external/asmjit/src/asmjit/core/support.h	/^  typedef value_type* pointer;$/;"	t	struct:Support::Internal::SortOrder::Array
pointer	external/asmjit/src/asmjit/core/zonevector.h	/^  typedef T* pointer;$/;"	t	class:ZoneVector
poolCount	external/asmjit/src/asmjit/core/jitallocator.cpp	/^      poolCount(poolCount) {}$/;"	f	class:JitAllocatorPrivateImpl
poolCount	external/asmjit/src/asmjit/core/jitallocator.cpp	/^  size_t poolCount;$/;"	m	class:JitAllocatorPrivateImpl	file:
pools	external/asmjit/src/asmjit/core/jitallocator.cpp	/^  JitAllocatorPool* pools;$/;"	m	class:JitAllocatorPrivateImpl	file:
pos	external/asmjit/tools/tablegen.js	/^    var pos = 0;$/;"	v
pp	external/asmjit/tools/tablegen-x86.js	/^    var pp = dbi.pp;$/;"	v
ppoint	src/codegen/jitabi.h	/^namespace ppoint$/;"	n	namespace:dbt::jitabi
ppoint	src/tcache.h	/^namespace jitabi::ppoint$/;"	n	class:dbt::jitabi
prePostOp	external/asmjit/src/asmjit/arm/a64instdb_p.h	/^  uint32_t prePostOp  : 11;$/;"	m	struct:InstDB::EncodingData::BaseLdSt
prePostOp	external/asmjit/src/asmjit/arm/a64instdb_p.h	/^  uint32_t prePostOp  : 11;$/;"	m	struct:InstDB::EncodingData::SimdLdSt
prePostOp	external/asmjit/src/asmjit/arm/a64instdb_p.h	/^  uint32_t prePostOp : 10;$/;"	m	struct:InstDB::EncodingData::BaseLdpStp
prePostOp	external/asmjit/src/asmjit/arm/a64instdb_p.h	/^  uint32_t prePostOp : 10;$/;"	m	struct:InstDB::EncodingData::SimdLdpStp
preds	src/ir/qir.h	/^    ArenaVector<Block *> succs, preds;$/;"	m	struct:dbt::qir::Block
prefix	external/asmjit/db/x86.js	/^    var prefix, comp;$/;"	v
prev	external/asmjit/src/asmjit/core/zone.h	/^    Block* prev;$/;"	m	struct:Zone::Block
prev	external/asmjit/src/asmjit/core/zone.h	/^    DynamicBlock* prev;$/;"	m	struct:ZoneAllocator::DynamicBlock
prev	external/asmjit/tools/tablegen.js	/^        prev: data,$/;"	p	class:files
prime	external/asmjit/src/asmjit/core/zonehash.cpp	/^  uint32_t prime;$/;"	m	struct:HashPrime	file:
printInfo	external/asmjit/test/asmjit_test_instinfo.cpp	/^static void printInfo(Arch arch, const BaseInst& inst, const Operand_* operands, size_t opCount) {$/;"	f	file:
printInfoExtra	external/asmjit/test/asmjit_test_instinfo.cpp	/^static void printInfoExtra(Arch arch, InstId instId, InstOptions options, const BaseReg& extraReg, Args&&... args) {$/;"	f	file:
printInfoSimple	external/asmjit/test/asmjit_test_instinfo.cpp	/^static void printInfoSimple(Arch arch,InstId instId, InstOptions options, Args&&... args) {$/;"	f	file:
priority	external/asmjit/test/broken.h	/^  int priority;$/;"	m	struct:BrokenAPI::Unit
process	src/env.h	/^    static Process process;$/;"	m	struct:dbt::env
procs	src/env.cpp	/^    u16 procs;$/;"	m	struct:dbt::env_syscall::uabi_sysinfo	file:
punpcklbw	external/asmjit/tools/tablegen-x86.js	/^      "punpcklbw" : "Punpcklxx",$/;"	p	class:rwCategoryByName
punpckldq	external/asmjit/tools/tablegen-x86.js	/^      "punpckldq" : "Punpcklxx",$/;"	p	class:rwCategoryByName
punpcklwd	external/asmjit/tools/tablegen-x86.js	/^      "punpcklwd" : "Punpcklxx",$/;"	p	class:rwCategoryByName
push	src/codegen/jitabi.cpp	/^    void push(Record const &rec) { arr[head++ % size] = rec; }$/;"	f	struct:dbt::jitabi::TraceRing
push_back	src/util/ilist.h	/^    void push_back(pointer n) { insert(end(), n); }$/;"	f	struct:dbt::IList
push_back	src/util/ilist.h	/^    void push_back(reference n) { insert(end(), &n); }$/;"	f	struct:dbt::IList
q0	external/asmjit/src/asmjit/arm/a64operand.h	/^static constexpr VecV q0 = VecV(0);$/;"	m	namespace:regs
q1	external/asmjit/src/asmjit/arm/a64operand.h	/^static constexpr VecV q1 = VecV(1);$/;"	m	namespace:regs
q10	external/asmjit/src/asmjit/arm/a64operand.h	/^static constexpr VecV q10 = VecV(10);$/;"	m	namespace:regs
q11	external/asmjit/src/asmjit/arm/a64operand.h	/^static constexpr VecV q11 = VecV(11);$/;"	m	namespace:regs
q12	external/asmjit/src/asmjit/arm/a64operand.h	/^static constexpr VecV q12 = VecV(12);$/;"	m	namespace:regs
q13	external/asmjit/src/asmjit/arm/a64operand.h	/^static constexpr VecV q13 = VecV(13);$/;"	m	namespace:regs
q14	external/asmjit/src/asmjit/arm/a64operand.h	/^static constexpr VecV q14 = VecV(14);$/;"	m	namespace:regs
q15	external/asmjit/src/asmjit/arm/a64operand.h	/^static constexpr VecV q15 = VecV(15);$/;"	m	namespace:regs
q16	external/asmjit/src/asmjit/arm/a64operand.h	/^static constexpr VecV q16 = VecV(16);$/;"	m	namespace:regs
q17	external/asmjit/src/asmjit/arm/a64operand.h	/^static constexpr VecV q17 = VecV(17);$/;"	m	namespace:regs
q18	external/asmjit/src/asmjit/arm/a64operand.h	/^static constexpr VecV q18 = VecV(18);$/;"	m	namespace:regs
q19	external/asmjit/src/asmjit/arm/a64operand.h	/^static constexpr VecV q19 = VecV(19);$/;"	m	namespace:regs
q2	external/asmjit/src/asmjit/arm/a64operand.h	/^static constexpr VecV q2 = VecV(2);$/;"	m	namespace:regs
q20	external/asmjit/src/asmjit/arm/a64operand.h	/^static constexpr VecV q20 = VecV(20);$/;"	m	namespace:regs
q21	external/asmjit/src/asmjit/arm/a64operand.h	/^static constexpr VecV q21 = VecV(21);$/;"	m	namespace:regs
q22	external/asmjit/src/asmjit/arm/a64operand.h	/^static constexpr VecV q22 = VecV(22);$/;"	m	namespace:regs
q23	external/asmjit/src/asmjit/arm/a64operand.h	/^static constexpr VecV q23 = VecV(23);$/;"	m	namespace:regs
q24	external/asmjit/src/asmjit/arm/a64operand.h	/^static constexpr VecV q24 = VecV(24);$/;"	m	namespace:regs
q25	external/asmjit/src/asmjit/arm/a64operand.h	/^static constexpr VecV q25 = VecV(25);$/;"	m	namespace:regs
q26	external/asmjit/src/asmjit/arm/a64operand.h	/^static constexpr VecV q26 = VecV(26);$/;"	m	namespace:regs
q27	external/asmjit/src/asmjit/arm/a64operand.h	/^static constexpr VecV q27 = VecV(27);$/;"	m	namespace:regs
q28	external/asmjit/src/asmjit/arm/a64operand.h	/^static constexpr VecV q28 = VecV(28);$/;"	m	namespace:regs
q29	external/asmjit/src/asmjit/arm/a64operand.h	/^static constexpr VecV q29 = VecV(29);$/;"	m	namespace:regs
q3	external/asmjit/src/asmjit/arm/a64operand.h	/^static constexpr VecV q3 = VecV(3);$/;"	m	namespace:regs
q30	external/asmjit/src/asmjit/arm/a64operand.h	/^static constexpr VecV q30 = VecV(30);$/;"	m	namespace:regs
q31	external/asmjit/src/asmjit/arm/a64operand.h	/^static constexpr VecV q31 = VecV(31);$/;"	m	namespace:regs
q4	external/asmjit/src/asmjit/arm/a64operand.h	/^static constexpr VecV q4 = VecV(4);$/;"	m	namespace:regs
q5	external/asmjit/src/asmjit/arm/a64operand.h	/^static constexpr VecV q5 = VecV(5);$/;"	m	namespace:regs
q6	external/asmjit/src/asmjit/arm/a64operand.h	/^static constexpr VecV q6 = VecV(6);$/;"	m	namespace:regs
q7	external/asmjit/src/asmjit/arm/a64operand.h	/^static constexpr VecV q7 = VecV(7);$/;"	m	namespace:regs
q8	external/asmjit/src/asmjit/arm/a64operand.h	/^static constexpr VecV q8 = VecV(8);$/;"	m	namespace:regs
q9	external/asmjit/src/asmjit/arm/a64operand.h	/^static constexpr VecV q9 = VecV(9);$/;"	m	namespace:regs
qb	src/guest/rv32_qir.h	/^    qir::Builder qb;$/;"	m	struct:dbt::qir::rv32::RV32Translator
qb	src/ir/qir_opt.cpp	/^    Builder qb;$/;"	m	struct:dbt::qir::FolderVisitor	file:
qcg	src/codegen/arch_traits.cpp	/^namespace dbt::qcg$/;"	n	class:dbt	file:
qcg	src/codegen/arch_traits.h	/^namespace dbt::qcg$/;"	n	class:dbt
qcg	src/codegen/emit.cpp	/^namespace dbt::qcg$/;"	n	class:dbt	file:
qcg	src/codegen/emit.h	/^namespace dbt::qcg$/;"	n	class:dbt
qcg	src/codegen/qcg.cpp	/^namespace dbt::qcg$/;"	n	class:dbt	file:
qcg	src/codegen/qcg.h	/^namespace dbt::qcg$/;"	n	class:dbt
qcg	src/codegen/regalloc.cpp	/^namespace dbt::qcg$/;"	n	class:dbt	file:
qcg	src/codegen/select.cpp	/^namespace dbt::qcg$/;"	n	class:dbt	file:
qcg	src/ir/qir.h	/^namespace dbt::qcg$/;"	n	class:dbt
qcg_TryLinkBranchJIT	src/codegen/jitabi.cpp	/^HELPER _RetPair qcg_TryLinkBranchJIT(CPUState *state, void *retaddr)$/;"	f	namespace:dbt::jitabi
qcgstub_brind	src/codegen/jitabi.cpp	/^HELPER void *qcgstub_brind(CPUState *state, u32 gip)$/;"	f	namespace:dbt::jitabi
qcgstub_escape_brind	src/codegen/jitabi.cpp	/^HELPER_ASM void qcgstub_escape_brind()$/;"	f	namespace:dbt::jitabi
qcgstub_escape_link	src/codegen/jitabi.cpp	/^HELPER_ASM void qcgstub_escape_link()$/;"	f	namespace:dbt::jitabi
qcgstub_link_branch_jit	src/codegen/jitabi.cpp	/^HELPER_ASM void qcgstub_link_branch_jit()$/;"	f	namespace:dbt::jitabi
qcgstub_raise	src/codegen/jitabi.cpp	/^HELPER void qcgstub_raise()$/;"	f	namespace:dbt::jitabi
qir	src/guest/rv32_qir.h	/^namespace dbt::qir$/;"	n	class:dbt::qir::dbt
qir	src/ir/compile.cpp	/^namespace dbt::qir$/;"	n	class:dbt	file:
qir	src/ir/compile.h	/^namespace dbt::qir$/;"	n	class:dbt
qir	src/ir/marker.h	/^namespace dbt::qir$/;"	n	class:dbt
qir	src/ir/qir.cpp	/^namespace dbt::qir$/;"	n	class:dbt	file:
qir	src/ir/qir.h	/^namespace dbt::qir$/;"	n	class:dbt
qir	src/ir/qir_builder.h	/^namespace dbt::qir$/;"	n	class:dbt
qir	src/ir/qir_opt.cpp	/^namespace dbt::qir$/;"	n	class:dbt	file:
qir	src/ir/qir_opt.h	/^namespace dbt::qir$/;"	n	class:dbt
queryFeaturesInline	external/asmjit/src/asmjit/x86/x86instapi.cpp	/^static Error queryFeaturesInline(CpuFeatures* out, Arch arch, BaseInst inst, Args&&... args) {$/;"	f	file:
queryRWInfoInline	external/asmjit/src/asmjit/x86/x86instapi.cpp	/^static Error queryRWInfoInline(InstRWInfo* out, Arch arch, BaseInst inst, Args&&... args) {$/;"	f	file:
queryRwByData	external/asmjit/tools/tablegen-x86.js	/^    function queryRwByData(dbInsts, rwOpsArray) {$/;"	f
queryRwGeneric	external/asmjit/tools/tablegen-x86.js	/^    function queryRwGeneric(dbInsts, step) {$/;"	f
r	external/asmjit/src/asmjit/arm/armutils.h	/^  uint32_t r;$/;"	m	struct:Utils::LogicalImm
r10	external/asmjit/src/asmjit/x86/x86operand.h	/^static constexpr Gpq r10 = Gpq(Gp::kIdR10);$/;"	m	namespace:regs
r10b	external/asmjit/src/asmjit/x86/x86operand.h	/^static constexpr GpbLo r10b = GpbLo(Gp::kIdR10);$/;"	m	namespace:regs
r10d	external/asmjit/src/asmjit/x86/x86operand.h	/^static constexpr Gpd r10d = Gpd(Gp::kIdR10);$/;"	m	namespace:regs
r10w	external/asmjit/src/asmjit/x86/x86operand.h	/^static constexpr Gpw r10w = Gpw(Gp::kIdR10);$/;"	m	namespace:regs
r11	external/asmjit/src/asmjit/x86/x86operand.h	/^static constexpr Gpq r11 = Gpq(Gp::kIdR11);$/;"	m	namespace:regs
r11b	external/asmjit/src/asmjit/x86/x86operand.h	/^static constexpr GpbLo r11b = GpbLo(Gp::kIdR11);$/;"	m	namespace:regs
r11d	external/asmjit/src/asmjit/x86/x86operand.h	/^static constexpr Gpd r11d = Gpd(Gp::kIdR11);$/;"	m	namespace:regs
r11w	external/asmjit/src/asmjit/x86/x86operand.h	/^static constexpr Gpw r11w = Gpw(Gp::kIdR11);$/;"	m	namespace:regs
r12	external/asmjit/src/asmjit/x86/x86operand.h	/^static constexpr Gpq r12 = Gpq(Gp::kIdR12);$/;"	m	namespace:regs
r12b	external/asmjit/src/asmjit/x86/x86operand.h	/^static constexpr GpbLo r12b = GpbLo(Gp::kIdR12);$/;"	m	namespace:regs
r12d	external/asmjit/src/asmjit/x86/x86operand.h	/^static constexpr Gpd r12d = Gpd(Gp::kIdR12);$/;"	m	namespace:regs
r12w	external/asmjit/src/asmjit/x86/x86operand.h	/^static constexpr Gpw r12w = Gpw(Gp::kIdR12);$/;"	m	namespace:regs
r13	external/asmjit/src/asmjit/x86/x86operand.h	/^static constexpr Gpq r13 = Gpq(Gp::kIdR13);$/;"	m	namespace:regs
r13b	external/asmjit/src/asmjit/x86/x86operand.h	/^static constexpr GpbLo r13b = GpbLo(Gp::kIdR13);$/;"	m	namespace:regs
r13d	external/asmjit/src/asmjit/x86/x86operand.h	/^static constexpr Gpd r13d = Gpd(Gp::kIdR13);$/;"	m	namespace:regs
r13w	external/asmjit/src/asmjit/x86/x86operand.h	/^static constexpr Gpw r13w = Gpw(Gp::kIdR13);$/;"	m	namespace:regs
r14	external/asmjit/src/asmjit/x86/x86operand.h	/^static constexpr Gpq r14 = Gpq(Gp::kIdR14);$/;"	m	namespace:regs
r14b	external/asmjit/src/asmjit/x86/x86operand.h	/^static constexpr GpbLo r14b = GpbLo(Gp::kIdR14);$/;"	m	namespace:regs
r14d	external/asmjit/src/asmjit/x86/x86operand.h	/^static constexpr Gpd r14d = Gpd(Gp::kIdR14);$/;"	m	namespace:regs
r14w	external/asmjit/src/asmjit/x86/x86operand.h	/^static constexpr Gpw r14w = Gpw(Gp::kIdR14);$/;"	m	namespace:regs
r15	external/asmjit/src/asmjit/x86/x86operand.h	/^static constexpr Gpq r15 = Gpq(Gp::kIdR15);$/;"	m	namespace:regs
r15b	external/asmjit/src/asmjit/x86/x86operand.h	/^static constexpr GpbLo r15b = GpbLo(Gp::kIdR15);$/;"	m	namespace:regs
r15d	external/asmjit/src/asmjit/x86/x86operand.h	/^static constexpr Gpd r15d = Gpd(Gp::kIdR15);$/;"	m	namespace:regs
r15w	external/asmjit/src/asmjit/x86/x86operand.h	/^static constexpr Gpw r15w = Gpw(Gp::kIdR15);$/;"	m	namespace:regs
r8	external/asmjit/src/asmjit/x86/x86operand.h	/^static constexpr Gpq r8 = Gpq(Gp::kIdR8);$/;"	m	namespace:regs
r8_r_rs32	src/codegen/arch_traits.cpp	/^_(r8_r_rs32) = InstCt<1, 2>::Make({DEF(GPR(R8))},$/;"	m	namespace:dbt::qcg	file:
r8b	external/asmjit/src/asmjit/x86/x86operand.h	/^static constexpr GpbLo r8b = GpbLo(Gp::kIdR8);$/;"	m	namespace:regs
r8d	external/asmjit/src/asmjit/x86/x86operand.h	/^static constexpr Gpd r8d = Gpd(Gp::kIdR8);$/;"	m	namespace:regs
r8w	external/asmjit/src/asmjit/x86/x86operand.h	/^static constexpr Gpw r8w = Gpw(Gp::kIdR8);$/;"	m	namespace:regs
r9	external/asmjit/src/asmjit/x86/x86operand.h	/^static constexpr Gpq r9 = Gpq(Gp::kIdR9);$/;"	m	namespace:regs
r9b	external/asmjit/src/asmjit/x86/x86operand.h	/^static constexpr GpbLo r9b = GpbLo(Gp::kIdR9);$/;"	m	namespace:regs
r9d	external/asmjit/src/asmjit/x86/x86operand.h	/^static constexpr Gpd r9d = Gpd(Gp::kIdR9);$/;"	m	namespace:regs
r9w	external/asmjit/src/asmjit/x86/x86operand.h	/^static constexpr Gpw r9w = Gpw(Gp::kIdR9);$/;"	m	namespace:regs
rByteMask	external/asmjit/src/asmjit/x86/x86instdb_p.h	/^  uint64_t rByteMask;$/;"	m	struct:RWInfoOp
rHiId	external/asmjit/src/asmjit/arm/a64instdb_p.h	/^  uint32_t rHiId : 6;$/;"	m	struct:InstDB::EncodingData::BaseRM_NoImm
rHiId	external/asmjit/src/asmjit/arm/a64instdb_p.h	/^  uint32_t rHiId : 6;$/;"	m	struct:InstDB::EncodingData::BaseRM_SImm10
rHiId	external/asmjit/src/asmjit/arm/a64instdb_p.h	/^  uint32_t rHiId : 6;$/;"	m	struct:InstDB::EncodingData::BaseRM_SImm9
rHiId	external/asmjit/src/asmjit/arm/a64instdb_p.h	/^  uint32_t rHiId : 8;$/;"	m	struct:InstDB::EncodingData::BaseR
rShift	external/asmjit/src/asmjit/arm/a64instdb_p.h	/^  uint32_t rShift : 8;$/;"	m	struct:InstDB::EncodingData::BaseR
rType	external/asmjit/src/asmjit/arm/a64instdb_p.h	/^  uint32_t rType      : 2;$/;"	m	struct:InstDB::EncodingData::BaseLdSt
rType	external/asmjit/src/asmjit/arm/a64instdb_p.h	/^  uint32_t rType : 2;$/;"	m	struct:InstDB::EncodingData::BaseAtomicCasp
rType	external/asmjit/src/asmjit/arm/a64instdb_p.h	/^  uint32_t rType : 2;$/;"	m	struct:InstDB::EncodingData::BaseAtomicOp
rType	external/asmjit/src/asmjit/arm/a64instdb_p.h	/^  uint32_t rType : 2;$/;"	m	struct:InstDB::EncodingData::BaseAtomicSt
rType	external/asmjit/src/asmjit/arm/a64instdb_p.h	/^  uint32_t rType : 2;$/;"	m	struct:InstDB::EncodingData::BaseExtend
rType	external/asmjit/src/asmjit/arm/a64instdb_p.h	/^  uint32_t rType : 2;$/;"	m	struct:InstDB::EncodingData::BaseLdpStp
rType	external/asmjit/src/asmjit/arm/a64instdb_p.h	/^  uint32_t rType : 2;$/;"	m	struct:InstDB::EncodingData::BaseLdxp
rType	external/asmjit/src/asmjit/arm/a64instdb_p.h	/^  uint32_t rType : 2;$/;"	m	struct:InstDB::EncodingData::BaseRM_NoImm
rType	external/asmjit/src/asmjit/arm/a64instdb_p.h	/^  uint32_t rType : 2;$/;"	m	struct:InstDB::EncodingData::BaseRM_SImm10
rType	external/asmjit/src/asmjit/arm/a64instdb_p.h	/^  uint32_t rType : 2;$/;"	m	struct:InstDB::EncodingData::BaseRM_SImm9
rType	external/asmjit/src/asmjit/arm/a64instdb_p.h	/^  uint32_t rType : 2;$/;"	m	struct:InstDB::EncodingData::BaseStx
rType	external/asmjit/src/asmjit/arm/a64instdb_p.h	/^  uint32_t rType : 2;$/;"	m	struct:InstDB::EncodingData::BaseStxp
rType	external/asmjit/src/asmjit/arm/a64instdb_p.h	/^  uint32_t rType : 8;$/;"	m	struct:InstDB::EncodingData::BaseR
r_0_cxi	src/codegen/arch_traits.cpp	/^_(r_0_cxi) = InstCt<1, 2>::Make({DEF(GPR(R))},$/;"	m	namespace:dbt::qcg	file:
r_0_rs32	src/codegen/arch_traits.cpp	/^_(r_0_rs32) = InstCt<1, 2>::Make({DEF(GPR(R))},$/;"	m	namespace:dbt::qcg	file:
r_0_ru32	src/codegen/arch_traits.cpp	/^_(r_0_ru32) = InstCt<1, 2>::Make({DEF(GPR(R))},$/;"	m	namespace:dbt::qcg	file:
r_ri	src/codegen/arch_traits.cpp	/^_(r_ri) = InstCt<1, 1>::Make({DEF(GPR(R))}, {DEF(GPR(R), IMM(ANY))});$/;"	m	namespace:dbt::qcg	file:
r_rs32	src/codegen/arch_traits.cpp	/^_(r_rs32) = InstCt<0, 2>::Make({}, {DEF(GPR(R)), DEF(GPR(R), IMM(S32))});$/;"	m	namespace:dbt::qcg	file:
r_ru32	src/codegen/arch_traits.cpp	/^_(r_ru32) = InstCt<1, 1>::Make({DEF(GPR(R))}, {DEF(GPR(R), IMM(U32))});$/;"	m	namespace:dbt::qcg	file:
raConsecutiveLeadCountToRegMaskFilter	external/asmjit/src/asmjit/arm/a64rapass.cpp	/^static const RegMask raConsecutiveLeadCountToRegMaskFilter[5] = {$/;"	v	file:
raConsecutiveLeadCountToRegMaskFilter	external/asmjit/src/asmjit/x86/x86rapass.cpp	/^static const RegMask raConsecutiveLeadCountToRegMaskFilter[5] = {$/;"	v	file:
raw	src/guest/rv32_insn.h	/^    u32 raw;$/;"	m	struct:dbt::rv32::insn::Base
rax	external/asmjit/src/asmjit/x86/x86operand.h	/^static constexpr Gpq rax = Gpq(Gp::kIdAx);$/;"	m	namespace:regs
rbp	external/asmjit/src/asmjit/x86/x86operand.h	/^static constexpr Gpq rbp = Gpq(Gp::kIdBp);$/;"	m	namespace:regs
rbx	external/asmjit/src/asmjit/x86/x86operand.h	/^static constexpr Gpq rbx = Gpq(Gp::kIdBx);$/;"	m	namespace:regs
rcerrno	src/env.cpp	/^static inline uabi_long rcerrno(uabi_long rc)$/;"	f	namespace:dbt::env_syscall
rcp	external/asmjit/src/asmjit/core/zonehash.cpp	/^  uint32_t rcp;$/;"	m	struct:HashPrime	file:
rcx	external/asmjit/src/asmjit/x86/x86operand.h	/^static constexpr Gpq rcx = Gpq(Gp::kIdCx);$/;"	m	namespace:regs
rdi	external/asmjit/src/asmjit/x86/x86operand.h	/^static constexpr Gpq rdi = Gpq(Gp::kIdDi);$/;"	m	namespace:regs
rdx	external/asmjit/src/asmjit/x86/x86operand.h	/^static constexpr Gpq rdx = Gpq(Gp::kIdDx);$/;"	m	namespace:regs
readJSON	external/asmjit/tools/tablegen-x86.js	/^function readJSON(fileName) {$/;"	f
ref	external/asmjit/src/asmjit/core/compiler.h	/^  ASMJIT_API Error _newReg(BaseReg* ASMJIT_NONNULL(out), const BaseReg& ref, const char* name = nullptr);$/;"	m	class:BaseCompiler
ref	external/asmjit/src/asmjit/core/compiler.h	/^  ASMJIT_API Error _newRegFmt(BaseReg* ASMJIT_NONNULL(out), const BaseReg& ref, const char* fmt, ...);$/;"	m	class:BaseCompiler
refCount	external/asmjit/tools/tablegen.js	/^      refCount: 1$/;"	p	class:_index
reference	external/asmjit/src/asmjit/core/support.h	/^  typedef value_type& reference;$/;"	t	struct:Support::Internal::SortOrder::Array
reference	external/asmjit/src/asmjit/core/zonevector.h	/^  typedef T& reference;$/;"	t	class:ZoneVector
regMask	external/asmjit/tools/tablegen-x86.js	/^    var regMask = 0;$/;"	v
regOp	external/asmjit/src/asmjit/arm/a64instdb_p.h	/^  uint32_t regOp;$/;"	m	struct:InstDB::EncodingData::SimdCmp
regTypeMask	external/asmjit/src/asmjit/x86/x86instapi.cpp	/^  uint32_t regTypeMask;$/;"	m	struct:RegAnalysis	file:
region	src/codegen/qcg.cpp	/^    qir::Region *region;$/;"	m	struct:dbt::qcg::QCodegen	file:
registerLabelNode	external/asmjit/src/asmjit/core/builder.cpp	/^Error BaseBuilder::registerLabelNode(LabelNode* node) {$/;"	f	class:BaseBuilder
registerOp	external/asmjit/src/asmjit/arm/a64instdb_p.h	/^  uint32_t registerOp : 11;$/;"	m	struct:InstDB::EncodingData::BaseLdSt
registerOp	external/asmjit/src/asmjit/arm/a64instdb_p.h	/^  uint32_t registerOp : 11;$/;"	m	struct:InstDB::EncodingData::SimdLdSt
registerOp	external/asmjit/src/asmjit/arm/a64instdb_p.h	/^  uint32_t registerOp;       \/\/ 22 bits used.$/;"	m	struct:InstDB::EncodingData::SimdShift
registerOp	external/asmjit/src/asmjit/arm/a64instdb_p.h	/^  uint32_t registerOp;   \/\/ 22 bits used.$/;"	m	struct:InstDB::EncodingData::SimdBicOrr
regs	external/asmjit/src/asmjit/arm/a64operand.h	/^namespace regs {$/;"	n
regs	external/asmjit/src/asmjit/arm/armoperand.h	/^namespace regs {$/;"	n
regs	external/asmjit/src/asmjit/x86/x86operand.h	/^namespace regs {$/;"	n
regularOp	external/asmjit/src/asmjit/arm/a64instdb_p.h	/^  uint32_t regularOp : 26; \/\/ 22 bits used.$/;"	m	struct:InstDB::EncodingData::ISimdVVVe
regularVecType	external/asmjit/src/asmjit/arm/a64instdb_p.h	/^  uint32_t regularVecType : 6;$/;"	m	struct:InstDB::EncodingData::ISimdVVVe
rel	external/asmjit/src/asmjit/core/codeholder.h	/^  intptr_t rel;$/;"	m	struct:ExpressionOpType::ExpressionValueType::SectionFlags::CopySectionFlags::OffsetType::RelocType::LabelType::LabelLink
relocId	external/asmjit/src/asmjit/core/codeholder.h	/^  uint32_t relocId;$/;"	m	struct:ExpressionOpType::ExpressionValueType::SectionFlags::CopySectionFlags::OffsetType::RelocType::LabelType::LabelLink
remove	src/util/ilist.h	/^    static void remove(IListNodeBase *node)$/;"	f	struct:dbt::IListBase
remove	src/util/ilist.h	/^    void remove(reference n) { IListBase::remove(&n); }$/;"	f	struct:dbt::IList
rename	external/asmjit/src/asmjit/core/compiler.cpp	/^void BaseCompiler::rename(const BaseReg& reg, const char* fmt, ...) {$/;"	f	class:BaseCompiler
repeatCount	external/asmjit/src/asmjit/core/builder.h	/^  ASMJIT_API Error newEmbedDataNode(EmbedDataNode** ASMJIT_NONNULL(out), TypeId typeId, const void* data, size_t itemCount, size_t repeatCount = 1);$/;"	m	class:NodeType::NodeFlags::SentinelType::BaseBuilder
replicate	external/asmjit/src/asmjit/arm/a64instdb_p.h	/^  uint32_t replicate : 1;$/;"	m	struct:InstDB::EncodingData::SimdLdNStN
reportError	external/asmjit/src/asmjit/core/emitter.cpp	/^Error BaseEmitter::reportError(Error err, const char* message) {$/;"	f	class:BaseEmitter
reserved	external/asmjit/src/asmjit/core/codeholder.h	/^  uint8_t reserved[5];$/;"	m	struct:ExpressionOpType::ExpressionValueType::Expression
reserved	external/asmjit/src/asmjit/core/string.h	/^    uint8_t reserved[sizeof(uintptr_t) - 1];$/;"	m	struct:StringFormatFlags::String::ModifyOp::Large
reserved	external/asmjit/src/asmjit/x86/x86instdb_p.h	/^  uint8_t reserved[2];$/;"	m	struct:RWInfoOp
reset	src/util/ilist.h	/^    void reset()$/;"	f	struct:dbt::IListSentinel
resetSARegId	external/asmjit/src/asmjit/core/func.h	/^  ASMJIT_INLINE_NODEBUG void resetSARegId() { _saRegId = uint8_t(BaseReg::kIdBad); }$/;"	f	class:CallConvId::CallConvStrategy::CallConvFlags::FuncAttributes::FuncArgsAssignment
resetSARegId	external/asmjit/src/asmjit/core/func.h	/^  ASMJIT_INLINE_NODEBUG void resetSARegId() { setSARegId(BaseReg::kIdBad); }$/;"	f	class:CallConvId::CallConvStrategy::CallConvFlags::FuncAttributes::FuncFrame
ret	external/asmjit/src/asmjit/arm/a64compiler.h	/^  ASMJIT_INLINE_NODEBUG Error ret() { return addRet(Operand(), Operand()); }$/;"	f	class:Compiler
ret	external/asmjit/src/asmjit/arm/a64compiler.h	/^  ASMJIT_INLINE_NODEBUG Error ret(const BaseReg& o0) { return addRet(o0, Operand()); }$/;"	f	class:Compiler
ret	external/asmjit/src/asmjit/arm/a64compiler.h	/^  ASMJIT_INLINE_NODEBUG Error ret(const BaseReg& o0, const BaseReg& o1) { return addRet(o0, o1); }$/;"	f	class:Compiler
ret	external/asmjit/src/asmjit/x86/x86compiler.h	/^  ASMJIT_INLINE_NODEBUG Error ret() { return addRet(Operand(), Operand()); }$/;"	f	class:Compiler
ret	external/asmjit/src/asmjit/x86/x86compiler.h	/^  ASMJIT_INLINE_NODEBUG Error ret(const BaseReg& o0) { return addRet(o0, Operand()); }$/;"	f	class:Compiler
ret	external/asmjit/src/asmjit/x86/x86compiler.h	/^  ASMJIT_INLINE_NODEBUG Error ret(const BaseReg& o0, const BaseReg& o1) { return addRet(o0, o1); }$/;"	f	class:Compiler
reverse_iterator	external/asmjit/src/asmjit/core/zonevector.h	/^  typedef std::reverse_iterator<iterator> reverse_iterator;$/;"	t	class:ZoneVector
ri_r	src/codegen/arch_traits.cpp	/^_(ri_r) = InstCt<0, 2>::Make({}, {DEF(GPR(R), IMM(ANY)), DEF(GPR(R))});$/;"	m	namespace:dbt::qcg	file:
rightAssociate	external/asmjit/db/exp.js	/^function rightAssociate(info, bPrec) {$/;"	f
rip	external/asmjit/src/asmjit/x86/x86operand.h	/^static constexpr Rip rip = Rip(0);$/;"	m	namespace:regs
rlim_cur	src/env.cpp	/^    uint64_t rlim_cur;$/;"	m	struct:dbt::env_syscall::uabi_rlimit64	file:
rlim_max	src/env.cpp	/^    uint64_t rlim_max;$/;"	m	struct:dbt::env_syscall::uabi_rlimit64	file:
rmFeature	external/asmjit/src/asmjit/x86/x86instdb_p.h	/^  uint8_t rmFeature;$/;"	v
rmIndexes	external/asmjit/tools/tablegen-x86.js	/^      rmIndexes: this.rmReplaceableIndexes(dbInsts),$/;"	p	class:rmInfo
rmInfo	external/asmjit/src/asmjit/x86/x86instdb_p.h	/^  uint8_t rmInfo;$/;"	m	namespace:InstDB
rmOpsMask	external/asmjit/src/asmjit/x86/x86instdb_p.h	/^  uint8_t rmOpsMask;$/;"	v
rn	src/ir/qir.h	/^    Region *rn;$/;"	m	struct:dbt::qir::Block
ror	external/asmjit/src/asmjit/arm/a64instdb_p.h	/^  uint32_t ror : 2;$/;"	m	struct:InstDB::EncodingData::BaseShift
rounddown	src/util/common.h	/^inline T rounddown(T x, A y)$/;"	f
roundup	src/util/common.h	/^inline T roundup(T x, A y)$/;"	f
rsi	external/asmjit/src/asmjit/x86/x86operand.h	/^static constexpr Gpq rsi = Gpq(Gp::kIdSi);$/;"	m	namespace:regs
rsp	external/asmjit/src/asmjit/x86/x86operand.h	/^static constexpr Gpq rsp = Gpq(Gp::kIdSp);$/;"	m	namespace:regs
run	external/asmjit/src/asmjit/core/builder.cpp	/^Error Pass::run(Zone* zone, Logger* logger) {$/;"	f	class:Pass
run	external/asmjit/src/asmjit/core/compiler.cpp	/^Error FuncPass::run(Zone* zone, Logger* logger) {$/;"	f	class:FuncPass
run	external/asmjit/test/asmjit_test_compiler.cpp	/^int TestApp::run() {$/;"	f	class:TestApp
run	external/asmjit/test/asmjit_test_compiler_a64.cpp	/^  virtual bool run(void* _func, String& result, String& expect) {$/;"	f	class:A64Test_Adr
run	external/asmjit/test/asmjit_test_compiler_a64.cpp	/^  virtual bool run(void* _func, String& result, String& expect) {$/;"	f	class:A64Test_Branch1
run	external/asmjit/test/asmjit_test_compiler_a64.cpp	/^  virtual bool run(void* _func, String& result, String& expect) {$/;"	f	class:A64Test_GpArgs
run	external/asmjit/test/asmjit_test_compiler_a64.cpp	/^  virtual bool run(void* _func, String& result, String& expect) {$/;"	f	class:A64Test_Invoke1
run	external/asmjit/test/asmjit_test_compiler_a64.cpp	/^  virtual bool run(void* _func, String& result, String& expect) {$/;"	f	class:A64Test_Invoke2
run	external/asmjit/test/asmjit_test_compiler_a64.cpp	/^  virtual bool run(void* _func, String& result, String& expect) {$/;"	f	class:A64Test_Invoke3
run	external/asmjit/test/asmjit_test_compiler_a64.cpp	/^  virtual bool run(void* _func, String& result, String& expect) {$/;"	f	class:A64Test_JumpTable
run	external/asmjit/test/asmjit_test_compiler_a64.cpp	/^  virtual bool run(void* _func, String& result, String& expect) {$/;"	f	class:A64Test_ManyRegs
run	external/asmjit/test/asmjit_test_compiler_a64.cpp	/^  virtual bool run(void* _func, String& result, String& expect) {$/;"	f	class:A64Test_Simd1
run	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^  virtual bool run(void* _func, String& result, String& expect) {$/;"	f	class:X86Test_AlignBase
run	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^  virtual bool run(void* _func, String& result, String& expect) {$/;"	f	class:X86Test_AllocAlphaBlend
run	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^  virtual bool run(void* _func, String& result, String& expect) {$/;"	f	class:X86Test_AllocArgsDouble
run	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^  virtual bool run(void* _func, String& result, String& expect) {$/;"	f	class:X86Test_AllocArgsFloat
run	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^  virtual bool run(void* _func, String& result, String& expect) {$/;"	f	class:X86Test_AllocArgsIntPtr
run	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^  virtual bool run(void* _func, String& result, String& expect) {$/;"	f	class:X86Test_AllocArgsVec
run	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^  virtual bool run(void* _func, String& result, String& expect) {$/;"	f	class:X86Test_AllocBase
run	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^  virtual bool run(void* _func, String& result, String& expect) {$/;"	f	class:X86Test_AllocExtraBlock
run	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^  virtual bool run(void* _func, String& result, String& expect) {$/;"	f	class:X86Test_AllocGpbLo1
run	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^  virtual bool run(void* _func, String& result, String& expect) {$/;"	f	class:X86Test_AllocGpbLo2
run	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^  virtual bool run(void* _func, String& result, String& expect) {$/;"	f	class:X86Test_AllocIdiv1
run	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^  virtual bool run(void* _func, String& result, String& expect) {$/;"	f	class:X86Test_AllocIfElse1
run	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^  virtual bool run(void* _func, String& result, String& expect) {$/;"	f	class:X86Test_AllocIfElse2
run	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^  virtual bool run(void* _func, String& result, String& expect) {$/;"	f	class:X86Test_AllocIfElse3
run	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^  virtual bool run(void* _func, String& result, String& expect) {$/;"	f	class:X86Test_AllocIfElse4
run	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^  virtual bool run(void* _func, String& result, String& expect) {$/;"	f	class:X86Test_AllocImul1
run	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^  virtual bool run(void* _func, String& result, String& expect) {$/;"	f	class:X86Test_AllocImul2
run	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^  virtual bool run(void* _func, String& result, String& expect) {$/;"	f	class:X86Test_AllocInt8
run	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^  virtual bool run(void* _func, String& result, String& expect) {$/;"	f	class:X86Test_AllocMany1
run	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^  virtual bool run(void* _func, String& result, String& expect) {$/;"	f	class:X86Test_AllocMany2
run	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^  virtual bool run(void* _func, String& result, String& expect) {$/;"	f	class:X86Test_AllocMemcpy
run	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^  virtual bool run(void* _func, String& result, String& expect) {$/;"	f	class:X86Test_AllocRepMovsb
run	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^  virtual bool run(void* _func, String& result, String& expect) {$/;"	f	class:X86Test_AllocRetDouble1
run	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^  virtual bool run(void* _func, String& result, String& expect) {$/;"	f	class:X86Test_AllocRetDouble2
run	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^  virtual bool run(void* _func, String& result, String& expect) {$/;"	f	class:X86Test_AllocRetFloat1
run	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^  virtual bool run(void* _func, String& result, String& expect) {$/;"	f	class:X86Test_AllocRetFloat2
run	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^  virtual bool run(void* _func, String& result, String& expect) {$/;"	f	class:X86Test_AllocSetz
run	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^  virtual bool run(void* _func, String& result, String& expect) {$/;"	f	class:X86Test_AllocShlRor
run	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^  virtual bool run(void* _func, String& result, String& expect) {$/;"	f	class:X86Test_AllocStack
run	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^  virtual bool run(void* _func, String& result, String& expect) {$/;"	f	class:X86Test_AllocUnhandledArg
run	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^  virtual bool run(void* _func, String& result, String& expect) {$/;"	f	class:X86Test_FuncCallAVXClobber
run	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^  virtual bool run(void* _func, String& result, String& expect) {$/;"	f	class:X86Test_FuncCallBase1
run	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^  virtual bool run(void* _func, String& result, String& expect) {$/;"	f	class:X86Test_FuncCallBase2
run	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^  virtual bool run(void* _func, String& result, String& expect) {$/;"	f	class:X86Test_FuncCallConditional
run	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^  virtual bool run(void* _func, String& result, String& expect) {$/;"	f	class:X86Test_FuncCallDoubleAsXmmRet
run	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^  virtual bool run(void* _func, String& result, String& expect) {$/;"	f	class:X86Test_FuncCallDuplicateArgs
run	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^  virtual bool run(void* _func, String& result, String& expect) {$/;"	f	class:X86Test_FuncCallFast
run	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^  virtual bool run(void* _func, String& result, String& expect) {$/;"	f	class:X86Test_FuncCallFloatAsXmmRet
run	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^  virtual bool run(void* _func, String& result, String& expect) {$/;"	f	class:X86Test_FuncCallImmArgs
run	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^  virtual bool run(void* _func, String& result, String& expect) {$/;"	f	class:X86Test_FuncCallInt64Arg
run	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^  virtual bool run(void* _func, String& result, String& expect) {$/;"	f	class:X86Test_FuncCallLight
run	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^  virtual bool run(void* _func, String& result, String& expect) {$/;"	f	class:X86Test_FuncCallManyArgs
run	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^  virtual bool run(void* _func, String& result, String& expect) {$/;"	f	class:X86Test_FuncCallMisc1
run	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^  virtual bool run(void* _func, String& result, String& expect) {$/;"	f	class:X86Test_FuncCallMisc2
run	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^  virtual bool run(void* _func, String& result, String& expect) {$/;"	f	class:X86Test_FuncCallMisc3
run	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^  virtual bool run(void* _func, String& result, String& expect) {$/;"	f	class:X86Test_FuncCallMisc4
run	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^  virtual bool run(void* _func, String& result, String& expect) {$/;"	f	class:X86Test_FuncCallMisc5
run	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^  virtual bool run(void* _func, String& result, String& expect) {$/;"	f	class:X86Test_FuncCallMisc6
run	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^  virtual bool run(void* _func, String& result, String& expect) {$/;"	f	class:X86Test_FuncCallMultiple
run	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^  virtual bool run(void* _func, String& result, String& expect) {$/;"	f	class:X86Test_FuncCallPtrArgs
run	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^  virtual bool run(void* _func, String& result, String& expect) {$/;"	f	class:X86Test_FuncCallRecursive
run	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^  virtual bool run(void* _func, String& result, String& expect) {$/;"	f	class:X86Test_FuncCallRefArgs
run	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^  virtual bool run(void* _func, String& result, String& expect) {$/;"	f	class:X86Test_FuncCallSIMD
run	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^  virtual bool run(void* _func, String& result, String& expect) {$/;"	f	class:X86Test_FuncCallStd
run	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^  virtual bool run(void* _func, String& result, String& expect) {$/;"	f	class:X86Test_FuncCallVarArg1
run	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^  virtual bool run(void* _func, String& result, String& expect) {$/;"	f	class:X86Test_FuncCallVarArg2
run	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^  virtual bool run(void* _func, String& result, String& expect) {$/;"	f	class:X86Test_JumpCross
run	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^  virtual bool run(void* _func, String& result, String& expect) {$/;"	f	class:X86Test_JumpMany
run	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^  virtual bool run(void* _func, String& result, String& expect) {$/;"	f	class:X86Test_JumpMerge
run	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^  virtual bool run(void* _func, String& result, String& expect) {$/;"	f	class:X86Test_JumpTable1
run	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^  virtual bool run(void* _func, String& result, String& expect) {$/;"	f	class:X86Test_JumpTable2
run	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^  virtual bool run(void* _func, String& result, String& expect) {$/;"	f	class:X86Test_JumpTable3
run	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^  virtual bool run(void* _func, String& result, String& expect) {$/;"	f	class:X86Test_JumpTable4
run	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^  virtual bool run(void* _func, String& result, String& expect) {$/;"	f	class:X86Test_JumpUnreachable1
run	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^  virtual bool run(void* _func, String& result, String& expect) {$/;"	f	class:X86Test_JumpUnreachable2
run	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^  virtual bool run(void* _func, String& result, String& expect) {$/;"	f	class:X86Test_MiscGlobalConstPool
run	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^  virtual bool run(void* _func, String& result, String& expect) {$/;"	f	class:X86Test_MiscLocalConstPool
run	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^  virtual bool run(void* _func, String& result, String& expect) {$/;"	f	class:X86Test_MiscMultiFunc
run	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^  virtual bool run(void* _func, String& result, String& expect) {$/;"	f	class:X86Test_MiscUnfollow
run	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^  virtual bool run(void* _func, String& result, String& expect) {$/;"	f	class:X86Test_NoAlign
run	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^  virtual bool run(void* _func, String& result, String& expect) {$/;"	f	class:X86Test_NoCode
run	external/asmjit/test/asmjit_test_compiler_x86.cpp	/^  virtual bool run(void* _func, String& result, String& expect) {$/;"	f	struct:X86Test_MiscMultiRet
run	external/asmjit/test/broken.cpp	/^int BrokenAPI::run(int argc, const char* argv[], Entry onBeforeRun, Entry onAfterRun) {$/;"	f	class:BrokenAPI
run	src/codegen/regalloc.cpp	/^void QRegAllocPass::run(qir::Region *region)$/;"	f	class:dbt::qcg::QRegAllocPass
run	src/codegen/select.cpp	/^void QSelPass::run(qir::Region *region, MachineRegionInfo *region_info)$/;"	f	class:dbt::qcg::QSelPass
runOnFunction	external/asmjit/src/asmjit/core/compiler.cpp	/^Error FuncPass::runOnFunction(Zone* zone, Logger* logger, FuncNode* func) {$/;"	f	class:FuncPass
runOnFunction	external/asmjit/src/asmjit/core/rapass.cpp	/^Error BaseRAPass::runOnFunction(Zone* zone, Logger* logger, FuncNode* func) {$/;"	f	class:BaseRAPass
runPasses	external/asmjit/src/asmjit/core/builder.cpp	/^Error BaseBuilder::runPasses() {$/;"	f	class:BaseBuilder
rv32	src/guest/rv32_cpu.h	/^namespace dbt::rv32$/;"	n	class:dbt
rv32	src/guest/rv32_interp.cpp	/^namespace dbt::rv32$/;"	n	class:dbt	file:
rv32	src/guest/rv32_qir.cpp	/^namespace dbt::qir::rv32$/;"	n	class:dbt::qir	file:
rv32	src/guest/rv32_qir.h	/^namespace dbt::qir::rv32$/;"	n	class:dbt::qir
rw	external/asmjit/src/asmjit/core/virtmem.h	/^  void* rw;$/;"	m	struct:VirtMem::CachePolicy::MemoryFlags::DualMapping
rwInfoA	external/asmjit/src/asmjit/x86/x86instdb.cpp	/^const InstDB::RWInfo InstDB::rwInfoA[] = {$/;"	m	class:InstDB	file:
rwInfoB	external/asmjit/src/asmjit/x86/x86instdb.cpp	/^const InstDB::RWInfo InstDB::rwInfoB[] = {$/;"	m	class:InstDB	file:
rwInfoIndexA	external/asmjit/src/asmjit/x86/x86instdb.cpp	/^const uint8_t InstDB::rwInfoIndexA[Inst::_kIdCount] = {$/;"	m	class:InstDB	file:
rwInfoIndexB	external/asmjit/src/asmjit/x86/x86instdb.cpp	/^const uint8_t InstDB::rwInfoIndexB[Inst::_kIdCount] = {$/;"	m	class:InstDB	file:
rwInfoOp	external/asmjit/src/asmjit/x86/x86instdb.cpp	/^const InstDB::RWInfoOp InstDB::rwInfoOp[] = {$/;"	m	class:InstDB	file:
rwInfoRm	external/asmjit/src/asmjit/x86/x86instdb.cpp	/^const InstDB::RWInfoRm InstDB::rwInfoRm[] = {$/;"	m	class:InstDB	file:
rwRegGroupByteMask	external/asmjit/src/asmjit/x86/x86instapi.cpp	/^static const Support::Array<uint64_t, uint32_t(RegGroup::kMaxValue) + 1> rwRegGroupByteMask = {{$/;"	v	file:
rwx	external/asmjit/src/asmjit/arm/a64instapi.cpp	/^  uint8_t rwx[Globals::kMaxOpCount];$/;"	m	struct:InstRWInfoData	file:
rx	external/asmjit/src/asmjit/core/virtmem.h	/^  void* rx;$/;"	m	struct:VirtMem::CachePolicy::MemoryFlags::DualMapping
s	external/asmjit/db/x86.js	/^    var s = data;$/;"	v
s	external/asmjit/src/asmjit/arm/armutils.h	/^  uint32_t s;$/;"	m	struct:Utils::LogicalImm
s	external/asmjit/tools/tablegen-x86.js	/^    var s = "";$/;"	v
s	external/asmjit/tools/tablegen-x86.js	/^    var s = "0x";$/;"	v
s	external/asmjit/tools/tablegen.js	/^    var s = "";$/;"	v
s0	external/asmjit/src/asmjit/arm/a64operand.h	/^static constexpr VecS s0 = VecS(0);$/;"	m	namespace:regs
s1	external/asmjit/src/asmjit/arm/a64operand.h	/^static constexpr VecS s1 = VecS(1);$/;"	m	namespace:regs
s10	external/asmjit/src/asmjit/arm/a64operand.h	/^static constexpr VecS s10 = VecS(10);$/;"	m	namespace:regs
s11	external/asmjit/src/asmjit/arm/a64operand.h	/^static constexpr VecS s11 = VecS(11);$/;"	m	namespace:regs
s12	external/asmjit/src/asmjit/arm/a64operand.h	/^static constexpr VecS s12 = VecS(12);$/;"	m	namespace:regs
s13	external/asmjit/src/asmjit/arm/a64operand.h	/^static constexpr VecS s13 = VecS(13);$/;"	m	namespace:regs
s14	external/asmjit/src/asmjit/arm/a64operand.h	/^static constexpr VecS s14 = VecS(14);$/;"	m	namespace:regs
s15	external/asmjit/src/asmjit/arm/a64operand.h	/^static constexpr VecS s15 = VecS(15);$/;"	m	namespace:regs
s16	external/asmjit/src/asmjit/arm/a64operand.h	/^static constexpr VecS s16 = VecS(16);$/;"	m	namespace:regs
s17	external/asmjit/src/asmjit/arm/a64operand.h	/^static constexpr VecS s17 = VecS(17);$/;"	m	namespace:regs
s18	external/asmjit/src/asmjit/arm/a64operand.h	/^static constexpr VecS s18 = VecS(18);$/;"	m	namespace:regs
s19	external/asmjit/src/asmjit/arm/a64operand.h	/^static constexpr VecS s19 = VecS(19);$/;"	m	namespace:regs
s2	external/asmjit/src/asmjit/arm/a64operand.h	/^static constexpr VecS s2 = VecS(2);$/;"	m	namespace:regs
s20	external/asmjit/src/asmjit/arm/a64operand.h	/^static constexpr VecS s20 = VecS(20);$/;"	m	namespace:regs
s21	external/asmjit/src/asmjit/arm/a64operand.h	/^static constexpr VecS s21 = VecS(21);$/;"	m	namespace:regs
s22	external/asmjit/src/asmjit/arm/a64operand.h	/^static constexpr VecS s22 = VecS(22);$/;"	m	namespace:regs
s23	external/asmjit/src/asmjit/arm/a64operand.h	/^static constexpr VecS s23 = VecS(23);$/;"	m	namespace:regs
s24	external/asmjit/src/asmjit/arm/a64operand.h	/^static constexpr VecS s24 = VecS(24);$/;"	m	namespace:regs
s25	external/asmjit/src/asmjit/arm/a64operand.h	/^static constexpr VecS s25 = VecS(25);$/;"	m	namespace:regs
s26	external/asmjit/src/asmjit/arm/a64operand.h	/^static constexpr VecS s26 = VecS(26);$/;"	m	namespace:regs
s27	external/asmjit/src/asmjit/arm/a64operand.h	/^static constexpr VecS s27 = VecS(27);$/;"	m	namespace:regs
s28	external/asmjit/src/asmjit/arm/a64operand.h	/^static constexpr VecS s28 = VecS(28);$/;"	m	namespace:regs
s29	external/asmjit/src/asmjit/arm/a64operand.h	/^static constexpr VecS s29 = VecS(29);$/;"	m	namespace:regs
s3	external/asmjit/src/asmjit/arm/a64operand.h	/^static constexpr VecS s3 = VecS(3);$/;"	m	namespace:regs
s30	external/asmjit/src/asmjit/arm/a64operand.h	/^static constexpr VecS s30 = VecS(30);$/;"	m	namespace:regs
s31	external/asmjit/src/asmjit/arm/a64operand.h	/^static constexpr VecS s31 = VecS(31);$/;"	m	namespace:regs
s4	external/asmjit/src/asmjit/arm/a64operand.h	/^static constexpr VecS s4 = VecS(4);$/;"	m	namespace:regs
s5	external/asmjit/src/asmjit/arm/a64operand.h	/^static constexpr VecS s5 = VecS(5);$/;"	m	namespace:regs
s6	external/asmjit/src/asmjit/arm/a64operand.h	/^static constexpr VecS s6 = VecS(6);$/;"	m	namespace:regs
s7	external/asmjit/src/asmjit/arm/a64operand.h	/^static constexpr VecS s7 = VecS(7);$/;"	m	namespace:regs
s8	external/asmjit/src/asmjit/arm/a64operand.h	/^static constexpr VecS s8 = VecS(8);$/;"	m	namespace:regs
s9	external/asmjit/src/asmjit/arm/a64operand.h	/^static constexpr VecS s9 = VecS(9);$/;"	m	namespace:regs
scalarOf	external/asmjit/src/asmjit/core/type.h	/^  TypeId scalarOf[uint32_t(TypeId::kMaxValue) + 1];$/;"	m	struct:TypeId::TypeUtils::TypeData
scasb	external/asmjit/src/asmjit/x86/x86emitter.h	/^  inline Error scasb() { return _emitter()->emit(Inst::kIdScas, al , EmitterExplicitT<This>::ptr_zdi(0, 1)); }$/;"	f	struct:EmitterImplicitT
scasd	external/asmjit/src/asmjit/x86/x86emitter.h	/^  inline Error scasd() { return _emitter()->emit(Inst::kIdScas, eax, EmitterExplicitT<This>::ptr_zdi(0, 4)); }$/;"	f	struct:EmitterImplicitT
scasq	external/asmjit/src/asmjit/x86/x86emitter.h	/^  inline Error scasq() { return _emitter()->emit(Inst::kIdScas, rax, EmitterExplicitT<This>::ptr_zdi(0, 8)); }$/;"	f	struct:EmitterImplicitT
scasw	external/asmjit/src/asmjit/x86/x86emitter.h	/^  inline Error scasw() { return _emitter()->emit(Inst::kIdScas, ax , EmitterExplicitT<This>::ptr_zdi(0, 2)); }$/;"	f	struct:EmitterImplicitT
scope	external/asmjit/src/asmjit/core/compiler.h	/^  ASMJIT_API Error _newConst(BaseMem* ASMJIT_NONNULL(out), ConstPoolScope scope, const void* data, size_t size);$/;"	m	class:BaseCompiler
section	external/asmjit/src/asmjit/core/assembler.cpp	/^Error BaseAssembler::section(Section* section) {$/;"	f	class:BaseAssembler
section	external/asmjit/src/asmjit/core/builder.cpp	/^Error BaseBuilder::section(Section* section) {$/;"	f	class:BaseBuilder
section	external/asmjit/src/asmjit/core/emitter.cpp	/^Error BaseEmitter::section(Section* section) {$/;"	f	class:BaseEmitter
sectionId	external/asmjit/src/asmjit/core/builder.h	/^  ASMJIT_API Error sectionNodeOf(SectionNode** ASMJIT_NONNULL(out), uint32_t sectionId);$/;"	m	class:NodeType::NodeFlags::SentinelType::BaseBuilder
sectionId	external/asmjit/src/asmjit/core/codeholder.h	/^  uint32_t sectionId;$/;"	m	struct:ExpressionOpType::ExpressionValueType::SectionFlags::CopySectionFlags::OffsetType::RelocType::LabelType::LabelLink
sectionNodeOf	external/asmjit/src/asmjit/core/builder.cpp	/^Error BaseBuilder::sectionNodeOf(SectionNode** out, uint32_t sectionId) {$/;"	f	class:BaseBuilder
segment	src/ir/compile.h	/^    CodeSegment segment;$/;"	m	struct:dbt::qir::CompilerJob
sentinel	src/util/ilist.h	/^    IListSentinel<T> sentinel;$/;"	m	struct:dbt::IList
serializeTo	external/asmjit/src/asmjit/core/builder.cpp	/^Error BaseBuilder::serializeTo(BaseEmitter* dst) {$/;"	f	class:BaseBuilder
setArg	external/asmjit/src/asmjit/core/compiler.h	/^  inline Error setArg(size_t argIndex, const BaseReg& reg) { return _setArg(argIndex, 0, reg); }$/;"	f	class:BaseCompiler
setArg	external/asmjit/src/asmjit/core/compiler.h	/^  inline Error setArg(size_t argIndex, size_t valueIndex, const BaseReg& reg) { return _setArg(argIndex, valueIndex, reg); }$/;"	f	class:BaseCompiler
setNext	src/util/ilist.h	/^    void setNext(IListNode *n) { IListNodeBase::setNext(n); }$/;"	f	struct:dbt::IListNode
setNext	src/util/ilist.h	/^    void setNext(IListNodeBase *n) { nnext = n; }$/;"	f	struct:dbt::IListNodeBase
setOffset	external/asmjit/src/asmjit/core/assembler.cpp	/^Error BaseAssembler::setOffset(size_t offset) {$/;"	f	class:BaseAssembler
setPrev	src/util/ilist.h	/^    void setPrev(IListNode *n) { IListNodeBase::setPrev(n); }$/;"	f	struct:dbt::IListNode
setPrev	src/util/ilist.h	/^    void setPrev(IListNodeBase *n) { nprev = n; }$/;"	f	struct:dbt::IListNodeBase
setSARegId	external/asmjit/src/asmjit/core/func.h	/^  ASMJIT_INLINE_NODEBUG void setSARegId(uint32_t regId) { _saRegId = uint8_t(regId); }$/;"	f	class:CallConvId::CallConvStrategy::CallConvFlags::FuncAttributes::FuncArgsAssignment
setSARegId	external/asmjit/src/asmjit/core/func.h	/^  ASMJIT_INLINE_NODEBUG void setSARegId(uint32_t regId) { _saRegId = uint8_t(regId); }$/;"	f	class:CallConvId::CallConvStrategy::CallConvFlags::FuncAttributes::FuncFrame
setStackSize	external/asmjit/src/asmjit/core/compiler.cpp	/^Error BaseCompiler::setStackSize(uint32_t virtId, uint32_t newSize, uint32_t newAlignment) {$/;"	f	class:BaseCompiler
setStackSize	external/asmjit/src/asmjit/core/compiler.h	/^  ASMJIT_INLINE_NODEBUG Error setStackSize(const BaseMem& mem, uint32_t newSize, uint32_t newAlignment = 0) {$/;"	f	class:BaseCompiler
settings	external/asmjit/test/asmjit_test_assembler.h	/^      settings(settings) {$/;"	f	class:AssemblerTester
settings	external/asmjit/test/asmjit_test_assembler.h	/^  const TestSettings& settings;$/;"	m	class:AssemblerTester
sgn	src/ir/qir.h	/^    VSign sgn;$/;"	m	struct:dbt::qir::InstVMLoad
sgn	src/ir/qir.h	/^    VSign sgn;$/;"	m	struct:dbt::qir::InstVMStore
sharedAssignments	external/asmjit/src/asmjit/core/rapass_p.h	/^  ASMJIT_INLINE_NODEBUG const ZoneVector<RASharedAssignment>& sharedAssignments() const { return _sharedAssignments; }$/;"	f	class:RABlockFlags::BaseRAPass
sharedram	src/env.cpp	/^    u32 sharedram;$/;"	m	struct:dbt::env_syscall::uabi_sysinfo	file:
shift	external/asmjit/src/asmjit/x86/x86formatter.cpp	/^  uint8_t shift;$/;"	m	struct:ImmBits	file:
shiftedOp	external/asmjit/src/asmjit/arm/a64instdb_p.h	/^  uint32_t shiftedOp  : 10; \/\/ sf|.......|Sh|.|Rm|  Imm:6 |Rn|11111|$/;"	m	struct:InstDB::EncodingData::BaseCmpCmn
shiftedOp	external/asmjit/src/asmjit/arm/a64instdb_p.h	/^  uint32_t shiftedOp  : 10; \/\/ sf|.......|Sh|.|Rm|  Imm:6 |Rn|11111|$/;"	m	struct:InstDB::EncodingData::BaseTst
shiftedOp	external/asmjit/src/asmjit/arm/a64instdb_p.h	/^  uint32_t shiftedOp  : 10; \/\/ sf|.......|Sh|.|Rm|  Imm:6 |Rn|Rd|$/;"	m	struct:InstDB::EncodingData::BaseAddSub
shiftedOp	external/asmjit/src/asmjit/arm/a64instdb_p.h	/^  uint32_t shiftedOp  : 10; \/\/ sf|.......|Sh|.|Rm|  Imm:6 |Rn|Rd|$/;"	m	struct:InstDB::EncodingData::BaseLogical
showInfo	external/asmjit/test/asmjit_test_compiler.cpp	/^void TestApp::showInfo() {$/;"	f	class:TestApp
si	external/asmjit/src/asmjit/x86/x86operand.h	/^static constexpr Gpw si = Gpw(Gp::kIdSi);$/;"	m	namespace:regs
si	src/codegen/arch_traits.cpp	/^_(si) = InstCt<0, 1>::Make({}, {DEF(GPR(SI))});$/;"	m	namespace:dbt::qcg	file:
signature	external/asmjit/src/asmjit/arm/armoperand.h	/^              signature, base.id(), 0, off) {}$/;"	m	class:Mem
signature	external/asmjit/src/asmjit/arm/armoperand.h	/^              signature, base.id(), index.id(), 0) {}$/;"	m	class:Mem
signature	external/asmjit/src/asmjit/arm/armoperand.h	/^              signature, uint32_t(base >> 32), 0, int32_t(uint32_t(base & 0xFFFFFFFFu))) {}$/;"	m	class:Mem
signature	external/asmjit/src/asmjit/core/compiler.h	/^  ASMJIT_API Error addFuncNode(FuncNode** ASMJIT_NONNULL(out), const FuncSignature& signature);$/;"	m	class:BaseCompiler
signature	external/asmjit/src/asmjit/core/compiler.h	/^  ASMJIT_API Error addInvokeNode(InvokeNode** ASMJIT_NONNULL(out), InstId instId, const Operand_& o0, const FuncSignature& signature);$/;"	m	class:BaseCompiler
signature	external/asmjit/src/asmjit/core/compiler.h	/^  ASMJIT_API Error newFuncNode(FuncNode** ASMJIT_NONNULL(out), const FuncSignature& signature);$/;"	m	class:BaseCompiler
signature	external/asmjit/src/asmjit/core/compiler.h	/^  ASMJIT_API Error newInvokeNode(InvokeNode** ASMJIT_NONNULL(out), InstId instId, const Operand_& o0, const FuncSignature& signature);$/;"	m	class:BaseCompiler
signature	external/asmjit/src/asmjit/core/compiler.h	/^  ASMJIT_API Error newVirtReg(VirtReg** ASMJIT_NONNULL(out), TypeId typeId, OperandSignature signature, const char* name);$/;"	m	class:BaseCompiler
signature	external/asmjit/src/asmjit/x86/x86operand.h	/^              signature, base.id(), 0, off) {}$/;"	m	class:Mem::AddrType::Broadcast
signature	external/asmjit/src/asmjit/x86/x86operand.h	/^              signature, base.id(), index.id(), off) {}$/;"	m	class:Mem::AddrType::Broadcast
signature	external/asmjit/src/asmjit/x86/x86operand.h	/^              signature, uint32_t(base >> 32), 0, int32_t(uint32_t(base & 0xFFFFFFFFu))) {}$/;"	m	class:Mem::AddrType::Broadcast
signature	external/asmjit/src/asmjit/x86/x86operand.h	/^              signature, uint32_t(base >> 32), index.id(), int32_t(uint32_t(base & 0xFFFFFFFFu))) {}$/;"	m	class:Mem::AddrType::Broadcast
sil	external/asmjit/src/asmjit/x86/x86operand.h	/^static constexpr GpbLo sil = GpbLo(Gp::kIdSi);$/;"	m	namespace:regs
simdBicOrr	external/asmjit/src/asmjit/arm/a64instdb.cpp	/^const SimdBicOrr simdBicOrr[2] = {$/;"	m	namespace:InstDB::EncodingData	file:
simdCmp	external/asmjit/src/asmjit/arm/a64instdb.cpp	/^const SimdCmp simdCmp[7] = {$/;"	m	namespace:InstDB::EncodingData	file:
simdDot	external/asmjit/src/asmjit/arm/a64instdb.cpp	/^const SimdDot simdDot[5] = {$/;"	m	namespace:InstDB::EncodingData	file:
simdFcadd	external/asmjit/src/asmjit/arm/a64instdb.cpp	/^const SimdFcadd simdFcadd[1] = {$/;"	m	namespace:InstDB::EncodingData	file:
simdFccmpFccmpe	external/asmjit/src/asmjit/arm/a64instdb.cpp	/^const SimdFccmpFccmpe simdFccmpFccmpe[2] = {$/;"	m	namespace:InstDB::EncodingData	file:
simdFcm	external/asmjit/src/asmjit/arm/a64instdb.cpp	/^const SimdFcm simdFcm[5] = {$/;"	m	namespace:InstDB::EncodingData	file:
simdFcmla	external/asmjit/src/asmjit/arm/a64instdb.cpp	/^const SimdFcmla simdFcmla[1] = {$/;"	m	namespace:InstDB::EncodingData	file:
simdFcmpFcmpe	external/asmjit/src/asmjit/arm/a64instdb.cpp	/^const SimdFcmpFcmpe simdFcmpFcmpe[2] = {$/;"	m	namespace:InstDB::EncodingData	file:
simdFcvtLN	external/asmjit/src/asmjit/arm/a64instdb.cpp	/^const SimdFcvtLN simdFcvtLN[6] = {$/;"	m	namespace:InstDB::EncodingData	file:
simdFcvtSV	external/asmjit/src/asmjit/arm/a64instdb.cpp	/^const SimdFcvtSV simdFcvtSV[12] = {$/;"	m	namespace:InstDB::EncodingData	file:
simdFmlal	external/asmjit/src/asmjit/arm/a64instdb.cpp	/^const SimdFmlal simdFmlal[6] = {$/;"	m	namespace:InstDB::EncodingData	file:
simdLdNStN	external/asmjit/src/asmjit/arm/a64instdb.cpp	/^const SimdLdNStN simdLdNStN[12] = {$/;"	m	namespace:InstDB::EncodingData	file:
simdLdSt	external/asmjit/src/asmjit/arm/a64instdb.cpp	/^const SimdLdSt simdLdSt[2] = {$/;"	m	namespace:InstDB::EncodingData	file:
simdLdpStp	external/asmjit/src/asmjit/arm/a64instdb.cpp	/^const SimdLdpStp simdLdpStp[4] = {$/;"	m	namespace:InstDB::EncodingData	file:
simdLdurStur	external/asmjit/src/asmjit/arm/a64instdb.cpp	/^const SimdLdurStur simdLdurStur[2] = {$/;"	m	namespace:InstDB::EncodingData	file:
simdMoviMvni	external/asmjit/src/asmjit/arm/a64instdb.cpp	/^const SimdMoviMvni simdMoviMvni[2] = {$/;"	m	namespace:InstDB::EncodingData	file:
simdShift	external/asmjit/src/asmjit/arm/a64instdb.cpp	/^const SimdShift simdShift[40] = {$/;"	m	namespace:InstDB::EncodingData	file:
simdShiftES	external/asmjit/src/asmjit/arm/a64instdb.cpp	/^const SimdShiftES simdShiftES[2] = {$/;"	m	namespace:InstDB::EncodingData	file:
simdSm3tt	external/asmjit/src/asmjit/arm/a64instdb.cpp	/^const SimdSm3tt simdSm3tt[4] = {$/;"	m	namespace:InstDB::EncodingData	file:
simdSmovUmov	external/asmjit/src/asmjit/arm/a64instdb.cpp	/^const SimdSmovUmov simdSmovUmov[2] = {$/;"	m	namespace:InstDB::EncodingData	file:
simdSxtlUxtl	external/asmjit/src/asmjit/arm/a64instdb.cpp	/^const SimdSxtlUxtl simdSxtlUxtl[4] = {$/;"	m	namespace:InstDB::EncodingData	file:
simdTblTbx	external/asmjit/src/asmjit/arm/a64instdb.cpp	/^const SimdTblTbx simdTblTbx[2] = {$/;"	m	namespace:InstDB::EncodingData	file:
singleInstId	external/asmjit/src/asmjit/arm/a64emithelper.cpp	/^  InstId singleInstId;$/;"	m	struct:LoadStoreInstructions	file:
singleOp	external/asmjit/src/asmjit/arm/a64instdb_p.h	/^  uint32_t singleOp;$/;"	m	struct:InstDB::EncodingData::SimdLdNStN
size	external/asmjit/src/asmjit/core/builder.h	/^  ASMJIT_API Error newCommentNode(CommentNode** ASMJIT_NONNULL(out), const char* data, size_t size);$/;"	m	class:NodeType::NodeFlags::SentinelType::BaseBuilder
size	external/asmjit/src/asmjit/core/compiler.h	/^  ASMJIT_API Error _newConst(BaseMem* ASMJIT_NONNULL(out), ConstPoolScope scope, const void* data, size_t size);$/;"	m	class:BaseCompiler
size	external/asmjit/src/asmjit/core/compiler.h	/^  ASMJIT_API Error _newStack(BaseMem* ASMJIT_NONNULL(out), uint32_t size, uint32_t alignment, const char* name = nullptr);$/;"	m	class:BaseCompiler
size	external/asmjit/src/asmjit/core/jitallocator.cpp	/^        size(size) {}$/;"	f	class:JitAllocatorWrapper::Range
size	external/asmjit/src/asmjit/core/jitallocator.cpp	/^    size_t size;$/;"	m	class:JitAllocatorWrapper::Range	file:
size	external/asmjit/src/asmjit/core/rastack.cpp	/^      size(other.size) {}$/;"	f	struct:RAStackGap
size	external/asmjit/src/asmjit/core/rastack.cpp	/^      size(size) {}$/;"	f	struct:RAStackGap
size	external/asmjit/src/asmjit/core/rastack.cpp	/^  uint32_t size;$/;"	m	struct:RAStackGap	file:
size	external/asmjit/src/asmjit/core/string.h	/^    size_t size;$/;"	m	struct:StringFormatFlags::String::ModifyOp::Large
size	external/asmjit/src/asmjit/core/zone.h	/^    size_t size;$/;"	m	struct:Zone::Block
size	external/asmjit/src/asmjit/x86/x86assembler.cpp	/^  uint8_t size;$/;"	m	struct:X86OpcodeMM	file:
size	src/codegen/jitabi.cpp	/^    static constexpr u32 size = 64;$/;"	m	struct:dbt::jitabi::TraceRing	file:
size	src/ir/compile.h	/^    u32 size;$/;"	m	struct:dbt::qir::CodeSegment
size	src/ir/qir.h	/^    u8 size() const { return len; }$/;"	f	struct:dbt::qir::VOperandSpan
size	src/util/bitfield.h	/^    static constexpr size_t size = h - l + 1;$/;"	m	struct:bf_range
sizeOf	external/asmjit/src/asmjit/core/type.h	/^  uint8_t sizeOf[uint32_t(TypeId::kMaxValue) + 1];$/;"	m	struct:TypeId::TypeUtils::TypeData
sizeTotal	external/asmjit/src/asmjit/arm/a64emithelper.cpp	/^  uint32_t sizeTotal;$/;"	m	struct:PrologEpilogInfo	file:
size_type	external/asmjit/src/asmjit/core/support.h	/^  typedef size_t size_type;$/;"	t	struct:Support::Internal::SortOrder::Array
size_type	external/asmjit/src/asmjit/core/zonevector.h	/^  typedef uint32_t size_type;$/;"	t	class:ZoneVectorBase
sizeof	external/asmjit/src/asmjit/core/osutils_p.h	/^static_assert(sizeof(Lock::Handle) == sizeof(CRITICAL_SECTION), "asmjit::Lock::Handle layout must match CRITICAL_SECTION");$/;"	v
sp	external/asmjit/src/asmjit/arm/a64operand.h	/^static constexpr GpX sp = GpX(Gp::kIdSp);$/;"	m	namespace:regs
sp	external/asmjit/src/asmjit/x86/x86operand.h	/^static constexpr Gpw sp = Gpw(Gp::kIdSp);$/;"	m	namespace:regs
specialCount	external/asmjit/src/asmjit/x86/x86formatter.cpp	/^    uint8_t specialCount;$/;"	m	struct:RegFormatInfo::NameEntry	file:
specialIndex	external/asmjit/src/asmjit/x86/x86formatter.cpp	/^    uint8_t specialIndex;$/;"	m	struct:RegFormatInfo::NameEntry	file:
spillframe_size	src/codegen/arch_traits.h	/^static constexpr u16 spillframe_size = 1024;  \/\/ TODO: reuse temps$/;"	m	namespace:dbt::qcg::ArchTraits
spillframe_sp_offs	src/codegen/emit.h	/^    u32 spillframe_sp_offs;$/;"	m	struct:dbt::qcg::QEmit
spl	external/asmjit/src/asmjit/x86/x86operand.h	/^static constexpr GpbLo spl = GpbLo(Gp::kIdSp);$/;"	m	namespace:regs
splitOpcodeFields	external/asmjit/db/aarch64.js	/^function splitOpcodeFields(s) {$/;"	f
splitOpcodeToComponents	external/asmjit/tools/tablegen-x86.js	/^    function splitOpcodeToComponents(opcode) {$/;"	f
splitOperands	external/asmjit/db/base.js	/^  splitOperands: function(s) {$/;"	m	class:const
ss	external/asmjit/src/asmjit/x86/x86operand.h	/^static constexpr SReg ss = SReg(SReg::kIdSs);$/;"	m	namespace:regs
st0	external/asmjit/src/asmjit/x86/x86operand.h	/^static constexpr St st0 = St(0);$/;"	m	namespace:regs
st1	external/asmjit/src/asmjit/x86/x86operand.h	/^static constexpr St st1 = St(1);$/;"	m	namespace:regs
st2	external/asmjit/src/asmjit/x86/x86operand.h	/^static constexpr St st2 = St(2);$/;"	m	namespace:regs
st3	external/asmjit/src/asmjit/x86/x86operand.h	/^static constexpr St st3 = St(3);$/;"	m	namespace:regs
st4	external/asmjit/src/asmjit/x86/x86operand.h	/^static constexpr St st4 = St(4);$/;"	m	namespace:regs
st5	external/asmjit/src/asmjit/x86/x86operand.h	/^static constexpr St st5 = St(5);$/;"	m	namespace:regs
st6	external/asmjit/src/asmjit/x86/x86operand.h	/^static constexpr St st6 = St(6);$/;"	m	namespace:regs
st7	external/asmjit/src/asmjit/x86/x86operand.h	/^static constexpr St st7 = St(7);$/;"	m	namespace:regs
stack_start	src/env.cpp	/^    uabi_ulong stack_start;$/;"	m	struct:dbt::env::ElfImage	file:
start	external/asmjit/src/asmjit/arm/a64instdb_p.h	/^  uint16_t start;$/;"	m	struct:InstDB::InstNameIndex
start	external/asmjit/src/asmjit/x86/x86instdb_p.h	/^  uint16_t start;$/;"	m	struct:InstDB::InstNameIndex
start	external/asmjit/test/performancetimer.h	/^  inline void start() {$/;"	f	class:PerformanceTimer
state_info	src/guest/rv32_qir.cpp	/^StateInfo const *const RV32Translator::state_info = GetStateInfo();$/;"	m	class:dbt::qir::rv32::RV32Translator	file:
state_info	src/guest/rv32_qir.h	/^    static StateInfo const *const state_info;$/;"	m	struct:dbt::qir::rv32::RV32Translator
state_offs	src/ir/qir.h	/^    u16 state_offs;$/;"	m	struct:dbt::qir::StateReg
stop	external/asmjit/test/performancetimer.h	/^  inline void stop() {$/;"	f	class:PerformanceTimer
stosb	external/asmjit/src/asmjit/x86/x86emitter.h	/^  inline Error stosb() { return _emitter()->emit(Inst::kIdStos, EmitterExplicitT<This>::ptr_zdi(0, 1), al ); }$/;"	f	struct:EmitterImplicitT
stosd	external/asmjit/src/asmjit/x86/x86emitter.h	/^  inline Error stosd() { return _emitter()->emit(Inst::kIdStos, EmitterExplicitT<This>::ptr_zdi(0, 4), eax); }$/;"	f	struct:EmitterImplicitT
stosq	external/asmjit/src/asmjit/x86/x86emitter.h	/^  inline Error stosq() { return _emitter()->emit(Inst::kIdStos, EmitterExplicitT<This>::ptr_zdi(0, 8), rax); }$/;"	f	struct:EmitterImplicitT
stosw	external/asmjit/src/asmjit/x86/x86emitter.h	/^  inline Error stosw() { return _emitter()->emit(Inst::kIdStos, EmitterExplicitT<This>::ptr_zdi(0, 2), ax ); }$/;"	f	struct:EmitterImplicitT
str	external/asmjit/src/asmjit/core/string.h	/^  char str[kNumUInt32Words * sizeof(uint32_t)];$/;"	m	union:StringFormatFlags::FixedString
stringifyEnum	external/asmjit/tools/enumgen.js	/^function stringifyEnum(map, options) {$/;"	f
stub	src/ir/qir.h	/^    RuntimeStubId stub;$/;"	m	struct:dbt::qir::InstHcall
succs	src/ir/qir.h	/^    ArenaVector<Block *> succs, preds;$/;"	m	struct:dbt::qir::Block
sz	src/ir/qir.h	/^    VType sz;$/;"	m	struct:dbt::qir::InstVMLoad
sz	src/ir/qir.h	/^    VType sz;$/;"	m	struct:dbt::qir::InstVMStore
t32Arch	external/asmjit/tools/tablegen-a64.js	/^    var t32Arch = false;$/;"	v
tA	external/asmjit/src/asmjit/arm/a64instdb_p.h	/^  uint8_t tA;            \/\/ Element-type of the first operand.$/;"	m	struct:InstDB::EncodingData::SimdDot
tA	external/asmjit/src/asmjit/arm/a64instdb_p.h	/^  uint8_t tA;$/;"	m	struct:InstDB::EncodingData::SimdFmlal
tB	external/asmjit/src/asmjit/arm/a64instdb_p.h	/^  uint8_t tB;            \/\/ Element-type of the second and third operands.$/;"	m	struct:InstDB::EncodingData::SimdDot
tB	external/asmjit/src/asmjit/arm/a64instdb_p.h	/^  uint8_t tB;$/;"	m	struct:InstDB::EncodingData::SimdFmlal
tElement	external/asmjit/src/asmjit/arm/a64instdb_p.h	/^  uint8_t tElement;      \/\/ Element-type of the element index[] operand.$/;"	m	struct:InstDB::EncodingData::SimdDot
tElement	external/asmjit/src/asmjit/arm/a64instdb_p.h	/^  uint8_t tElement;$/;"	m	struct:InstDB::EncodingData::SimdFmlal
tableHeader	external/asmjit/tools/tablegen-a64.js	/^    var tableHeader = "";$/;"	v
tableSource	external/asmjit/tools/tablegen-a64.js	/^    var tableSource = "";$/;"	v
tb_pool	src/tcache.h	/^    static MemArena tb_pool;$/;"	m	struct:dbt::tcache
tcache	src/tcache.h	/^struct tcache {$/;"	s	namespace:dbt
tcache_map	src/tcache.h	/^    static MapType tcache_map;$/;"	m	struct:dbt::tcache
testX86Arch	external/asmjit/test/asmjit_test_instinfo.cpp	/^static void testX86Arch() {$/;"	f	file:
test_zone_bitvector	external/asmjit/src/asmjit/core/zonevector.cpp	/^static void test_zone_bitvector(ZoneAllocator* allocator) {$/;"	f	file:
test_zone_stack	external/asmjit/src/asmjit/core/zonestack.cpp	/^static void test_zone_stack(ZoneAllocator* allocator, const char* typeName) {$/;"	f	file:
test_zone_vector	external/asmjit/src/asmjit/core/zonevector.cpp	/^static void test_zone_vector(ZoneAllocator* allocator, const char* typeName) {$/;"	f	file:
text	external/asmjit/src/asmjit/x86/x86formatter.cpp	/^  char text[48 - 3];$/;"	m	struct:ImmBits	file:
threshold	external/asmjit/tools/tablegen.js	/^    var threshold = 80;$/;"	v
throwExpressionError	external/asmjit/db/exp.js	/^function throwExpressionError(message, position) {$/;"	f
throwTokenizerError	external/asmjit/db/exp.js	/^function throwTokenizerError(token) {$/;"	f
tls_current	src/guest/rv32_cpu.h	/^    static thread_local CPUState *tls_current;$/;"	m	struct:dbt::dbt::CPUState
tmm0	external/asmjit/src/asmjit/x86/x86operand.h	/^static constexpr Tmm tmm0 = Tmm(0);$/;"	m	namespace:regs
tmm1	external/asmjit/src/asmjit/x86/x86operand.h	/^static constexpr Tmm tmm1 = Tmm(1);$/;"	m	namespace:regs
tmm2	external/asmjit/src/asmjit/x86/x86operand.h	/^static constexpr Tmm tmm2 = Tmm(2);$/;"	m	namespace:regs
tmm3	external/asmjit/src/asmjit/x86/x86operand.h	/^static constexpr Tmm tmm3 = Tmm(3);$/;"	m	namespace:regs
tmm4	external/asmjit/src/asmjit/x86/x86operand.h	/^static constexpr Tmm tmm4 = Tmm(4);$/;"	m	namespace:regs
tmm5	external/asmjit/src/asmjit/x86/x86operand.h	/^static constexpr Tmm tmm5 = Tmm(5);$/;"	m	namespace:regs
tmm6	external/asmjit/src/asmjit/x86/x86operand.h	/^static constexpr Tmm tmm6 = Tmm(6);$/;"	m	namespace:regs
tmm7	external/asmjit/src/asmjit/x86/x86operand.h	/^static constexpr Tmm tmm7 = Tmm(7);$/;"	m	namespace:regs
to_underlying	src/util/common.h	/^constexpr std::underlying_type_t<Enum> to_underlying(Enum e)$/;"	f
tokenize	external/asmjit/db/exp.js	/^function tokenize(source) {$/;"	f
totalOverheadBytes	external/asmjit/src/asmjit/core/jitallocator.cpp	/^  size_t totalOverheadBytes = 0;$/;"	m	class:JitAllocatorPool	file:
totalhigh	src/env.cpp	/^    u32 totalhigh;$/;"	m	struct:dbt::env_syscall::uabi_sysinfo	file:
totalram	src/env.cpp	/^    u32 totalram;$/;"	m	struct:dbt::env_syscall::uabi_sysinfo	file:
totalswap	src/env.cpp	/^    u32 totalswap;$/;"	m	struct:dbt::env_syscall::uabi_sysinfo	file:
tpc	src/ir/qir.h	/^    VOperand tpc;$/;"	m	struct:dbt::qir::InstGBr
trampoline_to_jit	src/codegen/jitabi.cpp	/^HELPER_ASM ppoint::BranchSlot *trampoline_to_jit(CPUState *state,$/;"	f	namespace:dbt::jitabi
transformVexToEvex	external/asmjit/src/asmjit/x86/x86rapass.cpp	/^static InstId transformVexToEvex(InstId instId) {$/;"	f	file:
trap_unwind_env	src/execute.cpp	/^sigjmp_buf trap_unwind_env;$/;"	m	namespace:dbt	file:
tree	external/asmjit/src/asmjit/core/jitallocator.cpp	/^  ZoneTree<JitAllocatorBlock> tree;$/;"	m	class:JitAllocatorPrivateImpl	file:
tupleType	external/asmjit/tools/tablegen-x86.js	/^    var tupleType = "_";$/;"	v
tv_nsec	src/env.cpp	/^    uabi_llong tv_nsec;$/;"	m	struct:dbt::env_syscall::uabi__kernel_timespec	file:
tv_sec	src/env.cpp	/^    uabi_llong tv_sec;$/;"	m	struct:dbt::env_syscall::uabi__kernel_timespec	file:
type	external/asmjit/db/x86.js	/^          map[index] = { type: type, kind: kind, index: index };$/;"	p	class:map
type	external/asmjit/db/x86.js	/^        map[name] = { type: type, kind: kind, index: i };$/;"	p	class:map
type	external/asmjit/src/asmjit/core/cpuinfo.cpp	/^  AppleFeatureType type;$/;"	m	struct:arm::AppleFamilyId::OpenBSDAArch64CPUID::AppleFeatureMapping	file:
type	external/asmjit/src/asmjit/core/string.h	/^    uint8_t type;$/;"	m	struct:StringFormatFlags::String::ModifyOp::Large
type	external/asmjit/src/asmjit/core/string.h	/^    uint8_t type;$/;"	m	struct:StringFormatFlags::String::ModifyOp::Small
type	src/ir/qir.h	/^    VType type;$/;"	m	struct:dbt::qir::StateReg
typeEntries	external/asmjit/src/asmjit/x86/x86formatter.cpp	/^  TypeEntry typeEntries[uint32_t(RegType::kMaxValue) + 1];$/;"	m	struct:RegFormatInfo	file:
typeId	external/asmjit/src/asmjit/core/builder.h	/^  ASMJIT_API Error newEmbedDataNode(EmbedDataNode** ASMJIT_NONNULL(out), TypeId typeId, const void* data, size_t itemCount, size_t repeatCount = 1);$/;"	m	class:NodeType::NodeFlags::SentinelType::BaseBuilder
typeId	external/asmjit/src/asmjit/core/compiler.h	/^  ASMJIT_API Error _newReg(BaseReg* ASMJIT_NONNULL(out), TypeId typeId, const char* name = nullptr);$/;"	m	class:BaseCompiler
typeId	external/asmjit/src/asmjit/core/compiler.h	/^  ASMJIT_API Error _newRegFmt(BaseReg* ASMJIT_NONNULL(out), TypeId typeId, const char* fmt, ...);$/;"	m	class:BaseCompiler
typeId	external/asmjit/src/asmjit/core/compiler.h	/^  ASMJIT_API Error newVirtReg(VirtReg** ASMJIT_NONNULL(out), TypeId typeId, OperandSignature signature, const char* name);$/;"	m	class:BaseCompiler
typeStrings	external/asmjit/src/asmjit/x86/x86formatter.cpp	/^  char typeStrings[128 - 32];$/;"	m	struct:RegFormatInfo	file:
type_size	src/util/bitfield.h	/^    static constexpr size_t type_size = sizeof(T) * CHAR_BIT;$/;"	m	struct:bf_range
u	external/asmjit/src/asmjit/arm/a64instdb_p.h	/^  uint32_t u : 1;$/;"	m	struct:InstDB::EncodingData::BaseExtend
u16	src/util/common.h	/^typedef uint16_t u16;$/;"	t
u32	external/asmjit/src/asmjit/core/string.h	/^  uint32_t u32[kNumUInt32Words];$/;"	m	union:StringFormatFlags::FixedString
u32	src/util/common.h	/^typedef uint32_t u32;$/;"	t
u64	external/asmjit/src/asmjit/core/string.h	/^    uint64_t u64[kLayoutSize \/ sizeof(uint64_t)];$/;"	m	union:StringFormatFlags::String::ModifyOp::Raw
u64	src/util/common.h	/^typedef uint64_t u64;$/;"	t
u8	external/asmjit/src/asmjit/core/string.h	/^    uint8_t u8[kLayoutSize];$/;"	m	union:StringFormatFlags::String::ModifyOp::Raw
u8	src/util/common.h	/^typedef uint8_t u8;$/;"	t
uAltInstId	external/asmjit/src/asmjit/arm/a64instdb_p.h	/^  uint32_t uAltInstId : 14;$/;"	m	struct:InstDB::EncodingData::BaseLdSt
uAltInstId	external/asmjit/src/asmjit/arm/a64instdb_p.h	/^  uint32_t uAltInstId : 16;$/;"	m	struct:InstDB::EncodingData::SimdLdSt
uOffsetOp	external/asmjit/src/asmjit/arm/a64instdb_p.h	/^  uint32_t uOffsetOp  : 10;$/;"	m	struct:InstDB::EncodingData::BaseLdSt
uOffsetOp	external/asmjit/src/asmjit/arm/a64instdb_p.h	/^  uint32_t uOffsetOp  : 10;$/;"	m	struct:InstDB::EncodingData::SimdLdSt
uOffsetShift	external/asmjit/src/asmjit/arm/a64instdb_p.h	/^  uint32_t uOffsetShift : 3;$/;"	m	struct:InstDB::EncodingData::BaseLdSt
uabi__kernel_timespec	src/env.cpp	/^struct uabi__kernel_timespec {$/;"	s	namespace:dbt::env_syscall	file:
uabi_rlimit64	src/env.cpp	/^struct uabi_rlimit64 {$/;"	s	namespace:dbt::env_syscall	file:
uabi_sysinfo	src/env.cpp	/^struct uabi_sysinfo {$/;"	s	namespace:dbt::env_syscall	file:
uint32_t	external/asmjit/src/asmjit/core/constpool.h	/^        _offset(uint32_t(offset)) {}$/;"	f	class:ConstPoolScope::ConstPool::Node
uint32_t	external/asmjit/src/asmjit/core/operand.h	/^static_assert(uint32_t(OperandType::kMem) == uint32_t(OperandType::kReg) + 1,$/;"	m	class:OperandType
uint32_t	external/asmjit/src/asmjit/x86/x86assembler.cpp	/^enum VexVVVVV : uint32_t {$/;"	g	file:
uint32_t	external/asmjit/src/asmjit/x86/x86assembler.cpp	/^enum X86Byte : uint32_t {$/;"	g	file:
uint8_t	external/asmjit/src/asmjit/core/jitallocator.cpp	/^      granularityLog2(uint8_t(Support::ctz(granularity))) {}$/;"	f	class:JitAllocatorPool
uint8_t	external/asmjit/src/asmjit/x86/x86instdb_p.h	/^  enum Flags : uint8_t {$/;"	g
unaligned_load	src/util/common.h	/^T unaligned_load(T const *ptr)$/;"	f
unaligned_load	src/util/common.h	/^typename std::enable_if_t<!std::is_same_v<T, P>, T> unaligned_load(P const *ptr)$/;"	f
unaligned_store	src/util/common.h	/^typename std::enable_if_t<!std::is_same_v<T, P>> unaligned_store(P *ptr, V val)$/;"	f
unaligned_store	src/util/common.h	/^void unaligned_store(T *ptr, T val)$/;"	f
uniform	external/asmjit/src/asmjit/arm/a64instdb_p.h	/^  uint32_t uniform : 1;$/;"	m	struct:InstDB::EncodingData::BaseRR
uniform	external/asmjit/src/asmjit/arm/a64instdb_p.h	/^  uint32_t uniform : 1;$/;"	m	struct:InstDB::EncodingData::BaseRRR
uniform	external/asmjit/src/asmjit/arm/a64instdb_p.h	/^  uint32_t uniform : 1;$/;"	m	struct:InstDB::EncodingData::BaseRRRR
unlikely	src/util/common.h	30;"	d
unreachable	src/util/common.h	37;"	d
uptime	src/env.cpp	/^    u32 uptime;$/;"	m	struct:dbt::env_syscall::uabi_sysinfo	file:
uptr	external/asmjit/src/asmjit/core/string.h	/^    uintptr_t uptr[kLayoutSize \/ sizeof(uintptr_t)];$/;"	m	union:StringFormatFlags::String::ModifyOp::Raw
uptr	src/util/common.h	/^typedef uintptr_t uptr;$/;"	t
used_pages	src/mmu.cpp	/^std::bitset<(mmu::ASPACE_SIZE >> mmu::PAGE_BITS)> mmu::used_pages;$/;"	m	class:dbt::mmu	file:
used_pages	src/mmu.h	/^    static std::bitset<(ASPACE_SIZE >> PAGE_BITS)> used_pages;$/;"	m	struct:dbt::mmu
v	external/asmjit/src/asmjit/x86/x86opcode_p.h	/^  uint32_t v;$/;"	m	struct:Opcode
v0	external/asmjit/src/asmjit/arm/a64operand.h	/^static constexpr VecV v0 = VecV(0);$/;"	m	namespace:regs
v0	src/codegen/jitabi.cpp	/^    void *v0;$/;"	m	struct:dbt::jitabi::_RetPair	file:
v1	external/asmjit/src/asmjit/arm/a64operand.h	/^static constexpr VecV v1 = VecV(1);$/;"	m	namespace:regs
v1	src/codegen/jitabi.cpp	/^    void *v1;$/;"	m	struct:dbt::jitabi::_RetPair	file:
v10	external/asmjit/src/asmjit/arm/a64operand.h	/^static constexpr VecV v10 = VecV(10);$/;"	m	namespace:regs
v11	external/asmjit/src/asmjit/arm/a64operand.h	/^static constexpr VecV v11 = VecV(11);$/;"	m	namespace:regs
v12	external/asmjit/src/asmjit/arm/a64operand.h	/^static constexpr VecV v12 = VecV(12);$/;"	m	namespace:regs
v13	external/asmjit/src/asmjit/arm/a64operand.h	/^static constexpr VecV v13 = VecV(13);$/;"	m	namespace:regs
v14	external/asmjit/src/asmjit/arm/a64operand.h	/^static constexpr VecV v14 = VecV(14);$/;"	m	namespace:regs
v15	external/asmjit/src/asmjit/arm/a64operand.h	/^static constexpr VecV v15 = VecV(15);$/;"	m	namespace:regs
v16	external/asmjit/src/asmjit/arm/a64operand.h	/^static constexpr VecV v16 = VecV(16);$/;"	m	namespace:regs
v17	external/asmjit/src/asmjit/arm/a64operand.h	/^static constexpr VecV v17 = VecV(17);$/;"	m	namespace:regs
v18	external/asmjit/src/asmjit/arm/a64operand.h	/^static constexpr VecV v18 = VecV(18);$/;"	m	namespace:regs
v19	external/asmjit/src/asmjit/arm/a64operand.h	/^static constexpr VecV v19 = VecV(19);$/;"	m	namespace:regs
v2	external/asmjit/src/asmjit/arm/a64operand.h	/^static constexpr VecV v2 = VecV(2);$/;"	m	namespace:regs
v20	external/asmjit/src/asmjit/arm/a64operand.h	/^static constexpr VecV v20 = VecV(20);$/;"	m	namespace:regs
v21	external/asmjit/src/asmjit/arm/a64operand.h	/^static constexpr VecV v21 = VecV(21);$/;"	m	namespace:regs
v22	external/asmjit/src/asmjit/arm/a64operand.h	/^static constexpr VecV v22 = VecV(22);$/;"	m	namespace:regs
v23	external/asmjit/src/asmjit/arm/a64operand.h	/^static constexpr VecV v23 = VecV(23);$/;"	m	namespace:regs
v24	external/asmjit/src/asmjit/arm/a64operand.h	/^static constexpr VecV v24 = VecV(24);$/;"	m	namespace:regs
v25	external/asmjit/src/asmjit/arm/a64operand.h	/^static constexpr VecV v25 = VecV(25);$/;"	m	namespace:regs
v26	external/asmjit/src/asmjit/arm/a64operand.h	/^static constexpr VecV v26 = VecV(26);$/;"	m	namespace:regs
v27	external/asmjit/src/asmjit/arm/a64operand.h	/^static constexpr VecV v27 = VecV(27);$/;"	m	namespace:regs
v28	external/asmjit/src/asmjit/arm/a64operand.h	/^static constexpr VecV v28 = VecV(28);$/;"	m	namespace:regs
v29	external/asmjit/src/asmjit/arm/a64operand.h	/^static constexpr VecV v29 = VecV(29);$/;"	m	namespace:regs
v3	external/asmjit/src/asmjit/arm/a64operand.h	/^static constexpr VecV v3 = VecV(3);$/;"	m	namespace:regs
v30	external/asmjit/src/asmjit/arm/a64operand.h	/^static constexpr VecV v30 = VecV(30);$/;"	m	namespace:regs
v31	external/asmjit/src/asmjit/arm/a64operand.h	/^static constexpr VecV v31 = VecV(31);$/;"	m	namespace:regs
v4	external/asmjit/src/asmjit/arm/a64operand.h	/^static constexpr VecV v4 = VecV(4);$/;"	m	namespace:regs
v5	external/asmjit/src/asmjit/arm/a64operand.h	/^static constexpr VecV v5 = VecV(5);$/;"	m	namespace:regs
v6	external/asmjit/src/asmjit/arm/a64operand.h	/^static constexpr VecV v6 = VecV(6);$/;"	m	namespace:regs
v7	external/asmjit/src/asmjit/arm/a64operand.h	/^static constexpr VecV v7 = VecV(7);$/;"	m	namespace:regs
v8	external/asmjit/src/asmjit/arm/a64operand.h	/^static constexpr VecV v8 = VecV(8);$/;"	m	namespace:regs
v9	external/asmjit/src/asmjit/arm/a64operand.h	/^static constexpr VecV v9 = VecV(9);$/;"	m	namespace:regs
validate	external/asmjit/src/asmjit/core/emitter.h	/^    ValidateFunc validate;$/;"	m	struct:AlignMode::EmitterType::EmitterFlags::EncodingOptions::BaseEmitter::Funcs
validate	external/asmjit/test/asmjit_test_assembler.h	/^  bool validate;$/;"	m	struct:TestSettings
value	external/asmjit/src/asmjit/arm/a64assembler.cpp	/^  uint8_t value;$/;"	m	struct:SizeOp	file:
value	external/asmjit/src/asmjit/core/codeholder.h	/^  Value value[2];$/;"	m	struct:ExpressionOpType::ExpressionValueType::Expression
value	external/asmjit/src/asmjit/core/support.h	/^  static constexpr uint32_t value =$/;"	m	struct:Support::Internal::ConstCTZ
value	external/asmjit/src/asmjit/core/virtmem.cpp	/^  HANDLE value;$/;"	v	typeref:struct:ScopedHandle
valueAsInt	external/asmjit/test/cmdline.h	/^  int valueAsInt(const char* key, int defaultValue) const {$/;"	f	class:CmdLine
valueAsUInt	external/asmjit/test/cmdline.h	/^  unsigned valueAsUInt(const char* key, unsigned defaultValue) const {$/;"	f	class:CmdLine
valueOf	external/asmjit/test/cmdline.h	/^  const char* valueOf(const char* key, const char* defaultValue) const {$/;"	f	class:CmdLine
valueType	external/asmjit/src/asmjit/core/codeholder.h	/^  ExpressionValueType valueType[2];$/;"	m	struct:ExpressionOpType::ExpressionValueType::Expression
value_type	external/asmjit/src/asmjit/core/support.h	/^  typedef T value_type;$/;"	t	struct:Support::Internal::SortOrder::Array
value_type	external/asmjit/src/asmjit/core/zonevector.h	/^  typedef T value_type;$/;"	t	class:ZoneVector
vbroadcastf128	external/asmjit/tools/tablegen-x86.js	/^  "vbroadcastf128": "vbroadcastf32x4",$/;"	p	class:const
vbroadcasti128	external/asmjit/tools/tablegen-x86.js	/^  "vbroadcasti128": "vbroadcasti32x4",$/;"	p	class:const
vconst	src/guest/rv32_qir.cpp	/^static inline VOperand vconst(u32 val, VType type = VType::I32)$/;"	f	namespace:dbt::qir::rv32
vec	external/asmjit/tools/tablegen-x86.js	/^    var vec = false;$/;"	v
vecOpType	external/asmjit/src/asmjit/arm/a64instdb_p.h	/^  uint32_t vecOpType : 6;$/;"	m	struct:InstDB::EncodingData::ISimdSV
vecOpType	external/asmjit/src/asmjit/arm/a64instdb_p.h	/^  uint32_t vecOpType : 6;$/;"	m	struct:InstDB::EncodingData::ISimdVV
vecOpType	external/asmjit/src/asmjit/arm/a64instdb_p.h	/^  uint32_t vecOpType : 6;$/;"	m	struct:InstDB::EncodingData::ISimdVVV
vecOpType	external/asmjit/src/asmjit/arm/a64instdb_p.h	/^  uint32_t vecOpType : 6;$/;"	m	struct:InstDB::EncodingData::ISimdVVVI
vecOpType	external/asmjit/src/asmjit/arm/a64instdb_p.h	/^  uint32_t vecOpType : 6;$/;"	m	struct:InstDB::EncodingData::ISimdVVVV
vecOpType	external/asmjit/src/asmjit/arm/a64instdb_p.h	/^  uint32_t vecOpType : 6;$/;"	m	struct:InstDB::EncodingData::ISimdWWV
vecOpType	external/asmjit/src/asmjit/arm/a64instdb_p.h	/^  uint32_t vecOpType : 6;$/;"	m	struct:InstDB::EncodingData::SimdCmp
vecOpType	external/asmjit/src/asmjit/arm/a64instdb_p.h	/^  uint32_t vecOpType : 6;$/;"	m	struct:InstDB::EncodingData::SimdShift
vecOpType	external/asmjit/src/asmjit/arm/a64instdb_p.h	/^  uint32_t vecOpType : 6;$/;"	m	struct:InstDB::EncodingData::SimdShiftES
vecOpType	external/asmjit/src/asmjit/arm/a64instdb_p.h	/^  uint32_t vecOpType : 6;$/;"	m	struct:InstDB::EncodingData::SimdSmovUmov
vecOpType	external/asmjit/src/asmjit/arm/a64instdb_p.h	/^  uint32_t vecOpType : 6;$/;"	m	struct:InstDB::EncodingData::SimdSxtlUxtl
vectorOp	external/asmjit/src/asmjit/arm/a64instdb_p.h	/^  uint32_t vectorOp;     \/\/ 22 bits used.$/;"	m	struct:InstDB::EncodingData::SimdDot
verbose	external/asmjit/test/asmjit_test_assembler.h	/^  bool verbose;$/;"	m	struct:TestSettings
vexL	external/asmjit/tools/tablegen-x86.js	/^    var vexL = undefined;$/;"	v
vexW	external/asmjit/tools/tablegen-x86.js	/^    var vexW = undefined;$/;"	v
vextractf128	external/asmjit/tools/tablegen-x86.js	/^  "vextractf128": "vextractf32x4",$/;"	p	class:const
vextracti128	external/asmjit/tools/tablegen-x86.js	/^  "vextracti128": "vextracti32x4",$/;"	p	class:const
vgpr	src/guest/rv32_qir.cpp	/^static inline VOperand vgpr(u8 id, VType type = VType::I32)$/;"	f	namespace:dbt::qir::rv32
vinsertf128	external/asmjit/tools/tablegen-x86.js	/^  "vinsertf128": "vinsertf32x4",$/;"	p	class:const
vinserti128	external/asmjit/tools/tablegen-x86.js	/^  "vinserti128": "vinserti32x4",$/;"	p	class:const
visit	src/ir/qir.h	/^    RT visit(Inst *ins)$/;"	f	struct:dbt::qir::InstVisitor
visitInst	src/codegen/qcg.cpp	/^    void visitInst(UNUSED qir::Inst *ins) { unreachable(""); }$/;"	f	struct:dbt::qcg::QCodegenVisitor
visitInst	src/codegen/regalloc.cpp	/^    void visitInst(UNUSED qir::Inst *ins) { unreachable(""); }$/;"	f	struct:dbt::qcg::QRegAllocVisitor
visitInst	src/codegen/select.cpp	/^    void visitInst(UNUSED qir::Inst *ins) { unreachable(""); }$/;"	f	struct:dbt::qcg::QSelVisitor
visitInst	src/ir/qir.h	/^    void visitInst(UNUSED Inst *ins) {}$/;"	f	struct:dbt::qir::InstVisitor
visitInst	src/ir/qir_opt.cpp	/^    bool visitInst(UNUSED Inst *ins) { return false; }$/;"	f	struct:dbt::qir::FolderVisitor
visitInstBinop	src/codegen/regalloc.cpp	/^    void visitInstBinop(qir::InstBinop *ins) { ra->AllocOp(ins); }$/;"	f	struct:dbt::qcg::QRegAllocVisitor
visitInstBinop	src/codegen/select.cpp	/^    void visitInstBinop(qir::InstBinop *ins) { sel->SelectOperands(ins); }$/;"	f	struct:dbt::qcg::QSelVisitor
visitInstBr	src/codegen/regalloc.cpp	/^    void visitInstBr(UNUSED qir::InstBr *ins)$/;"	f	struct:dbt::qcg::QRegAllocVisitor
visitInstBr	src/codegen/select.cpp	/^    void visitInstBr(UNUSED qir::InstBr *ins) {}$/;"	f	struct:dbt::qcg::QSelVisitor
visitInstBrcc	src/codegen/regalloc.cpp	/^    void visitInstBrcc(qir::InstBrcc *ins)$/;"	f	struct:dbt::qcg::QRegAllocVisitor
visitInstBrcc	src/codegen/select.cpp	/^    void visitInstBrcc(qir::InstBrcc *ins) { sel->SelectOperands(ins); }$/;"	f	struct:dbt::qcg::QSelVisitor
visitInstGBr	src/codegen/regalloc.cpp	/^    void visitInstGBr(UNUSED qir::InstGBr *ins)$/;"	f	struct:dbt::qcg::QRegAllocVisitor
visitInstGBr	src/codegen/select.cpp	/^    void visitInstGBr(UNUSED qir::InstGBr *ins) {}$/;"	f	struct:dbt::qcg::QSelVisitor
visitInstGBrind	src/codegen/regalloc.cpp	/^    void visitInstGBrind(qir::InstGBrind *ins)$/;"	f	struct:dbt::qcg::QRegAllocVisitor
visitInstGBrind	src/codegen/select.cpp	/^    void visitInstGBrind(qir::InstGBrind *ins) { sel->SelectOperands(ins); }$/;"	f	struct:dbt::qcg::QSelVisitor
visitInstHcall	src/codegen/regalloc.cpp	/^    void visitInstHcall(UNUSED qir::InstHcall *ins) { ra->CallOp(true); }$/;"	f	struct:dbt::qcg::QRegAllocVisitor
visitInstHcall	src/codegen/select.cpp	/^    void visitInstHcall(UNUSED qir::InstHcall *ins) {}$/;"	f	struct:dbt::qcg::QSelVisitor
visitInstSetcc	src/codegen/regalloc.cpp	/^    void visitInstSetcc(qir::InstSetcc *ins) { ra->AllocOp(ins); }$/;"	f	struct:dbt::qcg::QRegAllocVisitor
visitInstSetcc	src/codegen/select.cpp	/^    void visitInstSetcc(qir::InstSetcc *ins) { sel->SelectOperands(ins); }$/;"	f	struct:dbt::qcg::QSelVisitor
visitInstUnop	src/codegen/regalloc.cpp	/^    void visitInstUnop(qir::InstUnop *ins) { ra->AllocOp(ins); }$/;"	f	struct:dbt::qcg::QRegAllocVisitor
visitInstUnop	src/codegen/select.cpp	/^    void visitInstUnop(qir::InstUnop *ins) { sel->SelectOperands(ins); }$/;"	f	struct:dbt::qcg::QSelVisitor
visitInstVMLoad	src/codegen/regalloc.cpp	/^    void visitInstVMLoad(qir::InstVMLoad *ins) { ra->AllocOp(ins); }$/;"	f	struct:dbt::qcg::QRegAllocVisitor
visitInstVMLoad	src/codegen/select.cpp	/^    void visitInstVMLoad(qir::InstVMLoad *ins) { sel->SelectOperands(ins); }$/;"	f	struct:dbt::qcg::QSelVisitor
visitInstVMStore	src/codegen/regalloc.cpp	/^    void visitInstVMStore(qir::InstVMStore *ins) { ra->AllocOp(ins); }$/;"	f	struct:dbt::qcg::QRegAllocVisitor
visitInstVMStore	src/codegen/select.cpp	/^    void visitInstVMStore(qir::InstVMStore *ins) { sel->SelectOperands(ins); }$/;"	f	struct:dbt::qcg::QSelVisitor
visit_add	src/ir/qir_opt.cpp	/^    bool visit_add(InstBinop *ins)$/;"	f	struct:dbt::qir::FolderVisitor
visit_sll	src/codegen/regalloc.cpp	/^    void visit_sll(qir::InstBinop *ins) { ra->AllocOp(ins); }$/;"	f	struct:dbt::qcg::QRegAllocVisitor
visit_sll	src/codegen/select.cpp	/^    void visit_sll(qir::InstBinop *ins) { sel->SelectOperands(ins); }$/;"	f	struct:dbt::qcg::QSelVisitor
visit_sra	src/codegen/regalloc.cpp	/^    void visit_sra(qir::InstBinop *ins) { ra->AllocOp(ins); }$/;"	f	struct:dbt::qcg::QRegAllocVisitor
visit_sra	src/codegen/select.cpp	/^    void visit_sra(qir::InstBinop *ins) { sel->SelectOperands(ins); }$/;"	f	struct:dbt::qcg::QSelVisitor
visit_srl	src/codegen/regalloc.cpp	/^    void visit_srl(qir::InstBinop *ins) { ra->AllocOp(ins); }$/;"	f	struct:dbt::qcg::QRegAllocVisitor
visit_srl	src/codegen/select.cpp	/^    void visit_srl(qir::InstBinop *ins) { sel->SelectOperands(ins); }$/;"	f	struct:dbt::qcg::QSelVisitor
vmaskmovpd	external/asmjit/tools/tablegen-x86.js	/^      "vmaskmovpd": "Vmaskmov",$/;"	p	class:rwCategoryByName
vmaskmovps	external/asmjit/tools/tablegen-x86.js	/^      "vmaskmovps": "Vmaskmov",$/;"	p	class:rwCategoryByName
vmem	src/ir/compile.h	/^    uptr vmem;$/;"	m	struct:dbt::qir::CompilerJob
vmovddup	external/asmjit/tools/tablegen-x86.js	/^      "vmovddup"  : "Vmovddup",$/;"	p	class:rwCategoryByName
vmovdqa	external/asmjit/tools/tablegen-x86.js	/^  "vmovdqa": "vmovdqa32",$/;"	p	class:const
vmovdqu	external/asmjit/tools/tablegen-x86.js	/^  "vmovdqu": "vmovdqu32",$/;"	p	class:const
vmovmskpd	external/asmjit/tools/tablegen-x86.js	/^      "vmovmskpd" : "Vmovmskpd",$/;"	p	class:rwCategoryByName
vmovmskps	external/asmjit/tools/tablegen-x86.js	/^      "vmovmskps" : "Vmovmskps",$/;"	p	class:rwCategoryByName
vpand	external/asmjit/tools/tablegen-x86.js	/^  "vpand": "vpandd",$/;"	p	class:const
vpandn	external/asmjit/tools/tablegen-x86.js	/^  "vpandn": "vpandnd",$/;"	p	class:const
vpmaskmovd	external/asmjit/tools/tablegen-x86.js	/^      "vpmaskmovd": "Vmaskmov",$/;"	p	class:rwCategoryByName
vpmaskmovq	external/asmjit/tools/tablegen-x86.js	/^      "vpmaskmovq": "Vmaskmov"$/;"	p	class:rwCategoryByName
vpor	external/asmjit/tools/tablegen-x86.js	/^  "vpor": "vpord",$/;"	p	class:const
vpxor	external/asmjit/tools/tablegen-x86.js	/^  "vpxor": "vpxord",$/;"	p	class:const
vregs_info	src/ir/qir.h	/^    VRegsInfo vregs_info;$/;"	m	struct:dbt::qir::Region
vroundpd	external/asmjit/tools/tablegen-x86.js	/^  "vroundpd": "vrndscalepd",$/;"	p	class:const
vroundps	external/asmjit/tools/tablegen-x86.js	/^  "vroundps": "vrndscaleps",$/;"	p	class:const
vroundsd	external/asmjit/tools/tablegen-x86.js	/^  "vroundsd": "vrndscalesd",$/;"	p	class:const
vroundss	external/asmjit/tools/tablegen-x86.js	/^  "vroundss": "vrndscaless"$/;"	p	class:const
vtemp	src/guest/rv32_qir.cpp	/^static inline VOperand vtemp(qir::Builder &qb, VType type = VType::I32)$/;"	f	namespace:dbt::qir::rv32
w0	external/asmjit/src/asmjit/arm/a64operand.h	/^static constexpr GpW w0 = GpW(0);$/;"	m	namespace:regs
w1	external/asmjit/src/asmjit/arm/a64operand.h	/^static constexpr GpW w1 = GpW(1);$/;"	m	namespace:regs
w10	external/asmjit/src/asmjit/arm/a64operand.h	/^static constexpr GpW w10 = GpW(10);$/;"	m	namespace:regs
w11	external/asmjit/src/asmjit/arm/a64operand.h	/^static constexpr GpW w11 = GpW(11);$/;"	m	namespace:regs
w12	external/asmjit/src/asmjit/arm/a64operand.h	/^static constexpr GpW w12 = GpW(12);$/;"	m	namespace:regs
w13	external/asmjit/src/asmjit/arm/a64operand.h	/^static constexpr GpW w13 = GpW(13);$/;"	m	namespace:regs
w14	external/asmjit/src/asmjit/arm/a64operand.h	/^static constexpr GpW w14 = GpW(14);$/;"	m	namespace:regs
w15	external/asmjit/src/asmjit/arm/a64operand.h	/^static constexpr GpW w15 = GpW(15);$/;"	m	namespace:regs
w16	external/asmjit/src/asmjit/arm/a64operand.h	/^static constexpr GpW w16 = GpW(16);$/;"	m	namespace:regs
w17	external/asmjit/src/asmjit/arm/a64operand.h	/^static constexpr GpW w17 = GpW(17);$/;"	m	namespace:regs
w18	external/asmjit/src/asmjit/arm/a64operand.h	/^static constexpr GpW w18 = GpW(18);$/;"	m	namespace:regs
w19	external/asmjit/src/asmjit/arm/a64operand.h	/^static constexpr GpW w19 = GpW(19);$/;"	m	namespace:regs
w2	external/asmjit/src/asmjit/arm/a64operand.h	/^static constexpr GpW w2 = GpW(2);$/;"	m	namespace:regs
w20	external/asmjit/src/asmjit/arm/a64operand.h	/^static constexpr GpW w20 = GpW(20);$/;"	m	namespace:regs
w21	external/asmjit/src/asmjit/arm/a64operand.h	/^static constexpr GpW w21 = GpW(21);$/;"	m	namespace:regs
w22	external/asmjit/src/asmjit/arm/a64operand.h	/^static constexpr GpW w22 = GpW(22);$/;"	m	namespace:regs
w23	external/asmjit/src/asmjit/arm/a64operand.h	/^static constexpr GpW w23 = GpW(23);$/;"	m	namespace:regs
w24	external/asmjit/src/asmjit/arm/a64operand.h	/^static constexpr GpW w24 = GpW(24);$/;"	m	namespace:regs
w25	external/asmjit/src/asmjit/arm/a64operand.h	/^static constexpr GpW w25 = GpW(25);$/;"	m	namespace:regs
w26	external/asmjit/src/asmjit/arm/a64operand.h	/^static constexpr GpW w26 = GpW(26);$/;"	m	namespace:regs
w27	external/asmjit/src/asmjit/arm/a64operand.h	/^static constexpr GpW w27 = GpW(27);$/;"	m	namespace:regs
w28	external/asmjit/src/asmjit/arm/a64operand.h	/^static constexpr GpW w28 = GpW(28);$/;"	m	namespace:regs
w29	external/asmjit/src/asmjit/arm/a64operand.h	/^static constexpr GpW w29 = GpW(29);$/;"	m	namespace:regs
w3	external/asmjit/src/asmjit/arm/a64operand.h	/^static constexpr GpW w3 = GpW(3);$/;"	m	namespace:regs
w30	external/asmjit/src/asmjit/arm/a64operand.h	/^static constexpr GpW w30 = GpW(30);$/;"	m	namespace:regs
w4	external/asmjit/src/asmjit/arm/a64operand.h	/^static constexpr GpW w4 = GpW(4);$/;"	m	namespace:regs
w5	external/asmjit/src/asmjit/arm/a64operand.h	/^static constexpr GpW w5 = GpW(5);$/;"	m	namespace:regs
w6	external/asmjit/src/asmjit/arm/a64operand.h	/^static constexpr GpW w6 = GpW(6);$/;"	m	namespace:regs
w7	external/asmjit/src/asmjit/arm/a64operand.h	/^static constexpr GpW w7 = GpW(7);$/;"	m	namespace:regs
w8	external/asmjit/src/asmjit/arm/a64operand.h	/^static constexpr GpW w8 = GpW(8);$/;"	m	namespace:regs
w9	external/asmjit/src/asmjit/arm/a64operand.h	/^static constexpr GpW w9 = GpW(9);$/;"	m	namespace:regs
wByteMask	external/asmjit/src/asmjit/x86/x86instdb_p.h	/^  uint64_t wByteMask;$/;"	m	struct:RWInfoOp
walk	external/asmjit/tools/enumgen.js	/^  function walk(baseDir, nestedPath, out) {$/;"	f	function:walkDir
walkDir	external/asmjit/tools/enumgen.js	/^function walkDir(baseDir) {$/;"	f
wordNameTable	external/asmjit/src/asmjit/core/formatter.cpp	/^static const char wordNameTable[][8] = {$/;"	m	namespace:Formatter	file:
workCount	external/asmjit/src/asmjit/core/raassignment_p.h	/^    uint32_t workCount;$/;"	m	struct:RAAssignment::Layout
workIds	external/asmjit/src/asmjit/core/raassignment_p.h	/^    uint32_t workIds[1 \/* ... *\/];$/;"	m	struct:RAAssignment::PhysToWorkMap
workReg	external/asmjit/src/asmjit/core/rapass.cpp	/^  RAWorkReg* workReg;$/;"	m	struct:RAConsecutiveReg	file:
workRegs	external/asmjit/src/asmjit/core/raassignment_p.h	/^    const RAWorkRegs* workRegs;$/;"	m	struct:RAAssignment::Layout
wsp	external/asmjit/src/asmjit/arm/a64operand.h	/^static constexpr GpW wsp = GpW(Gp::kIdSp);$/;"	m	namespace:regs
wzr	external/asmjit/src/asmjit/arm/a64operand.h	/^static constexpr GpW wzr = GpW(Gp::kIdZr);$/;"	m	namespace:regs
x	external/asmjit/src/asmjit/core/support.h	/^struct BitScanData { T x; uint32_t n; };$/;"	m	struct:Support::Internal::Internal::__anon6::BitScanData
x0	external/asmjit/src/asmjit/arm/a64operand.h	/^static constexpr GpX x0 = GpX(0);$/;"	m	namespace:regs
x0	src/codegen/jitabi.h	/^        Call64Abs x0;$/;"	m	union:dbt::jitabi::ppoint::BranchSlot::__anon27
x1	external/asmjit/src/asmjit/arm/a64operand.h	/^static constexpr GpX x1 = GpX(1);$/;"	m	namespace:regs
x1	external/asmjit/src/asmjit/core/inst.h	/^static_assert(uint32_t(OpRWFlags::kRead) == 0x1, "OpRWFlags::kRead flag must be 0x1");$/;"	m	class:InstIdParts::InstOptions::InstControlFlow::InstSameRegHint::CpuRWFlags::OpRWFlags
x1	external/asmjit/src/asmjit/core/radefs_p.h	/^static_assert(uint32_t(RATiedFlags::kRead ) == 0x1, "RATiedFlags::kRead must be 0x1");$/;"	m	class:RAStrategyType::RAStrategyFlags::RATiedFlags
x1	src/codegen/jitabi.h	/^        Jump64Abs x1;$/;"	m	union:dbt::jitabi::ppoint::BranchSlot::__anon27
x10	external/asmjit/src/asmjit/arm/a64operand.h	/^static constexpr GpX x10 = GpX(10);$/;"	m	namespace:regs
x11	external/asmjit/src/asmjit/arm/a64operand.h	/^static constexpr GpX x11 = GpX(11);$/;"	m	namespace:regs
x12	external/asmjit/src/asmjit/arm/a64operand.h	/^static constexpr GpX x12 = GpX(12);$/;"	m	namespace:regs
x13	external/asmjit/src/asmjit/arm/a64operand.h	/^static constexpr GpX x13 = GpX(13);$/;"	m	namespace:regs
x14	external/asmjit/src/asmjit/arm/a64operand.h	/^static constexpr GpX x14 = GpX(14);$/;"	m	namespace:regs
x15	external/asmjit/src/asmjit/arm/a64operand.h	/^static constexpr GpX x15 = GpX(15);$/;"	m	namespace:regs
x16	external/asmjit/src/asmjit/arm/a64operand.h	/^static constexpr GpX x16 = GpX(16);$/;"	m	namespace:regs
x17	external/asmjit/src/asmjit/arm/a64operand.h	/^static constexpr GpX x17 = GpX(17);$/;"	m	namespace:regs
x18	external/asmjit/src/asmjit/arm/a64operand.h	/^static constexpr GpX x18 = GpX(18);$/;"	m	namespace:regs
x19	external/asmjit/src/asmjit/arm/a64operand.h	/^static constexpr GpX x19 = GpX(19);$/;"	m	namespace:regs
x2	external/asmjit/src/asmjit/arm/a64operand.h	/^static constexpr GpX x2 = GpX(2);$/;"	m	namespace:regs
x2	external/asmjit/src/asmjit/core/inst.h	/^static_assert(uint32_t(OpRWFlags::kWrite) == 0x2, "OpRWFlags::kWrite flag must be 0x2");$/;"	m	class:InstIdParts::InstOptions::InstControlFlow::InstSameRegHint::CpuRWFlags::OpRWFlags
x2	external/asmjit/src/asmjit/core/radefs_p.h	/^static_assert(uint32_t(RATiedFlags::kWrite) == 0x2, "RATiedFlags::kWrite must be 0x2");$/;"	m	class:RAStrategyType::RAStrategyFlags::RATiedFlags
x2	src/codegen/jitabi.h	/^        Jump32Rel x2;$/;"	m	union:dbt::jitabi::ppoint::BranchSlot::__anon27
x20	external/asmjit/src/asmjit/arm/a64operand.h	/^static constexpr GpX x20 = GpX(20);$/;"	m	namespace:regs
x21	external/asmjit/src/asmjit/arm/a64operand.h	/^static constexpr GpX x21 = GpX(21);$/;"	m	namespace:regs
x22	external/asmjit/src/asmjit/arm/a64operand.h	/^static constexpr GpX x22 = GpX(22);$/;"	m	namespace:regs
x23	external/asmjit/src/asmjit/arm/a64operand.h	/^static constexpr GpX x23 = GpX(23);$/;"	m	namespace:regs
x24	external/asmjit/src/asmjit/arm/a64operand.h	/^static constexpr GpX x24 = GpX(24);$/;"	m	namespace:regs
x25	external/asmjit/src/asmjit/arm/a64operand.h	/^static constexpr GpX x25 = GpX(25);$/;"	m	namespace:regs
x26	external/asmjit/src/asmjit/arm/a64operand.h	/^static constexpr GpX x26 = GpX(26);$/;"	m	namespace:regs
x27	external/asmjit/src/asmjit/arm/a64operand.h	/^static constexpr GpX x27 = GpX(27);$/;"	m	namespace:regs
x28	external/asmjit/src/asmjit/arm/a64operand.h	/^static constexpr GpX x28 = GpX(28);$/;"	m	namespace:regs
x29	external/asmjit/src/asmjit/arm/a64operand.h	/^static constexpr GpX x29 = GpX(29);$/;"	m	namespace:regs
x3	external/asmjit/src/asmjit/arm/a64operand.h	/^static constexpr GpX x3 = GpX(3);$/;"	m	namespace:regs
x3	external/asmjit/src/asmjit/core/radefs_p.h	/^static_assert(uint32_t(RATiedFlags::kRW   ) == 0x3, "RATiedFlags::kRW must be 0x3");$/;"	m	class:RAStrategyType::RAStrategyFlags::RATiedFlags
x3	src/codegen/jitabi.h	/^        CallTab x3;$/;"	m	union:dbt::jitabi::ppoint::BranchSlot::__anon27
x30	external/asmjit/src/asmjit/arm/a64operand.h	/^static constexpr GpX x30 = GpX(30);$/;"	m	namespace:regs
x4	external/asmjit/src/asmjit/arm/a64operand.h	/^static constexpr GpX x4 = GpX(4);$/;"	m	namespace:regs
x4	external/asmjit/src/asmjit/core/inst.h	/^static_assert(uint32_t(OpRWFlags::kRegMem) == 0x4, "OpRWFlags::kRegMem flag must be 0x4");$/;"	m	class:InstIdParts::InstOptions::InstControlFlow::InstSameRegHint::CpuRWFlags::OpRWFlags
x5	external/asmjit/src/asmjit/arm/a64operand.h	/^static constexpr GpX x5 = GpX(5);$/;"	m	namespace:regs
x6	external/asmjit/src/asmjit/arm/a64operand.h	/^static constexpr GpX x6 = GpX(6);$/;"	m	namespace:regs
x64Arch	external/asmjit/tools/tablegen-x86.js	/^    var x64Arch = false;$/;"	v
x64ArchTraits	external/asmjit/src/asmjit/x86/x86archtraits_p.h	/^static const constexpr ArchTraits x64ArchTraits = {$/;"	v
x7	external/asmjit/src/asmjit/arm/a64operand.h	/^static constexpr GpX x7 = GpX(7);$/;"	m	namespace:regs
x8	external/asmjit/src/asmjit/arm/a64operand.h	/^static constexpr GpX x8 = GpX(8);$/;"	m	namespace:regs
x86	external/asmjit/src/asmjit/core/cpuinfo.cpp	/^namespace x86 {$/;"	n	file:
x86Arch	external/asmjit/tools/tablegen-x86.js	/^    var x86Arch = false;$/;"	v
x86ArchTraits	external/asmjit/src/asmjit/x86/x86archtraits_p.h	/^static const constexpr ArchTraits x86ArchTraits = {$/;"	v
x86CDisp8SHL	external/asmjit/src/asmjit/x86/x86assembler.cpp	/^static const uint32_t x86CDisp8SHL[] = { ASMJIT_LOOKUP_TABLE_32(VALUE, 0) };$/;"	v	file:
x86LLByRegType	external/asmjit/src/asmjit/x86/x86assembler.cpp	/^static const uint32_t x86LLByRegType[] = { ASMJIT_LOOKUP_TABLE_16(VALUE, 0) };$/;"	v	file:
x86LLBySizeDiv16	external/asmjit/src/asmjit/x86/x86assembler.cpp	/^static const uint32_t x86LLBySizeDiv16[] = { ASMJIT_LOOKUP_TABLE_16(VALUE, 0) };$/;"	v	file:
x86MemInfo	external/asmjit/src/asmjit/x86/x86assembler.cpp	/^static const uint8_t x86MemInfo[] = { ASMJIT_LOOKUP_TABLE_1024(VALUE, 0) };$/;"	v	file:
x86Mod16BaseIndexTable	external/asmjit/src/asmjit/x86/x86assembler.cpp	/^static const uint8_t x86Mod16BaseIndexTable[] = { ASMJIT_LOOKUP_TABLE_64(VALUE, 0) };$/;"	v	file:
x86Mod16BaseTable	external/asmjit/src/asmjit/x86/x86assembler.cpp	/^static const uint8_t x86Mod16BaseTable[8] = {$/;"	v	file:
x86OpcodeMM	external/asmjit/src/asmjit/x86/x86assembler.cpp	/^static const X86OpcodeMM x86OpcodeMM[] = {$/;"	v	file:
x86OpcodePP	external/asmjit/src/asmjit/x86/x86assembler.cpp	/^static const uint8_t x86OpcodePP[8] = { 0x00, 0x66, 0xF3, 0xF2, 0x00, 0x00, 0x00, 0x9B };$/;"	v	file:
x86OpcodePopSReg	external/asmjit/src/asmjit/x86/x86assembler.cpp	/^static const uint32_t x86OpcodePopSReg[8]  = {$/;"	v	file:
x86OpcodePushSReg	external/asmjit/src/asmjit/x86/x86assembler.cpp	/^static const uint32_t x86OpcodePushSReg[8] = {$/;"	v	file:
x86RegFormatInfo	external/asmjit/src/asmjit/x86/x86formatter.cpp	/^static const RegFormatInfo x86RegFormatInfo = {$/;"	v	file:
x86SegmentPrefix	external/asmjit/src/asmjit/x86/x86assembler.cpp	/^static const uint8_t x86SegmentPrefix[8] = {$/;"	v	file:
x86VEXPrefix	external/asmjit/src/asmjit/x86/x86assembler.cpp	/^static const uint32_t x86VEXPrefix[] = { ASMJIT_LOOKUP_TABLE_16(VALUE, 0) };$/;"	v	file:
x9	external/asmjit/src/asmjit/arm/a64operand.h	/^static constexpr GpX x9 = GpX(9);$/;"	m	namespace:regs
xOffset	external/asmjit/src/asmjit/arm/a64instdb_p.h	/^  uint32_t xOffset    : 5;$/;"	m	struct:InstDB::EncodingData::BaseLdSt
xOffset	external/asmjit/src/asmjit/arm/a64instdb_p.h	/^  uint32_t xOffset : 5;$/;"	m	struct:InstDB::EncodingData::BaseAtomicCasp
xOffset	external/asmjit/src/asmjit/arm/a64instdb_p.h	/^  uint32_t xOffset : 5;$/;"	m	struct:InstDB::EncodingData::BaseAtomicOp
xOffset	external/asmjit/src/asmjit/arm/a64instdb_p.h	/^  uint32_t xOffset : 5;$/;"	m	struct:InstDB::EncodingData::BaseAtomicSt
xOffset	external/asmjit/src/asmjit/arm/a64instdb_p.h	/^  uint32_t xOffset : 5;$/;"	m	struct:InstDB::EncodingData::BaseLdpStp
xOffset	external/asmjit/src/asmjit/arm/a64instdb_p.h	/^  uint32_t xOffset : 5;$/;"	m	struct:InstDB::EncodingData::BaseLdxp
xOffset	external/asmjit/src/asmjit/arm/a64instdb_p.h	/^  uint32_t xOffset : 5;$/;"	m	struct:InstDB::EncodingData::BaseRM_NoImm
xOffset	external/asmjit/src/asmjit/arm/a64instdb_p.h	/^  uint32_t xOffset : 5;$/;"	m	struct:InstDB::EncodingData::BaseRM_SImm10
xOffset	external/asmjit/src/asmjit/arm/a64instdb_p.h	/^  uint32_t xOffset : 5;$/;"	m	struct:InstDB::EncodingData::BaseRM_SImm9
xOffset	external/asmjit/src/asmjit/arm/a64instdb_p.h	/^  uint32_t xOffset : 5;$/;"	m	struct:InstDB::EncodingData::BaseStx
xOffset	external/asmjit/src/asmjit/arm/a64instdb_p.h	/^  uint32_t xOffset : 5;$/;"	m	struct:InstDB::EncodingData::BaseStxp
xgetbv_t	external/asmjit/src/asmjit/core/cpuinfo.cpp	/^struct xgetbv_t { uint32_t eax, edx; };$/;"	s	namespace:x86	file:
xmm0	external/asmjit/src/asmjit/x86/x86operand.h	/^static constexpr Xmm xmm0 = Xmm(0);$/;"	m	namespace:regs
xmm1	external/asmjit/src/asmjit/x86/x86operand.h	/^static constexpr Xmm xmm1 = Xmm(1);$/;"	m	namespace:regs
xmm10	external/asmjit/src/asmjit/x86/x86operand.h	/^static constexpr Xmm xmm10 = Xmm(10);$/;"	m	namespace:regs
xmm11	external/asmjit/src/asmjit/x86/x86operand.h	/^static constexpr Xmm xmm11 = Xmm(11);$/;"	m	namespace:regs
xmm12	external/asmjit/src/asmjit/x86/x86operand.h	/^static constexpr Xmm xmm12 = Xmm(12);$/;"	m	namespace:regs
xmm13	external/asmjit/src/asmjit/x86/x86operand.h	/^static constexpr Xmm xmm13 = Xmm(13);$/;"	m	namespace:regs
xmm14	external/asmjit/src/asmjit/x86/x86operand.h	/^static constexpr Xmm xmm14 = Xmm(14);$/;"	m	namespace:regs
xmm15	external/asmjit/src/asmjit/x86/x86operand.h	/^static constexpr Xmm xmm15 = Xmm(15);$/;"	m	namespace:regs
xmm16	external/asmjit/src/asmjit/x86/x86operand.h	/^static constexpr Xmm xmm16 = Xmm(16);$/;"	m	namespace:regs
xmm17	external/asmjit/src/asmjit/x86/x86operand.h	/^static constexpr Xmm xmm17 = Xmm(17);$/;"	m	namespace:regs
xmm18	external/asmjit/src/asmjit/x86/x86operand.h	/^static constexpr Xmm xmm18 = Xmm(18);$/;"	m	namespace:regs
xmm19	external/asmjit/src/asmjit/x86/x86operand.h	/^static constexpr Xmm xmm19 = Xmm(19);$/;"	m	namespace:regs
xmm2	external/asmjit/src/asmjit/x86/x86operand.h	/^static constexpr Xmm xmm2 = Xmm(2);$/;"	m	namespace:regs
xmm20	external/asmjit/src/asmjit/x86/x86operand.h	/^static constexpr Xmm xmm20 = Xmm(20);$/;"	m	namespace:regs
xmm21	external/asmjit/src/asmjit/x86/x86operand.h	/^static constexpr Xmm xmm21 = Xmm(21);$/;"	m	namespace:regs
xmm22	external/asmjit/src/asmjit/x86/x86operand.h	/^static constexpr Xmm xmm22 = Xmm(22);$/;"	m	namespace:regs
xmm23	external/asmjit/src/asmjit/x86/x86operand.h	/^static constexpr Xmm xmm23 = Xmm(23);$/;"	m	namespace:regs
xmm24	external/asmjit/src/asmjit/x86/x86operand.h	/^static constexpr Xmm xmm24 = Xmm(24);$/;"	m	namespace:regs
xmm25	external/asmjit/src/asmjit/x86/x86operand.h	/^static constexpr Xmm xmm25 = Xmm(25);$/;"	m	namespace:regs
xmm26	external/asmjit/src/asmjit/x86/x86operand.h	/^static constexpr Xmm xmm26 = Xmm(26);$/;"	m	namespace:regs
xmm27	external/asmjit/src/asmjit/x86/x86operand.h	/^static constexpr Xmm xmm27 = Xmm(27);$/;"	m	namespace:regs
xmm28	external/asmjit/src/asmjit/x86/x86operand.h	/^static constexpr Xmm xmm28 = Xmm(28);$/;"	m	namespace:regs
xmm29	external/asmjit/src/asmjit/x86/x86operand.h	/^static constexpr Xmm xmm29 = Xmm(29);$/;"	m	namespace:regs
xmm3	external/asmjit/src/asmjit/x86/x86operand.h	/^static constexpr Xmm xmm3 = Xmm(3);$/;"	m	namespace:regs
xmm30	external/asmjit/src/asmjit/x86/x86operand.h	/^static constexpr Xmm xmm30 = Xmm(30);$/;"	m	namespace:regs
xmm31	external/asmjit/src/asmjit/x86/x86operand.h	/^static constexpr Xmm xmm31 = Xmm(31);$/;"	m	namespace:regs
xmm4	external/asmjit/src/asmjit/x86/x86operand.h	/^static constexpr Xmm xmm4 = Xmm(4);$/;"	m	namespace:regs
xmm5	external/asmjit/src/asmjit/x86/x86operand.h	/^static constexpr Xmm xmm5 = Xmm(5);$/;"	m	namespace:regs
xmm6	external/asmjit/src/asmjit/x86/x86operand.h	/^static constexpr Xmm xmm6 = Xmm(6);$/;"	m	namespace:regs
xmm7	external/asmjit/src/asmjit/x86/x86operand.h	/^static constexpr Xmm xmm7 = Xmm(7);$/;"	m	namespace:regs
xmm8	external/asmjit/src/asmjit/x86/x86operand.h	/^static constexpr Xmm xmm8 = Xmm(8);$/;"	m	namespace:regs
xmm9	external/asmjit/src/asmjit/x86/x86operand.h	/^static constexpr Xmm xmm9 = Xmm(9);$/;"	m	namespace:regs
xzr	external/asmjit/src/asmjit/arm/a64operand.h	/^static constexpr GpX xzr = GpX(Gp::kIdZr);$/;"	m	namespace:regs
ymm0	external/asmjit/src/asmjit/x86/x86operand.h	/^static constexpr Ymm ymm0 = Ymm(0);$/;"	m	namespace:regs
ymm1	external/asmjit/src/asmjit/x86/x86operand.h	/^static constexpr Ymm ymm1 = Ymm(1);$/;"	m	namespace:regs
ymm10	external/asmjit/src/asmjit/x86/x86operand.h	/^static constexpr Ymm ymm10 = Ymm(10);$/;"	m	namespace:regs
ymm11	external/asmjit/src/asmjit/x86/x86operand.h	/^static constexpr Ymm ymm11 = Ymm(11);$/;"	m	namespace:regs
ymm12	external/asmjit/src/asmjit/x86/x86operand.h	/^static constexpr Ymm ymm12 = Ymm(12);$/;"	m	namespace:regs
ymm13	external/asmjit/src/asmjit/x86/x86operand.h	/^static constexpr Ymm ymm13 = Ymm(13);$/;"	m	namespace:regs
ymm14	external/asmjit/src/asmjit/x86/x86operand.h	/^static constexpr Ymm ymm14 = Ymm(14);$/;"	m	namespace:regs
ymm15	external/asmjit/src/asmjit/x86/x86operand.h	/^static constexpr Ymm ymm15 = Ymm(15);$/;"	m	namespace:regs
ymm16	external/asmjit/src/asmjit/x86/x86operand.h	/^static constexpr Ymm ymm16 = Ymm(16);$/;"	m	namespace:regs
ymm17	external/asmjit/src/asmjit/x86/x86operand.h	/^static constexpr Ymm ymm17 = Ymm(17);$/;"	m	namespace:regs
ymm18	external/asmjit/src/asmjit/x86/x86operand.h	/^static constexpr Ymm ymm18 = Ymm(18);$/;"	m	namespace:regs
ymm19	external/asmjit/src/asmjit/x86/x86operand.h	/^static constexpr Ymm ymm19 = Ymm(19);$/;"	m	namespace:regs
ymm2	external/asmjit/src/asmjit/x86/x86operand.h	/^static constexpr Ymm ymm2 = Ymm(2);$/;"	m	namespace:regs
ymm20	external/asmjit/src/asmjit/x86/x86operand.h	/^static constexpr Ymm ymm20 = Ymm(20);$/;"	m	namespace:regs
ymm21	external/asmjit/src/asmjit/x86/x86operand.h	/^static constexpr Ymm ymm21 = Ymm(21);$/;"	m	namespace:regs
ymm22	external/asmjit/src/asmjit/x86/x86operand.h	/^static constexpr Ymm ymm22 = Ymm(22);$/;"	m	namespace:regs
ymm23	external/asmjit/src/asmjit/x86/x86operand.h	/^static constexpr Ymm ymm23 = Ymm(23);$/;"	m	namespace:regs
ymm24	external/asmjit/src/asmjit/x86/x86operand.h	/^static constexpr Ymm ymm24 = Ymm(24);$/;"	m	namespace:regs
ymm25	external/asmjit/src/asmjit/x86/x86operand.h	/^static constexpr Ymm ymm25 = Ymm(25);$/;"	m	namespace:regs
ymm26	external/asmjit/src/asmjit/x86/x86operand.h	/^static constexpr Ymm ymm26 = Ymm(26);$/;"	m	namespace:regs
ymm27	external/asmjit/src/asmjit/x86/x86operand.h	/^static constexpr Ymm ymm27 = Ymm(27);$/;"	m	namespace:regs
ymm28	external/asmjit/src/asmjit/x86/x86operand.h	/^static constexpr Ymm ymm28 = Ymm(28);$/;"	m	namespace:regs
ymm29	external/asmjit/src/asmjit/x86/x86operand.h	/^static constexpr Ymm ymm29 = Ymm(29);$/;"	m	namespace:regs
ymm3	external/asmjit/src/asmjit/x86/x86operand.h	/^static constexpr Ymm ymm3 = Ymm(3);$/;"	m	namespace:regs
ymm30	external/asmjit/src/asmjit/x86/x86operand.h	/^static constexpr Ymm ymm30 = Ymm(30);$/;"	m	namespace:regs
ymm31	external/asmjit/src/asmjit/x86/x86operand.h	/^static constexpr Ymm ymm31 = Ymm(31);$/;"	m	namespace:regs
ymm4	external/asmjit/src/asmjit/x86/x86operand.h	/^static constexpr Ymm ymm4 = Ymm(4);$/;"	m	namespace:regs
ymm5	external/asmjit/src/asmjit/x86/x86operand.h	/^static constexpr Ymm ymm5 = Ymm(5);$/;"	m	namespace:regs
ymm6	external/asmjit/src/asmjit/x86/x86operand.h	/^static constexpr Ymm ymm6 = Ymm(6);$/;"	m	namespace:regs
ymm7	external/asmjit/src/asmjit/x86/x86operand.h	/^static constexpr Ymm ymm7 = Ymm(7);$/;"	m	namespace:regs
ymm8	external/asmjit/src/asmjit/x86/x86operand.h	/^static constexpr Ymm ymm8 = Ymm(8);$/;"	m	namespace:regs
ymm9	external/asmjit/src/asmjit/x86/x86operand.h	/^static constexpr Ymm ymm9 = Ymm(9);$/;"	m	namespace:regs
zeroOp	external/asmjit/src/asmjit/arm/a64instdb_p.h	/^  uint32_t zeroOp : 22;$/;"	m	struct:InstDB::EncodingData::SimdCmp
zmm0	external/asmjit/src/asmjit/x86/x86operand.h	/^static constexpr Zmm zmm0 = Zmm(0);$/;"	m	namespace:regs
zmm1	external/asmjit/src/asmjit/x86/x86operand.h	/^static constexpr Zmm zmm1 = Zmm(1);$/;"	m	namespace:regs
zmm10	external/asmjit/src/asmjit/x86/x86operand.h	/^static constexpr Zmm zmm10 = Zmm(10);$/;"	m	namespace:regs
zmm11	external/asmjit/src/asmjit/x86/x86operand.h	/^static constexpr Zmm zmm11 = Zmm(11);$/;"	m	namespace:regs
zmm12	external/asmjit/src/asmjit/x86/x86operand.h	/^static constexpr Zmm zmm12 = Zmm(12);$/;"	m	namespace:regs
zmm13	external/asmjit/src/asmjit/x86/x86operand.h	/^static constexpr Zmm zmm13 = Zmm(13);$/;"	m	namespace:regs
zmm14	external/asmjit/src/asmjit/x86/x86operand.h	/^static constexpr Zmm zmm14 = Zmm(14);$/;"	m	namespace:regs
zmm15	external/asmjit/src/asmjit/x86/x86operand.h	/^static constexpr Zmm zmm15 = Zmm(15);$/;"	m	namespace:regs
zmm16	external/asmjit/src/asmjit/x86/x86operand.h	/^static constexpr Zmm zmm16 = Zmm(16);$/;"	m	namespace:regs
zmm17	external/asmjit/src/asmjit/x86/x86operand.h	/^static constexpr Zmm zmm17 = Zmm(17);$/;"	m	namespace:regs
zmm18	external/asmjit/src/asmjit/x86/x86operand.h	/^static constexpr Zmm zmm18 = Zmm(18);$/;"	m	namespace:regs
zmm19	external/asmjit/src/asmjit/x86/x86operand.h	/^static constexpr Zmm zmm19 = Zmm(19);$/;"	m	namespace:regs
zmm2	external/asmjit/src/asmjit/x86/x86operand.h	/^static constexpr Zmm zmm2 = Zmm(2);$/;"	m	namespace:regs
zmm20	external/asmjit/src/asmjit/x86/x86operand.h	/^static constexpr Zmm zmm20 = Zmm(20);$/;"	m	namespace:regs
zmm21	external/asmjit/src/asmjit/x86/x86operand.h	/^static constexpr Zmm zmm21 = Zmm(21);$/;"	m	namespace:regs
zmm22	external/asmjit/src/asmjit/x86/x86operand.h	/^static constexpr Zmm zmm22 = Zmm(22);$/;"	m	namespace:regs
zmm23	external/asmjit/src/asmjit/x86/x86operand.h	/^static constexpr Zmm zmm23 = Zmm(23);$/;"	m	namespace:regs
zmm24	external/asmjit/src/asmjit/x86/x86operand.h	/^static constexpr Zmm zmm24 = Zmm(24);$/;"	m	namespace:regs
zmm25	external/asmjit/src/asmjit/x86/x86operand.h	/^static constexpr Zmm zmm25 = Zmm(25);$/;"	m	namespace:regs
zmm26	external/asmjit/src/asmjit/x86/x86operand.h	/^static constexpr Zmm zmm26 = Zmm(26);$/;"	m	namespace:regs
zmm27	external/asmjit/src/asmjit/x86/x86operand.h	/^static constexpr Zmm zmm27 = Zmm(27);$/;"	m	namespace:regs
zmm28	external/asmjit/src/asmjit/x86/x86operand.h	/^static constexpr Zmm zmm28 = Zmm(28);$/;"	m	namespace:regs
zmm29	external/asmjit/src/asmjit/x86/x86operand.h	/^static constexpr Zmm zmm29 = Zmm(29);$/;"	m	namespace:regs
zmm3	external/asmjit/src/asmjit/x86/x86operand.h	/^static constexpr Zmm zmm3 = Zmm(3);$/;"	m	namespace:regs
zmm30	external/asmjit/src/asmjit/x86/x86operand.h	/^static constexpr Zmm zmm30 = Zmm(30);$/;"	m	namespace:regs
zmm31	external/asmjit/src/asmjit/x86/x86operand.h	/^static constexpr Zmm zmm31 = Zmm(31);$/;"	m	namespace:regs
zmm4	external/asmjit/src/asmjit/x86/x86operand.h	/^static constexpr Zmm zmm4 = Zmm(4);$/;"	m	namespace:regs
zmm5	external/asmjit/src/asmjit/x86/x86operand.h	/^static constexpr Zmm zmm5 = Zmm(5);$/;"	m	namespace:regs
zmm6	external/asmjit/src/asmjit/x86/x86operand.h	/^static constexpr Zmm zmm6 = Zmm(6);$/;"	m	namespace:regs
zmm7	external/asmjit/src/asmjit/x86/x86operand.h	/^static constexpr Zmm zmm7 = Zmm(7);$/;"	m	namespace:regs
zmm8	external/asmjit/src/asmjit/x86/x86operand.h	/^static constexpr Zmm zmm8 = Zmm(8);$/;"	m	namespace:regs
zmm9	external/asmjit/src/asmjit/x86/x86operand.h	/^static constexpr Zmm zmm9 = Zmm(9);$/;"	m	namespace:regs
zr	external/asmjit/src/asmjit/arm/a64instdb_p.h	/^  uint32_t zr : 1;$/;"	m	struct:InstDB::EncodingData::BaseAtomicOp
~MemArena	src/arena.h	/^    ~MemArena() { Destroy(); }$/;"	f	struct:MemArena
~TestCase	external/asmjit/test/asmjit_test_compiler.h	/^  virtual ~TestCase() {}$/;"	f	class:TestCase
